%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: cours_variations_des_fonctions.dvi
%%CreationDate: Thu Nov  3 07:15:36 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMMI10 CMR10 MSBM10 CMR8 CMSY10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o cours_variations_des_fonctions.ps
%+ cours_variations_des_fonctions.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.11.03:0715
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /lessequal put
dup 21 /greaterequal put
dup 50 /element put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1491
307A6D9A2F2BA5099C8A07762E70BDAA74BA5E2BAB260C1352107EB8A96523D9
4BA3082B99772D585329AB8645C3BBD11D72BA01F95CCF11C6DEBFDAAF7F5C4D
795F99DAE6A8D59462D759001BBEBB59AB0C322EFE02904D82B424649C2FA593
0E23281DECC5AA908E54244566055D418602EEDBE78843300158908F77C0AC75
9562065826D34C38C598D8626BFED7CB672F132E065E2C27932F709935988376
94901EBAEAEC410E2B36575A71EBB8954C3A90EEC264E6115950FC91D0D54999
323D8B4FF8129A8EEC3900A00CCB026E6943BE1728BCD3F6C1BFD503D55A6A7A
6376AF4D646B2F31B1AF935446DCC68233C72AC164BB393DA250B0B423D32887
C680509C862B6F49EAEC995036CF797BC11DD87159241A7503B1FC87023766D2
E1CA46A71DA0AC4527FFB2AA5492DA4D1EC89B1876F1666C9851582AF5BBE035
69B0D025878AC44DB91FB3E787491CA51B7EB13A1FB46485F8B2CE9F4991608C
A2D5AB85DEB10D66DF73D0E538B67EFED9B6A71F74945F84B1D80CF328F23BD3
4090680F04CF8373B85BB556D07FD57605FB7C9C7CB47E97EC7C7B28B0677A03
3CCD69D881AF49110EBCE45D941BCD0386EA7D90C6D41CEF16CC9E55C1347D79
8098EFC912456CAC576FE0257CEBA645D1C79F6EE2275EB2BB401004E810A5AE
046C8B7303BF3EBF6608AC980D3DF18F3752C2BFFF9785BEAF5EE4591B7F383F
7A1C56592BB87BFE7341B5F74E08C3C8ED10C2915E3DBB8AC9B972C00B06A535
90DC7ABF56F8CA99ABEF6F7A1CEA2B0928A428ADC1AE1D35134E524895B2BCCC
E5F33CD609B413CDE04A572550E3DDCD5A8C7D6F4BF6F502D10DD2905AD562FC
5890998A99BF379DBB2A0626D6449F77A49157A18E379CA0D14B76C076987987
D60D81360A21CBD151376BB1B04616CAC85A1C7A85C0DDA07F0DCAE759FEF3A3
595504D19DBB2937077B7B464FD4CCA93DF1530612FD9BB5E489F1D993508FC5
B79D8CFFC41F50803E0994FAD80CAA54FCDAB4081B43EF36EC62CF27F7D09A03
B9F7A1B1DD7F4277948C94E70F1C47F6E3430F90B0403A861D898DB0613D6659
0A9A5DFD68C40731178004CA5E10712B4172D1F7D8B198626A02371889914D13
1B01938B9CC0D9C4A4B93C26AB80
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DEB8CF0BE87C59313978F28295C0E3A01D2B5682DA86A38F390982A8FE
C3E81B8D3532C92C4A4A4BCB421D248F634447613101BA5B301431F192BC6962
E6F9E2542F1B0D3AE7560888A9344A7EB7ACED0D46351ABA0DC93EEB47CDF0AF
28B602579EE7E3CEFE0C6F5332EB843348D80B020E7A127C634BF2A3A55B6C94
1896769C33D5BEFA8F144D6DD702380447904C92197B8C7CB55679A6AB8FB7D6
2E3087D2CC3CB9BC10C0CC485AE395D036339862CF98337FEEE3394157B9862A
120162EE40ADD32C55B39E4BED180B4E4F51C28377589B982F13DC6D44E758B3
022813BABDF45231A712C97D06658FC2AAB9F59BEEF9FDBE186B7CF64ABDB9E9
CAAB0BC223880A2DD496BC166B6C88552D2B1B23965FAB5BC51D2EE90B8E1322
5688DEB8C76E0E9C2FC7EF7AEB6E7DAE821F73A43A5CA6814FC018337C234636
4D61A7EE4CAD90722EF68E825686812D5A20AC3874A33E3202C32E60B44FFAFC
8D517C3A5B86ED309A0DFBC06EFA9BA510DD6C8E6292544F0EB765371C64CAC1
F04F96546838C6E7423116B4FB72F7C81C47C55138A3819E121884A0A5E87BE8
DE4D02
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDA4C9950827B0636D240C589BE59546704671BD54F3A063A45204F4276
8A1BBDEB3841092DE837265C9D5BBC31F6AA31158264EA0333504C1CCFF6A1D4
CA22B9ABA28E97AC4B5F3B64FDFA8BE4A1F708D81C53D2333465C3656B45F974
E9EAD18DF200858CDA615DB959996DBEE273986176477C6097D532FE633E84F4
D986893E0D0B54FFAB7E3D69C5F756301B3290080179A64863AD7C1C18194A2E
4A0211046A1F2B60BB0618467214A6A947EA30824854E7D6ACFF4813F1F02829
CC670224DEBE5E98A04461F3E3243445261F84BC0590F38DAE91EE50094C4E31
949B914B222D49C1D8E23F47F916BB5A1BB4BAE71B5E3DDEB1555E9AE14E4FE0
185648C071502B7BC23441E3E81F5413ADBA314A539DE5358EAC9F4DC5E62D2E
366A71DB2EA9B18C0929834B38B60522EC170993F9CCD9D828A50D836B6BD5BE
04886842418E5D7FF063CC3CD4B331E4EBF5462428B3F01114A04C313760DFE9
08E5383480A32068773D3229E17CAD7F017F1C6026C76076C3C8CEF52BB05B4E
DB3123329DA39C7D667AE62C97949FD11776C685FAF305ED48DF321044040DBE
DF0CE47ECF54CD13A979C441AEFC262422C3DB47906A67CB09E7442B4E852E0B
0901FA564CB47A04B17E809E5CD56C22EE0DBEB5626EB6D9DB9B1CBD8FCD8CC9
49121C0617DD7C156096D868754F45CA69EF7DC90CE5EAE79704C95D374CD986
1EAF8E0E75BC77E695E9E4A5642E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 73 /I put
dup 97 /a put
dup 98 /b put
dup 102 /f put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD6809FA22A0DC3
112E7888A499450162B7373CC8855953B351E8873A4D7DCC40EEEE5A8A2D00E0
EDD8CFE7153824BF94833ABE10FA64768E457D5395519937705DAD2FFC5E71D4
521F01213B7DF82426867DE914CC9866E428F614F18078B4367187426E2260AA
AD0175A79ECA5F533693C732411F26E3C4BB6EC72B16FFBD0BA30BA59F263FF9
6CD42386C234A9C45A4B00FD43A3D0895670C4963E64596E2410AE5ADE0322DD
BABD22C6EF8FAF9285A773FBA8BF853CDD12A3130F4158BC645D5D6DD13E1FF1
C46F4CDDD0FAD8AAD429F22C3B3E5354097E8161E684731C14CE14F512D52DC7
66E9A093F76F842AFF70DA55B41ABFBB16ABB45C90FD5D795D401070445E6F16
A2C51EED09FA2C9CEEF96CB733B781664140E1DC50402CDB62BABE5D720D2A16
EB49E6EE7A0217D510DBF96823B280935146A076ABE459789151741E938AA1B4
68D794AC2136E928DE58A5EAAD40DF3EC61647A46CE8C718FA7F605FA74B60A7
29EB736DA11229359C6AA75CE6DEDB2FCEC291EF520BAC92E5AD88E919BFC6A8
6D7A2248B7CC7CF21395FF430DCE3A979BF8D969833E012F5C95B21A3F344387
E2B00B731D07B51AD98C5D247E5D8C23A539D4C4CB77451EA2FB179D6808CE12
B6397C8733DF3349BB216F95949569190533E8A8315278B0B4D1131BA486CACB
5B69C50EBD8C0F359B52A809AF506EC21FCB223B62063096149F06B707408970
8C0112C4D0B1D5FE0AB2E31B23E42D5CF8E78E3102BE6C2C5B2CBBE972954D4C
02B7325FFA0A4DEC68EB2C4DAFCD1B1C0FE8E5BDF9E98418D4BA27363BC74C27
6C14A3ABD559E3FCD1E25180EEAF98300025B4448465A98B877CED95AD850C34
41F6E422B10E01D876845FD1A441C63D2919166684302B8D1FABEAF6EAC38456
B38B6048C1A600189D2D3D08EB47A86E111CB3E41C412A0E8174D0EC2BBDC8C4
0B40AF6CFC744BD23EBDE44D7640D571C6C687E8356D506B8015EB70FD4118A9
9C6A3AF44F5E8A60AFAAFE28FA98274CFE41F34495F6EEDE40D0D218E938F61E
096CC9B0DA1DBDA3480F071A09DD0FAE7D7010A2AA13692F657AA6B4E4782457
68FE82550A4CC93D35706DB48A8A88A4D32FC6F688BC7AA594230A55126506EA
833D896AF5B098EC211FA67560D8D2F16AF7A5E0F376EA97A48D7BE495065E70
778A7DF5656428AB88C90469286F49F554B8A134F0CE82A25F4E69BE78716895
21AFA4727B0253D65B5F6F80BA83DC9548FD0AAD88A04A6EDC4B1CF51E2CA307
5CB619D72AD53F777B80CADDA893C2C5B5C534DE181BD457E06B77327F82A688
B8043389C56260F826B56AF6EE57541BDB7FED7F18DAC6FA7ADAC1552EFBF776
D6A553813B1135550B37F8F6E229603B0513EF9854FDF4786C6DE58619AA4261
B476BAE2DA3B6CE4CD7996E91A95A633DCF1D3195A7B2720FD69DF46E1C32A35
1B2A98F535115BE3E18B8FEB1219FDC8D92BEA06C8C52EBC0EECEFC3DB26BB93
81DFF8E1E415C04DF038CC9D6790752EB37611CD9A16E80150038FA212890D5F
70E43BB3DA8D52BB26F45EA61D5A96377524094AEB292CB4ABBA4732962EA3DA
AE81CA291DDC7D69A554317490A48BF41096BB975C1AC944D28F59F62A1348F7
89C56219D5F92E906463353EEA92BCA3BD4648815709743D2D993E04665F3777
8F51D39A6FA366C2F17855E7BEBD94F8F64559AEFE94B612D232FBA50FA98882
DA19617E2F617E64F5A1E29F25AEE1E46AF56E04D9B2CCA34B34E731E771AB31
AFBBF0179C5C5BCE3B25C595C14500E1F60F49A08CE3C2908A14E31C0EE06E0F
4B06D482281DC0000B951029B84D2749B91B5021A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600
(cours_variations_des_fonctions.dvi)
@start
%DVIPSBitmapFont: Fa ecrm0600 6 17
/Fa 17 234 df<78FCFCFEFE7E0606060C0C1C1830604007107A8512>44
D<FFFF8000FFFF80000FE0000007C0000007C0000007C0000007C0000007C0000007C000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007C0000007C0000007C0000007C0000607C0000607C0000607C0000C07C0000C07C000
0C07C0001C07C0003C07C0003C07C000FC0FC003F8FFFFFFF8FFFFFFF81F227CA126>76
D<FFFC0003FF80FFFC0003FF800FE00000FC0007E00000700003E00000600003E0000060
0001F00000C00001F00000C00001F80001C00000F80001800000FC00038000007C000300
00007E00030000003E00060000003E00060000001F000C0000001F000C0000000F801800
00000F80180000000FC03800000007C03000000007E07000000003E06000000003F06000
000001F0C000000001F0C000000000F98000000000F98000000000FF80000000007F0000
0000007F00000000003E00000000003E00000000001C00000000001C00000029237EA12D
>86 D<01FC00000FFF00001E0780003C03C0003E01E0003E00E0003E00F0001C00F00000
00F0000000F00000FFF00007FFF0001FC0F0003F00F0007C00F0007C00F000F800F0C0F8
00F0C0F800F0C0F801F0C07C0370C03E0E79801FFC3F0007F01E001A187D961E>97
D<0F000000FF000000FF0000001F0000000F0000000F0000000F0000000F0000000F0000
000F0000000F0000000F0000000F0000000F07F0000F3FFC000F703F000FC00F800F8007
C00F0003C00F0003E00F0001E00F0001F00F0001F00F0001F00F0001F00F0001F00F0001
F00F0001F00F0001E00F0003E00F0003C00F8007800EC00F000E703E000C3FFC000007E0
001C247DA222>I<007F0003FFE007C0F00F00781E00F83C00F83C00F87C0070780000F8
0000F80000F80000F80000F80000F80000F800007C00007C00183C00181E00300F006007
C0E003FF80007E0015187D961B>I<00FC0003FF800F83C01F01E03E00F03C00F07C00F0
7C0078F80078F80078FFFFF8FFFFF8F80000F80000F80000F800007C00007C00183E0018
1E00381F00700781E003FF80007E0015187D961B>101 D<0C003F003F003F003F000C00
00000000000000000000000000000F00FF00FF001F000F000F000F000F000F000F000F00
0F000F000F000F000F000F000F000F000F00FFE0FFE00B237DA212>105
D<0F00FF00FF001F000F000F000F000F000F000F000F000F000F000F000F000F000F000F
000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00FFF0FFF00C
237DA212>108 D<0F07F007F000FF1FFC1FFC00FF703E703E001FC01EC01E000F800F80
0F000F800F800F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00
0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00
0F000F000F000F000F000F000F000F000F000F00FFF0FFF0FFF0FFF0FFF0FFF02C167D95
32>I<0F07F000FF1FFC00FF703E001FC01E000F800F000F800F000F000F000F000F000F
000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F
000F000F000F000F000F00FFF0FFF0FFF0FFF01C167D9522>I<007E0003FFC00781E00F
00F01E00783C003C3C003C78001E78001EF8001FF8001FF8001FF8001FF8001FF8001FF8
001F78001E7C003E3C003C3E007C1F00F80F81F003FFC000FF0018187D961E>I<018000
0180000180000180000380000380000780000780000F80003F8000FFFF80FFFF80078000
0780000780000780000780000780000780000780000780000780000780C00780C00780C0
0780C00780C00780C003C18003E30001FE00007C0012207E9E18>116
D<0F000F00FF00FF00FF00FF001F001F000F000F000F000F000F000F000F000F000F000F
000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F001F
000F001F0007003F8007C0EFF003FF8FF000FE0F001C177D9522>I<FFE01FF0FFE01FF0
1F800F800F8007000780060007C00E0003C00C0003E01C0001E0180001F0380000F03000
00F830000078600000786000003CC000003CC000001F8000001F8000000F0000000F0000
0006000000060000000C0000000C000000180000F8180000F8300000F8700000F8600000
61C000003F8000001F0000001C207E9420>121 D<0000018000000007C00000001FC000
00003FC0000000FF00000001F000000001800000000000000000000000000000000000FF
FFFFFE00FFFFFFFE000FC0007E0007C0001F0007C0000F0007C000070007C000030007C0
00030007C000030007C006018007C006018007C006018007C006000007C00E000007C01E
000007FFFE000007FFFE000007C01E000007C00E000007C006000007C006000007C00600
C007C00600C007C00000C007C000018007C000018007C000018007C000038007C0000380
07C000078007C0000F800FC0007F00FFFFFFFF00FFFFFFFF00222C7CAB29>201
D<000F00001F00003F00007E0001F80003E00003800002000000000000FC0003FF800F83
C01F01E03E00F03C00F07C00F07C0078F80078F80078FFFFF8FFFFF8F80000F80000F800
00F800007C00007C00183E00181E00381F00700781E003FF80007E0015217D9F1B>233
D E
%EndDVIPSBitmapFont
/Fb 205[61 28[71 71 20[{}3 90.9091 /CMSY10 rf /Fc 205[35
35 49[{}2 66.4176 /CMR8 rf /Fd 173[66 82[{}1 90.9091
/MSBM10 rf
%DVIPSBitmapFont: Fe ecsl1095 10.95 26
/Fe 26 234 df<00000000FF000000000FFFE00000003F80F8000000FC001C000003F000
0E000007E0003E00001FC000FE00003F8001FE00003F0001FE00007E0001FE0000FE0001
FE0000FC0000FC0000FC0000780001FC0000000001F80000000001F80000000001F80000
000001F80000000001F80000000003F80000000003F00000000003F00000000003F00000
000003F00000000003F00003F807FFFFFFFFF807FFFFFFFFF007FFFFFFFFF00007E0000F
F00007E00007F00007E00007F0000FE00007F0000FC00007E0000FC00007E0000FC00007
E0000FC00007E0000FC0000FE0001FC0000FE0001F80000FC0001F80000FC0001F80000F
C0001F80000FC0001F80001FC0003F80001FC0003F00001F80003F00001F80003F00001F
80003F00001F80003F00003F80007F00003F80007E00003F00007E00003F00007E00003F
00007E00003F00007E00007F0000FE00007F0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0003FE0001FF007FFFF03FFFF8FFFFF07FFFF8FFFFF07FFFF82F407EBF32
>28 D<03C00FE01FF01FF01FF01FF01FF01FF007B00030003000700060006000E000C001
C001800380030007000E001C0038007000E000C0000C1B7A8819>44
D<1E007F00FF80FF80FF80FF80FF00FE003C000909778819>46 D<001FFFFFFFFF000000
003FFFFFFFFFE00000003FFFFFFFFFF8000000007FE00007FE000000003FE00000FF0000
00003FE000003FC00000003FC000001FE00000003FC000000FE00000003FC0000007F000
00003FC0000003F80000003FC0000003FC0000007FC0000001FC0000007F80000000FE00
00007F80000000FE0000007F80000000FF0000007F800000007F0000007F800000007F00
0000FF800000007F800000FF000000007F800000FF000000007F800000FF000000007F80
0000FF000000007F800000FF000000007F800001FF000000007FC00001FE000000007FC0
0001FE000000007FC00001FE000000007FC00001FE000000007FC00001FE000000007F80
0003FE000000007F800003FC00000000FF800003FC00000000FF800003FC00000000FF80
0003FC00000000FF800003FC00000000FF000007FC00000000FF000007F800000001FF00
0007F800000001FF000007F800000001FE000007F800000001FE000007F800000003FC00
000FF800000003FC00000FF000000007F800000FF000000007F800000FF000000007F000
000FF00000000FF000000FF00000000FE000001FF00000001FC000001FE00000003FC000
001FE00000003F8000001FE00000007F0000001FE0000000FE0000001FE0000001FC0000
003FE0000003F80000003FC0000007F00000003FC000001FE00000003FC000007F800000
007FC00001FF00000000FFC0000FFC0000007FFFFFFFFFF00000007FFFFFFFFF80000000
FFFFFFFFFC00000000423E7DBD45>68 D<000000FF0007000007FFE00700001FFFF80E00
007F00FE1E0001FC001F3E0003F00007BE0007E00003FE000FC00001FE001F800001FC00
1F000000FC003F0000007C003E0000007C007E0000007C007E0000003C00FC0000003800
FC0000003800FC0000003800FC0000003800FC0000003800FC0000003800FE0000003000
FE0000003000FF0000000000FF8000000000FFC000000000FFE0000000007FFC00000000
7FFFC00000003FFFFC0000003FFFFF8000001FFFFFE000000FFFFFF8000003FFFFFC0000
01FFFFFE0000003FFFFF00000003FFFF000000007FFF8000000007FF8000000001FF8000
000000FFC0000000007FC0000000003FC0000000003FC0000000001FC0180000001FC018
0000001FC0180000001FC0180000000FC0180000001FC0380000001F80380000001F8038
0000001F80380000001F003C0000003F003C0000003E007C0000007E007E0000007C007F
000000FC007F800001F8007FC00003F0007DE00007E000F8F8001FC000F07F007F0000E0
1FFFFC0000E007FFF00000C000FFC0000030427BBF32>83 D<0000FF8000000007FFF000
00001F00FC00000038003E000000F0001F000000F0001F800001FC000FC00001FC000FC0
0003FC000FC00003FC0007E00003FC0007E00001F80007E00000F00007E0000000000FE0
000000000FE0000000000FC0000000000FC000000003FFC00000007FFFC0000007FF1FC0
00001FE01FC000007F801F800001FE001F800003F8001F800007F0001F80000FE0003F80
001FC0003F80003FC0003F00003F80003F01807F00003F01807F00007F01807F00007F01
80FF00007E0300FE0000FE0300FE0001FE03007F0001BE03007F0003BE06007F80073E06
003F801E1F0C000FE0781FF80003FFE00FF000007F8007C000292A7BA82D>97
D<003F000000001FFF000000001FFF000000001FFF0000000000FF00000000007F000000
00007F00000000007E00000000007E00000000007E00000000007E00000000007E000000
0000FE0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000
0001FC0000000001F80000000001F80000000001F80000000001F80000000001F807F000
0003F83FFE000003F0F80F800003F3C007E00003F70003F00003FE0001F80003FC0000F8
0007F80000FC0007F000007E0007E000007E0007E000007F0007E000003F0007E000003F
000FE000003F000FC000003F000FC000003F800FC000003F800FC000003F800FC000007F
801FC000007F001F8000007F001F8000007F001F8000007F001F8000007F001F800000FE
003F800000FE003F000000FE003F000001FC003F000001FC003F000003F8003F000003F0
007F000007F0007F00000FE0007F80000FC0007D80001F800079C0003F000078E000FC00
00F07001F80000E03C0FE00000C01FFF8000000003F8000000294077BE32>I<00001FE0
000000FFFC000003F01F00000F8003C0003F0000E0007E0003E000FC000FE001F8000FE0
03F0001FE007F0001FE007E0001FE00FC0000FC01FC00007801FC00000003F800000003F
800000007F000000007F000000007F000000007F00000000FF00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
00007E000001807E000003807F000003003F000007003F00000E001F80001C000F800038
0007C000700003E001E00001F80F8000007FFE0000000FF00000232A7AA828>I<000000
0003F000000001FFF000000001FFF000000001FFF0000000000FF00000000007F0000000
0007F00000000007E00000000007E00000000007E00000000007E0000000000FE0000000
000FE0000000000FC0000000000FC0000000000FC0000000000FC0000000001FC0000000
001FC0000000001F80000000001F80000000001F80000000001F8000001FE03F800000FF
F83F800003F01E3F00000FC0073F00003F0003BF00007E0001FF0000FC0000FF0001F800
00FF0003F000007E0007E000007E000FE000007E000FC000007E001FC00000FE003F8000
00FE003F800000FC003F800000FC007F000000FC007F000000FC007F000001FC00FF0000
01FC00FE000001F800FE000001F800FE000001F800FE000001F800FE000003F800FE0000
03F800FE000003F000FE000003F000FE000003F0007E000003F0007E000007F0007E0000
07F0003F00000FE0003F00001FE0001F80003FE0000F800077E00007C000EFF00003E003
CFFF8001F80F0FFF80007FFC0FFF80000FF00FC0002C407ABE32>I<00003FC0000001FF
F0000007C0FC00001F803E00003E001F0000FC000F8001F8000FC001F00007C003F00007
C007E00007E00FE00007E00FC00003E01FC00003E01F800003E03F800003E03F800007E0
7F000007E07F000007E07FFFFFFFE07FFFFFFFE0FF00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E00
0001807E000003807E000003003F000007003F00000E001F80001C000F8000380007C000
700003E001E00001F80F8000007FFE0000000FF00000232A7AA828>I<0000000FE00000
007FF8000001F81E000003F07E000007C0FF00000F80FF00001F80FF00003F00FE00007E
00FE00007E00FC0000FC00000000FC00000000FC00000001FC00000001F800000001F800
000001F800000001F800000001F800000003F800000003F000000003F000000003F00000
0003F000000003F0000007FFFFF80007FFFFF80007FFFFF8000007E000000007E0000000
07E00000000FE00000000FC00000000FC00000000FC00000000FC00000000FC00000001F
C00000001F800000001F800000001F800000001F800000001F800000003F800000003F00
0000003F000000003F000000003F000000003F000000007F000000007E000000007E0000
00007E000000007E000000007E00000000FE00000000FC00000000FC00000000FC000000
00FC00000003FE0000007FFFFC0000FFFFFC0000FFFFFC000028407EBF1C>I<00000000
007C000003F803FF00001FFF0F8F00007E0F9C1F0001F803F81F0003F003F01F0007E001
F00C000FC001F800000F8000F800001F8000F800003F0000FC00003F0000FC00003F0000
FC00003F0001FC00007F0001FC00007E0001F800007E0001F800007E0001F800003E0003
F000003E0003E000003F0007E000001F000FC000001F801F8000001F803F0000003BE0FC
00000031FFF0000000703F80000000600000000000E00000000000E00000000000E00000
000000E00000000000E00000000000F00000000000F80000000000FFFFF8000000FFFFFF
8000007FFFFFE000003FFFFFF80000FFFFFFFC0003F0000FFC000FC00001FE001F000000
7E003E0000003F007E0000003F007C0000001F00FC0000001F00F80000001F00F8000000
1F00F80000003F00F80000003E00F80000007E00F80000007C00FC000000FC007C000001
F8003E000003E0001F00000FC0000FC0003F000003F801FC0000007FFFF00000000FFF00
0000303D7FA82D>I<0000700001FC0003FC0003FC0007FC0007FC0003FC0003F80000E0
000000000000000000000000000000000000000000000000000000000000000000000000
0007F001FFF001FFE001FFE0001FE0000FE0000FE0000FE0000FC0000FC0000FC0000FC0
000FC0001FC0001F80001F80001F80001F80001F80003F80003F00003F00003F00003F00
003F00007F00007E00007E00007E00007E00007E0000FE0000FC0000FC0000FC0000FC00
03FE007FFFE07FFFE0FFFFE0163D7EBC19>105 D<00007E001FFE003FFE003FFE0001FE
0000FE0000FE0000FC0000FC0000FC0000FC0000FC0001FC0001F80001F80001F80001F8
0001F80003F80003F00003F00003F00003F00003F00007F00007E00007E00007E00007E0
0007E0000FE0000FC0000FC0000FC0000FC0000FC0001FC0001F80001F80001F80001F80
001F80003F80003F00003F00003F00003F00003F00007F00007E00007E00007E00007E00
007E0000FE0000FC0000FC0000FC0000FC0003FE007FFFF07FFFF0FFFFF0173F7EBE19>
108 D<0007F00FF00007F80001FFF03FFE001FFF0003FFE0F01F80780FC003FFE3C00F81
E007C0001FE7000FC38007E0000FEE0007C70003E0000FFC0007EE0003F0000FF80007FC
0003F0000FF00007F80003F0000FF00007F80003F0000FE00007F00003F0000FE00007F0
0003F0000FC00007E00003F0001FC0000FE00007F0001F80000FC00007E0001F80000FC0
0007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0003F80001FC0
000FE0003F00001F80000FC0003F00001F80000FC0003F00001F80000FC0003F00001F80
000FC0003F00001F80000FC0007F00003F80001FC0007E00003F00001F80007E00003F00
001F80007E00003F00001F80007E00003F00001F80007E00003F00001F8000FE00007F00
003F8000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00
003F0003FE0001FF0000FF807FFFF03FFFF81FFFFCFFFFF07FFFF83FFFFCFFFFF07FFFF8
3FFFFC46287EA74B>I<0007F00FF00001FFF03FFE0003FFE0F01F8003FFE3C00F80001F
E7000FC0000FEE0007C0000FFC0007E0000FF80007E0000FF00007E0000FF00007E0000F
E00007E0000FE00007E0000FC0000FE0001FC0000FE0001F80000FC0001F80000FC0001F
80000FC0001F80000FC0001F80001FC0003F80001FC0003F00001F80003F00001F80003F
00001F80003F00001F80003F00003F80007F00003F80007E00003F00007E00003F00007E
00003F00007E00003F00007E00007F0000FE00007F0000FC00007E0000FC00007E0000FC
00007E0000FC00007E0003FE0001FF007FFFF03FFFF8FFFFF07FFFF8FFFFF07FFFF82D28
7EA732>I<00001FE0000000FFF8000003E03E00000F800F80001E0007C0007C0003E000
F80001E001F00001F003E00001F003E00000F807C00000F80FC00000FC0F800000FC1F80
0000FC3F800000FC3F000000FC3F000000FE7F000000FE7F000000FE7F000000FCFE0000
01FCFE000001FCFE000001FCFE000001FCFE000001FCFE000003F8FE000003F8FE000003
F0FE000003F0FE000007E07E000007E07E00000FC07E00000FC03E00001F803F00003F00
1F00003E000F80007C0007C001F80003E003E00001F81F8000007FFE0000000FF0000027
2A7AA82D>I<0000FE01FC0000003FFE0FFF8000007FFC3E07E000007FFCF001F8000001
FDC000FC000001FF80007E000000FF00007E000001FE00003F000001FC00003F800001F8
00001F800001F800001FC00001F800001FC00001F800001FC00003F800000FC00003F000
000FC00003F000000FE00003F000000FE00003F000000FE00003F000001FE00007F00000
1FC00007E000001FC00007E000001FC00007E000001FC00007E000003FC00007E000003F
80000FE000003F80000FC000007F80000FC000007F00000FC00000FF00000FC00000FE00
000FC00001FC00001FC00001FC00001FC00003F800001FE00007F000001FE0000FE00000
1FF0001FC000001FB8003F0000003F9C00FE0000003F0F03F80000003F07FFE00000003F
00FE000000003F0000000000007F0000000000007F0000000000007E0000000000007E00
00000000007E0000000000007E000000000000FE000000000000FE000000000000FC0000
00000000FC000000000000FC000000000000FC000000000003FE00000000007FFFF00000
0000FFFFF000000000FFFFF000000000333A81A732>I<00000FE001C00000FFF8018000
03F81E0380000FC0070380001F80038780007F0001CF8000FC0000CF8001FC0000FF0003
F800007F0007F000007F000FE000007F000FE000007F001FC000007F003FC000007F003F
8000007E003F8000007E007F0000007E007F0000007E007F000000FE00FF000000FE00FE
000000FC00FE000000FC00FE000000FC00FE000000FC00FE000001FC00FE000001FC00FE
000001F800FE000001F800FE000001F8007E000003F8007F000003F8007F000007F8003F
00000FF0003F80000FF0001F80001FF0000FC0003BF00007E000F7F00003F001C7F00000
FC0F87E000003FFE07E000000FF007E00000000007E0000000000FE0000000000FC00000
00000FC0000000000FC0000000000FC0000000000FC0000000001FC0000000001F800000
00001F80000000001F80000000001F80000000003F80000000007FC00000001FFFFE0000
001FFFFE0000001FFFFE002A3A7AA730>I<0007E03F0001FFE0FFC001FFC3C3E003FFC7
0FF0001FCE0FF0000FCC0FF0000FDC0FF0000FF80FE0000FB00FC0000FF00300000FE000
00000FE00000000FC00000001FC00000001FC00000001F800000001F800000001F800000
001F800000003F800000003F000000003F000000003F000000003F000000003F00000000
7F000000007E000000007E000000007E000000007E000000007E00000000FE00000000FC
00000000FC00000000FC00000000FC00000003FE0000007FFFFC00007FFFFC0000FFFFFC
000024287EA723>I<0000FF80C00007FFE3C0001F007FC0007C001F8000F0000F8001E0
00078001C000078003C000078003C00003800780000300078000030007C000030007C000
030007E000030007F000000007FC00000003FFE0000003FFFE000001FFFF800000FFFFE0
00003FFFF000000FFFF8000000FFFC00000007FC00000001FE00180000FE003800007E00
3800003E003800003E003800001E003800001E003800003E007800003C007C00003C007C
000078007E000078007E0000F0007F0001E000FB8003C000F1E01F0000E07FFC0000C01F
E00000222A7DA824>I<0003000000030000000300000003000000070000000600000006
0000000E0000000E0000001E0000001E0000003C0000003C0000007C000000FC000001FC
000007FC00001FFFFFC0FFFFFFC0FFFFFFC001F8000001F8000001F8000003F8000003F0
000003F0000003F0000003F0000003F0000007F0000007E0000007E0000007E0000007E0
000007E000000FE000000FC000000FC000000FC000000FC000000FC003001FC006001F80
06001F8006001F8006001F8006001F800E001F800C001F000C001F801C001F8018001F80
38000F8030000FC0700007E1E00001FF8000007E00001A3978B723>I<01FC0000FE7FFC
003FFEFFF8007FFCFFF8007FFC07F80003FC03F80001FC03F80001FC03F80001FC03F000
01F803F00001F803F00001F803F00001F803F00003F807F00003F807E00003F007E00003
F007E00003F007E00003F007E00007F00FE00007F00FC00007E00FC00007E00FC00007E0
0FC00007E00FC0000FE01FC0000FE01F80000FC01F80000FC01F80001FC01F80001FC01F
80001FC01F80003FC01F00007F801F00007F801F0000FF801F8001DF800F8003BFC00FC0
073FFE07E01E3FFE01FFF83FFE003FE03F00272978A732>I<FFFFC003FFF0FFFFC003FF
F0FFFFC007FFE007FC0001FF0003F80000FC0003F80000780003F80000700001F80000E0
0001F80000C00001F80000C00001FC0001800000FC0003800000FC0003000000FC000600
0000FC00060000007E000C0000007E000C0000007E00180000007E00380000007F003000
00003F00600000003F00600000003F00C00000003F80C00000001F81800000001F838000
00001F83000000001FC7000000000FC6000000000FCC000000000FCC000000000FD80000
00000FF80000000007F00000000007F00000000007E00000000007C00000000003C00000
000003800000000003800000002C2878A630>I<01FFFF803FFFC001FFFF803FFFC001FF
FF003FFFC0000FFC001FF8000003F8000FE0000003F8000F80000001F8000E00000000FC
001C00000000FE0038000000007E0070000000007F00E0000000003F01C0000000001F83
80000000001FC300000000000FC600000000000FEC000000000007F8000000000003F000
0000000003F8000000000001F8000000000001FC000000000003FC0000000000067E0000
0000000C7F0000000000183F0000000000303F8000000000701F8000000000E00FC00000
0001C00FE0000000038007E0000000070007F00000000E0003F00000001C0001F8000000
7C0001FC000001FC0001FC000007FE0003FF0000FFFF000FFFF800FFFF001FFFF800FFFF
001FFFF80032277FA630>120 D<00000038000000007C00000000FE00000001FC000000
03FC00000007F80000001FE00000003F800000007F00000000FC00000001F000000003C0
00000007000000000000000000000000000000000000000000000000003FC0000001FFF0
000007C0FC00001F803E00003E001F0000FC000F8001F8000FC001F00007C003F00007C0
07E00007E00FE00007E00FC00003E01FC00003E01F800003E03F800003E03F800007E07F
000007E07F000007E07FFFFFFFE07FFFFFFFE0FF00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E0000
01807E000003807E000003003F000007003F00000E001F80001C000F8000380007C00070
0003E001E00001F80F8000007FFE0000000FF00000233B7AB928>233
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff ecbx1095 10.95 19
/Ff 19 234 df<0000007FF8000000000FFFFE000000007FFFFF80000001FFC01FC00000
07FE0003E000001FFC0007F000003FF0001FF800007FE0003FF800007FE0003FF80000FF
C0003FF80000FFC0007FFC0001FF80003FF80001FF80003FF80001FF80003FF80001FF80
001FF00001FF80000FE00001FF800003800001FF800000000001FF800000000001FF8000
00000001FF800000000001FF800000000001FF800000000001FF8003FFFC00FFFFFFFFFF
FC00FFFFFFFFFFFC00FFFFFFFFFFFC00FFFFFFFFFFFC0001FF80000FFC0001FF80000FFC
0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC00
01FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001
FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF
80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80
000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF8000
0FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC0001FF80000FFC007FFFFE03FF
FFF07FFFFE03FFFFF07FFFFE03FFFFF07FFFFE03FFFFF034407EBF3A>28
D<07801FE03FF07FF8FFFCFFFCFFFCFFFCFFFCFFFC7FF83FF01FE007800E0E798D1D>46
D<00000F000000001F000000007F00000001FF0000000FFF000001FFFF0000FFFFFF0000
FFFFFF0000FFF7FF0000FE07FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007
FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF
00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00
000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00000007FF00000007FF00003FFFFFFFF83FFF
FFFFF83FFFFFFFF83FFFFFFFF8253C79BB34>49 D<0003FF800000003FFFF8000000FFFF
FE000003FFFFFF800007F80FFFC0000FC001FFF0001F8000FFF8003F00007FFC007FC000
3FFE007FE0003FFE00FFF0001FFF00FFF8001FFF00FFF8001FFF00FFF8000FFF80FFF800
0FFF80FFF8000FFF80FFF8000FFF807FF0000FFF807FF0000FFF801FC0000FFF80070000
0FFF800000000FFF000000001FFF000000001FFF000000001FFE000000003FFE00000000
3FFC000000007FF8000000007FF000000000FFE000000001FFC000000001FF8000000003
FF0000000007FE000000000FF8000000001FF0000000001FE0000000003F80000000007F
0000000000FE0000000001F80007800003F00007800007E0000780000FC0000F00001F80
000F00003E00000F00007C00000F0000F800001F0001F000001F0001FFFFFFFF0003FFFF
FFFE0007FFFFFFFE000FFFFFFFFE001FFFFFFFFE003FFFFFFFFE007FFFFFFFFE00FFFFFF
FFFE00FFFFFFFFFC00FFFFFFFFFC00FFFFFFFFFC00293C7BBB34>I<0000FFE00000000F
FFFC0000003FFFFF800000FF01FFE00001F8007FF00003E0003FF80007C0003FFC000FF0
001FFE000FFC001FFE001FFE001FFF001FFE001FFF001FFE001FFF001FFE001FFF001FFF
001FFF001FFE001FFF001FFE001FFF000FFE001FFF0007FC001FFE0003F0003FFE000000
003FFC000000003FFC000000007FF8000000007FF000000000FFE000000001FFC0000000
03FF000000000FFC00000007FFF000000007FFE000000007FFFE0000000001FF80000000
007FE0000000003FF8000000001FFC000000001FFE000000000FFF000000000FFF800000
0007FFC000000007FFC000000007FFC007800007FFE01FE00007FFE07FF80007FFE07FF8
0007FFE0FFFC0007FFE0FFFC0007FFE0FFFC0007FFE0FFFC0007FFE0FFFC0007FFC0FFFC
0007FFC0FFF8000FFFC07FF8000FFF807FF0000FFF003FC0001FFF001FC0003FFE000FF0
007FFC0007FE01FFF00003FFFFFFE00000FFFFFF8000001FFFFC00000001FFC000002B3D
7CBB34>I<FFFFFFFFFFF8000000FFFFFFFFFFFF800000FFFFFFFFFFFFF00000FFFFFFFF
FFFFFC0000003FFE00007FFF0000003FFE00000FFFC000003FFE000003FFE000003FFE00
0000FFF000003FFE0000003FF800003FFE0000001FFC00003FFE0000000FFE00003FFE00
00000FFF00003FFE00000007FF80003FFE00000003FF80003FFE00000003FFC0003FFE00
000003FFC0003FFE00000001FFE0003FFE00000001FFE0003FFE00000001FFF0003FFE00
000000FFF0003FFE00000000FFF0003FFE00000000FFF8003FFE00000000FFF8003FFE00
000000FFF8003FFE00000000FFF8003FFE00000000FFFC003FFE00000000FFFC003FFE00
000000FFFC003FFE00000000FFFC003FFE00000000FFFC003FFE00000000FFFC003FFE00
000000FFFC003FFE00000000FFFC003FFE00000000FFFC003FFE00000000FFFC003FFE00
000000FFFC003FFE00000000FFFC003FFE00000000FFFC003FFE00000000FFF8003FFE00
000000FFF8003FFE00000000FFF8003FFE00000000FFF8003FFE00000000FFF0003FFE00
000000FFF0003FFE00000001FFF0003FFE00000001FFE0003FFE00000001FFE0003FFE00
000003FFC0003FFE00000003FFC0003FFE00000007FF80003FFE00000007FF00003FFE00
00000FFF00003FFE0000001FFE00003FFE0000003FFC00003FFE000000FFF800003FFE00
0001FFE000003FFE00000FFFC000003FFE00007FFF8000FFFFFFFFFFFFFE0000FFFFFFFF
FFFFF80000FFFFFFFFFFFFC00000FFFFFFFFFFF8000000463E7DBD50>68
D<FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00003FFE
00003FFF00003FFE000007FF00003FFE000001FF00003FFE000000FF00003FFE0000007F
00003FFE0000003F00003FFE0000001F00003FFE0000001F80003FFE0000000F80003FFE
0000000F80003FFE0000000780003FFE0000000780003FFE0000000780003FFE00078007
80003FFE00078007C0003FFE00078003C0003FFE00078003C0003FFE00078003C0003FFE
0007800000003FFE000F800000003FFE000F800000003FFE001F800000003FFE003F8000
00003FFE00FF800000003FFFFFFF800000003FFFFFFF800000003FFFFFFF800000003FFF
FFFF800000003FFE00FF800000003FFE003F800000003FFE001F800000003FFE000F8000
00003FFE000F800000003FFE0007800078003FFE0007800078003FFE0007800078003FFE
00078000F0003FFE00078000F0003FFE00078000F0003FFE00000000F0003FFE00000000
F0003FFE00000001F0003FFE00000001E0003FFE00000001E0003FFE00000003E0003FFE
00000003E0003FFE00000007E0003FFE00000007E0003FFE0000000FE0003FFE0000001F
C0003FFE0000003FC0003FFE000000FFC0003FFE000003FFC0003FFE00003FFFC0FFFFFF
FFFFFFFFC0FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF803D3E7DBD44>I<
00007FF0000003FFFF00001FFFFFC0007FE01FE000FF8003F001FF000FF803FE000FFC07
FE001FFC0FFC001FFC1FFC001FFC1FF8001FFC3FF8001FFC3FF8000FF87FF80007F07FF0
0001C07FF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF000
0000FFF0000000FFF0000000FFF0000000FFF0000000FFF00000007FF00000007FF00000
007FF80000007FF80000003FF800001E3FFC00001E1FFC00003E0FFC00003C0FFE00007C
07FF0000F803FF8001F000FFC003E0007FF00FC0001FFFFF000007FFFC0000007FE00027
2B7DA92E>99 D<0000FFE0000007FFFC00003FFFFF00007FE0FF8001FF803FC003FF001F
E007FE000FF00FFC000FF80FFC0007FC1FF80007FC3FF80003FE3FF80003FE3FF80003FE
7FF00003FE7FF00003FF7FF00003FFFFF00001FFFFF00001FFFFF00001FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF0000000FFF0000000FFF0000000FFF0000000FFF00000007FF0
0000007FF00000007FF00000003FF80000003FF800000F1FF800000F1FFC00001F0FFC00
001E07FE00003E03FE00007C01FF0000F800FFC003F0007FF01FE0001FFFFFC00007FFFE
0000007FF000282B7DA92F>101 D<01F80003FC0007FE000FFF001FFF801FFF801FFF80
1FFF801FFF801FFF800FFF0007FE0003FC0001F800000000000000000000000000000000
00000000000000000000000000FF00FFFF00FFFF00FFFF00FFFF0007FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF00FFFFF8FFFFF8FFFFF8FFFFF815407CBF1D>105
D<00FF00FFFF00FFFF00FFFF00FFFF0007FF0003FF0003FF0003FF0003FF0003FF0003FF
0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF
0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF
0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF
0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00FFFF
FCFFFFFCFFFFFCFFFFFC163F7CBE1D>108 D<01FE003FF00001FF8000FFFE00FFFE0007
FFF000FFFE03FFFF801FFFFC00FFFE0FC0FFC07E07FE00FFFE1E007FE0F003FF0007FE3C
003FF1E001FF8003FE78003FF3C001FF8003FEF0003FF78001FF8003FFE0001FFF0000FF
C003FFC0001FFE0000FFC003FFC0001FFE0000FFC003FF80001FFC0000FFC003FF80001F
FC0000FFC003FF80001FFC0000FFC003FF00001FF80000FFC003FF00001FF80000FFC003
FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF800
00FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00
001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FF
C003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001F
F80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003
FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC0FFFFFC07FFFFE0
3FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFF50297C
A857>I<01FE003FF00000FFFE00FFFE0000FFFE03FFFF8000FFFE0FC0FFC000FFFE1E00
7FE00007FE3C003FF00003FE78003FF00003FEF0003FF00003FFE0001FF80003FFC0001F
F80003FFC0001FF80003FF80001FF80003FF80001FF80003FF80001FF80003FF00001FF8
0003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF800
03FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF
00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00
001FF80003FF00001FF800FFFFFC07FFFFE0FFFFFC07FFFFE0FFFFFC07FFFFE0FFFFFC07
FFFFE033297CA83A>I<00007FF000000003FFFE0000001FFFFFC000007FE03FF00000FF
800FF80001FF0007FC0003FE0003FE0007FC0001FF000FF80000FF801FF80000FFC01FF8
0000FFC03FF80000FFE03FF000007FE07FF000007FF07FF000007FF07FF000007FF07FF0
00007FF0FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF0
00007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF87FF000007FF07FF0
00007FF07FF000007FF07FF000007FF03FF80000FFE03FF80000FFE01FF80000FFC00FF8
0000FF800FFC0001FF8007FE0003FF0003FF0007FE0001FF800FFC00007FE03FF000001F
FFFFC0000007FFFF000000007FF000002D2B7DA934>I<00FF007FE00000FFFF07FFFC00
00FFFF1FFFFF0000FFFF7F01FFC000FFFFF8007FF00007FFF0003FF80003FFE0001FFC00
03FF80000FFE0003FF80000FFF0003FF000007FF0003FF000007FF8003FF000003FF8003
FF000003FFC003FF000003FFC003FF000003FFC003FF000001FFC003FF000001FFE003FF
000001FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF00
0001FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001FFC003FF0000
03FFC003FF000003FFC003FF000003FFC003FF000007FF8003FF000007FF8003FF000007
FF0003FF80000FFE0003FFC0001FFE0003FFE0001FFC0003FFF0003FF80003FFF800FFE0
0003FF7F03FFC00003FF1FFFFF000003FF07FFF8000003FF00FFC0000003FF0000000000
03FF000000000003FF000000000003FF000000000003FF000000000003FF000000000003
FF000000000003FF000000000003FF000000000003FF000000000003FF000000000003FF
000000000003FF0000000000FFFFFC00000000FFFFFC00000000FFFFFC00000000FFFFFC
00000000333B7DA83A>I<01FE01FC00FFFE07FF80FFFE0FFFE0FFFE3F1FF0FFFE3C1FF0
07FE783FF803FEF03FF803FEE03FF803FFE03FF803FFC03FF803FFC01FF003FF800FE003
FF80038003FF80000003FF80000003FF00000003FF00000003FF00000003FF00000003FF
00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00
000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF0000
0003FF00000003FF00000003FF000000FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF0000
25297DA82B>114 D<0007800000078000000780000007800000078000000F8000000F80
00000F8000000F8000001F8000001F8000001F8000003F8000007F8000007F800000FF80
0001FF800007FF80001FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC01FF800001FF800001FF80
0001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF80
0001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF80
1E01FF801E01FF801E01FF801E01FF801E01FF801E01FF801E01FF801E01FF801E00FF80
3C00FFC03C00FFC03C007FE078003FF0F0001FFFE00007FFC00000FF001F3B7EB928>
116 D<FFFFF801FFFF00FFFFF801FFFF00FFFFF801FFFF00FFFFF801FFFF0001FFC0003F
C00000FFC0003F0000007FE0007E0000007FF0007C0000003FF800F80000001FFC01F000
00000FFE03E000000007FF07C000000003FF0F8000000001FF9F8000000001FFFF000000
0000FFFE00000000007FFC00000000003FF800000000001FF800000000000FFC00000000
000FFE00000000000FFF00000000001FFF80000000003FFFC0000000007EFFC000000000
7C7FE000000000F87FF000000001F03FF800000003E01FFC00000007C00FFE0000000F80
07FE0000001F8003FF0000003F0003FF8000007E0001FFC000007C0000FFE00001FC0000
7FF000FFFF8003FFFFC0FFFF8003FFFFC0FFFF8003FFFFC0FFFF8003FFFFC032287EA737
>120 D<000000C000000003F000000007F80000000FF80000001FFC0000003FFC000000
7FFC000000FFFC000001FFF8000003FFF8000007FFE000000FFF0000001FFC0000000FE0
0000000F0000000004000000000000000000000000000000FFE0000007FFFC00003FFFFF
00007FE0FF8001FF803FC003FF001FE007FE000FF00FFC000FF80FFC0007FC1FF80007FC
3FF80003FE3FF80003FE3FF80003FE7FF00003FE7FF00003FF7FF00003FFFFF00001FFFF
F00001FFFFF00001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000FFF0000000FFF0
000000FFF0000000FFF00000007FF00000007FF00000007FF00000003FF80000003FF800
000F1FF800000F1FFC00001F0FFC00001E07FE00003E03FE00007C01FF0000F800FFC003
F0007FF01FE0001FFFFFC00007FFFE0000007FF000283D7DBB2F>233
D E
%EndDVIPSBitmapFont
/Fg 162[25 1[25 49[35 35 40[{}4 90.9091 /CMR10 rf /Fh
135[52 17[45 3[39 48 23[40 13[25 59[{}6 90.9091 /CMMI10
rf
%DVIPSBitmapFont: Fi ecsx1200 12 22
/Fi 22 234 df<00003FE001FF000001FFFC03FF800007FFFC07FFC0000FFFFC07FFC000
1FFFFC07FFC0003FFFFC07FFC0007FF87C07FFC0007FF01C07FFC000FFF01C07FFC000FF
E00C07FFC000FFE00003FF8001FFE00001FF0001FFE00000000001FFE00000000001FFE0
0000000001FFE00000000001FFE00000000001FFE00000000001FFE00000000001FFE000
00000001FFE00000000001FFE00000000001FFE00000000001FFE00000000001FFE00000
000001FFE00000000001FFE00000000001FFE0000000003FFFFFF801FF807FFFFFFC03FF
C0FFFFFFFC03FFC0FFFFFFFC03FFC0FFFFFFFC03FFC07FFFFFF803FFC001FFE00003FFC0
01FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001
FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FF
E00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE0
0003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE000
03FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003
FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FF
C001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC001FFE00003FFC0
01FFE00003FFC000FFE00003FFC0007FC00001FF80324A7EC93C>28
D<FFE0FFE0FFE0FFE0FFE0FFE0FFE0FFE0FFE0FFE0FFE00B0B768A1F>46
D<00000F800000001FC00000003FC0000000FFC0000003FFC000001FFFC0003FFFFFC000
7FFFFFC000FFFFFFC000FFFFFFC000FFFFFFC0007FF3FFC0002003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003
FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FF
C0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0
000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003
FFC0000003FFC0000003FFC0000003FFC0003FFFFFFFF87FFFFFFFFCFFFFFFFFFCFFFFFF
FFFC7FFFFFFFFC3FFFFFFFF8264377C238>49 D<0000FFC00000000FFFFC0000003FFFFF
800000FFFFFFE00001FFFFFFF00003FFFFFFFC0007FFFFFFFE000FFFFFFFFF001FFFFFFF
FF803FFF00FFFFC03FFC003FFFC07FF0000FFFE07FE00007FFE0FFC00003FFF0FFC00001
FFF0FF800001FFF07F800000FFF83F000000FFF81F000000FFF81F000000FFF80E000000
7FF8060000007FF8000000007FF800000000FFF800000000FFF800000000FFF800000000
FFF000000001FFF000000001FFF000000003FFE000000003FFC000000007FFC000000007
FF800000000FFF000000001FFE000000003FFC000000007FF800000000FFF000000001FF
E000000003FFC000000007FF800000000FFE000000001FFC000000003FF8000000007FE0
00000000FFC000000001FF8000000003FF0000000007FE000000000FF8000000001FF000
0000003FE000000000FFC000000001FF8000000003FE0000000007FC000000000FF80000
00001FF0000000003FFFFFFFFFF07FFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFF
FFF8FFFFFFFFFFF8FFFFFFFFFFF87FFFFFFFFFF83FFFFFFFFFF02D437BC238>I<0000FF
F000000007FFFF0000003FFFFFC00000FFFFFFF00001FFFFFFF80007FFFFFFFC000FFFFF
FFFE001FFFFFFFFF003FFF803FFF007FFC001FFF807FF0000FFF803FE00007FFC01FC000
07FFC01F800007FFC00F000003FFC006000003FFC000000003FFC000000003FFC0000000
07FFC000000007FFC000000007FFC00000000FFF800000000FFF800000001FFF00000000
1FFF000000003FFE000000007FFC00000000FFF80000000FFFF0000007FFFFE0000007FF
FF80000007FFFE00000007FFFF80000007FFFFF0000007FFFFFC000000003FFF00000000
0FFF8000000007FFC000000003FFC000000003FFE000000001FFF000000001FFF0000000
00FFF000000000FFF800000000FFF800000000FFF800000000FFF800000000FFF8000000
00FFF800000000FFF800000000FFF800000000FFF800000000FFF860000001FFF8700000
01FFF07C000001FFF07E000003FFF0FF800007FFE0FFF0000FFFE0FFFF003FFFC0FFFFFF
FFFFC0FFFFFFFFFF807FFFFFFFFF001FFFFFFFFE0007FFFFFFFC0001FFFFFFF000007FFF
FFC000001FFFFF00000000FFF000002D457BC238>I<3FFFFFFFFE000000007FFFFFFFFF
F0000000FFFFFFFFFFFE000000FFFFFFFFFFFF800000FFFFFFFFFFFFE00000FFFFFFFFFF
FFF80000FFFFFFFFFFFFFC0000FFFFFFFFFFFFFE0000FFF800001FFFFF0000FFF8000001
FFFF8000FFF80000007FFFC000FFF80000001FFFE000FFF800000007FFE000FFF8000000
03FFF000FFF800000001FFF800FFF800000000FFF800FFF800000000FFFC00FFF8000000
007FFC00FFF8000000007FFC00FFF8000000003FFE00FFF8000000003FFE00FFF8000000
001FFE00FFF8000000001FFF00FFF8000000001FFF00FFF8000000001FFF00FFF8000000
000FFF00FFF8000000000FFF00FFF8000000000FFF80FFF8000000000FFF80FFF8000000
000FFF80FFF8000000000FFF80FFF8000000000FFF80FFF8000000000FFF80FFF8000000
000FFF80FFF8000000000FFF80FFF8000000000FFF80FFF8000000000FFF80FFF8000000
000FFF80FFF8000000000FFF80FFF8000000000FFF80FFF8000000000FFF80FFF8000000
000FFF80FFF8000000000FFF80FFF8000000000FFF00FFF8000000000FFF00FFF8000000
001FFF00FFF8000000001FFF00FFF8000000001FFF00FFF8000000003FFE00FFF8000000
003FFE00FFF8000000003FFE00FFF8000000007FFC00FFF8000000007FFC00FFF8000000
00FFF800FFF800000001FFF800FFF800000003FFF000FFF800000007FFF000FFF8000000
1FFFE000FFF80000003FFFC000FFF8000001FFFF8000FFF800001FFFFF8000FFFFFFFFFF
FFFE0000FFFFFFFFFFFFFC0000FFFFFFFFFFFFF80000FFFFFFFFFFFFE00000FFFFFFFFFF
FF800000FFFFFFFFFFFE0000007FFFFFFFFFF00000003FFFFFFFFE00000000414577C451
>68 D<3FF07FF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FF
F8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FF
F8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FF
F8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF87FF83FF00D4578
C41E>73 D<00007FF800000007FFFF8000003FFFFFE00000FFFFFFF80003FFFFFFFC000F
FFFFFFFE000FFF801FFF000FFC000FFF800FF00007FF800FE00007FFC007C00003FFC007
800003FFC007000003FFC006000001FFE000000001FFE000000001FFE000000001FFE000
000001FFE000000001FFE000000001FFE000000001FFE000000001FFE000000003FFE000
003FFFFFE00007FFFFFFE0003FFFFFFFE001FFFFFFFFE007FFFFFFFFE00FFFFE01FFE01F
FFE001FFE03FFF0001FFE07FFE0001FFE07FFC0001FFE0FFF80001FFE0FFF00001FFE0FF
F00001FFE0FFF00001FFE0FFF00001FFE0FFF80003FFE0FFF80003FFE07FFC0007FFE07F
FE001FFFE03FFF80FFFFE03FFFFFFFFFE01FFFFFFFFFE00FFFFFFDFFE003FFFFF1FFE000
FFFF80FFC0003FF80000002B317DAF36>97 D<3FE0000000007FF000000000FFF0000000
00FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF0000000
00FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF0000000
00FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF0000000
00FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF007FE00
00FFF03FFFC000FFF0FFFFF000FFF3FFFFFC00FFFFFFFFFE00FFFFFFFFFF80FFFFE03FFF
80FFFF0007FFC0FFFE0003FFE0FFFC0001FFE0FFF80000FFF0FFF00000FFF0FFF000007F
F8FFF000007FF8FFF000007FF8FFF000007FF8FFF000003FFCFFF000003FFCFFF000003F
FCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003F
FCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003F
FCFFF000003FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF00000FFF0FFF00000FF
F0FFF80001FFF0FFFC0001FFE0FFFE0003FFC0FFFF000FFFC0FFFFC03FFF80FFFFFFFFFF
00FFFFFFFFFE00FFF7FFFFF8007FF1FFFFE0003FE07FFF800000000FFC00002E4A79C83A
>I<000000001FF8000000003FFC000000003FFC000000003FFC000000003FFC00000000
3FFC000000003FFC000000003FFC000000003FFC000000003FFC000000003FFC00000000
3FFC000000003FFC000000003FFC000000003FFC000000003FFC000000003FFC00000000
3FFC000000003FFC000000003FFC000000003FFC000000003FFC000000003FFC00000000
3FFC000000003FFC000000003FFC0000FFC03FFC0007FFF83FFC003FFFFE3FFC00FFFFFF
BFFC01FFFFFFFFFC03FFFFFFFFFC07FFF00FFFFC0FFFC003FFFC1FFF0000FFFC1FFE0000
7FFC3FFE00007FFC3FFC00003FFC3FFC00003FFC7FF800003FFC7FF800003FFC7FF80000
3FFC7FF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF00000
3FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF000003FFCFFF00000
3FFCFFF000003FFCFFF000003FFCFFF000003FFC7FF000003FFC7FF800003FFC7FF80000
3FFC7FF800003FFC7FF800003FFC3FFC00007FFC3FFC0000FFFC1FFE0000FFFC1FFF0001
FFFC0FFF8007FFFC07FFF01FFFFC03FFFFFFFFFC01FFFFFFBFFC00FFFFFF3FFC003FFFFC
3FFC000FFFF01FF80001FF8000002E4A7CC83A>100 D<00007FF800000003FFFF000000
1FFFFFC000003FFFFFF00000FFFFFFF80001FFFFFFFC0003FFF01FFE0007FF8007FF000F
FF0003FF000FFE0001FF801FFC0000FF801FFC0000FFC03FF80000FFC03FF800007FE07F
F000007FE07FF000007FE07FF000007FE07FF000003FF0FFF000003FF0FFF000003FF0FF
E000003FF0FFE000003FF0FFE000003FF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FF
FFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFE0FFF000000000FFF0000000007FF0000000007F
F0000000007FF0000000007FF8000000003FF8000000003FF8000000001FFC000000C01F
FE000001C00FFE000007C007FF00000FC007FFC0007FE003FFF803FFE001FFFFFFFFE000
7FFFFFFFE0003FFFFFFF80000FFFFFFE000003FFFFF00000003FFE00002C317DAF33>I<
3FF07FF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF8FFF87FF000000000000000000000
000000000000000000000000000000001FF03FF87FF87FF87FF87FF87FF87FF87FF87FF8
7FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF8
7FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF83FF81FF0
0D487AC71B>105 D<3FE07FF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FF
F0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FF
F0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FF
F0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0FF
F0FFF0FFF0FFF07FF03FE00C4979C81B>108 D<000001FF80003FE00FFFF0007FF03FFF
FC00FFF0FFFFFE00FFF1FFFFFF00FFF3FFFFFF80FFF7F80FFF80FFFFE007FFC0FFFFC003
FFC0FFFF8003FFC0FFFF0003FFE0FFFE0001FFE0FFFC0001FFE0FFFC0001FFE0FFFC0001
FFE0FFF80001FFE0FFF80001FFE0FFF80001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE07FF00001FFE03FE00000FFC02B2F79AE3A>110 D<00003FFE0000000003FFFFE000
00000FFFFFF80000003FFFFFFE000000FFFFFFFF800001FFFFFFFFC00003FFF007FFE000
07FFC001FFF0000FFF00007FF8000FFE00003FF8001FFC00001FFC001FFC00001FFC003F
F800000FFE003FF800000FFE007FF800000FFF007FF800000FFF007FF0000007FF007FF0
000007FF007FF0000007FF00FFF0000007FF80FFF0000007FF80FFF0000007FF80FFF000
0007FF80FFF0000007FF80FFF0000007FF80FFF0000007FF80FFF0000007FF80FFF00000
07FF80FFF0000007FF80FFF0000007FF80FFF0000007FF80FFF0000007FF807FF0000007
FF007FF800000FFF007FF800000FFF007FF800000FFF003FFC00001FFE003FFC00001FFE
001FFE00003FFC001FFE00003FFC000FFF00007FF80007FFC001FFF00003FFF007FFE000
01FFFFFFFFC00000FFFFFFFF8000007FFFFFFF0000001FFFFFFC00000003FFFFE0000000
003FFE00000031317DAF38>I<000000F83FC007F87FE01FF8FFE07FF8FFE0FFF8FFE1FF
F8FFE3FFF8FFE7FFF8FFEFFFF8FFEFFF00FFFFF800FFFFF000FFFFC000FFFF8000FFFF00
00FFFF0000FFFE0000FFFC0000FFFC0000FFF80000FFF80000FFF80000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF000007FF000003FE000001D2F79AE26>114
D<000FFF8000007FFFF80001FFFFFE0007FFFFFF800FFFFFFFE01FFFFFFFE01FFFFFFFE0
3FF801FFE03FF0003FC03FE0000FC07FC00003C07FC00001C07FC00000007FC00000007F
E00000007FE00000007FF00000007FFC0000003FFFC000003FFFFE00003FFFFFC0001FFF
FFF0000FFFFFFC0007FFFFFE0003FFFFFF0001FFFFFF80007FFFFFC0001FFFFFC00003FF
FFE000000FFFE0000001FFF00000007FF00000003FF00000003FF02000001FF07000001F
F07800001FF07C00001FF07E00003FF07F80003FE0FFE0007FE0FFFC01FFE0FFFFFFFFC0
FFFFFFFFC03FFFFFFF800FFFFFFF0003FFFFFC00007FFFF0000007FF800024317DAF2B>
I<007FC0000000FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE00000
01FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE000003FFFFFFE007F
FFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF007FFFFFFE0001FFE0000001FFE0000001FF
E0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0
000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE000
0001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE00000
01FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001FFE0000001
FFE0000001FFF0018001FFF0078000FFF81FC000FFFFFFC000FFFFFFC0007FFFFFC0003F
FFFE00001FFFF0000007FE0000223C7EBA28>I<3FE00000FFC07FF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001FFE0FFF00001
FFE0FFF00001FFE0FFF00003FFE0FFF00003FFE0FFF00003FFE0FFF00007FFE0FFF0000F
FFE0FFF8001FFFE07FF8003FFFE07FFE01FFFFE03FFFFFFDFFE01FFFFFF9FFE00FFFFFE1
FFE003FFFF80FFC0007FFC0000002B2F79AD3A>I<7F80000007F87FC000000FF8FFE000
000FFC7FE000001FF87FE000001FF87FF000003FF83FF000003FF03FF800003FF01FF800
007FE01FF800007FE01FFC00007FE00FFC0000FFC00FFC0000FFC00FFE0000FFC007FE00
01FF8007FE0001FF8007FF0001FF8003FF0003FF0003FF0003FF0003FF8007FF0001FF80
07FE0001FF8007FE0001FFC00FFE0000FFC00FFC0000FFE00FFC00007FE01FF800007FE0
1FF800007FF01FF800003FF03FF000003FF03FF000003FF83FF000001FF87FE000001FF8
7FE000001FFCFFE000000FFCFFC000000FFCFFC000000FFFFFC0000007FFFF80000007FF
FF80000003FFFF00000003FFFF00000003FFFF00000001FFFE00000001FFFE00000000FF
FC000000007FF800002E2E7EAD33>I<7FC000001FF07FF000007FF07FF000007FF03FF8
0000FFE01FFC0001FFC01FFE0003FFC00FFF0007FF8007FF8007FF0003FF800FFE0001FF
C01FFC0000FFE03FF800007FF07FF000003FF87FF000003FF8FFE000001FFDFFC000000F
FFFF80000007FFFF00000003FFFE00000001FFFE00000000FFFC000000007FF800000000
7FF0000000003FF0000000007FF000000000FFF800000001FFFC00000003FFFE00000003
FFFF00000007FDFF8000000FFCFFC000001FF87FE000003FF07FE000007FE03FF000007F
E01FF80000FFC00FFC0001FF800FFE0003FF8007FF0007FF0003FF800FFE0001FF801FFC
0001FFC01FFC0000FFE03FF800007FF07FF000003FF8FFE000003FFCFFE000001FFC7FC0
00000FF82E2E7EAD33>120 D<000007FF800000000FFF800000001FFF000000003FFC00
0000003FF8000000007FF000000000FFC000000001FF8000000003FF0000000007FE0000
000007F8000000000FF0000000001FE0000000003F80000000003F000000000000000000
0000000000000000000000000000000000000000000000000000007FF800000003FFFF00
00001FFFFFC000003FFFFFF00000FFFFFFF80001FFFFFFFC0003FFF01FFE0007FF8007FF
000FFF0003FF000FFE0001FF801FFC0000FF801FFC0000FFC03FF80000FFC03FF800007F
E07FF000007FE07FF000007FE07FF000007FE07FF000003FF0FFF000003FF0FFF000003F
F0FFE000003FF0FFE000003FF0FFE000003FF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFF
F0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFE0FFF000000000FFF0000000007FF0000000
007FF0000000007FF0000000007FF8000000003FF8000000003FF8000000001FFC000000
C01FFE000001C00FFE000007C007FF00000FC007FFC0007FE003FFF803FFE001FFFFFFFF
E0007FFFFFFFE0003FFFFFFF80000FFFFFFE000003FFFFF00000003FFE00002C457DC333
>233 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj ecsx1440 14.4 23
/Fj 23 234 df<FFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFC0F
F80FF81FF01FF01FE03FE03FC03FC07F807F80FF00FF00FE000E1B74D426>39
D<FFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFC0FF80FF81FF01F
F01FE03FE03FC03FC07F807F80FF00FF00FE000E1B748D26>44 D<0000003F0000000000
007F800000000000FF800000000001FF800000000007FF80000000001FFF8000000000FF
FF800000000FFFFF8000003FFFFFFF8000007FFFFFFF800000FFFFFFFF800000FFFFFFFF
800000FFFFFFFF8000007FFFBFFF8000003FF83FFF80000000003FFF80000000003FFF80
000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF8000
0000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF800000
00003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000
003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF8000000000
3FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003F
FF80000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF
80000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF80
000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF8000
0000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF800000
00003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF80000000
003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF8000000000
3FFF80000000003FFF80000000003FFF80000000003FFF8000001FFFFFFFFFFE003FFFFF
FFFFFF007FFFFFFFFFFF807FFFFFFFFFFF807FFFFFFFFFFF803FFFFFFFFFFF001FFFFFFF
FFFE00315476D345>49 D<00000FFF0000000000FFFFF000000003FFFFFE0000000FFFFF
FF8000003FFFFFFFE000007FFFFFFFF00001FFFFFFFFFC0003FFFFFFFFFE0007FFFFFFFF
FF0007FFFFFFFFFF800FFFF007FFFFC01FFF8001FFFFE03FFF00007FFFE03FFE00003FFF
F07FFC00001FFFF07FF800000FFFF8FFF0000007FFF8FFF0000003FFFCFFE0000003FFFC
7FC0000001FFFC3FC0000001FFFC3FC0000001FFFE1F80000000FFFE0F80000000FFFE07
80000000FFFE0700000000FFFE0300000000FFFE0000000000FFFE0000000000FFFE0000
000000FFFE0000000000FFFE0000000001FFFE0000000001FFFC0000000001FFFC000000
0003FFFC0000000003FFF80000000003FFF80000000007FFF00000000007FFF000000000
0FFFE0000000001FFFC0000000001FFFC0000000003FFF80000000007FFF0000000000FF
FE0000000000FFFC0000000001FFF80000000003FFF00000000007FFE0000000000FFFC0
000000001FFF80000000003FFE00000000007FFC0000000000FFF80000000001FFF00000
000003FFE00000000007FF80000000000FFF00000000001FFE00000000003FFC00000000
007FF80000000000FFF00000000001FFE00000000003FFC00000000007FF00000000000F
FE00000000001FFC00000000003FF800000000007FF00000000000FFE00000000001FFC0
0000000003FF800000000007FF00000000000FFE00000000001FFFFFFFFFFFFC3FFFFFFF
FFFFFE7FFFFFFFFFFFFE7FFFFFFFFFFFFE7FFFFFFFFFFFFE7FFFFFFFFFFFFE7FFFFFFFFF
FFFE7FFFFFFFFFFFFE3FFFFFFFFFFFFE1FFFFFFFFFFFFC37547AD345>I<3FFFFFFFFFFF
FFE07FFFFFFFFFFFFFF0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF0FFFF
FFFFFFFFFFF0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF0FFFFFFFFFFFF
FFF0FFFE0000FFFFFFE0FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE00000000
0000FFFE000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE00000000
0000FFFE000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFFFFFFFFFF
FC00FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00FFFF
FFFFFFFFFE00FFFFFFFFFFFFFE00FFFFFFFFFFFFFE00FFFFFFFFFFFFFC00FFFE00000000
0000FFFE000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE00000000
0000FFFE000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE00000000
0000FFFE000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE00000000
0000FFFE000000000000FFFE000000000000FFFE000000000000FFFE000000000000FFFE
000000000000FFFE000000000000FFFE0000000000007FFE0000000000003FFC00000000
00003C5275D14E>70 D<3FFFC000000000000003FFFE7FFFF00000000000000FFFFFFFFF
F80000000000001FFFFFFFFFF80000000000001FFFFFFFFFF80000000000001FFFFFFFFF
FC0000000000003FFFFFFFFFFC0000000000003FFFFFFFFFFE0000000000007FFFFFFFFF
FE0000000000007FFFFFFFFFFF000000000000FFFFFFFFFFFF000000000000FFFFFFFFFF
FF800000000001FFFFFFFFFBFF800000000001FFDFFFFFFBFF800000000001FFDFFFFFF9
FFC00000000003FF9FFFFFF9FFC00000000003FF9FFFFFF9FFE00000000007FF9FFFFFF9
FFE00000000007FF9FFFFFF8FFF0000000000FFF1FFFFFF8FFF0000000000FFF1FFFFFF8
7FF0000000000FFE1FFFFFF87FF8000000001FFE1FFFFFF87FF8000000001FFE1FFFFFF8
3FFC000000003FFC1FFFFFF83FFC000000003FFC1FFFFFF83FFE000000007FFC1FFFFFF8
1FFE000000007FF81FFFFFF81FFE000000007FF81FFFFFF80FFF00000000FFF01FFFFFF8
0FFF00000000FFF01FFFFFF80FFF80000001FFF01FFFFFF807FF80000001FFE01FFFFFF8
07FFC0000003FFE01FFFFFF803FFC0000003FFC01FFFFFF803FFC0000003FFC01FFFFFF8
03FFE0000007FFC01FFFFFF801FFE0000007FF801FFFFFF801FFF000000FFF801FFFFFF8
00FFF000000FFF001FFFFFF800FFF800001FFF001FFFFFF800FFF800001FFF001FFFFFF8
007FF800001FFE001FFFFFF8007FFC00003FFE001FFFFFF8003FFC00003FFC001FFFFFF8
003FFE00007FFC001FFFFFF8001FFE00007FF8001FFFFFF8001FFF0000FFF8001FFFFFF8
001FFF0000FFF8001FFFFFF8000FFF0000FFF0001FFFFFF8000FFF8001FFF0001FFFFFF8
0007FF8001FFE0001FFFFFF80007FFC003FFE0001FFFFFF80003FFC003FFC0001FFFFFF8
0003FFC003FFC0001FFFFFF80003FFE007FFC0001FFFFFF80001FFE007FF80001FFFFFF8
0001FFF00FFF80001FFFFFF80000FFF00FFF00001FFFFFF80000FFF00FFF00001FFFFFF8
00007FF81FFE00001FFFFFF800007FF81FFE00001FFFFFF800007FF81FFE00001FFFFFF8
00003FFC3FFC00001FFFFFF800003FFC3FFC00001FFFFFF800001FFE7FF800001FFFFFF8
00001FFE7FF800001FFFFFF800000FFE7FF000001FFFFFF800000FFE7FF000001FFFFFF8
00000FFFFFF000001FFFFFF8000007FFFFE000001FFFFFF8000007FFFFE000001FFFFFF8
000003FFFFC000001FFFFFF8000003FFFFC000001FFFFFF8000001FFFF8000001FFFFFF8
000001FFFF8000001FFFFFF8000000FFFF0000001FFFFFF8000000FFFF0000001FFFFFF8
000000FFFF0000001FFFFFF80000007FFE0000001FFFFFF80000001FF80000001FFF7FF8
00000000000000001FFF3FF000000000000000000FFE605274D179>77
D<00000FFFF000000001FFFFFF0000000FFFFFFFE000007FFFFFFFF80001FFFFFFFFFC00
07FFFFFFFFFF0007FFFFFFFFFF8007FFFFFFFFFFC007FFF0007FFFC007FF80001FFFE007
FE00000FFFE003F800000FFFF003F0000007FFF003C0000007FFF00380000007FFF80300
000003FFF80000000003FFF80000000003FFF80000000003FFF80000000003FFF8000000
0003FFF80000000003FFF80000000003FFF80000000003FFF800000007FFFFF8000007FF
FFFFF80000FFFFFFFFF80007FFFFFFFFF8003FFFFFFFFFF800FFFFFFFFFFF803FFFFFF03
FFF807FFFFC003FFF80FFFFC0003FFF81FFFF00003FFF83FFFE00003FFF87FFF800003FF
F87FFF800003FFF8FFFF000003FFF8FFFF000003FFF8FFFE000003FFF8FFFE000003FFF8
FFFE000003FFF8FFFE000007FFF8FFFF000007FFF8FFFF00000FFFF87FFF80001FFFF87F
FFC0003FFFF87FFFE000FFFFF83FFFF807FFFFF81FFFFFFFFFFFF81FFFFFFFFFFFF80FFF
FFFFFBFFF807FFFFFFE3FFF803FFFFFF83FFF800FFFFFE03FFF8003FFFF001FFF00007FF
0000000035397CB742>97 D<000003FFF8000000007FFFFFC0000001FFFFFFF8000007FF
FFFFFE00001FFFFFFFFF80007FFFFFFFFFE000FFFFFFFFFFE001FFFFFFFFFFE003FFFF80
0FFFE007FFFC0000FFC00FFFF000003FC00FFFE000001FC01FFFE0000007C01FFFC00000
03C03FFF80000001C03FFF80000000003FFF00000000007FFF00000000007FFF00000000
007FFF00000000007FFE0000000000FFFE0000000000FFFE0000000000FFFE0000000000
FFFE0000000000FFFE0000000000FFFE0000000000FFFE0000000000FFFE0000000000FF
FE0000000000FFFE0000000000FFFE0000000000FFFE0000000000FFFE0000000000FFFE
0000000000FFFE00000000007FFE00000000007FFF00000000007FFF00000000007FFF00
000000007FFF00000000003FFF80000000003FFF80000000C01FFFC0000001C01FFFE000
0007C00FFFE000000FC00FFFF000003FC007FFFC0001FFE003FFFF801FFFE001FFFFFFFF
FFE000FFFFFFFFFFE0007FFFFFFFFFE0003FFFFFFFFF80000FFFFFFFFE000003FFFFFFF0
0000007FFFFF8000000003FFF0000033397BB73D>99 D<00000000001FFF000000000000
3FFF8000000000003FFF8000000000003FFF8000000000003FFF8000000000003FFF8000
000000003FFF8000000000003FFF8000000000003FFF8000000000003FFF800000000000
3FFF8000000000003FFF8000000000003FFF8000000000003FFF8000000000003FFF8000
000000003FFF8000000000003FFF8000000000003FFF8000000000003FFF800000000000
3FFF8000000000003FFF8000000000003FFF8000000000003FFF8000000000003FFF8000
000000003FFF8000000000003FFF8000000000003FFF8000000000003FFF800000000000
3FFF8000000000003FFF8000001FFC003FFF800001FFFFC03FFF800007FFFFF03FFF8000
1FFFFFFC3FFF80007FFFFFFF3FFF8000FFFFFFFFFFFF8001FFFFFFFFFFFF8003FFFFFFFF
FFFF8007FFFF801FFFFF800FFFFC0003FFFF800FFFF80001FFFF801FFFE00000FFFF801F
FFE000003FFF803FFFC000003FFF803FFF8000003FFF807FFF8000003FFF807FFF000000
3FFF807FFF0000003FFF807FFF0000003FFF807FFF0000003FFF80FFFE0000003FFF80FF
FE0000003FFF80FFFE0000003FFF80FFFE0000003FFF80FFFE0000003FFF80FFFE000000
3FFF80FFFE0000003FFF80FFFE0000003FFF80FFFE0000003FFF80FFFE0000003FFF80FF
FE0000003FFF80FFFE0000003FFF80FFFE0000003FFF80FFFE0000003FFF80FFFE000000
3FFF80FFFE0000003FFF807FFE0000003FFF807FFF0000003FFF807FFF0000003FFF807F
FF0000003FFF807FFF8000003FFF803FFF8000003FFF803FFFC000007FFF801FFFC00000
FFFF801FFFE00001FFFF800FFFF00003FFFF800FFFFC000FFFFF8007FFFF007FFFFF8003
FFFFFFFFFFFF8003FFFFFFFFBFFF8000FFFFFFFF3FFF80007FFFFFFE3FFF80003FFFFFF8
3FFF80000FFFFFE03FFF800001FFFF801FFF0000003FF80000000039567BD447>I<0000
03FFE0000000007FFFFE00000001FFFFFFC0000007FFFFFFF000001FFFFFFFF800003FFF
FFFFFC0000FFFFFFFFFE0001FFFFFFFFFF0003FFFF80FFFF8003FFFC001FFFC007FFF000
07FFC00FFFE00003FFE00FFFC00003FFE01FFF800001FFF01FFF800001FFF03FFF000000
FFF83FFF000000FFF87FFF000000FFF87FFE000000FFF87FFE0000007FF87FFE0000007F
FCFFFE0000007FFCFFFE0000007FFCFFFE0000007FFCFFFFFFFFFFFFFCFFFFFFFFFFFFFC
FFFFFFFFFFFFFCFFFFFFFFFFFFFCFFFFFFFFFFFFFCFFFFFFFFFFFFFCFFFFFFFFFFFFF8FF
FC0000000000FFFC0000000000FFFE0000000000FFFE00000000007FFE00000000007FFE
00000000007FFE00000000007FFF00000000003FFF00000000003FFF00000000003FFF80
000000001FFF80000000301FFFC0000000700FFFE0000001F00FFFF0000007F007FFF800
001FF003FFFE00007FF801FFFFC00FFFF800FFFFFFFFFFF8007FFFFFFFFFF8003FFFFFFF
FFF8000FFFFFFFFFE00007FFFFFFFF800000FFFFFFFC0000003FFFFFE000000001FFFC00
0036397CB73F>I<0000007FFF00000007FFFFF000003FFFFFF00000FFFFFFF00001FFFF
FFF00003FFFFFFF00007FFFFFFF0000FFFFFFFF0001FFFF007F0003FFFC001F0003FFF80
0070007FFF000030007FFF000000007FFE000000007FFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE0000003FFFFFFFE0007FFFFFFFF000FFFFFFFF
F000FFFFFFFFF000FFFFFFFFF000FFFFFFFFF0007FFFFFFFE00000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE000000007FFE000000003FFC0000002C567DD52A>I<7FF8FFFCFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFC7FF8000000000000000000000000000000
000000000000000000000000000000000000003FFC7FFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFE3FFC0F5678D520>105
D<3FFC7FFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFF
FEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFE3FFC0F5578D420>108
D<00000007FF8000001FFE00003FFC003FFFF80000FFFFE0007FFE00FFFFFE0003FFFFF8
00FFFE03FFFFFF000FFFFFFC00FFFE0FFFFFFF803FFFFFFE00FFFE1FFFFFFFC07FFFFFFF
00FFFE7FFFFFFFE1FFFFFFFF80FFFEFFFFFFFFE3FFFFFFFF80FFFFFF807FFFF7FE01FFFF
C0FFFFFE001FFFF7F8007FFFC0FFFFF8000FFFFFE0003FFFC0FFFFF00007FFFFC0001FFF
E0FFFFE00007FFFF80001FFFE0FFFFC00003FFFF00000FFFE0FFFFC00003FFFF00000FFF
E0FFFF800003FFFE00000FFFE0FFFF800003FFFE00000FFFE0FFFF000003FFFC00000FFF
E0FFFF000003FFFC00000FFFE0FFFF000003FFFC00000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFF
E0FFFE000003FFF800000FFFE0FFFE000003FFF800000FFFE07FFE000001FFF8000007FF
E03FFC000000FFF0000003FFC05B3777B66E>I<00000007FF00003FFC007FFFF0007FFE
01FFFFFC00FFFE07FFFFFE00FFFE0FFFFFFF00FFFE3FFFFFFF80FFFE7FFFFFFFC0FFFEFF
FFFFFFC0FFFFFF807FFFE0FFFFFC003FFFE0FFFFF8001FFFE0FFFFF0000FFFF0FFFFE000
0FFFF0FFFFC00007FFF0FFFFC00007FFF0FFFF800007FFF0FFFF800007FFF0FFFF000007
FFF0FFFF000007FFF0FFFF000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FF
F0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0
FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FF
FE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE
000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE00
0007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE0000
07FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF07FFE000007
FFF03FFC000003FFE0343777B647>I<000001FFF800000000003FFFFFC000000001FFFF
FFF800000007FFFFFFFE0000001FFFFFFFFF8000003FFFFFFFFFC00000FFFFFFFFFFF000
01FFFFFFFFFFF80003FFFF801FFFFC0003FFFC0003FFFC0007FFF00000FFFE000FFFE000
007FFF000FFFC000003FFF001FFFC000003FFF801FFF8000001FFF803FFF8000001FFFC0
3FFF0000000FFFC03FFF0000000FFFC07FFF0000000FFFE07FFE00000007FFE07FFE0000
0007FFE07FFE00000007FFE0FFFE00000007FFF0FFFE00000007FFF0FFFE00000007FFF0
FFFE00000007FFF0FFFE00000007FFF0FFFE00000007FFF0FFFE00000007FFF0FFFE0000
0007FFF0FFFE00000007FFF0FFFE00000007FFF0FFFE00000007FFF0FFFE00000007FFF0
FFFE00000007FFF0FFFE00000007FFF07FFE00000007FFE07FFF0000000FFFE07FFF0000
000FFFE07FFF0000000FFFE03FFF0000000FFFC03FFF8000001FFFC03FFF8000001FFFC0
1FFFC000003FFF801FFFC000003FFF800FFFE000007FFF000FFFF80001FFFF0007FFFC00
03FFFE0003FFFF801FFFFC0001FFFFFFFFFFF80000FFFFFFFFFFF000007FFFFFFFFFE000
001FFFFFFFFF8000000FFFFFFFFF00000001FFFFFFF8000000003FFFFFC00000000003FF
FC0000003C397CB745>I<00000003F03FF8001FF07FFC007FF0FFFC01FFF0FFFC07FFF0
FFFC0FFFF0FFFC1FFFF0FFFC3FFFF0FFFC7FFFF0FFFCFFFFF0FFFDFFFFF0FFFDFFFC00FF
FFFFE000FFFFFF0000FFFFFE0000FFFFF80000FFFFF00000FFFFE00000FFFFC00000FFFF
C00000FFFF800000FFFF800000FFFF000000FFFF000000FFFF000000FFFE000000FFFE00
0000FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FFFE0000
00FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000
FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FFFE000000FF
FE000000FFFE000000FFFE000000FFFE000000FFFE0000007FFE0000003FFC0000002437
78B62F>114 D<0001FFFE0000001FFFFFE000007FFFFFFC0001FFFFFFFF8003FFFFFFFF
E007FFFFFFFFE00FFFFFFFFFE01FFFFFFFFFE01FFFFFFFFFC03FFF0007FFC03FFC00007F
C03FF800001FC07FF8000007C07FF0000001C07FF0000000807FF0000000007FF8000000
007FF8000000007FFC000000007FFF000000007FFFF00000003FFFFF8000003FFFFFFC00
003FFFFFFF80001FFFFFFFE0000FFFFFFFF8000FFFFFFFFC0007FFFFFFFF0003FFFFFFFF
8000FFFFFFFFC0007FFFFFFFC0001FFFFFFFE00007FFFFFFF000007FFFFFF0000003FFFF
F00000001FFFF800000003FFF800000000FFF8000000007FF8000000007FF8200000003F
F8380000003FF87C0000003FF87E0000003FF87F8000007FF87FE00000FFF07FFC0001FF
F07FFFC007FFF0FFFFFFFFFFE0FFFFFFFFFFE0FFFFFFFFFFC0FFFFFFFFFF803FFFFFFFFF
000FFFFFFFFE0001FFFFFFF800001FFFFFC0000000FFFC00002D397CB735>I<003FFC00
0000007FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE0000003FFFFFFFFE007FFFFFFFFF00FFFFFFFFFF00FFFFFFFF
FF00FFFFFFFFFF00FFFFFFFFFF007FFFFFFFFE0000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00
000000FFFE00000000FFFE00000000FFFF00000000FFFF00030000FFFF000700007FFF80
1F80007FFFC0FF80007FFFFFFF80007FFFFFFFC0003FFFFFFFC0003FFFFFFFC0001FFFFF
FE00000FFFFFF0000003FFFF80000000FFF000002A467DC432>I<3FFC000003FFE07FFE
000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE00
0007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE0000
07FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007
FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FF
F0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0
FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FF
FE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE000007FFF0FFFE
000007FFF0FFFE000007FFF0FFFE00000FFFF0FFFE00000FFFF0FFFE00001FFFF0FFFE00
001FFFF0FFFE00003FFFF0FFFE00007FFFF0FFFF0000FFFFF07FFF0003FFFFF07FFFC00F
FFFFF03FFFFFFFF7FFF03FFFFFFFE7FFF01FFFFFFFC7FFF00FFFFFFF07FFF003FFFFFC07
FFF000FFFFF003FFE0001FFF00000000343777B547>I<7FE000000007FEFFF80000000F
FFFFF80000001FFFFFFC0000003FFF7FFC0000003FFE7FFE0000003FFE7FFE0000007FFE
3FFE0000007FFC3FFF0000007FFC3FFF000000FFFC1FFF000000FFF81FFF800001FFF80F
FF800001FFF00FFFC00001FFF00FFFC00003FFF007FFC00003FFE007FFE00003FFE007FF
E00007FFE003FFE00007FFC003FFF0000FFFC001FFF0000FFF8001FFF8000FFF8001FFF8
001FFF8000FFF8001FFF0000FFFC001FFF0000FFFC003FFF00007FFC003FFE00007FFE00
7FFE00003FFE007FFC00003FFF007FFC00003FFF00FFFC00001FFF00FFF800001FFF80FF
F800001FFF81FFF800000FFF81FFF000000FFFC3FFF0000007FFC3FFE0000007FFE3FFE0
000007FFE7FFE0000003FFE7FFC0000003FFF7FFC0000003FFFFFFC0000001FFFFFF8000
0001FFFFFF80000000FFFFFF00000000FFFFFF00000000FFFFFF000000007FFFFE000000
007FFFFE000000007FFFFE000000003FFFFC000000003FFFFC000000001FFFF800000000
0FFFF0000038367DB53F>I<3FFE0000003FFE007FFF0000007FFF007FFF800000FFFE00
3FFFC00001FFFE001FFFC00003FFFC000FFFE00003FFF80007FFF00007FFF00003FFF800
0FFFE00003FFFC001FFFC00001FFFE003FFF800000FFFE003FFF8000007FFF007FFF0000
003FFF80FFFE0000001FFFC1FFFC0000000FFFE3FFF800000007FFF7FFF000000003FFFF
FFE000000001FFFFFFC000000000FFFFFFC000000000FFFFFF80000000007FFFFF000000
00003FFFFE00000000001FFFFC00000000000FFFF8000000000007FFF0000000000003FF
E0000000000003FFE0000000000007FFF000000000000FFFF800000000001FFFFC000000
00001FFFFE00000000003FFFFF00000000007FFFFF8000000000FFFFFFC000000001FFF7
FFC000000003FFE3FFE000000007FFE1FFF00000000FFFC0FFF80000000FFF80FFFC0000
001FFF007FFE0000003FFF003FFF0000007FFE001FFF800000FFFC001FFFC00001FFF800
0FFFE00003FFF80007FFE00007FFF00003FFF00007FFE00003FFF8000FFFC00001FFFC00
1FFFC00000FFFE003FFF8000007FFF007FFF0000003FFF80FFFE0000003FFFC0FFFE0000
001FFFC07FFC0000000FFF803A367EB53F>120 D<0000003FFF80000000007FFF800000
0000FFFF0000000001FFFC0000000003FFF80000000003FFF00000000007FFC000000000
0FFF80000000001FFF00000000003FFE00000000007FF80000000000FFF00000000001FF
E00000000001FF800000000003FF000000000007FE00000000000FF800000000000FF000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000003FFE0000000007FFFFE00000001FFFFFFC0000007FFFFFFF0
00001FFFFFFFF800003FFFFFFFFC0000FFFFFFFFFE0001FFFFFFFFFF0003FFFF80FFFF80
03FFFC001FFFC007FFF00007FFC00FFFE00003FFE00FFFC00003FFE01FFF800001FFF01F
FF800001FFF03FFF000000FFF83FFF000000FFF87FFF000000FFF87FFE000000FFF87FFE
0000007FF87FFE0000007FFCFFFE0000007FFCFFFE0000007FFCFFFE0000007FFCFFFFFF
FFFFFFFCFFFFFFFFFFFFFCFFFFFFFFFFFFFCFFFFFFFFFFFFFCFFFFFFFFFFFFFCFFFFFFFF
FFFFFCFFFFFFFFFFFFF8FFFC0000000000FFFC0000000000FFFE0000000000FFFE000000
00007FFE00000000007FFE00000000007FFE00000000007FFF00000000003FFF00000000
003FFF00000000003FFF80000000001FFF80000000301FFFC0000000700FFFE0000001F0
0FFFF0000007F007FFF800001FF003FFFE00007FF801FFFFC00FFFF800FFFFFFFFFFF800
7FFFFFFFFFF8003FFFFFFFFFF8000FFFFFFFFFE00007FFFFFFFF800000FFFFFFFC000000
3FFFFFE000000001FFFC000036517CCF3F>233 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk ecrm0700 7 3
/Fk 3 111 df<000003E000003FE000003FE0000007E0000003E0000003E0000003E000
0003E0000003E0000003E0000003E0000003E0000003E0000003E0003F83E001FFE3E003
E03BE007800FE00F0007E01F0003E03E0003E07E0003E07C0003E07C0003E0FC0003E0FC
0003E0FC0003E0FC0003E0FC0003E0FC0003E0FC0003E07C0003E07C0003E07E0003E03E
0003E01E0007E01F000FE00F801FF003E073FE01FFE3FE007F03E01F297EA725>100
D<003F0001FFE003E1F00F80F81F007C1F003E3E003E7E001E7E001F7C001FFC001FFC00
1FFFFFFFFFFFFFFC0000FC0000FC0000FC00007C00007E00007E00033E00031F00070F80
0E07C01C03E07800FFE0003F80181C7E9A1E>I<0F81FC00FF8FFF00FF9C0F801FB007C0
0FE007C00FC003E00FC003E00FC003E00F8003E00F8003E00F8003E00F8003E00F8003E0
0F8003E00F8003E00F8003E00F8003E00F8003E00F8003E00F8003E00F8003E00F8003E0
0F8003E01FC007F0FFF83FFEFFF83FFE1F1A7E9925>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl ecrm1095 10.95 50
/Fl 50 235 df<00006000C000006000C00000E001C00000C001800001C0038000038007
0000038007000007800F000007000E00000F001E00001E003C00003C007800003C007800
007800F00000F801F00001F003E00003E007C00007C00F80000FC01F80001F803F00007F
00FE0000FE01FC0000FE01FC00007F00FE00001F803F00000FC01F800007C00F800003E0
07C00001F003E00000F801F000007800F000003C007800003C007800001E003C00000F00
1E000007000E000007800F00000380070000038007000001C003800000C001800000E001
C000006000C000006000C0222C76AB32>19 D<C001800000C001800000E001C000006000
C000007000E00000380070000038007000003C007800001C003800001E003C00000F001E
000007800F000007800F000003C007800003E007C00001F003E00000F801F000007C00F8
00007E00FC00003F007E00001FC03F80000FE01FC0000FE01FC0001FC03F80003F007E00
007E00FC00007C00F80000F801F00001F003E00003E007C00003C007800007800F000007
800F00000F001E00001E003C00001C003800003C00780000380070000038007000007000
E000006000C00000E001C00000C001800000C001800000222C7BAB32>I<000003FE0000
00001FFFC0000000FE01E0000001F80078000007E0001C00000FC0007C00001F8000FE00
003F0001FE00007F0001FE00007E0001FE0000FE0001FE0000FC0000FC0000FC00007800
00FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC00000000
00FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC00007E00
FFFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE0000FC0001FE0000FC0000FE0000FC00007E00
00FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E00
00FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E00
00FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E00
00FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E00
00FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0001FE0000FF00
7FFFF83FFFFC7FFFF83FFFFC7FFFF83FFFFC2E407FBF32>28 D<1C007F00FF80FF80FFC0
FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C00
1C003800700060000A1B78BE19>39 D<0000300000700000E00001C0000380000700000F
00001E00003C00003C0000780000F00000F00001E00001E00003C00003C00007C0000780
000F80000F80000F00001F00001F00001E00003E00003E00003E00003C00007C00007C00
007C00007C00007C00007C0000780000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800007800
007C00007C00007C00007C00007C00007C00003C00003E00003E00003E00001E00001F00
001F00000F00000F80000F800007800007C00003C00003C00001E00001E00000F00000F0
00007800003C00003C00001E00000F000007000003800001C00000E0000070000030145A
77C323>I<C00000E000007000003800001C00000E00000F000007800003C00003C00001
E00000F00000F000007800007800003C00003C00003E00001E00001F00001F00000F0000
0F80000F800007800007C00007C00007C00003C00003E00003E00003E00003E00003E000
03E00001E00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F000
01F00001F00001F00001F00001F00001F00001F00001F00001E00003E00003E00003E000
03E00003E00003E00003C00007C00007C00007C0000780000F80000F80000F00001F0000
1F00001E00003E00003C00003C0000780000780000F00000F00001E00003C00003C00007
80000F00000E00001C0000380000700000E00000C00000145A7BC323>I<1C007F00FF80
FF80FFC0FFC0FFC07FC01CC000C000C000C000C000C001C0018001800380030007000600
0E000C001C003800700060000A1B788819>44 D<FFFFFEFFFFFEFFFFFEFFFFFEFFFFFE17
057F951E>I<1C007F00FF80FF80FF80FF80FF807F001C000909788819>I<0003FC000000
1FFF8000003E07C00000F801F00001F000F80003E0007C0003C0003C0007C0003E000F80
001F000F80001F001F00000F801F00000F803F00000FC03F00000FC03F00000FC03F0000
0FC07E000007E07E000007E07E000007E07E000007E07E000007E0FE000007F0FE000007
F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0
FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE
000007F0FE000007F0FE000007F0FE000007F0FE000007F07E000007E07E000007E07E00
0007E07E000007E07F00000FE03F00000FC03F00000FC03F00000FC03F00000FC01F0000
0F801F80001F800F80001F000F80001F0007C0003E0007C0003E0003E0007C0001F000F8
0000F801F000003E07C000001FFF80000003FC0000243F7CBC2D>48
D<0000C0000003C0000007C000001FC000007FC00007FFC000FFFFC000FF9FC000F81FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D78BC2D>I<
0007FC0000003FFF800000FFFFE00001F00FF800078003FC000F0001FE000E0000FF001C
00007F803800003FC03000003FC07000001FE06000001FE06000001FE0FE00000FF0FF00
000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF07F00000FF01C0000
0FF00000000FE00000001FE00000001FE00000001FC00000003FC00000003F800000007F
800000007F00000000FE00000001FC00000001FC00000003F800000007F00000000FE000
00000FC00000001F800000003E000000007C00000000F800000001F000000003E0000000
03C000000007800000000F000030001E000030003C000030007800003000F000006001E0
00006003C0000060078000006007000000E00FFFFFFFE01FFFFFFFE03FFFFFFFE07FFFFF
FFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0243D7CBC2D>I<0007FC0000003FFF800000FF
FFE00001F807F80007C003FC000F0001FE000E0000FF001C00007F801F80007F803FC000
3FC03FE0003FC03FE0003FC03FE0003FC03FE0003FC03FE0003FC01FC0003FC00700003F
C00000003F800000007F800000007F800000007F00000000FF00000000FE00000001FC00
000003F800000003F00000000FC00000003F0000001FFC0000001FFF800000000FE00000
0003F800000001FC00000000FE000000007F000000007F800000003FC00000003FC00000
003FE00000003FE00000001FE00000001FF00000001FF00C00001FF03F00001FF07F8000
1FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC0003FE0FF80003FE07F00003F
C07000003FC07000007F803800007F801C0000FF000F0001FE0007C003FC0003F80FF000
00FFFFE000003FFF80000007FC0000243F7CBC2D>I<0000000E000000000E000000001E
000000003E000000003E000000007E00000000FE00000000FE00000001FE00000003FE00
000003FE00000006FE0000000EFE0000000CFE00000018FE00000038FE00000030FE0000
0060FE000000E0FE000000C0FE00000180FE00000380FE00000300FE00000600FE00000E
00FE00000C00FE00001800FE00003800FE00003000FE00006000FE0000E000FE0000C000
FE00018000FE00038000FE00030000FE00060000FE000E0000FE000C0000FE00180000FE
00380000FE00300000FE00600000FE00E00000FE00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000001FF000001FFFFFF0001
FFFFFF0001FFFFFF283E7EBD2D>I<060000030007C0000F0007F800FE0007FFFFFC0007
FFFFFC0007FFFFF00007FFFFE00007FFFFC00007FFFF0000063FF8000006000000000600
000000060000000006000000000600000000060000000006000000000600000000060000
000006000000000600000000060000000006000000000601FE0000060FFF8000063E03E0
00067001F80006E000FC0007C0007E000780003F000700003F800600001F800000001FC0
0000001FC00000001FE00000000FE00000000FE00000000FE00000000FF00000000FF000
00000FF00000000FF03E00000FF07F00000FF0FF80000FF0FF80000FF0FF80000FF0FF80
000FF0FF00000FE0FE00001FE0E000001FE06000001FC07000001FC03000003F80380000
3F801C00007F001E0000FE000F0001FC0007C003F80003F00FE00000FFFFC000003FFF00
000007F80000243F7CBC2D>I<00001FE0000000FFF8000003FFFE00000FF01F00001F80
0780003F000380007E000FC000FC001FC001F8003FC003F0003FC003F0003FC007E0003F
C00FE0001F800FC0000F001FC00000001FC00000001F800000003F800000003F80000000
3F800000007F800000007F000000007F01FE00007F07FF8000FF0E03E000FF1C01F000FF
3800FC00FF70007E00FF60003E00FFE0003F00FFC0001F80FFC0001FC0FF80001FC0FF80
001FE0FF80000FE0FF80000FE0FF00000FF0FF00000FF0FF00000FF0FF00000FF0FF0000
0FF0FF00000FF07F00000FF07F00000FF07F00000FF07F00000FF07F00000FF03F80000F
F03F80000FE03F80000FE01F80000FE01F80001FC01FC0001FC00FC0001F800FC0003F80
07E0003F0003F0007E0001F800FC0000FC01F800007E07F000003FFFE000000FFF800000
03FC0000243F7CBC2D>I<300000000038000000003E000000003FFFFFFFFC3FFFFFFFFC
3FFFFFFFFC3FFFFFFFF87FFFFFFFF87FFFFFFFF07FFFFFFFE070000000E060000001C060
0000038060000003006000000700C000000E00C000000C00C000001C00C0000038000000
0030000000007000000000E000000001C000000001800000000380000000070000000007
000000000E000000000E000000001C000000001C000000003C0000000038000000007800
0000007800000000F800000000F000000001F000000001F000000001F000000003F00000
0003F000000003F000000007F000000007E000000007E000000007E00000000FE0000000
0FE00000000FE00000000FE00000000FE00000001FE00000001FE00000001FE00000001F
E00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000000FC0
0000000780000026407BBD2D>I<0003FC0000001FFF8000007FFFE00000FC03F80001E0
00FC0003C0003E000780001F000F00000F000E00000F801E000007801C000007C03C0000
03C03C000003C03C000003C03E000003C03E000003C03F000003C03F000007C03F800007
801FE0000F801FF0000F001FFC001E000FFE003C000FFF80780007FFC0F00003FFF1E000
01FFFF800000FFFF0000003FFF0000001FFFC000000FFFE000001FFFF8000078FFFC0001
F07FFE0003C01FFF0007800FFF800F0003FFC01F0001FFC01E00007FE03C00003FE07C00
000FE078000007F078000003F0F8000003F0F0000001F0F0000001F0F0000000F0F00000
00F0F0000000F0F0000000F0F8000000E078000001E078000001E07C000001C03E000003
C01E000007801F00000F000FC0001E0007E0007C0001FC03F80000FFFFE000001FFF8000
0003FC0000243F7CBC2D>I<0003FC0000001FFF0000003FFFC00000FE07F00001F801F8
0003F000FC0007E0007C000FE0007E001FC0003F001F80003F003F80001F803F80001F80
7F80001F807F00001FC07F00001FC0FF00001FC0FF00000FE0FF00000FE0FF00000FE0FF
00000FE0FF00000FE0FF00000FF0FF00000FF0FF00000FF0FF00000FF0FF00000FF0FF00
000FF07F00001FF07F00001FF07F80001FF03F80001FF03F80003FF01F80003FF00FC000
7FF007C0006FF007E000EFF003F001CFF000F8038FF0007C070FF0001FFE0FE00007F80F
E00000000FE00000001FE00000001FE00000001FC00000001FC00000001FC00000003F80
0000003F800F00003F001F80007F003FC0007E003FC0007E003FC000FC003FC001F8003F
8001F8003F0003F0001C0007E0001E001FC0000FC07F000003FFFE000001FFF80000003F
C00000243F7CBC2D>I<1C007F00FF80FF80FF80FF80FF807F001C000000000000000000
000000000000000000000000000000000000000000000000000000000000000000001C00
7F00FF80FF80FF80FF80FF807F001C00092778A619>I<0000000000000E000000000000
3C000000000000F0000000000007C000000000001F00000000000078000000000001E000
00000000078000000000001E000000000000F8000000000003E000000000000F00000000
00003C000000000000F0000000000003C000000000001F0000000000007C000000000001
E00000000000078000000000001E00000000000078000000000003E000000000000F8000
000000003C000000000000F0000000000000F00000000000003C0000000000000F800000
00000003E0000000000000780000000000001E0000000000000780000000000001E00000
000000007C0000000000001F00000000000003C0000000000000F00000000000003C0000
000000000F00000000000003E0000000000000F80000000000001E000000000000078000
0000000001E0000000000000780000000000001F00000000000007C0000000000000F000
00000000003C0000000000000E373279AF46>60 D<E0000000000000780000000000001E
00000000000007C0000000000001F00000000000003C0000000000000F00000000000003
C0000000000000F00000000000003E0000000000000F80000000000001E0000000000000
780000000000001E0000000000000780000000000001F00000000000007C000000000000
0F00000000000003C0000000000000F00000000000003C0000000000000F800000000000
03E0000000000000780000000000001E0000000000001E00000000000078000000000003
E000000000000F8000000000003C000000000000F0000000000003C000000000000F0000
000000007C000000000001F00000000000078000000000001E0000000000007800000000
0001E000000000000F8000000000003E000000000000F0000000000003C000000000000F
0000000000003C000000000001F0000000000007C000000000001E000000000000780000
00000000E0000000000000373279AF46>62 D<003FF80000FFFF0003C01FC00F0007F01C
0001F8380001FC700000FE600000FE7C00007FFE00007FFF00007FFF00007FFF00007FFF
00007F7E00007F3C0000FF000000FE000000FE000001FC000003F8000007F000000FE000
000F8000001F0000003E0000003C00000078000000F8000000F0000000E0000001E00000
01C000000180000003800000038000000300000003000000030000000300000003000000
030000000300000003000000030000000300000003000000000000000000000000000000
000000000000000000000000000000000000000000000000070000001FC000003FE00000
3FE000003FE000003FE000003FE000001FC0000007000020407BBF2B>I<0000003FF000
0C000003FFFE001C00001FFFFF801C00007FE00FC03C0000FF0001F07C0003FC0000787C
0007F000003CFC001FE000000FFC003FC0000007FC007F80000003FC00FF00000003FC01
FE00000001FC01FC00000000FC03FC00000000FC07F8000000007C07F8000000007C0FF0
000000003C0FF0000000003C1FE0000000001C1FE0000000001C3FE0000000001C3FC000
0000001C3FC0000000000C7FC0000000000C7FC0000000000C7FC0000000000C7F800000
000000FF800000000000FF800000000000FF800000000000FF800000000000FF80000000
0000FF800000000000FF800000000000FF800000000000FF800000000000FF8000000000
00FF800000000000FF8000000000007F8000000000007FC000000000007FC0000000000C
7FC0000000000C3FC0000000000C3FC0000000000C3FE0000000000C1FE0000000001C1F
E000000000180FF000000000180FF0000000001807F8000000003807F8000000003003FC
000000007001FC000000006001FE00000000E000FF00000001C0007F8000000380003FC0
00000780001FE000000F000007F000001E000003FC00003C000000FF0000F00000007FE0
07E00000001FFFFF8000000003FFFE00000000003FF0000036427BBF41>67
D<FFFFFFFFFC000000FFFFFFFFFF800000FFFFFFFFFFE0000000FFC0001FF80000007F80
0003FE0000007F800000FF0000007F8000003F8000007F8000001FC000007F8000000FE0
00007F80000007F000007F80000003F800007F80000001FC00007F80000001FC00007F80
000000FE00007F80000000FF00007F800000007F00007F800000007F80007F800000003F
80007F800000003FC0007F800000003FC0007F800000003FC0007F800000003FE0007F80
0000001FE0007F800000001FE0007F800000001FE0007F800000001FE0007F800000001F
F0007F800000001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F80
0000001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F800000001F
F0007F800000001FF0007F800000001FE0007F800000001FE0007F800000001FE0007F80
0000001FE0007F800000003FE0007F800000003FC0007F800000003FC0007F800000003F
80007F800000007F80007F800000007F80007F800000007F00007F80000000FE00007F80
000000FE00007F80000001FC00007F80000003F800007F80000007F800007F8000000FF0
00007F8000001FE000007F8000003FC000007F800000FF0000007F800003FE000000FFC0
001FF80000FFFFFFFFFFF00000FFFFFFFFFF800000FFFFFFFFFC0000003C3E7DBD45>I<
0000003FF0000C00000003FFFE001C0000001FFFFF801C0000007FE00FC03C000000FF00
01F07C000003FC0000787C000007F000003CFC00001FE000000FFC00003FC0000007FC00
007F80000003FC0000FF00000003FC0001FE00000001FC0001FC00000000FC0003FC0000
0000FC0007F8000000007C0007F8000000007C000FF0000000003C000FF0000000003C00
1FE0000000001C001FE0000000001C003FE0000000001C003FC0000000001C003FC00000
00000C007FC0000000000C007FC0000000000C007FC0000000000C007F80000000000000
FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF800000
00000000FF80000000000000FF80000000000000FF80000000000000FF80000000000000
FF80000000000000FF80000000000000FF8000001FFFFFF07F8000001FFFFFF07FC00000
1FFFFFF07FC00000000FFE007FC000000003FC003FC000000003FC003FC000000003FC00
3FE000000003FC001FE000000003FC001FE000000003FC000FF000000003FC000FF00000
0003FC0007F800000003FC0007F800000003FC0003FC00000003FC0001FE00000003FC00
01FE00000003FC0000FF00000003FC00007F80000007FC00003FC0000007FC00001FE000
000FFC000007F800001CFC000003FC0000387C000000FF0000F03C0000007FF007E01C00
00001FFFFF800C00000003FFFE0000000000003FF00000003C427BBF47>71
D<FFFFFFC0FFFFFFC0FFFFFFC001FFE000007F8000007F8000007F8000007F8000007F80
00007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F80
00007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F80
00007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F80
00007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F80
00007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F80
00007F8000007F8000007F8000007F800001FFE000FFFFFFC0FFFFFFC0FFFFFFC01A3E7D
BD21>73 D<FFFFFFF00000FFFFFFF00000FFFFFFF0000000FFE0000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000000007F80000000007F8000000000
7F80000000007F80000000007F80000000007F80000003007F80000003007F8000000300
7F80000003007F80000003007F80000007007F80000006007F80000006007F8000000600
7F80000006007F8000000E007F8000000E007F8000000E007F8000001E007F8000001E00
7F8000003E007F8000007E007F800000FE007F800001FC007F800007FC00FFC0003FFCFF
FFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFC303E7DBD38>76 D<001FF0000000FFFC000003
E03F00000F000FC0001C0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC0
00FC003FC0007E001F80007E000F00007E000000007E000000007E000000007E00000000
7E0000001FFE000003FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E
001FC0007E003F80007E007F80007E007F00007E007F00007E03FE00007E03FE00007E03
FE00007E03FE0000FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061F
C00E1F8E0FF03C0FFC03FFF007F8003FC003E0282A7CA82D>97 D<01F800000000FFF800
000000FFF800000000FFF80000000007F80000000003F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F807F8000001F81FFF000001F878
0FC00001F9E003F00001FB8001F80001FF0000FC0001FE00007E0001FC00003F0001FC00
001F8001F800001F8001F800001FC001F800000FC001F800000FE001F800000FE001F800
0007E001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F800
0007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007E001F800
000FE001F800000FE001F800000FE001F800000FC001F800001FC001F800001F8001FC00
003F0001FE00003F0001F600007E0001F70000FC0001E38001F80001C1C003E00001C0F8
1F800001803FFE0000000007F000002C407EBE32>I<0001FF0000000FFFE000003F00F8
00007C001E0001F800070003F0001F0007E0003F800FC0007F800FC0007F801F80007F80
1F80007F803F00003F003F00001E007F000000007F000000007E00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE000000007F000000007F000000007F000000003F000000C03F8000
00C01F800001C01FC00001800FC000038007E000070003F000060001F8001E0000FC0038
00003F01F000000FFFC0000001FE0000222A7DA828>I<00000001F800000000FFF80000
0000FFF800000000FFF80000000007F80000000003F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F8000000FF01F8000007FFC1F800001F80F1F80000
7C0039F80001F8001DF80003F0000FF80007E00007F8000FC00003F8000FC00003F8001F
800001F8003F800001F8003F000001F8007F000001F8007F000001F8007F000001F8007E
000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE
000001F800FE000001F800FE000001F800FE000001F800FE000001F8007E000001F8007F
000001F8007F000001F8003F000001F8003F800001F8001F800003F8001F800003F8000F
C00007F80007E0000FF80003F0000DFC0001F8003DFE0000FC0071FFF0003F01E1FFF000
0FFF81FFF00001FE01F8002C407DBE32>I<0003FC0000001FFF8000007E07E00000F801
F00001F000F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F00001F
803F00000F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0
FFFFFFFFC0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000FE
000000007E000000007F000000007F000000007F000000003F000000C03F800000C01F80
0001C00FC00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F01
F000000FFFC0000001FE0000222A7DA828>I<00001FC00000FFF00003F0380007C0FC00
0F81FE001F81FE003F01FE003E01FE007E01FE007E00FC00FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC0000FFFFFF00FFFFFF00FFFFFF0000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000001FE00007FFFFE007FFFFE007FFFFE001F407FBF1C>I<000000007E00
0003FC01FF00000FFF078780003E07CE0F8000FC03FC0F8001F801F80F8003F000FC0700
03E0007C000007E0007E000007E0007E00000FC0003F00000FC0003F00000FC0003F0000
0FC0003F00000FC0003F00000FC0003F00000FC0003F00000FC0003F000007E0007E0000
07E0007E000003E0007C000003F000FC000001F801F8000001FC03F0000001BE07C00000
038FFF0000000303FC000000070000000000070000000000070000000000070000000000
07800000000007800000000007C00000000003E00000000003FFFFF0000001FFFFFE0000
01FFFFFF8000007FFFFFE00001FFFFFFF80007C0001FF8001F800003FC003F000000FE00
3E0000007E007C0000003E007C0000003F00F80000001F00F80000001F00F80000001F00
F80000001F00F80000001F00FC0000003F007C0000003E007E0000007E003F000000FC00
1F800001F8000FC00003F00003F0000FC00000FE007F0000003FFFFC00000003FFC00000
293D7EA82D>I<01F800000000FFF800000000FFF800000000FFF80000000007F8000000
0003F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F803FC000001F80FFF800001F83C0FC00001F8F003E00001F9C003F00001FB8001F8
0001FB0001F80001FF0000FC0001FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFFF07FFFF82D3F7EBE32>I<01C00007
F0000FF8000FF8000FF8000FF8000FF80007F00001C00000000000000000000000000000
000000000000000000000000000000000000000000000001F8007FF8007FF8007FF80007
F80003F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80003FC00FFFFE0FFFFE0FFFFE013
3D7EBC19>I<01F800FFF800FFF800FFF80007F80003F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80003FC00FFFFF0FFFFF0FFFFF0143F7EBE19>108 D<01F803FC0001FE0000FFF80F
FF8007FFC000FFF83C0FC01E07E000FFF8F003E07801F00007F9C003F0E001F80003FB80
01F9C000FC0001FB0001F98000FC0001FF0000FF80007E0001FE0000FF00007E0001FE00
00FF00007E0001FC0000FE00007E0001FC0000FE00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0003FC0001FE0000FF00FFFFF0
7FFFF83FFFFCFFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFC46287EA74B>I<01F803FC00
00FFF80FFF8000FFF83C0FC000FFF8F003E00007F9C003F00003FB8001F80001FB0001F8
0001FF0000FC0001FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0003FC0001FE
00FFFFF07FFFF8FFFFF07FFFF8FFFFF07FFFF82D287EA732>I<0001FE0000000FFFC000
003F03F000007C00F80001F0003E0003E0001F0007C0000F8007C0000F800F800007C01F
800007E01F000003E03F000003F03F000003F07E000001F87E000001F87E000001F87E00
0001F8FE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE0000
01FCFE000001FCFE000001FC7E000001F87E000001F87E000001F87F000003F83F000003
F03F000003F01F800007E00F800007C00FC0000FC007C0000F8003E0001F0001F0003E00
00FC00FC00003F03F000000FFFC0000001FE0000262A7DA82D>I<01F807F80000FFF81F
FF0000FFF8780FC000FFF9E003F00003FB8001F80001FF0000FC0001FE00007E0001FC00
007F0001FC00003F8001F800001F8001F800001FC001F800001FC001F800000FE001F800
000FE001F800000FE001F800000FF001F8000007F001F8000007F001F8000007F001F800
0007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F800
000FE001F800000FE001F800000FE001F800000FE001F800001FC001F800001FC001F800
003F8001FC00003F0001FE00007F0001FE0000FE0001FF0001FC0001FB8003F80001F9C0
07E00001F8F81F800001F83FFE000001F807F0000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000003FC00000000FFFFF0
000000FFFFF0000000FFFFF00000002C3A7EA732>I<0000FF000C000007FFC01C00001F
80F01C00007E00381C0000FC001C3C0003F8000E3C0007F000077C0007E000037C000FC0
0003FC001FC00001FC003F800001FC003F800000FC007F000000FC007F000000FC007F00
0000FC007F000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE00
0000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FF000000FC007F00
0000FC007F000000FC007F000000FC003F800000FC003F800001FC001FC00001FC000FC0
0003FC000FE00003FC0007E00007FC0003F0000EFC0001F8001CFC00007E0078FC00003F
01E0FC00000FFFC0FC000001FE00FC0000000000FC0000000000FC0000000000FC000000
0000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000
0000FC0000000000FC0000000000FC0000000000FC0000000001FE000000007FFFF80000
007FFFF80000007FFFF82D3A7DA730>I<03F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183
FC03F383FC01F703FC01F603FC01F601F801FE006001FC000001FC000001FC000001FC00
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800
0001F8000001F8000001F8000001F8000003FC0000FFFFF800FFFFF800FFFFF8001E287E
A723>I<007FC06003FFF8E007C03DE01E000FE03C0003E0780001E0780001E0700000E0
F00000E0F0000060F0000060F8000060F8000060FC000060FF0000007FC000007FFE0000
3FFFE0001FFFFC0007FFFE0003FFFF80007FFFC00007FFE000003FE000000FF0C00003F0
C00001F8C00000F8E00000F8E0000078E0000078F0000078F0000078F8000078F80000F0
FC0000F0FC0001E0FE0001C0F7800780F1E01F00E0FFFC00C01FE0001D2A7DA824>I<00
180000001800000018000000180000001800000018000000380000003800000038000000
380000007800000078000000F8000000F8000001F8000003F8000007F800001FFFFFC0FF
FFFFC0FFFFFFC001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8000001F8000001F8000001F8000001F8006001F8006001F8006001F8006001F8006001
F8006001F8006001F8006001F8006000FC00E000FC00C000FC00C0007E01C0003F038000
1F87000007FE000001F8001B397EB723>I<01F80000FC00FFF8007FFC00FFF8007FFC00
FFF8007FFC0007F80003FC0003F80001FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80001FC0001F80001FC0001F80001FC0001F80003FC00
00F80003FC0000FC0007FC0000FC000EFE00007C001CFF00003E0038FFF8001F80F0FFF8
0007FFE0FFF80000FF00FC002D297EA732>I<FFFFC007FFE0FFFFC007FFE0FFFFC007FF
E007FC0001FF0003F800007C0003F80000780001F80000700001FC0000700000FC000060
0000FC00006000007E0000C000007E0000C000007F0001C000003F00018000003F000180
00001F80030000001F80030000001FC0070000000FC0060000000FC00600000007E00C00
000007E00C00000007F01C00000003F01800000003F01800000001F83000000001F83000
000001FC7000000000FC6000000000FC60000000007EC0000000007EC0000000007FC000
0000003F80000000003F80000000001F00000000001F00000000001F00000000000E0000
0000000E0000002B287EA630>I<00000E000000001F000000003F000000007F00000000
FF00000001FE00000003FC00000007F00000000FC00000001F800000003E000000007800
0000007000000000400000000000000000000000000000000000000003FC0000001FFF80
00007E07E00000F801F00001F000F80003E0007C0007C0003E000FC0003F001F80001F00
1F80001F803F00001F803F00000F807F00000F807F00000FC07E00000FC07E00000FC0FE
00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00000000FE00000000FE00000000FE00
000000FE00000000FE000000007E000000007F000000007F000000007F000000003F0000
00C03F800000C01F800001C00FC00001800FC000038007E000070003F0000E0001F8001C
0000FC003800003F01F000000FFFC0000001FE0000223B7DB928>233
D<0000C000000001E000000003F000000007F80000000F3C0000001E1E0000001C0E0000
0038070000007003800000E001C00001C000E00003800070000700003800020000100000
00000000000000000000000000000003FC0000001FFF8000007E07E00000F801F00001F0
00F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F0000
0F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFF
C0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
7E000000007F000000007F000000007F000000003F000000C03F800000C01F800001C00F
C00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F01F000000F
FFC0000001FE0000223B7DB928>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray -187 -413 a Fl(2)-142
-443 y Fk(nde)-39 -413 y Fl(5,)31 b(2016-2017)2630 b(In\351galit\351s)
31 b(et)g(fonctions)p -187 -376 4134 4 v Black -187 -210
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -187 -210 a -187 -210 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -187 -210 a -187 -210 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -187
-210 a 0 TeXcolorgray -187 -210 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -187 -210 a 0 TeXcolorgray
91 x Fj(1)69 b(F)l(onctions)44 b(croissantes,)f(fonctions)h
(d\351croissantes)f(sur)i(un)g(intervalle)p 0 TeXcolorgray
0 TeXcolorgray -187 87 a Fi(1.1)57 b(Id\351e)37 b(intuitive)p
0 TeXcolorgray -96 259 a Fl(Id\351e)30 b(:)g(une)h(fonction)g
Fh(f)40 b Fl(est)30 b(croissan)m(te)h(lorsque)g(si)e
Fh(x)i Fl(augmen)m(te,)h(alors)e Fh(f)10 b Fg(\()p Fh(x)p
Fg(\))31 b Fl(augmen)m(te.)-96 372 y(<Dessin>)-96 485
y(Commen)m(t)h(formaliser)f(cette)g(notion,)g(la)g(d\351\034nir)g
(rigoureusemen)m(t)15 b(?)p 0 TeXcolorgray -187 728 a
Fi(1.2)57 b(D\351\034nition)p 0 TeXcolorgray -187 859
a Ff(D\351\034nition)34 b(1)p -187 900 537 5 v -137 1171
5 272 v -96 999 a Fe(Soit)h Fh(f)43 b Fe(une)35 b(fonction)h
(d\351\034nie)f(sur)g(un)f(in)m(terv)-5 b(alle)36 b Fh(I)42
b Fe(de)35 b Fd(R)p Fe(.)f(Dire)h(que)f Fh(f)44 b Fe(est)34
b(croissan)m(te)i(sur)e Fh(I)41 b Fe(signi\034e)35 b(que)g(p)s(our)-96
1112 y(tous)30 b(nom)m(bres)i Fh(x)512 1126 y Fc(1)581
1112 y Fe(et)f Fh(x)739 1126 y Fc(2)808 1112 y Fe(de)g
Fh(I)7 b Fe(,)30 b(si)g Fh(x)1174 1126 y Fc(1)1239 1112
y Fb(\024)25 b Fh(x)1387 1126 y Fc(2)1456 1112 y Fe(alors)31
b Fh(f)10 b Fg(\()p Fh(x)1815 1126 y Fc(1)1854 1112 y
Fg(\))25 b Fb(\024)g Fh(f)10 b Fg(\()p Fh(x)2152 1126
y Fc(2)2191 1112 y Fg(\))p Fe(.)p 3983 1171 V -137 1176
4126 5 v 0 TeXcolorgray -187 1388 a Ff(Exemple)35 b(1.)p
0 TeXcolorgray 45 w Fl(<Graphe)d(d'une)f(fonction)g(croissan)m(te)g
(puis)f(d\351croissan)m(te>)-187 1577 y Ff(D\351\034nition)k(2)p
-187 1618 537 5 v -137 1889 5 272 v -96 1717 a Fe(Soit)c
Fh(f)39 b Fe(une)31 b(fonction)g(d\351\034nie)g(sur)e(un)i(in)m(terv)-5
b(alle)31 b Fh(I)37 b Fe(de)30 b Fd(R)p Fe(.)g(Dire)g(que)g
Fh(f)39 b Fe(est)30 b(d\351croissan)m(te)i(sur)e Fh(I)36
b Fe(signi\034e)31 b(que)f(p)s(our)-96 1830 y(tous)g(nom)m(bres)i
Fh(x)512 1844 y Fc(1)581 1830 y Fe(et)f Fh(x)739 1844
y Fc(2)808 1830 y Fe(de)g Fh(I)7 b Fe(,)30 b(si)g Fh(x)1174
1844 y Fc(1)1239 1830 y Fb(\024)25 b Fh(x)1387 1844 y
Fc(2)1456 1830 y Fe(alors)31 b Fh(f)10 b Fg(\()p Fh(x)1815
1844 y Fc(1)1854 1830 y Fg(\))25 b Fb(\025)g Fh(f)10
b Fg(\()p Fh(x)2152 1844 y Fc(2)2191 1830 y Fg(\))p Fe(.)p
3983 1889 V -137 1894 4126 5 v 0 TeXcolorgray -187 2162
a Fi(1.3)57 b(tableaux)36 b(de)h(va)m(riations)p 0 TeXcolorgray
-96 2334 a Fl(La)42 b(phrase)f(:)h(\023)27 b Fh(f)51
b Fl(est)41 b(croissan)m(te)h(sur)f Fg([)p Fh(a;)15 b(b)p
Fg(])29 b Fl(\024)41 b(p)s(eut)g(\352tre)h(remplac\351e)h(par)f(:)f(on)
h(a)f(le)g(tableau)i(de)e(v)-5 b(ariations)42 b(:)-187
2447 y(<tableau)32 b(de)f(v)-5 b(ariations)30 b(idoine>.)p
0 TeXcolorgray -187 2634 a Ff(Exercice)36 b(1.)p 0 TeXcolorgray
45 w Fl(6)30 b(p.)h(46)f(\(sauf)g(q.)g(3\),)h(12)f(p.)h(47,)g(28)f(p.)h
(48,)f(34)h(p.)f(49)p 0 TeXcolorgray -187 2921 a Fj(2)69
b(Maximum,)43 b(minimum)g(d'une)h(fonction)g(sur)h(un)g(intervalle)p
0 TeXcolorgray -187 3095 a Ff(D\351\034nition)34 b(3)p
-187 3136 537 5 v -137 3520 5 384 v -96 3236 a Fe(Soit)c
Fh(f)40 b Fe(une)30 b(fonction)h(d\351\034nie)g(sur)f(un)g(in)m(terv)-5
b(alle)32 b Fh(I)37 b Fe(de)30 b Fd(R)p Fe(.)g(Dire)g(que)g
Fh(f)39 b Fe(admet)31 b(un)g(maxim)m(um)g(sur)f Fh(I)37
b Fe(en)31 b Fh(a)e Fe(signi\034e)-96 3348 y(que)35 b(p)s(our)h(tout)h
Fh(x)d Fb(2)g Fh(I)7 b Fe(,)36 b Fh(f)10 b Fg(\()p Fh(x)p
Fg(\))34 b Fb(\024)g Fh(f)10 b Fg(\()p Fh(a)p Fg(\))p
Fe(.)36 b(Dire)g(que)g Fh(f)44 b Fe(admet)37 b(un)f(minim)m(um)i(sur)d
Fh(I)43 b Fe(en)36 b Fh(a)g Fe(signi\034e)g(que)g(p)s(our)g(tout)-96
3461 y Fh(x)25 b Fb(2)g Fh(I)7 b Fe(,)30 b Fh(f)10 b
Fg(\()p Fh(x)p Fg(\))25 b Fb(\025)g Fh(f)10 b Fg(\()p
Fh(a)p Fg(\))p Fe(.)p 3983 3520 V -137 3525 4126 5 v
0 TeXcolorgray 3172 6035 a Fa(Lyc\351e)21 b(\311mile)f(Loub)r(et,)f(V)
-5 b(alence)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
