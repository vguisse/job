%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: interro1_23_11_2012.dvi
%%CreationDate: Tue Nov 22 08:24:13 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFRM1095 SFBX1095 CMR10 CMMI10 CMSY10 CMMI9 SFRM0600
%%+ SFRM0500
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o interro1_23_11_2012.ps
%+ interro1_23_11_2012.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.11.22:0824
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 645 2012-02-12 09:09:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.13, 2011/11/21.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2010/10/02 $
% Version         : 0.62 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 328 2010-05-24 15:56:43Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.06, 2011/09/18
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  mtrx setmatrix TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  pop pop pop pop 
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-3dplot.pro 0 0
%% $Id: pst-3dplot.pro 298 2010-03-13 08:46:53Z herbert $
%%
%% This is file `pst-3dplot.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-3dplot.tex'
%%
%% Herbert Voss <voss _at_ PSTricks.de>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-3dplot' is a PSTricks package to draw 3d curves and graphical objects
%%
%%
%% version 0.31 / 2010-02-20  Herbert Voss <hvoss _at_ tug.org>
%% with contributions of Darrell Lamm <darrell.lamm _at_ gtri.gatech.edu<
%%            
%
/tx@3DPlotDict 200 dict def
tx@3DPlotDict begin
%
/printDot { gsave 2 copy 2 0 360 arc fill stroke grestore } def
%
/saveCoor { 
  dzUnit mul /z ED
  dyUnit mul /y ED
  dxUnit mul /x ED
} def
%
/3Dto2D { % true or false on stack
  { RotatePoint } if
  1 { %  dummy loop, will run only 1 time, allows exit 
    coorType 0 le {                                               % the default |
      /x2D x leftHanded not { neg } if Alpha cos mul y Alpha sin mul add def %  /\  co system
      /y2D x leftHanded { neg } if Alpha sin mul y Alpha cos mul add neg Beta sin mul z Beta cos mul add def
      exit } if
    coorType 1 le { 
      /x2D y x Alpha 90 sub sin mul sub def  %  |/_  co system, no shortened x axis
      /y2D z x Alpha 90 sub cos mul sub def 
      exit } if
    coorType 2 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x 0.5 mul sub def
      /y2D z x 0.5 mul sub def 
      exit } if
    coorType 3 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x -0.5 mul sub def
      /y2D z x -0.5 mul sub def 
      exit } if
    coorType 4 le { % Normalbild in Trimetrie Skalierung so, dass coorType2
       /x2D x -0.5 mul y 1 mul add def
       /y2D x -0.5 mul y -0.25 mul add z 1 mul add def
       exit } if
  } repeat
} def
/ConvertTo2D { true 3Dto2D } def
/ConvertTo2DWithoutRotating { false 3Dto2D } def
%
/Conv3D2D { /z ED /y ED /x ED ConvertTo2D x2D y2D } def
%
/ConvertToCartesian {
  /latitude exch def
  /longitude exch def
  /Radius exch def
  1 { %  dummy loop, will run only 1 time, allows exit
    SphericalCoorType 0 le {                                               % the default |
     /z { Radius latitude sin mul } def
     /x { Radius longitude cos mul latitude cos mul } def
     /y { Radius longitude sin mul latitude cos mul } def
      exit } if
    SphericalCoorType 2 le {
     /z { Radius longitude cos mul } def
     /x { Radius longitude sin mul latitude cos mul} def
     /y { Radius longitude sin mul latitude sin mul } def
      exit } if
  } repeat
} def
%
/ConvCylToCartesian { % r phi h -> x y z
  3 1 roll			% h r phi
  /Phi ED
  /Radius ED			% h->z on stack
  Radius Phi cos mul exch 	% x z
  Radius Phi sin mul exch	% x y z
} def
%
/SphericalTo2D {
  x y z ConvertToCartesian ConvertTo2D
} def
%
/CylinderTo2D { %  r phi h
  x y z ConvCylToCartesian ConvertTo2D
} def
%
/convertStackTo2D {
  counttomark
  /n ED /n3 n 3 div cvi def
  n3 {
    n -3 roll
    SphericalCoor { ConvertToCartesian } { saveCoor } ifelse
    ConvertTo2D
    x2D xUnit y2D yUnit
    /n n 1 sub def
  } repeat
} def
%
% the angle in the parameter equation for an ellipse is not proportional to the real angle!
% phi=atan(b*tan(angle)/a)+floor(angle/180+0.5)*180
%
/getPhi { % on stack: vecA vecB angle 
  3 dict begin
  /angle exch def /vecB exch def /vecA exch def
  angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan 
  angle 180 div .5 add floor 180 mul add } ifelse 
  end
} def
%
/RotSet (set ) def
%
/eulerRotation false def
% Matrix multiplication procedure
/matmul {

  /M@tMulDict 20 dict def
  M@tMulDict begin
  /m2 ED
  /m1 ED
  m1 dup length 2 sub 2 getinterval aload pop
  /col1max ED
  /row1max ED
  m2 dup length 2 sub 2 getinterval aload pop
  /col2max ED
  /row2max ED
  /m3 row1max col2max mul 2 add array def
  m3 dup length 2 sub row1max col2max 2 array astore putinterval
  0 1 row1max 1 sub {
   /row ED
   0 1 col2max 1 sub {
    /col ED
    /sum 0 def
    0 1 col1max 1 sub{
    /rowcol ED
    sum
    m1 row col1max mul rowcol add get
    m2 rowcol col2max mul col add get
    mul add 
    /sum ED
    } for
    m3 row col2max mul col add sum put
   } for
  } for
  m3
  end % end of M@tMulDict

} def
%
/SetMQuaternion {

  /MnewTOold 11 array def

  /Qu@ternionDict 30 dict def
  Qu@ternionDict begin

  /normRotVec  xRotVec yRotVec zRotVec 3 array astore VecNorm  def
  normRotVec 0 gt
  {/xRotVecNorm xRotVec normRotVec div def
   /yRotVecNorm yRotVec normRotVec div def
   /zRotVecNorm zRotVec normRotVec div def
   RotAngle}
  {/xRotVecNorm 1 def
   /yRotVecNorm 0 def
   /zRotVecNorm 0 def 
   0} ifelse

  2 div dup
  /q0 exch cos def
      sin dup dup
  /q1 exch xRotVecNorm mul def
  /q2 exch yRotVecNorm mul def
  /q3 exch zRotVecNorm mul def

  /q0q0 q0 q0 mul def
  /q0q1 q0 q1 mul def
  /q0q2 q0 q2 mul def
  /q0q3 q0 q3 mul def

  /q1q1 q1 q1 mul def
  /q1q2 q1 q2 mul def
  /q1q3 q1 q3 mul def

  /q2q2 q2 q2 mul def
  /q2q3 q2 q3 mul def

  /q3q3 q3 q3 mul def

  MnewTOold 0 q0q0 q1q1 add q2q2 sub q3q3 sub put
  MnewTOold 1 q1q2 q0q3 sub 2 mul put
  MnewTOold 2 q1q3 q0q2 add 2 mul put

  MnewTOold 3 q1q2 q0q3 add 2 mul put
  MnewTOold 4 q0q0 q1q1 sub q2q2 add q3q3 sub put
  MnewTOold 5 q2q3 q0q1 sub 2 mul put

  MnewTOold 6 q1q3 q0q2 sub 2 mul put
  MnewTOold 7 q2q3 q0q1 add 2 mul put
  MnewTOold 8 q0q0 q1q1 sub q2q2 sub q3q3 add put

  MnewTOold 9 3 put
  MnewTOold 10 3 put

  end % end of Qu@ternionDict

} def
%
/SetMxyz {
  1.0 0.0 0.0  0.0 1.0 0.0  0.0 0.0 1.0  3 3  11 array astore /MnewTOold ED
  RotSequence cvx exec % Now create a new MnewTOold using xyz, etc.
} def
%
/ConcatMQuaternion {
  MnewTOold % Push onto stack
  SetMQuaternion % Uses [xyz]RotVec and RotAngle to make MnewToOld 
  MnewTOold matmul /MnewTOold ED
} def
%
/ConcatMxyz {
  MnewTOold % Push onto stack
  SetMxyz % Uses RotX, etc. to set MnewTOold 
  MnewTOold matmul /MnewTOold ED
} def
%
/RotatePoint{
  MnewTOold x y z  3 1  5 array astore matmul
  0 3 getinterval aload pop 
  /z ED 
  /y ED 
  /x ED 
} def
%
/makeMoldTOnew {
  /MoldTOnew 11 array def
  MoldTOnew 0 MnewTOold 0 get put
  MoldTOnew 1 MnewTOold 3 get put
  MoldTOnew 2 MnewTOold 6 get put
  MoldTOnew 3 MnewTOold 1 get put
  MoldTOnew 4 MnewTOold 4 get put
  MoldTOnew 5 MnewTOold 7 get put
  MoldTOnew 6 MnewTOold 2 get put
  MoldTOnew 7 MnewTOold 5 get put
  MoldTOnew 8 MnewTOold 8 get put
  MoldTOnew 9               3 put
  MoldTOnew 10              3 put
} def
%
/RotXaxis { 
  eulerRotation 
  {1 0 0}
  {makeMoldTOnew MoldTOnew  1 0 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotX def
  ConcatMQuaternion
} def
/RotYaxis { 
  eulerRotation 
  {0 1 0}
  {makeMoldTOnew MoldTOnew  0 1 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotY def
  ConcatMQuaternion
} def
/RotZaxis { 
  eulerRotation 
  {0 0 1}
  {makeMoldTOnew MoldTOnew  0 0 1  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotZ def
  ConcatMQuaternion
} def
/xyz { RotXaxis RotYaxis RotZaxis } def
/yxz { RotYaxis RotXaxis RotZaxis } def
/yzx { RotYaxis RotZaxis RotXaxis } def
/xzy { RotXaxis RotZaxis RotYaxis } def
/zxy { RotZaxis RotXaxis RotYaxis } def
/zyx { RotZaxis RotYaxis RotXaxis } def
/quaternion { } def % Null
%
/VecNorm { 0 exch { dup mul add } forall sqrt } def
%
/UnitVec {			% on stack is [a]; returns a vector with [a][a]/|a|=1 
  dup VecNorm /norm ED
  norm 0 lt {/norm 0 def} if
  { norm div } forall 3 array astore } def
%
/AxB {				% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a2 b3 mul a3 b2 mul sub
    a3 b1 mul a1 b3 mul sub
    a1 b2 mul a2 b1 mul sub
    3 array astore } def
%
/AaddB {			% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a1 b1 add a2 b2 add a3 b3 add
    3 array astore } def
%
/AmulC {			% on stack is [a] and c; returns [a] mul c
    /factor ED { factor mul } forall 3 array astore } def
%
%
/setColorLight { % expects 7 values on stack C M Y K xL yL zL
% les rayons de lumi�re
  xLight dup mul yLight dup mul zLight dup mul add add sqrt /NormeLight ED
% the color values
  /K ED
  /Yellow ED
  /Magenta ED
  /Cyan ED
} def
%
/facetteSphere {
  newpath
  /Xpoint Rsphere theta cos mul phi cos mul CX add def
  /Ypoint Rsphere theta sin mul phi cos mul CY add def
  /Zpoint Rsphere phi sin mul CZ add def
  Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end moveto
  theta 1 theta increment add {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi cos mul CY add def
    /Zpoint Rsphere phi sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end  lineto
  } for
  phi 1 phi increment add {
    /phi1 ED
    /Xpoint Rsphere theta increment add cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta increment add sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  theta increment add -1 theta {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi increment add cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi increment add cos mul CY add def
    /Zpoint Rsphere phi increment add sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  phi increment add -1 phi {
    /phi1 ED
    /Xpoint Rsphere theta cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  closepath 
} def
%
/MaillageSphere { 
% on stack must be x y z Radius increment C M Y K 
  setColorLight
  /increment ED
  /Rsphere ED
  /CZ ED
  /CY ED
  /CX ED
  /StartTheta 0 def
  /condition { PSfacetteSphere 0 ge } def
  -90 increment 90 increment sub {%
    /phi ED
    StartTheta increment 360 StartTheta add increment sub {%
      /theta ED
      % Centre de la facette
      /Xpoint Rsphere theta increment 2 div add cos mul phi increment 2 div add cos mul CX add def
      /Ypoint Rsphere theta increment 2 div add sin mul phi increment 2 div add cos mul CY add def
      /Zpoint Rsphere phi increment 2 div add sin mul CZ add def
      % normale a la facette
      /nXfacette Xpoint CX sub def
      /nYfacette Ypoint CY sub def
      /nZfacette Zpoint CZ sub def
      % test de visibilite
      /PSfacetteSphere 
        vX nXfacette mul
        vY nYfacette mul add
        vZ nZfacette mul add
      def
      condition {
        gsave
        facetteSphere
        /cosV { 1 xLight nXfacette mul
          yLight nYfacette mul
          zLight nZfacette mul
          add add
          NormeLight
          nXfacette dup mul
          nYfacette dup mul
          nZfacette dup mul
          add add sqrt mul div sub } bind def
        Cyan cosV mul Magenta cosV mul Yellow cosV mul K cosV mul setcmykcolor fill 
	grestore
%	0 setgray
        showgrid { facetteSphere stroke } if
      } if 
    } for
    % /StartTheta StartTheta increment 2 div add def
  } for
} def
%
%---------------------- Cylinder ---------------------------
%
/PlanCoupeCylinder { %
  /TableauxPoints [
    0 1 359 { 
      /phi ED 
      [ Radius phi Height ConvCyl2d ] % on décrit le cercle
    } for
  ] def
  newpath
  TableauxPoints 0 get aload pop moveto
  1 1 359 { TableauxPoints exch get aload pop lineto } for
  closepath
} def
%
/facetteCylinder { % 
    newpath
    Radius phi currentHeight ConvCyl2d moveto
    phi 1 phi dAngle add  { % loop variable on stack
      Radius exch currentHeight ConvCyl2d lineto        
    } for
    phi dAngle add -1 phi { %	fill dHeight
      Radius exch currentHeight dHeight add ConvCyl2d lineto 
    } for
    closepath
  } def % facette
%
/MaillageCylinder { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K
      /dHeight ED /dAngle ED /Height ED /Radius ED
      /CZ ED /CY ED /CX ED } if
%     
    0 dHeight Height dHeight sub {
      /currentHeight ED
      0 dAngle 360 dAngle sub {
        /phi ED
% Normal vector of the center
        /nXfacetteCylinder Radius phi dAngle 2 div add cos mul CX add def 
        /nYfacetteCylinder Radius phi dAngle 2 div add sin mul CY add def 
        /nZfacetteCylinder currentHeight dHeight 2 div add CZ add def 
        /NormeN 
          nXfacetteCylinder dup mul
          nYfacetteCylinder dup mul
          nZfacetteCylinder dup mul
          add add sqrt def
        NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilité
       /PSfacetteCylinder 
    	    vX nXfacetteCylinder mul
            vY nYfacetteCylinder mul add
            vZ nZfacetteCylinder mul add def
       condition {
         facetteCylinder
         /cosV 
	   1 xLight nXfacetteCylinder mul
           yLight nYfacetteCylinder mul
           zLight nZfacetteCylinder mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
          showgrid { 
            0 setgray
            facetteCylinder % drawing the segments
            stroke } if
       } if
     } for
    } for
} def
%
%------------------------ Cylinder type II -----------------------
%
/MoveTo { Conv3D2D moveto } def
/LineTo { Conv3D2D lineto } def

/IIIDEllipse { % x y z rA rB startAngle endAngle Wedge
  /dAngle 1 def
  /isWedge ED
  /endAngle ED
  /startAngle ED
  /radiusB ED
  /radiusA ED
  startAngle cos radiusA mul startAngle sin radiusB mul 0 
  isWedge { 0 0 moveto LineTo }{ MoveTo } ifelse
  /Angle startAngle def
  startAngle dAngle endAngle {
    /Angle ED
    Angle cos radiusA mul Angle sin radiusB mul 0 LineTo  
  } for
  isWedge { 0 0 lineto } if
} def

/IIIDCircle { % x y z r startAngle endAngle Wedge
  7 3 roll % startAngle endAngle Wedge x y z r
  dup      % startAngle endAngle Wedge x y z r r
  8 -3 roll
  IIIDEllipse 
} def

/IIIDWedge { % x y z r startAngle endAngle
  true IIIDCircle
} def

/IIIDCylinder {% x y z r h start end wedge
  /isWedge ED
  /increment ED
  /endAngle ED
  /startAngle ED
  /height ED
  /radius ED
  startAngle increment endAngle {
    /Angle ED
    radius Angle 0 ConvCylToCartesian MoveTo  
    radius Angle height ConvCylToCartesian LineTo  
  } for
  stroke
} def
%
%---------------------- Box ---------------------------
%
/PlanCoupeBox { % x y z
  /TableauxPoints [
      [ CX CY CZ Height add ConvBox2d ] % top or bottom
      [ CX CY Depth add CZ Height add ConvBox2d ]
      [ CX Width add CY Depth add CZ Height add ConvBox2d ] 
      [ CX Width add CY CZ Height add ConvBox2d ] 
      [ CX CY CZ Height add ConvBox2d ] % bottom
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 3 {
      TableauxPoints exch get aload pop
      lineto } for
    closepath
} def
%
/facetteBox { % 
    newpath
    dup
    1 eq { % back
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    2 eq { % right
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    3 eq { % left
      CX Width add CY CZ ConvBox2d moveto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
    } if
    4 eq { % front
      CX CY Depth add CZ ConvBox2d moveto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
    } if
    closepath
  } def % facette
%
/TestPlane { % on stack x y z of the plane center and # of plane
  /nZfacetteBox ED /nYfacetteBox ED /nXfacetteBox ED
  /Plane ED
  /NormeN 
    nXfacetteBox dup mul
    nYfacetteBox dup mul
    nZfacetteBox dup mul
    add add sqrt def
  NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilite
  /PSfacetteBox 
    vX nXfacetteBox mul
    vY nYfacetteBox mul add
    vZ nZfacetteBox mul add def
  condition {
    Plane facetteBox
         /cosV 
	   1 xLight nXfacetteBox mul
           yLight nYfacetteBox mul
           zLight nZfacetteBox mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         0 setgray
         Plane facetteBox % drawing the segments
         stroke
       } if
} def
%
/MaillageBox { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K 
      /Depth ED /Height ED /Width ED
      /CZ ED /CY ED /CX ED } if
%
% Normal vector of the box center
  /PlaneSet [
    [ Width 2 div CX add 
      CY 
      Height 2 div CZ add ] % normal back
    [ CX 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal right
    [ Width CX add 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal left
    [ Width 2 div CX add 
      Depth CY add 
      Height 2 div CZ add ] % normal front
  ] def
  PlaneSequence length 0 eq { % user defined?
    Alpha abs cvi 360 mod /iAlpha ED
    iAlpha 90 lt { [ 1 2 3 4 ]  
      }{ iAlpha 180 lt { [ 2 4 1 3 ]  
        }{ iAlpha 270 lt { [ 3 4 1 2 ] }{ [ 3 1 4 2] } ifelse } ifelse } ifelse 
  }{ PlaneSequence } ifelse 
  { dup 1 sub PlaneSet exch get aload pop TestPlane } forall
} def
%
%--------------------------- Paraboloid -----------------------------
/PlanCoupeParaboloid {
    /Z height store
    /V {Z sqrt} bind def
    /TableauxPoints [
      0 1 359 { 
        /U ED [ U U Z V calculate2DPoint ] % on decrit le cercle
      } for
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 359 {
      /compteur ED
      TableauxPoints compteur get aload pop
      lineto } for
    closepath
} def
%
/facetteParaboloid{
    newpath
    U U Z V calculate2DPoint moveto
    U 1 U increment add  {%
      /U1 ED
      U1 U1 Z V calculate2DPoint lineto
    } for
    Z pas10 Z pas add pas10 add{
      /Z1 ED
      /V {Z1 sqrt} bind def
      U1 U1 Z1 V calculate2DPoint lineto
    } for
    U increment add -1 U {%
      /U2 ED
      U2 U2 Z pas add V calculate2DPoint lineto
    } for
    Z pas add pas10 sub pas10 neg Z pas10 sub {
      /Z2 ED
      /V Z2 abs sqrt def
      U U Z2 V calculate2DPoint lineto
    } for
    closepath
} def % facette
%
/MaillageParaboloid {
  % on stack true or false for saving values
    { setColorLight  % expects 7 values on stack C M Y K xL yL zL 
%      /CZ ED /CY ED /CX ED 
    } if    
    0 pas height pas sub {%
      /Z ED
      /V Z sqrt def
      0 increment 360 increment sub {%
        /U ED
% Centre de la facette
        /Ucentre U increment 2 div add def
        /Vcentre Z pas 2 div add sqrt def
% normale à la facette
        /nXfacetteParaboloid 2 Vcentre dup mul mul Ucentre cos mul radius mul def
        /nYfacetteParaboloid 2 Vcentre dup mul mul Ucentre sin mul radius mul def
        /nZfacetteParaboloid Vcentre neg radius dup mul mul def
        /NormeN {
          nXfacetteParaboloid dup mul
          nYfacetteParaboloid dup mul
          nZfacetteParaboloid dup mul
          add add sqrt} bind def
        NormeN 0 eq {/NormeN 1e-10 def} if
% test de visibilit�
       /PSfacetteParaboloid vX nXfacetteParaboloid mul
                  vY nYfacetteParaboloid mul add
                  vZ nZfacetteParaboloid mul add def
       condition {
         facetteParaboloid
         /cosV 1 xLight nXfacetteParaboloid mul
           yLight nYfacetteParaboloid mul
           zLight nZfacetteParaboloid mul
           add add
           NormeLight
           NormeN mul div sub def
         Cyan Magenta Yellow K  
         cosV mul 4 1 roll cosV mul 4 1 roll cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         showgrid {
           0 setgray
           facetteParaboloid
           stroke } if
       } if
     } for
    } for
} def
%
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
% u -> e_u with |e_u|=1 
/vector-unit { 1 dict begin
  dup vector-length 1 exch div 
  vector-scale
  end 
} def
%
% u v -> u+v
/vector-add { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch { 	% i u[i]
    v 		% i u[i] v
    2 index get add 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
  end 
} def
%
% u v -> u-v
/vector-sub { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch {	% i u[i]
    v 		% i u[i] v
    2 index get sub 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
end } def
%
% [v] c -> [c.v]
/vector-scale { 1 dict begin
  /c exch def
  [ exch
  { 		% s i u[i]
    c mul	% s i u[i] v 
  } forall
  ]
  end } def
%
%
% [u] [v] -> [u x v]
/vector-prod { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  [ y zp mul z yp mul sub
   z xp mul x zp mul sub
   x yp mul y xp mul sub ]
end
} def
%
% [u] [v] -> u.v
/vector-mul { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  x xp mul y yp mul add z zp mul add
end
} def
%
% [x y z ... ] -> r
% watch out for overflow
/vector-length { 1 dict begin
dup
% find maximum entry
/max 0 def
{ % max 
  abs dup max gt {
    % if abs gt max
    /max exch def
  } {
    pop
  } ifelse
} forall
max 0 ne {
  0 exch 
  {  % 0 v[i]
    max div dup mul add
  } forall
  sqrt
  max mul
} {
  pop 0
} ifelse
end } def
%
end % tx@3DPlotDict
%

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: cm-super-ts1.enc 0 0
% This file is generated from `TS1uni.map' and `glyphlist.txt', `gl-other.txt'
/TS1Encoding [
% 0x00
/Grave
/Acute
/Circumflex % ?
/Tilde % ?
/Dieresis
/Hungarumlaut
/Ring % ?
/Caron
/Breve % ?
/Macron
/Dotaccent % ?
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
% 0x10
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash % ?
/threequartersemdash
/afii61664.cap % ?
/arrowleft
/arrowright
/tieaccentlowercase % ?
/tieaccentcapital % ?
/tieaccentlowercase.new % ?
/tieaccentcapital.new % ?
/.notdef
/afii61664.asc % ?
% 0x20
/uni2422
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl % ?
/period
/fraction
% 0x30
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
% 0x40
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/uni2127
/.notdef
/circle
% 0x50
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Omega
/.notdef
/.notdef
/.notdef
/uni301A
/.notdef
/uni301B
/arrowup
/arrowdown
% 0x60
/grave.ts1
/.notdef
/born % ?
/divorced % ?
/died % ?
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf % ?
/married % ?
/musicalnote
/.notdef
% 0x70
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow % ?
/hyphendbl.alt % ?
% 0x80
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/uni2016
/perthousand
/bullet
/uni2103
/dollaroldstyle
/centoldstyle
/florin
/colonmonetary
/uni20A9
/uni20A6
% 0x90
/guarani % ?
/peso % ?
/lira
/recipe % ?
/uni203D
/gnaborretni % ?
/dong
/trademark
/uni2031
/paragraph.alt % ?
/uni0E3F
/afii61352
/discount % ?
/estimated
/openbullet
/uni2120
% 0xA0
/uni2045
/uni2046
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft % ?
/logicalnot
/uni2117
/registered
/macron.ts1
% 0xB0
/degree
/plusminus
/twosuperior
/threesuperior
/acute.ts1
/mu
/paragraph
/periodcentered
/uni203B
/onesuperior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro % or /Euro.alt
% 0xC0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xD0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xE0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xF0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: SFRM0500
%!FontType1-1.0: SFRM0500 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0500, tcrm0500, larm0500, lbrm0500, lcrm0500, rxrm0500.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0500 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-211 -338 1855 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E586FAA5A6FAE6CB4E80BF6467C89E1A97B49A0DDC14A3C22BD6C9A3110530
C714F12B664F8DAF49E7EE5F26A1FB39FB391585B92BC143D8AF7A1DC5828C76
FB778196507F6ED7110C374F71354507E7B06D427EEF72F711D631F86C25A6E9
925C4A2DB93AE4A00FA4C9F8545D5FA4D703130E507323519A405812AA421062
F49FB854B4609D87682D0A4FD3B9BA33B2D25091F366D87C885FF732408D32E7
A8BA8B0AA51E0F13E4A5D7A70070334AE4261F477CA6C958111FAD37A7CCD04C
D8B0CF660CC25C087D9E1DBA8EE4869EA22FC33ED6FBC968D1118422FD213F9E
4DE09D8C881B27E43B46DCCE9E2B7ACCF0FDEC76071C638EFF82CE7140F47015
4989DF72FF5A863C785657413A01FE7D0DFF6DC80111DC022CF3C7527269AE6A
F593356351153315F1988814C6020B73672E573048FAE6EB62D784B055001E59
A19509258D7B194D57F0E5C4C0C66AA7D5D54CBC4EF9E83155978E48D01D7913
0B2216D451B4DD0F51D39287B08047EF0E9553C125E00405138078F533037280
E0EC61CC1EE3A221A96B274A72BDF0145BBD8B3D09DF401AD597FA7054E3D205
CB3483DA30F2E7621DF3F48D108A7B3BF2A4430768F7659478256AACA9317F9B
6FADB8E3E012D2C4CCD0F2BB85BA167774D5427CAEEEC17BC8F508F68AD5FC5B
2DC4ECB93EB18BA078A9E36AE927969D3A3EBCE1CB7C2B075980B6451E534D7D
CCD715EA30EB367961CAAB8E76DB1F329200080EB3739412659725A3E249253C
DB26244CC83A330497398495C3F136A9D6E4007AB3389389663FD46D6C80AFCD
03982615563EDE73605E33B1B0E519149240530C52B8625B50A2FF63325FA62E
76F7045FB77AAA45F1574B9906B4610C16C97EC9C93466FDEF6E41E9FDC847D1
A7FC826CAAA9635A1EF10072593939005142F61809EF49D7C198B927C02675A6
44607478F4AD4A152257FEB6408B04B6111B3770D9D1DD0C6F1D8704969CDE7A
32F8996CA03F642F5DE54E2165E1C01475DC2246C43CA286DFFAC5241015ADA7
C4102DC0100066E14908970B9AF8824628ECBD9E1B33C6C9938B78FC9BB1C805
C51E1A2D296BDF05D292D7F6A5A0FD2C18FEAF1789725CFECEDEADDC389C4E45
02E25B0157964C8C345D7E6DA459F54F6389004BAC5C0B20E59EBC6082FABE25
08EB3B634F656E97438F9B605DE828384EE2B34DA8A960546C2561D8D361B90C
51E0AE25212A52D33A08EC17ACC7C22E06A5D8CC3DF457371FA658A4199ABB5C
36BC967DF98C1B17BA3FF405113F17918DCD399C09D0247C1E89B2A8AEC59A3F
41E2C8B7EAB6BB88A9B65C3239687800B071E8288F1AF5732A5CBFA7B37FE708
5A248C48DD46D9E3EFF6B81FCE5D4EB1EE731847FD050AF0DAF55832342BA4F4
C57BDFE6BD073F2376E44EB97829968ECA4E0CD35AFEAC7BD6A32BC116541818
5517A1647196843C73BA9936EC80F2EA98312A5C98E09AD2608D90FEC2F9C91D
A0DA7DCFA33037F0AC991A9DD7600501B8FBE59C3473A98E06CB648B4023F2CB
37BE4BB58A45B8254495F8862BF21628708C98A1BE0C561289A53EF90CFA34AA
413033CE7E801178FB40CC4C99AEBE3DE4FC7EFC356B116DF444345D2257519F
57701F342C67EE05B6CF0DD8E708355C1C943C64A342974F55929C016914FB7A
7A67BA19A5203A1307077F0AFA72B96B0B3EC6D56DCBEF94CACC518F0BE22F7A
4FB3160C473D6FAEBE77B7C26E175FA8BFA903F17D2E82FFDAE1815203AF1817
30646B5D6DBF430CA68F4D7C4E85BFB031118204544114DB706ED110AD9A3D6C
4DD4BB3ADF55F4C8A7A78AEB5FA4F7B5DFACEE6C0BACA04D67CE6AA4FC6A36A4
51D0FD937886D7ED3F2062C0FB9A5D0825799255C227DA8E320393D40D424BF3
38B19E557E7569F71564F9F0AFEE25C1A759DA7778FFDC310045D90F4FE52124
18FB7458F9F802B57CA0AD1F684ABB249E78366D8E93741A4C1DDC130BB9BC15
6B0C58E975ED942B90C3F2A2248AB6F7FEF0CD8565633F5DCD87B85D0A115382
74C0D8C990211592D6E928AB406DD16C34DCB5DA798010F76FBCD75D6A7CE8BE
5F379D4F36BB1C767358540F98BF7D57FF8C1AF8DEE7C73D21C2EF9BD7AE2C42
4487F79655D92248B512D9929C11653117028A379FA4FA423357628EF05A78F0
3E841887B573C1E165BED94D287C207BA3F799C17BC7F3F368481E40E7D90C33
77584790AF5A8BAD5D996B17F661A123DADFE470069F7013E01828CA3AC791B3
E711F632DCA511240C983B8B3B8E8722B6BEB22D924C473B761DF8EE5BE6E225
C55598BF343A1ADD11CC8733097E65D13F6BB15B45EE9FA75E2CB94C1A948C0A
BBC923323D0B916DDB44D87F7D1CDC27F190B06EC053D712A357E0278A662AD8
9AA556940CD03A5FF4FD9A23AD79BC8009820A9D7383C10F6D914B3E7579E2F0
B5F37758FBFA88369D0D839104DFABE61F4165003FE0BF9544104C2EC5D14C6D
6F457B27AB65FB6F4D40CF9C87603B19F9797120E085C7CFD4CB4274661D9582
E5FDB1DD55C759AB853D4D34771107241DAC1CC3C79A0297F6DF3BA3AE165B61
A169DDC1D006E0430BE615AB2FF44267E134D247848CEE1E283DDBB86F73CE3B
2BEFF110EE0ECC75DF4C6A6A60BE9217C24EEBE0664BCF7008167142F43F542A
62302F8B19C8F7EAE85DAF68E64FB833A5974BBDFA70075A9225B77090FC9326
8653647AD018CA5CDFE029D8155A5A7ACA7B8E12BE8D69A606AD38CCA4777312
BFFB53CC6B32D9D1999D6F90C4DE9D83A08479F3B1E8BCAB1777DA41064F94F1
7A4A1CDC8A14AC86DDAAD910A85D696075B4940B1A7B34C917A08DDDE97D9180
ABA37D2F0405FC314AB457EF84B4CECF5EAF0CAE799CF60EF34EFA245CAA37BA
AC0808FB10315C8C9921B93DE67BA8284879F4F04FAACAD5A17F4876EDAD14C8
CB198BD619F1A79AC9BA473EAC1F8833BB78C3FFAD3540FBA36F93A61934E1CF
5B7E82D101232199F55A7B7AE3B2E133600207A256EAAF61837F4FF9CD6ADA9F
CE763F5B08FBD9B21015A30F225CBB2943FA3190CDB5540149643F2111724889
6FF4EFCCADBDDA29266D238C0E7C800E6370D991BA34676B1A70623D392CB0EE
8C3C475D1F6C5B5B693C1636F456752CA3558BBEEF59606354AD4A6B726C0217
6DF5BA5CFD52ED66918F252747423C9CBDAD9C30E93DB25E64475C22E7952000
36D413CD4316990557A0939B5898ABF14DAFE4CA4729D00D1EFA7E5634C3A62D
8EF40B50A4BC239EBF7CE7DC5954D296971E82F7FC211E1453F193546B3770F1
6E220FD46131B9284891417B54A81B08B5FBE6351C775A2DDEB0E51DD0653924
281F254FC8A135610C3E75682D78AF7495280A63EDFBAC9B5BF5782FF48C2D74
EAF5D173E21ED3A05C0EA432E2C24278F117B96D7FE4D08DD68520C497F7A926
BCFAEFA92D1CBBC4316EB29842A5B72E5EEA0ADA703FCDA71B2F50D23E951D0A
44BCEDA0C4DFE275CF792CB4A48732764C40C3D3D82375A008D38C74B161A800
FDF831DFCBF3816C7A095D6428F6F7703414FACDD0993E654E72028390CE59D5
4CE093669C3DB6EE90E0B7F99B119BFEE6396B6774BA82FCF824907A72492DAB
15267C8AEA3DDB4F8630A197E3928C065A6FE954E0D7B0170E534514F0ED765E
061CDA069C1E3F320297C88600C780BEE103DB6AEAF89AA0764E82699DB69609
A7338FB728B56B22AB4C01AF82C6F9B862736D867D927772803D958E753D56BF
C9D8253D20088D1BEFA38DFED64A77674F90A9F3F62014A59159D28EEB4D51A4
4A20C66E1E7122697E62E4081D5F3269C7B3A2D6F721B4CFBDCCFF1BED30BEAB
890DD6AA6884E9E9D47FEFD2A56C190EB19152E4BBD8688E4C9A891D0DD80A5A
0A010BB54447D16BDC35C3C99A0E81FF6818FD14B9B6D41977104AF92A6EE793
8A36C5AB76A2C1916EE599ECF4C17DCD009BB3E4643D86013978168A44BB075A
EF26AFE67BE1FFC2494E24654B5E115722E3B5982BE1764272E0FB99EF0AFE13
427E0DA7F980561DBCC7D54B1BC1B9AE91F963E1D24F98564BAEEF44057BB151
3B35426515EF069361DB7C74C2741D9AF99C49F1983579A30AAEF5E15A6FBBE4
04E2A5F6FF00D2F662E0281571BF1C68259BB1BB88E64BDFAE35CD5CB56A2DB5
4D66BCF146221638F93B29D9C8157577A68A5F2CE7F880A790CF14F063989F89
7208B777EEBA748F9AB9DBD5C10FF066BB0EC4074A2DA43ACC97D99BFAEFDDE1
D0925A7FE71C5274F606E14399F08141D420A7D171A9B3E3D90FC8F92372C3B9
A5870687BED3ED7AF5D06C23A7B1C0E16F3CAB1FB5AB70C92F1612E2F772E07C
D09E659C502D14884FF032A43817CA2E536208334DBD171724B230CA49F791EE
579801427AEF43834A3B623EE6308B33F865E8C78B03968BBA4454A33CFE7FD1
96C9254B8BF11D2B34E35FB98512F623FCEC960B719C2782BFAC149C2B09B300
D6160544414C1DD16FA343AF06E69BC7A08968C003BE208BA9E14636CDAAAEC4
637F79AB9DC059743E29682DD31C0FDC5CC3CB53564F6C9A4F501AF32FD8B5ED
051965873AB4645892A3032BC29C75B5EB6BD4FEAC5861C134080D23859E7387
C3DE9CDC3C861F663350128178A0F79A5709E2329EC6DA179601DF1348D48E48
DA348FF3D27AE53C4969D45645ECC6B9F49BD4A184B3382D3A886F004E48A987
EE709E7035146CE7A0CF9A7C0270756637C9164C8BE877F68AA9E2F664ADBB2E
BB66CA1F213288B26BC8C3F9F7FB125AC97F952DC8AE62B71C808693E66B33D3
D4FC762880B58DF85D424834BA1C6DF455ED32F1F0507C8A3C1DB49E91FA1C9A
B928680D1AD07D3EF483F53DC1B160F8FF4303657821DA8DD730ADC01B50442E
1D185BC7B7EB89B0BE25E4F55C5C24DB390B13DBE7D33AD85C6A571BDAC4894B
14F43474EE4926E8364817A93238298A7B3D35098C598D327946F9ED347BD4F6
2C080F64B13447815E4D981E86115348F7DF8AC6A6DA34EC67A258CEABC579A8
D808BC1EA137B0B90AA85F50C05092185419AED71F564A1BF732626B6F55C3A0
330EF7F951F35799BCCDFFD73A427A9126A9C76A0F271AB557F5843880349CC7
4C43983B339B1EA97AD1C68EF86B3E728A64E1981F850C02C6203908C0654DE0
42864A1D5AA1A65E99D52BFF26DECBFA3045942DB1C919E0F94FDB120D3E4457
B5539A862C93438EFB345385822D64823A847925921AFF53D813DEA19E78AC27
73FEB605160EB3DF0B3720FF466970B965D0B7381EA1EF0C659555F2ABDC3514
7244290871E8BBCAE2F14C00E308EC630E1834E79873EA3E0B47C3BA14ED403D
1B4EDF0DDEC217336872019CDDD59A11625B6145E19406AEBDAEDB312FAD2335
1607F5C2E7376B7BF06321F4026AADC6D64CD35D907DAE068C755A7D1DCA5D48
CFF737309F2E9FA31C38F01FA6BB929B7D278093A86569A5B8F4E042D1D0DDF0
A49EBEAD19B2E9AE89A65C8FBDBCEE4B905F7287E6C611570C24D2A0C36363A3
B14E0B3ABB8D46C6F19AE914D2E24A596DEF299974B6663A378FFED6820FC2DA
47824B074160730C679A92C31D142D351E0CF1930E183234691D8F4A42F9E8F6
C860B3946D7234C576598D4E425E6518A0A417E91959C5DE9801962A3BE03CA9
6739519E7A5869F375D093E9AE3222D5F968D86FC7A693AE4E6C759D18AF2E68
790A8E264C5D5AD12936EEE94C0B84C00BA51943AFC404C14A6C0F3441CA7080
04964E4582DD5AD548FBC8B92B77DC4B6728315266C0F5724566F3E762FFDD47
92FF706E24C0AF00B88701B58B320496C39BA298EB0A601A94455B2C7E12DBE0
0E91A3DD4CCEB0A322FD7439737BD2D74C3C61C61824D1958E865287A1E57EEB
7775397289B13F3C0D9D6EA10F4F780FBCB40BCF801B371219D3DB3DC55E8808
1808AB8A493BC71FB09322F90D66F6E93AE2E85FB09BD22ED68D1B820362A2C1
AC63C86005E73CF431DBB9F635E4DF768464B5C4BE9E6EE4B257902439CBEA07
91D3A0EE0A5316F9F40FA453C1DD1425A15C887DDC3F530456D6A5598E3E30DA
B29449B42D35388C5D8C26368388DE70920B952D1CBC5E40D2852E8CD9AC588E
2A6C31619F14354D70BACE74C2054B2F0E172C8AC420BD0DA240FDB4B1999A40
DF241505A22078A72A2F43816BDAE9EEB9CBFCD3A83D7C6B5CE58381EF6581C6
ABFCC594D28303614722B9A33EED607789103D70FC7B0C7DD2C8A89BFF0EF2AA
58DA3662289FF129CA0A23C0112734EA50A82A3E16D6B490673720FD6A84B18D
97C290149984F17FD443934CBC9E9025EB1562468422C7704CF4EB34062FA49A
B90AF028658E64F3BCD9391F0BC631AB8362F78A93B8E845191EEEE85CB885D9
CDC33C28FDDF8B550E3E7EC028F73E0289545AA5BA984F105C58A0CC80D7A7DF
0453FB324D770F7112D3543150F87754C6F2A5E26F7440CAB36919BC25948932
9659C3AC03CFA2D6EC42440357B621ACED6ECB6872B5A4EF12D2954DD2D6D1B8
D2337114396B7FAC8EDDD3FAF50DE99070D5D3B0A5A3FAB3255F89CAF1DABBA1
BF5E69BE839B7728FFDF0D51B2F874A2E19614A15C92AA33097B3C7B9818D3B7
D3B7A9C57C6984E8A1310C9AF4FF497D54824DC7429ACD831B00F9708EB1ECB3
581944CCCDBFFB7A8CF23DAE6EB76BD707DA7220F27680F58A154C524663AA05
7BE2C823A4126BDB2D872832CA3B7AABA4E5860851EA4310000966FC750BBD12
87E12BB8B613752A602821B4ADEEBEA1E478EBF5015DA9043C1FC7137647B1CF
44D215C19097657F51EB4333E36F949D9A92E4960AACC2011E842E103CFB1229
24855642A67A99FCCA94BDE4CA0CFC61724687EED3173E67B2924E293DBDA6F1
CAD49D2FF5573283A8D9B404C04C72699732400EDAD7906328F7CBBF38C5C66A
163C7A39715296CD5939B26A068ABABF6798F6EA8EB5F9410D24FB6CBA16B7A8
654B95B35FE54950FFF8882E01A506926FCC96A7B621E8CD0D840054AB340E5B
25A740AA83A53CDFF88ED1ABCC5CD0E715ED9333A1A185DD573AD8350FCEB905
9D0A12F0E358EAB0EBE6B76E576780C1621225A259A61D04E594E6A149CF8CB5
3B48BC458ECB29DB3B12E93E9BFF27EF0108342D68B5C88E5424042A5983E44B
77F361AF2B18BE63F299454F461AE32BF4355F860128995EB7CE8AB4CEA372A4
8C82A681EEBF0FB695968E32C051B376C42D7BE6D5B62B597EF2230BDAB3F002
5F8783A4400CD702B48EE3C53E46C536C34709E5223CEEA0A86C9C89D9BAD324
0D6FF27AF9D54A3CD7A77156ECFCF3C065E7D057944694E7CB6098B0BD07C1AA
8E038B8DF9FA6DE9E1A505C81CC95BC665D78C7CA8B1A71F63EA804BC63FB0EB
6EF5432691C91AD95A28858F39CF27C45923F721194EC0051F70FA13C410FAFA
C56DCBE06F9156A30768599392AEA03F90ECE5DAE3E973D146316BF9BA0AA77B
A40DA8E0AD131F1A67716DC6A07A7C91C1C99ABEFFC56993AB7B2D1F1F6FE286
E7862F6E8D3E1806EF69482015FAF8928B814DF5223B94F37BDF09DD3158A163
E2E0753A66DCE85044D65BFEB8C78DAE2B9C375974F34D058E78A5E2B31D2AA1
EC9C6062832309BF16B8D17F9FF2194B96C0C0446D212BEF4ABC1A7FF088DB3F
1846E41606DD510D2C7D0BE9DD139C9B9961BEED657159198DFC48995AFC77EE
D2D210FB51C9517F1E01E50AD85973E73B3447EEBE6FBC51D8DFC71FC9E98661
DE1C37014DC52E459263815459BA2D699B66449E414B3AFB82E9BAC5CA56F19E
724FC44A1EED5FA28F10A55F99FC6F65A71B56E557371B5C6A817DB4E0D69B3D
F988E4DF9AECB657C8DC04ED4E0B87379DD916618215AE43C04D58988D00402D
F8794B1D73940EF42B7958B39D4D7BE19965A9845BBFD1CFCFD6E038204382D9
9E026DE9307561A0CA750876FD4C64F5B3A864A886A8D7E350753727F8ECC424
EFCFA0DB2EDB45E13804E96C81C132E26F08D3DB7A1CD5A3E4CD9AF5CC4F225C
AB1B0F800B9746BF9282B91F5842FCD0D0FBEF707B8FB92EA58FD6661207C7E9
B6FC7746D687300F90ECEA17F062BE3F57FD2F6DA950B68EF6AF1DD0DC39B8E2
D010486076F4825A0AF1593D3D6592C0788E59485A06EB118283F7907A829EB9
B313B9B76B11A43CFD64DFFDF223A07FFBB71286E8FC1AA09EA7D3C5E553AB89
7E1D4B39958998D5798664FE39FF4B33596101264C75F1C3A742F71DF4962039
87018C30EDFBF4BA558F6FBA61C95548CF5F45CC9BDDDBFFE7E6AC3B8A68C529
8F563EC6DA1F5C2015847725373AFDD25534FE57C583A30090540EDB4956ADE8
30F9CEC9E47617273A11692F6162086CA756BA00EFF2F69E73F8175268820C3B
1B8960CA31C5E10BBE2AAAF25197FB64AD9FC55AB3C2B84306176F7AB7126971
6E972FDB8AD62C98E41501101AF7EB03916D04C885E161DAB614185F16340D86
5A1996E6A6DEECD51F1463A922E378FB7F982ACB149F388742C36BFEF08A6FCB
E2943A5CC2987D4F4F13362D7ADDC3D3BC7DA1EA7D8DE3DB4C880791D8482E9D
9773843607C355FE14B475F24AB6974E13D88C626FAADDE044E3C5A02D6B7493
4E1CA2A19470E3278BE72D0270E12D1DEEDAE0D53E94106BBE5B477C96F71B75
8A6AC0A17AFEF6D76501D740462B21BB06A88DC601CE3DA0A78AE6D8D0B709F1
5E70470AA5B281ECA4092535BFE9FB964000782CB5BF8D4BE40B060C2233D9AE
5D06B7064DDF4364EDCB98FB4A45423F9F4625BFB22EBE875C0E8D393BDC32EA
3DB4AC283C5DB47854302CCC9AB7AFEF434F585F218A1665C6320EFB421D9CB8
9B2FC5F3FC381B2FE8997EC131EC9F3DC89191A056803F9D26AB7BCE976680AD
E652371DD507E715B1E395E1E542F6019415FC62978756D26A0C59CD21A7157A
42654A1A9DB67A8F742F59EE9F3757A3613D69E4FAF9E2C7D0C09F85B53FA64D
D33E517533A8ED0C5C2E15E84E5794B28C88DD46ACD5FF56C766EEDBCF086960
0EA2AE82D3DB145BD2C80500417DC7B7499008C4FC1EA7098B1B93AA05E997D9
C9A692CAFAA72A6A709C68D42D248B449A15DF2E4F2275FE250DA3CDB311CB20
EDD49DBC9095F94F916AB63327FD846D44720EFC9136137E834E01775190640C
827C098C73DECABAA2BB9F74AECF4DF62217946ACE5A1C9CC82CA5E6AE33374A
4F16ECB4FB1CAB6B75CAF210654B1A9D0B3970E155F009E626595875789BC836
FE8BAB7FA82E77EFC996B367BB79E69EEC7FBD973B2B6DFC2770A7D8EDD30119
37B8FAF85749F5F76D18BA91DA8186563C7B36AC7849C9EC825165CEE8D7EFFC
D4773B364FC4D887CBF476FEB4889D9D26DC2FFC5CA2678FCF4727DC836A7213
2D1CA61DA27BCB19B9AAF9846B82FF1F02D2F0A66262BBC6A5466367A223B751
CB40832014D11E9A1D033B0793BCBA9A63D4B451062FBFB68C3B768CC0BA2C59
A79F9010124FFCE47E409F0DBDBAED157D2507B270D928085C40BCD50DCCBF38
AC12D00206B6BC2F9FB5398ED788341CA51BFA6753A26C3186826955A01B47A2
6A3CB87B61FB8D8E25B5BDCD72C3569906C4539B9EFE445BE4B8C7606EC5CF4D
C65CA405E5DFBDC0F22D5DCAB19AF785B6C0EBFC022651EA9305286E320BE4C0
02F68C87C5EDFD5C043A6A93E254921B8B0B30961276EBB0F35BE7F4AA9CE2EA
00D7FF5F01AFB56EEEB1C77982ABB8EE6140B32CE306D5F840E8970BE0144BC8
E1BDAB95497A8970CEF4A3CEADD4EFE91D35DF7679833FFD98AAFA87BCDF729B
56C22E2E5B63F5A34B5C7B9A0C066EE7EABA27D325DF0F65E562648CA69430BC
27D408E890D158291B8EBF9A811A35B4789338531CEA9C31F381797E638F006C
052C76630B40A69C0098E514885C37A18059EC3ACE295613268FEDA546BEE38C
4A5BCDAD888ED4BAA94F5951D428C756B157A590057C76215C21DC2E8014D138
40A391D296B4F65419D9F90D451689A369759AB6480F82F90CD02F460E2C2E7D
293369AAEEB8B2135D6D5C11AFDCB68812634F5EB021EB15B7A26CE0AE7631B5
E2DAFA4C76529E02A585AA57E38AFBB5932BAC1A456FB1E0686A2C291D3E0549
34D4F9101991800124336EAB31789982D566148BB44FA0FAE9BF4FFAA1508421
BAD346F807B86CAD54B9DE2D281B47FD020938E02C1D2610D54EA695186B7341
2392E1CC7C2EE377F334CF6EC42AE09FB8F2078A37DECC1633CCA90237E25D1E
DD0C054762580CF95FC863D5A1E9F9CE271D4EF02C7B3F4693D79C9C46C18A19
8E425634FF7311FA695AFF125468FBAB8559F405E2356C473E158E2A03521AF3
970E6072477C0B90BCD0F1E86970BEAD42A34061F34F83855C0832ED8BBE99AB
D7034520C985BB93CE582C78D45CE0435537BC2F35648BAF1F1DFEC9937F2FC4
91DD351F0EE256CA0F1FF9956FFE7111F40E3808EA55A8208B058DE6FBAF6CD2
75B0FD4C1951C648D1F75FA0C7E46A46B2BF91C4931A003730F15B790D08E288
22E7347A916B4183E49FBA4E0450B7BF4D267B014A25492137965FD1A2148730
352AF582A0C1B3E9BDE84BF5F535410F82355C2A57257ECDEFC79CD3533F8384
2E754D9086BFA19D11CE0782F231D8326FD0633A5EFD2EAD6B369F8BDB82ECEA
94395D64C166797ABD0FDDA0DEEF21582A64AB454981FD0F07389514FE7E49B7
385EE2E22A73C2580EF426EC1A7C688FCF3055B80037BA85ED49D86A5DC04657
AF2CFEF7BD7A358B056DA716700A368865DBEFA5E50207FC94DD6E5B41F5D03A
36410EC69D8AF4A5112AD13B1FE8A9271B428FD286E3584BB89F9F25253FEEE5
F695493B93F468225662434232B4798A5B495E3DE1E98002971E1E8F6BECC774
D5CCF63E842783BDE852A5CD4846E7627C4E51DF8B16E3234052F3014F9B6E27
32EBC81F6BC257517EB9C4125203C8FF1D881F6C47B34BD7A91A4DFBB8CA5ABC
A3387C78E203E2B03A0E2A05CF14D61977508824D328722D6FEBA7C63FFBD250
569E78C70C5EAA1DBBBE119E907CCC13C09A7F01AF160394A467DBA7AF94255F
BF02D7997B7BD8E0D6A70C764B8E444F592B411FC5F685A8D52C7F2CAD73B9DA
3439FCF973C4F22F8A3ED4CA0AD673464FA5B3DEF81972297E16C7309212EF4E
1234E2D9861991C354B46A1AE81878FB693FC8A6CE75C4702CBF0E6741D8BCC9
CB6A6DC57E064B720D7A590105FEB6F0C40612C5BEA35E168F2D8A2C8C066BF6
EB99B521600A5584E6D369590DD9B1E85677D4AD4537BAABC36F78B9C790C18A
FCB5968C0010366723083804C7F9A7525B256291CC92B1DC9DEC00B48A98BC36
1710C6CF862F6D34FCBC7193A93F3AEDB8343A57474BC8E79D37A854D3848E4B
A296E27D7A66202C4F0AC5A9B8CAD7CB4E0BEFAE042437BF1ACC2DEFA87A839D
70015EFA7FFAA12B256EE5767DE6E795FF26C2B74B1501595196184BBD6977D1
5BCF91CFECEDF19E342389D90EDC78717B7BF1A60F4BE92B4AF02005973D8039
1ACFC616FB8D9D7E00F5A884569DF746684239ED3F7C74616B6C7782BF11C905
21E63B94C6D0B1F8B270F61DE04C9E9EC2A214BE6CB518B59E217CE5F72FF6A8
AA6B2C97D8B4DFAADCD9247310B9458B6B7F0524B5410DFC768628E060770499
49C2CC8117B374BF513AF1280237CBE074D111A9FB054EAC869E3C319D8A64D4
F5BD7BBB3754EDF3A82AB3B967D549895AD2EAD722B08FE88611D729ABE047FB
4547FDCA93A13515EF13D1E748D5AFB5D301DC4403A087EAB53B115D3F29F665
C1F035C9E649899F6E821894604DA5047690477A859103CB5CEA1432B9B1158E
5DFC8CA968EA5D22124C4E0711EEEA20769DAA8DD669C3630465995A16EBB580
3ABBECF27C0AAD52F75E9E3A6687364D5EFEC8F31FE0116E502E847F9B9C2799
71446B581332A84C3D18CE04D2388269B2C1C735F6B5DE8797C2D0050C709C5C
9709900E8E943B88680DB34F5D02D46BE055AF5FF933BCEFE389D9C473E0925B
683DEBEFEA6718CCC099B72B68B37C97E610E2D71CED404B9668D1032FE13571
230CA96EC326434CEF9105A1282D5C9AE201C72F196B897066608B3540972516
E89EF389AAAB403F877D7607C278C647B0BA3564C3C5F741EF59C31B4CA1D142
8FA0E147553296D51D4C8E17C5A19790317DAC4604A96808B053B4D7E4036FEB
D5E3BBD5963C615AAD649073565EAB194767E00C463AEBE2BA17C79C794B65B1
0C4E626CEA49A06A63E61EBA1C66553050398E8C71EE3AEFB793B2A86ECC9A20
CA270D52DAA835C2F5AD4A686AD31C292C7E5990FD5EBF2A369760C80B1EB32D
D065CF7FDEEFC4EB905B0C0BA6C712242A5A340A41D3DCE4433D0887A13336F7
479A0D6E66AEE1EB5B155A10640C7DE47E8F285C141F1375478DBB41624E57F1
F0D63E081F6DD1EEED04351AB04308D8BC9DAF2CC5953F23F384C14341D8A12A
491E774EBF6FC475ABBB15A3322AB1C6EA139168F5E866FE4668EF25C04BC9D2
6913CE55BA9EEBCFBE546755821A036D677AD25547888AA1B9C0C78142B90F31
5333168698A10F2490C398AC518CC7FCE39DB3CA9C1496A8BEA1B723D128121F
CA54ACDCC2FD5D15F53B65770B843C23937159495138E4F025A6152FBF212263
1D967DD0B8B58E8E24D022400C1DCB211E820628D55BE970033F40ED720065E5
C2165334CBF577829A5C77E9661739005F023B08F7D87838F62A6CAA01A20DC7
9BDE52BE277FFCB439E6C980326593693FF54006418EE4AD1570F44595901DE3
454925F21AA58102E1D6D8F4804C18FB39B1F784A5F0BF8C67D2CC7455C4A914
FBEEC22D759AB35870C3DF29F96004362D6B0DC62BF0C8348C55ADE90C0069B6
ED90BA08D8A04B1B655B60D215EBB389CD803DA3064F468695A530380AFADF57
549B55DAB5D7251697C4F0628A7B29520B77AA16B866CC56DF2B09AEF45F075D
926BE357AD910B4226247D45141AD506661CFB72E3EBBD5CA2346C701161CF8F
45162457521F31F8E710D1055A5F8A50C2841B63B9AF7C7859A6D73162A8D8F8
5F0EC04A5ACB7071A60DE4E928523F825DA8B323B01BB50ED46CF009FC101F81
33C3902F0EA39A679D879FCEE3756BC21B5F88E9B87E035EBD28B8F67585A228
1312DE9D49289F9FA56B907D4E496BB4EC03B78E7A8335931A5FA25F03989152
91EEF5D99C4E287BDC2339AF2CA05493E8FE4A623C0FF2C390F40E318DEB7478
8E6C283C6CDDA24A62AC673985CE804E119E30EB552DF630CFB2DC8313F060F5
CC88725F37CD59FAB1B8BA902ABC949F1A048433A91BF56096D56D46F2726A22
4BDBF813124FA95DCB0147DFC3307E856186CF1BA6EB7BB45146848E254DFEBD
7AD2CC21BA8EBA1D4B6247EB1B3C7935C2190728B94C3FDD8C754C60E6063BBA
A8B6AAA751ABFE802349FAAB0EF5E3B17779E029BE748CEF76158231CA2835E4
B89514C3E1A90B40B2337BD16D60007B8D3DD2538395C0E2E2EAB9CE383B7C5F
B13228D480A07DFDE76E95B7DB8AF11CCBF5207C6B088F841B14AC51A6B584E6
F9473CE6962323963F7F0BDECBC4569AAC2507CF2EF1FE6B1B7A5D441AB9220C
EAAE542E4F0B3933234DE31EF63CF58A03F07FBF5A818B467A110AF2B0D9A4E2
DCECFD566DD137FD5141595EC251DF1EDC747C51AF4685422AE2CAB82ACB5BDF
CA3D338D87D5B02C7DDD97B70DF6AE8B509D9652FFD7F2132814EA42C4153336
D5FA95DE25B164F92ECAD1BF6D62F338EE1159162D797B148B8942891228AA70
D2B8217522B96396E29C438F41253D3B0B5645FD12419224B691FB11A6404D8A
5AFE184EBA57748E1243084ECD38A0E1DCF2E781553AD92A7EDEC8B2E936E493
C394D28303614722B9A33EED6077891786683AE3F55E4CF016528A13979E564E
771621EFAFEE782C2E5A23B2CD707A6A4F3549C34E00F97E97D2CB5C49EB6EF8
63A81473636120A36120CDDF47B8158D9E0A1625EAD60A69C1BE7493CB2F491E
D94B4CDB4DC8441C334A0D321CF43B5CE79B3C0A8803E7F82B2819A3942F257E
38E82C359BF2EEDCFE744DD4FB37D6E7761DF73E1809D2949244301A62E47FF0
B741B4B256E229329FBD45F6589A63E31185339D7A5F655AB0968CF669366F9C
EE7DBBB9CCCC90B8843B29AE98D01AABE628A4C9DAF1CFCED2D5582D4347BBE4
DED401A585F7942278DC6ABDA33BBD6A558FA5EAD5E23ACCE673604D21AC61A7
0F5944D260CBC86AB70824B87C47EA53A81AE4FC52C46F80FAF63A6C181536F6
3EE410A0253444804882A2CF152B6949383B5B144F553ED6C4E11F01A8FC1D6F
293EEFA2B2C822BA7A8058A159650D5793750BB5D0D6EF816AFA4869D539242C
2CC6BFCFA8BF4737A8E8AAC9298CABF7E237E04092C68C1EC4A20763CE3826CA
18400E0BF4A1A27246FEEA876A3AAD2947EF117AFA0B61A9B6A7E201923F7D90
3654C4992EA47CC5B2ADE77D79E47029E40C4B5B596817F231D26A087035DE07
E515B341248C5EC3CC2B851F262522B364135420ABC88DB06E31E491B927C026
75A644607478F4AD4A152253AA4339F0697807C7933E921AFC4028F57C8A9EEE
80F870F114FF4010102B4387AB3C13DBB86CBA833176323D1EA2402B20E1C4EE
2A11F42E4327DA0FBA34901D53F6E6B223C3DFFD893585F22CFD765A69F32289
D8824AD5C08B62BE72FCC169B466DAE292D82293077C69F4DC7E03FD7A02F465
D1AD49414FFBC209C1C68063DAB0E8784A5B2BD8E5CCAA7E81E8A25A16DCFD32
5D6FAAC3C5346B3298B970AFCCCFA9B30FAE7F4A952D09659B208D107C8CDC57
CD73B15C52008C68A3F9F233B921509D3B2C09E451C0BED6BC7D991EA721964E
9EBEFCA6F34D79C337161BDC06BC1E7868BE5BC495AA4625A4E44A2447EAC2FE
09AF84225F8E35DAD8E608716F4F5F31B45AB4B5D0A179C0582A7F2C0020ACEB
3610ACB548D6D621705A2CC299B2714EC637724FEBFC2C90381236C47E47A170
6AA817CE3DAB393984BFEE7C64ED51B18E590A132E2CDB9F75B17B2F16E43F5E
21312683BECCA726554EDA0526DBBE8E0D9C58D322D134A37B2888678AFF7388
B5813552E2524F347BC1D76D13A4ECA2771CB14A846D87549A0496F465D00F07
66E196C03DA1A925FA9B64A921EDB0C5C2A27C3398588A7085CE787BBD91239B
9EE730512BB8F5388B9ADF9FFF771F1866ECC50946E35B7F530BDA671EF1A4C5
D9B3898D7ECDC4655F680FCE021616D0DB89C51001090A4A7A4D776E3263AC78
31D24F97A175A93FBB1690F9DD007BD7D484C2E2A39D8B968FCFE0E740DFC2FC
A9D28A6742AF910205C9B6214E0F178FC2E3E8FA94DAA9858019428DC505D953
6D49069FDD216819E3C86A6D4BC3259179DE4347ABB15EC3C23600BC5A557814
3D55A93AA34EE1222DB38552091831DCBE0A1978BA7B868847F2DA25B78AAAFB
57A9F8C432539E4C1D48A1FCAC3511A660FB2091D0B1D86F49F7D780AEE751A7
0A0EAF11FE40255751E95C63B325228398FCDA123F7AA801418D4E3BC350CC68
E261FA07D3BAA1C3E438E8243D6FBBAF50EB8FD8FE953029FD32E5B86FB5A5E3
88A2C04E1AFDFBC386DE740111CC81FC8A4652D4B8FA9FED2284391DD5F0AAD2
DD34D2267EE0682D2FA27B8F4E3D0B78CBD11BD3F3D0D13EE0E045B13EDFF918
FF0F7AB7C22E5610EE5F4E9190871D0A39ABEDE3172FA0A2127751E814E8D199
4446295C170E65142069393597F6195329AB926EFD4C397ACFB134D0A284A607
919D9370A70F3F45CC0E935D28583720CD92390440D0495BD7C6F5A86BD272D2
FC3C68647B83EF5B459D8A3B24AA15B2D364E1FCB1BF17BA63096272B30D4982
435FA42C653EE9D144C706BDE9EEA9F569F1E5963A38B4B75F8B1419E59FD7C5
BAC359A69BE7457657A6A65406015947249332D8E20BB4718FBC25D1459F04EA
286BDE84468C335103F7496ABB9CB1B83C5D94730061218EEA88699B3DBEB852
460380F3F67EF2B915F06401D772001C19E1A63EBE7E645FC515D0A6E842DAA6
61FD9B397A3F26BEA91757A8549EDBD9C4EA4FD7B9B68BE31E7907472DE5DC8C
40FCBB2BB86ACA3D96BE9DF74FF2CF281363B7DFAD216D26ED6F9FFB5ADB331B
5F223E9C743FEA0C3B0F9995EC0F52E956C460FC1EB07918434A847BFC90312C
10655B60D215EBB389CD803DA3064F45DC549E3F55B8371D1660A651C229D309
125837A43863502E8A12727F5D50F3C73B5730D57871885A1A37C55A715742BE
8321491F481D2F9EDF441B67C3B73AA68174819AD85EC878F260DF0DFBD65171
980C9059C71DF4FFF65EED1F71404AE80C589C79ED8D74026ADF1B4E1D88353E
072D4A417B3CB90E4103E0EA7119629C1A5597FF7ED694FC1208C4E1B0036DAD
5C10714EEFDD6ABE847B74CC7C1E0A45451349CF5E62AE2E81175A685D143C64
BD1B19E15B6AD1AB10289FA4867D37096BF267DABF258C39557067088D8C6D22
457B46B3851443856541DAF490B533182C297773FDBD586B2CC0113E27D037EB
41BB5233C56897DCD4A9710281986726529B5D8433B54A0F460D702F65F57371
547EA6C877529E79E1991B94888726133C35A5DAE2CAB0755BC232FF70C18272
3B4FA85DA2C4CB43DA2F3BD3868D6373B736D31841334DA812F8A30ECC3C17A3
39F4D4004A2F587234FAFDA6713CCF3745C58511556D425301771208D55E96A3
30389BB0DED9AED5A91815032D5974DA63859AC97006C0EE30580D1A3C1505B7
F9B611B86171989AC09A6BB14B4E0EC54C5AFACFCA851396A1F2A58387CB9993
2F2182AA3F9CBC2CE3E57E676482AAAEDE3EED07CFE3117875E5A28C5079E178
1A9E1FDAD12E2FE4AC2173B050A05C18F9880E23C480A2CD0B107CB61DB5B347
3627E1BF694F3E9CB9A7414BA06DFD82358F0DB799603233C8322E494B0E1D8A
99D7BB75519C04125C88841BE3D3C6E6AEC948DC1A6586DEB6D302F8913C6BB6
0C0312B24B0BD4ED7C9E63DAA701DAC4FE7928673F7B6A68F73A2AD162CCA498
57A84C7529882081279DE3B25A314DC836B1FFF14EE35D303E3785A358E9C113
50BEEDA282AB62F7B307156ABE19B56BD4F691A1AF2418534761F8C356810994
E46D30A3B72488156382BD35215D8D83A278543F8C919BA0608A9FDCDDCB30D9
8728645A0EF2349E6EF4470C55D811309E1EA8BA06F6300D6B15CA859058287B
BB4525F53D25D77F4026258C426CD1EFF18EBFAC7D28BD9F35A475A361080D21
8B2ABF7405C9E6A7DE351875F1C9B850A692C4B8D758642A39CA1A0516229013
42219AA07500AA5DE6D5E073D10ECBE93C5CC2987D4F4F13362D7ADDC3D3BC78
B0D56AE3131FC9786647D584035A523CAE948EA929B5439EDFDB983C046C1F53
88F7E67E3E0031F0A13AB12A8522138A17ED1A8E560E71D8FB80654CCA0877B2
80AC94BC365FD41CE00D6E6CA78C205758D9EA0B988E0C9B39A425D899B8A8D8
983FCE91203D3F13487F4DA7D3E17AE9BE77FAF74DEED1F46E91232676A161FF
9DB7741FD07F83B8718207CA4BA03C8C2F41E10CFF5C14B05682C1FFE7F3C18A
633F50B41E8B79C0C246A98F6C78D3737C42B28588FB5B0B3CA97EB54F18A97E
944E0498E78FBA671B1E88EF5F1EF4FAAED7C4586AF1E9F97DCE05200A928A53
7B7DAB77D68B9D2F7579FD28BBFA862BFFBB6CC55A89C2529A4F261AD82C4888
BBDF7A40109543A0E33F06DFB8454F8E326A46E607822CA2F168E0E8D95B6A53
8CCFEC343661D7DD0F7DF1959F349B12BB4EC7C1B6E2EA77DD8039527CB16E5C
9371B5DF7053FE08309464F85C3E839DDC16CD46C62EA21C63CE90EE04B3E46F
6E109C8193C6E1CDDC307A88FB00A1BDF0C7786819B817A4E887BDEE616AFF4A
66FCF41D02C7EC97B9773098D7B1DE57557F019DF489FBFCEB05EBD4C3B6EB4A
1F64951B61206C2FACA987832D7946D67A12AA8660868049AFD4BF5FC1DD1425
A15C887DDC3F530456D6A0510A8B28E9859C187CDD6D76FDA492539817A1B296
1B6585C3BC8751B9BE4744063177B0782F58695C70CE086528834BEE3A0A9871
52834C6FCD4B6F4420492F25CD6E18D0DA09A077839FA7EE598772B76C72F09A
7FDFA76332D671153CFDD38D8A182D99BF0AC5732241B78FBD2A36C83DEA5FB0
4E14EAEC100CBE4B30F37CFC7C83E9A00F23BEE2B638CCB3023CA8994808ACC2
B41BED1C40F0D25AD81AC221A5B141769E12657A12F9B2EAA14798980BD38BE3
5C9C0B9336DD693890EE25CFCE43E7F7718BC35C7F5A29976E40D6B935E1CC0F
1D31D3D04EB580E03D161E419770F703322DBD74AABF8FC768239F2A78A73987
79AED87FE9930701583E8872111DDE5DEDA97EE65C2DDECD3D907B80D93732A3
C24D358373DDAE6D768B1765AE644F5EFDE49FAE1826CE1209DD13BB4E9C970C
46EF20FFEBB58FDCF13104AD668CA966A7F0E8E738432BAC9F15C4556EA67EB3
F422BAA00E20AADBAA9C8A4EDB0707BB7BD117C8AF5BEDA5B22C02F0E15DFECF
3C0773338B521DE231B13090255839707BDECC5D8976C11406E630C62B205708
98CE53AB2ACC70782F4AF3144E458AFBEE2418D5AD11C801A4412C38F4949F89
257B8BC3921B476F01836831A6B3AD5675DE5B6C8B53B7D715F2A60FF02EE6FE
14F328AA7F40F94C2881871A160FBD10D2A8CFA1276F9194E6556E8CC6A6255B
BAEF138FE0E4EFDBAE71A36B1ADFF78ECE0BA086B77EBC61E0506013C9797290
60A04C88FD7EE21BE265B06D08430292E7462E2C6D4340DFFD4601D7718859EE
D8487BD80C4444B2D448A840F60EBED68894FBA3D0F5A47CCD4017C15430EC3F
E8D1D848C6ECCC6F2E9D0F7EE557962E97B2611963063E5E4796EB958166DA9D
D39F7FEED01625938C05778D06A527BA855AEAD7AAD5840F3C7B9E21D8CA390C
FD10968212200740D75410AFAC562B21C6D0BCF55D3DFE91A020793E66AAC88E
94BA70268307C6378F3B986DDDA740BEBDBD569AA09107CEFD6EA60B8C5AC1F6
D46AAD79527148126ECC74F1B4C26190D1FAD81AA210A4EF88D706BFFE77E070
862930B2AD398A9EA8F460424CF8C3DB5460394CF197CECA724F82B938BB29CE
3937CC35C3715CFF2AC56E4465B01C9C4626A42DD8620AAD09E1635D0ACFA427
63CBB550451EC80B1DCD77F56DA2F4AA6106FCC27B204D7A67C1F6DBA6FA3E3B
1793A5EF36CE4BA6B7078D6097DB039640333E343C104450F9A59E02997BE85E
091EFA8BB161C5C4C7D441C23B766D1920ABE49CAC93EFF63A93F7EDE373D0E5
436AAEEC1240F71E1D0D7055AD93C362A37CEC3F3A8A800758FED6ED30FB66CB
45E6F6628976C62EE10C5D3529C8D3B74E0CA32D30816D569142C9E718E40576
0DB81F141AE5373A6C53F47F0BD7462AE367580D62A752FDB0B1A8C29D9CA9FC
B788794DAF9F64D5BE41229D0627B0AF182E876B0FD46A5C332DFCD8D9565B65
A253E51D926CC76EB64AC9CA83B7FE6C91E10FA717CCEC0D2F8AE339F1FB3126
57E2BD52AB35B72F30CF7593B3EA70838DE1538890C98AAC895AA48BEE6E1FAC
B5DB6255EB11CF42880ECCB4E9902735A3973F350FBFD52A177BE84F2C556356
F953DAEC243FE25DC85F44E84ED06887B6E0A78E0234EB24527A306A3E2B5F6C
C137F4591D3F63B87490338692E1E8CBCCA149F705C5C4FA63BEEC03A321C96B
32D99CDCE1E087F071104B7BCD7EFC7D827406916905CE562A7F1F31B33FF180
99602C67026495FC2E4426C2B5993333227904D8D3118FA28D55E36F811306D8
B45382F3E6EFE9C794A0FC38F09139ECD44EDC4C4D95F0D0ED33AD94335813E2
F68F0697FB05CC89E2053D3D8FE8475B87C18222102AE6868F9A2351BA6CC5A5
5DE509E49C0F79AAA6140291083972293092C92D8164F8D4B95A3BD6EFE427EE
AF3D3C4B2272F5BAE463184E90C3F43D68281086B9DDB21D604056A7672FF770
558BE133B2C1C7D7E176C468E6313A3CA43B6942EA1ACA42EBA1FC619435B95C
5C7603A80BAFFF3A40A7241CFF20023B40491EB898AD834EC65107E430DE2E62
E16269D6967B5937F585BF8D1F0A66805BE9B173D505CAED4D969C95534CEFD3
1FEF6708C7D0775C9D5B267D4ED3B6FC050C642D4F8AD470257FFD9040AE0091
C79CAAF2B985CA51017885692002CAC58C1BEF5046246A0CEBA481CD267B46A8
47B5E077D703DA799221583EC737215883E3A284AB05224B71597529F45E4DCC
5DF593CED5C386692EA6C88E9327862E9C661AB681AEAA9A670C64AD4C063A41
FD97AC4630D914249FC827E1B35779A961763DB019BDEA41F32B1C74A1469847
F4C89FB45803BDDC598699A43BA00C7A0A5C2851F7708E6619770A190BD48C25
934F6FF32CB40AABBF21AB550DB7FD13D3073A7690664EFF3E68182DCEA45E52
8E0D29235C8F0CEEED40044A8F508D04F905F584A5514FDFA518791F396FC859
8E59109FDF33DB976A55583FDDE9B18DFC86328E211126488BD16311921BFAC5
5C6348CE72916FA355324AAB6D450BF0B3F3342C66E92808B29B09222E86FF1D
890EE2689F2A3BD72BE359B9006A13430F0AA9F267688976C76D1021CD015D97
9E0E011CA35D529484F38F6A4DCAEBA1F1DCB1F6682D0A249F7B020D228F5EB0
2D553CD0A893CCF96BF5D4FF75D9D47BC014ECDED22B528806F4DDE140A4B6BC
65677D3C618177382DFF490224401BD84B1E8F5F267E84DBC86356F059BA30ED
8AF544E782E3F688BFE943C25C094351812E7D0817220FB50C7ADAB8965EFCC9
52FF92B62301FE5950FC46FCD1E5868FC3F79BBE0179E53329E229F8F69A3C74
9DBF25538EF06E332C11D2A9EBFE7949B84EF7CF72977070C63EE4177E3F3D2A
FF3864354515794B7A1BEA96746DF927B1B78AE9D4F50DA7E9AE6CC9EAFFA5DA
E985DE052C9848B696188523202996FA3E70A93D36821BF6DD1ED132230D6C53
9D9956444E02CE12CE51B376C42D7BE6D5B62B597EF22301E8FDAEC825C73F51
8062E8A88A53C47846D2266EC000852A744AADC8BA2C0BDB7674AF47A2607D18
260063013705AB6F7A67D2B847F8933C5FB1577B1231249256E801390FF602FC
FCFF86F100F5F16AE21621F96E0CB4EB817C1090636CEA94745736395AE5FB08
AFD1CC526FACC58746AD3511F899A4CBDEA55DC35DAB60D79EA274B0C86C0D33
985501DC3F0782AF68F8DEE9B0A86139A5BF2386BF6A4CFA4FD5ED37435308E9
91B8D5CFF8176820D3BA3CDDD85018920ED59CC81A15EEAE7EAF60D41AECA65B
60D1AAE43BC14BA35B722F2EE93113FBD3E3C03AAF06F68BDF7D3EDD17C69195
D52981FA047D23595945100C6CE889D66B44A281723CDAACD83143FB6E874B5B
D7116F9166B4007FAA61BC078CF8572241F61F5148791C6FBC4B818F7FA8F2F1
2C63E8CC2FC7C9FCC921E9F5ECD28CEC3ED28FE9AE5B795DCE25425387A17F55
2F930687499925245B8299819734601CF746ADE472781A6A46F5AD81709E4C17
1B08BC9028FB6365221E676C846E1C751809E4A591E34876AB8C52681BAEEF2D
4CBD871CED84D38D33FC2CA559E3D62EE7F0360573AC236E17EE5F7F1A518EAD
D653AA65D5FDDACBF202F68B5E140DE04E29128761B2553DDACB43A101061D84
5166E002F1CDA2F1671CA4665B28B641A6EE6B1D7A954D9FA1DE350AD6C69A79
3520439F2056BFFC8655FFA080FB0559F7F94A744C6E54A007A5B5BBC5E1DB6A
0DCB8D0CF788AAE48B92AFE91C9C2C25409D303F33072AD2E97EF4B309429CE7
7E14FDF25C31FB75437153FEB8B4E235E3DCA09CDE93BCDA243E3423692B4000
866543D6266FF881EF3CF903C0B7C19C20040D6423F521766A4CB15DEF8150CA
A554093C0A40FCFBA03FB3E435FE3276F0250738F3A2D6B50F7F393A62B85C59
2947C92273E55B4AF2A738C2C03D0F7EB3D7E34D4C9132C0AD46595DA14C0C9F
67B91C9D195E2EDD1C60A2AE1CC2C70CE8A4658145B45A717F19085186251B59
C6600D4D0532FFAD1FC4C4C8B8FD51449F12F72E5F943C30764074515B39BCE7
8F8DE27E3661129006A8E8E0EAE98AD6F5BF332EAFBC0449F8A90932CD017D54
E39521E10284FAF9C7314EF032F1FBA346FE9F894A786CE52CDBF36979804DDF
61F36C5BD8BA61B371564ADFD19E24E33905EC5F0911FFE7A6A87C34B9F7BC58
8FD51AEDC2771321F8D4A2B4549725090BFC15BC61EFD959E669CA5970A117A5
F6E8A36B9161FBC7D89A16E52664B84D31D8F36D1A6FC954F67E8941AAF17132
6237A8979519CC9B81E608C0406458C2B4AC2B9591F561256C049219FC0286A5
271A9F9F6F0A57F1BDF8FE05F4BAC0CD62F2AC24764750FB3C48325C552F14CE
B4088D55E131975DC6B05953DD41ACAE124C8AFED17E524C96C5CBF2A8053108
EEA89E328100AD7FA9FA045C41D5986EB0A40B544A74DC7093A2EDAD3B3A1EA3
E9FEA9B22BF2E37E47408D4E49D34625C2311705AC395FA02DA1E7A9FC0025C1
D64E47D199791CB636F68B9FA0B7D6F0FD8C3F73B1E159071E3160F3888F3C82
CCDFF900EA83147A6010DA648760F89336567AD435BA18492B2129862CA58FE3
B24BC2328A8DA492349EF083B9A54388FDB8F030EF94155FAF8FC47B68F1A3F2
14BDDC669A288045AACAD1232D42257BB4BF8EECCDC8122ED12212183A966F19
4269A93913EAD8C4D2DEF0B9F513BA5BDB44B2801C75316AEB9E6A4A7953E4DB
6AADC9BC7DCCA4C8426E631CFEBF8C4F0D045A064ADC629F29929339018D4A16
DAB4B447F655D5091F859380F5BEC8BB84303FC93227AD94319ACD699FE163C6
14C3AD53EAE81EAB9D59CFEA352AB41222ECC757ADF22680DA2784F6A58697E9
AA3009EB6DE9A1AFA37B06B0B33AC405074CB0AC68A2380FB0D632C46159CB8C
CCEFC47EF08F2724FD6BA12B9E6CDB10043E8F34D46C3996D920EC72C2AF3FE1
FA93049C6FB741A9478619D958E77E6235C9439FB8F3DFCB538ADEB75EC63618
86BE37B336D6A6BC8D2FAE7B790C2E27378A94FC40FBF2E9CFCE3B75B77789C2
1C0E21B673D3E3C903E6C0CE2B8E1DC0C42209A8354BC2B327B0F4DC2C257659
6196933BE1A2076237B62133A32C5A8956ABFB5E9BB5570E2AAC19341A964667
19B67170E48A326DA0232AD9F6C0FAD8D4432A87A0BABC65B76059732869E4A1
F3D98DF31EBF1EC8FF0B351A67AB3561722BDA03FE40DA4228AD798D2B4821F7
0DFA40A05AACA4EF00B081E79DA64D6E2161ED82E26639450355B012B63C2DB2
433CFB111BA27353C45F710B6BA402099B046463E90C56D614A7732AA0BDA864
1876CB103B93575FA935F691C825AF35DE0FE473BF6BC9CAFFB5CA5F06824FE9
8205D719FD8D20567321D2B38A2A241A8F6912E929F3EE46586A5F2ABCC68686
1F26D9FF0DC11012FFC5CE3431D70BA71C4C0FC7235CE6B9B1ECBE2FCBEDFCAB
73B87EEF15F0403B0B4C52AEC5D6B00B14D3D56CF55E3C807AF98103E91CF2B4
94BDAAA6B8513441BF6B5C79197471532FB73B8E184807976033648329152B32
31FDDA00E9FF7D67C7D378699F74E83C4CCD55EFA64E8B68D0BBE9E5A03E8598
20C9FE8BE97BE672ECE20497FAC928C3D09F1AE155DD8261A38CFE71B67AB4D2
A45BFAC53D6668CF22A75928CFC8BDD8257973D6FCD5ED814757FB7775AB5C88
32AD632960E68DDF4D87009B29978423330B2D96065A09BF476B3D0DAD9E95F8
14167377F5F4158687F05300E1034AC01BA7DBD5D2D5F00FDD9F8DFB782BECCB
DD39190F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM0600
%!FontType1-1.0: SFRM0600 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0600, tcrm0600, larm0600, lbrm0600, lcrm0600, rxrm0600.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0600 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-210 -320 1719 944}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF7C144CBECBB0B8AC425A
08F38901803917D730AA3A77964447A6FDD9D1D5D6CADAB899C866A153F41D19
22B1F8E853431D34A87708FD95EBAAE0636D632C6CE8C8A24746216DEA10FC2D
C907A32EA036B850F319450C5EEAE2F44F6816A6D06D366C75DD9E360D9B2A18
87A6A24EA1491639E588EE3DAF1357CEE96FDC53B9C5C4428602EC516A115B16
B137347E3ED03B4937869940192CDEF71C0F2AE65E9C3738407DB9F6064DB42D
E38A19BCC21F30DC69ACFC17FB5C81CD536C0E8FA6F05081FB5CD8F85031FA0D
119767F746B580E784CD0928454272AF2B8FB4F5D53F2F011685524517BB6B38
E8B42394EE37942132A010B6CE3CFE2E6CA24D320C12D62B1C9D401A74AFE7E1
D4B2B0968BCD3E63619574B096BD23B59496071FC1536DFE6937146ACDD7CE00
25FCE9918F9F3439D5F9BF4494CC501FBB4894E8C454BF46C615A2407776C621
762E39A14708EFB767E2EBB33C8ADD59B3A589F3220142F98A253A164ABC1AC4
C32C48557C507A9E3021229008ABA8BA85B43B193A537EFE14EE90DE56EDA1A1
CF40CE8C0C510EA30599B1381005621984F2BD4A8B15EC634B26CEFA8B03CF43
612FC97D3C94DBBFAD6F325B3E3C314F0B0AF5DD1BEF045D7E5A054D99EF3E21
91C1D5C91A760D90DE6D62BF425C79A481AB376FD2CA46F949C16FEA1B452840
4AA8B56B201E4E7DDEA75D821FE434B5676522496D357B621059C6E9007CB5D2
190161111309D2476139AFE57269C6361CB6F09E0F463AEBE2BA17C0DF2B676B
EF8AD942A3BD1FB35B44B11FCEFCE048E0A413CA2BBAEB9BC90A5D78E6B1EC67
E8D53B310731AACC60AD7BF22137C721B0B6AD0233FD1DD83AD47EAA9EC9E3E4
45BE2DB9EF5D34E7F747AEF16932B3F3C6D6D3C8C6A90BC4FA26BF967AD9B019
417A876EDE63682A24C06593AB2C0F1D1CE0A1C1B8976C7550F275C4190A3AF1
EC6DF13854712FDB81061A9F5C00FCD0A977AB4B7EDFE86FE9668BD550DBF3F7
DC47B85620B641E77FE5F73E9D14B1D8CB415F20F739EF1B49B6D65C7366A3EF
E4E0275CE8F0D3BF4A2151CD13C45EF003C1492E94840A2977DE53BE29CD7775
3162646B1D7AA69FE0830C05ACADE1E4039D242E7434E22EC93615FA8ECE2D4C
27342EF751F4FC23E314B5E22BF8000FD3DAF9A8B70334512ED37D33598B51D8
1420F45BB03781F64840D49C9FB69442DC88166575049E84F39641519C59CC09
CC78560917B2A7265C39784EC4B319959677CB943985B96CA9D8FA3A7F776916
70F5D42E29A509EFD1D8A9DE08F1FBEB0759F70A51E2136B6E937EAE13534405
28AA547B5EAF4EBEA0BC14C055FF8FA189A4BAACB0B978A58EDB6B8787C84C6A
212F067A28BF6C8D599A656CEB8AF1F0D2B736572A20B8CC7B4C8D58109179B1
5292027209A25CB68EBEE9E67D7AC8C5A90D47F7DA125579AC4CFF4CA716E425
C9109C1E32527227875588480241B347367B30AFDFD12CF23A050D6C1328C340
A6556729C317E60CD87639E1B4F3089932369CB542925FE084E208AE46D117F1
A0394D0BAD6A6D318033C85E12B77DB6B54C920160633B59C2D9285F7363165C
83F1DE2D6CB5FD306F441F1C09E1C5281C859EB777FDA513DFAC697F562AA3AA
092FAA20A211D4684B72AD8BB8A5D1B3144B7822C5431691AB86A1D989C6F6CA
DD3CF01D2D43AD2E836C43E520792075672344DCEE4F9F1687F5E18A1F7F2808
A4CD492A90B1AAE543C2D357586AD16D5DA61C12E13338F52F290C7D1A78D50E
363B81CF19262AF6A41B35C3CE298F8F6B866E05081E15818E964BA26343A1BB
05062BA3BBA2174F6F457B8CEE274AE7842BD8077F90731D9C031B08EF9229C0
4D4C6E222909211E8149E3D6E0956AA272BA4C49335A08E4F946E74BEAC062F8
FE26A02632ECDFD0BF97D135B0FD0EB25D48CE4F478E134BB12CC9AE3A5456E3
64D2117D60BA66CB7B4A5AE95FA40A28D7DEB27B069A47979A1CB7AED352BEF5
8C560E44F27B9FCC33D3F2076382F2E96F2F1C94F11476BD78B3F62DCE3FA965
B44AD9300CB1DBC3E3A03639C338E6A47CBA39AE6DA19468F81907C0F2E2A593
DB7AA7618487B1D3D924DD0CED0B372AF195EED1ADAA95369820F88AB02E7F52
2ACBA51836956E4FC7FA005F9847900918832730A558067D2FC40EB84445E85E
8D8315D0A0E3E26DB60F6F40D6B935E1CC0F1D31D3D04EB580E1EA68C289E7F1
94D9CA3F7B1DB6FF17B5BA27C4E2B5A23995C881B05A205779209177897802F8
08498A2A584787139457A97D7E6068500894304EEDA172A99BDFAD7204FC8E23
23C873222A626FBA2FB12BEE4E016B527EF236E5AF135276C81FCD2A8FA1639D
0D55F3644B802016095E6C99BA46C719578BC48E9065AA87E8BDD5575DA8BB21
01894B0C047DB7EF79B8ED91091CB575ECBB38CBDCF48A1E092152EF822F5380
F0E5CFF5154FD2BB8D1670F027599C8AA6FE85CD867387C82549B44DC9F1318E
794ED89C47409E478B53DBEFB94C0024CE2B31A24FF1964DD143473893F650F8
1E28D0CF231296F67B8634C080131D4DA2FD54B4CF7EB11374C471EFCF1206AA
29EAC385C9DEE25CBB81AFAF6027C908EEE802A295E4248C4A1BFB7A8CB00F44
6D25ECD21B236424453711EC6696146B9904A8B18B8920635C99049CF76B116F
0162BF431ACACED6CCF9124B91389A2FA3AC852DF8F0748C75C19B65D2F728DC
E0876AC20486F7D845BE697229F5F1DC7CFAA7895FE9B3144EC77E3DF61AB8F2
2FD1CFB4E40FF4068BE1111CBCE2EA64C3B05B1B3AC68A0B8A83D298C4D9F570
45BCEC024AFFEC50470EEA2501AA72D34045969BC0B18565C063BE0F3E9F9FB5
BB83FBD4E7B60DC1EC13D3A6E60A62E18CBEC95D4F9B797B26664F9A9BFC33F4
366C494E561534BD33798A933C315BCBD971C5D5627A380A78F81319D84C6274
B75247E7AE6939D00ECF677824D4823CFA87DE5DDA61E2B4C573977F19D9D9A0
B8D58006A2A7E81C50F1CF9F68DBAECE652A8E228796299F7BBC7ECEF86ED1E3
99242AFADB8A19C661F538857EEC8AA2D7010D493631FE0BBB09C8ACC305F5D4
DD4290C95FC176BC039EED99160E3E7290D32036155553AAB657D60E2C36D1BC
7ECBAAADFD0B21040E80F87A53D8F90EA0F63D004DB101D5CFF6CCDB24D778E5
7338E8A6DE3B431A32058344CD094018F9B4B8790F6F59291A879E9B8EA83B9D
69D43746B142E9AAD81311765583564A44AE56F46397C5E1009223C277E6B0E3
E71CBD4239EEA0D2DDECD7BB7D063C152982D388DB7A0B4ABACC60B3D708E521
1033D3425821DAAAB8FE4ABA27990D6B91B3822A520D6F9C1CB12188ABCC309F
EDD4FA497D23E9C78A275F71858BA4CBD359B870D40067F132C3D31CF06DE8CD
DFEAFB8A0CBC0119E6711BA65181B4EA0E9538A6DAF6921C5F3881436FF74C0D
1664229029635C383EBCE1CB7C2B074B5AA05C938E87FBD241FD064DBF03040D
46705A1F6ED7377C7126ACDCFC02B7C16E0A77DD6C9A899394FF19037D8A673A
A442E7311093FF3D0A3AC14F3A7E73E9B60B21C842F26EFC7F16D94F29668DD9
7D27867B2D2FCA8876DBCC1722A7C5127FD3D47DCBC817B3D5859FBE06922B23
2B0AC83BFAF220CD42CF45666E41F368E21319E382F750C4BA3EC3E8F6CDBA3D
110893CF1748613BECBF7549175718FE22328FC3356C5A1D6607986E151EE943
E301D9F0A0B58494405D4DA5606E89BAEDCD9E573A2B023352069DD1BEBD5199
146A70324E3CFF770C9A0815EAE958E6A17B3CBF9B54D5E17000CA4114259479
70F983C721DB246CC8CC072B11B3AFE65E5C942182AB71396E9417455C5DF4EB
DA48A165A439409570DDF9A03CCD80180CB25B803317EC7F3DE1F15EC45B64A1
F4E6C4956DF4F0118B300D1B6D20927C4E0ABC977DC8D49C6355B9CDA3F3A115
780B4AED8F5099AC2362EBC736403D067D95F379CF44F3F87740C01DCC3A870D
125837CA28B754F35C5874A9204432243E66A9837BBD9920A5FF22189B85782E
E6195EF6ED3B6830AAF55514AF1C63E8BE31F1F410B1B4BFC44C3E7405DA63B0
5F451A01A993B6641CE1F15CB85317CFD5AA48A8F8DD351882D808976A265030
337A8DC576F4A165DF6415A5893135ADB098022E7B84D9CE71BFFCE11A66AA20
BCE3049F990744F6BF1261BF5F17C6202574CBBF7165183946BF0855A675432D
0D3BA6137B672141302E0C9A9A82F0FA379DFE60338A73083C4108D9470B9A6A
2D88BEBCC30B850EDB381163192BB5742C3A1EE933CD7D3D2C7AC2D5BDDB2548
C6300FF4A5362BAAB8F50D5EAA8BFE9F953BF0CF63093E310562A68D662F0F8A
E1482310DCA6672C452F9D35CB11D347779A5523F607B504C7A0DF01F728F1A6
85854A512F7B0BB9F40C0A431D263F22D091D0F560ABF27CC28850C4CC8AC536
7B366EBC90C9E374558153AC833F4251F04D159DA667468781C34EBE11B77F7D
00AD989DF67305D3A25280EEB707DD2DF0792DC67F835A307680724ED3CA9815
2A36BF36D2F51784D216CF9950858BA54CA7CC4A17F54D043B5881BEAD0F3FA3
DDE2C62A9EAA7B5CAC4A2E427257D7C2AE685F7131B04C23ABCA88D3E224CC0D
4C47CDFD603270F3CE1806150C2BFFC46A5F71375D722DF6ADBEA3E9F50D35EC
6D1D463D49582982FDE4EBA45699E4BB7660CC8A938AEE2340AA12BB786CDD7F
AF7FDE25222EB7D1B85B203D71DC802866F884E753A2A0FEA464ED04E8C7CF76
43E89D5BE373C48E9327862E9C661AB681AEAA9A670586F9ADED6DE71B653E1B
5F49E9CCC94270E49529011A9EC366AD4A745A6BCBE22DA1E5D4695BD0ED514D
CEC1C0B3C7D589B1CA0D10DA32EA97C42CC132FE55FBECA07BE6F152F1DDAB70
0B6CC69B9A1B63AC5634E056C0F79EEE9D91071D0413F4FCAEE18AF239FA9A43
37A44F0D79447E9C5ED2573FD9DE75A1E4D7B0CF43B5B28255712F2E5C5D0F68
D1B18A4445F192668A0F4AB8C27EF1DED74EE602FA579323C5E59E09A4F10ABA
DCAB7204AE358E7DDFC645A619BC423F77E4C7DB510BDC32FCE3B34EB4DFC3D2
A1790D49EB6412C2618C640AA60E3E1C4057B07496F619A02E659CA508BFB769
7284F9D5F89E5798997FCB661211C72C553CFB252C7EFE330EEF63D68123F899
F1164FAB22A392B1E463EE135D9D9C902B17B51AAC0CB2528AECE9DED5CD7296
08CE8AAF3A48C72C78E9693F6829E3381EDCA87B9DD51F01AFAC344014375F62
BFD0CFBB4C097DE0CF3BF39C25138064E46C5E5A503C8F0D77EBB70150A2C54C
D77EE5F902FFDF896FB2B71F3F05B60DD151712ECD1C0A710040E77E88BCA0EE
694D1BC7F57292ABA161F72C87504E36306E6B4631CCE454AC5F434DFBD7B601
80DAE6860EBDF62FE4F7FE74ACA3475F26B881B3477407C51F4EF185AEFAAE39
BC6BB6BEFF9DECE02DF429857C99EDB3FADC61CDBE7134A84685C012D596CC56
7D03D641C190D9CF2039A003B0D1B9D4A5E9539858CCAF28AD7F03CA78B37667
40C47DFC68C7D18DF5EBBD067E65874AF23CDB0DD546C3D2F3FC1DA14062CF64
4CAEDBE0A0DB2CC5E8A65FBE05F8891932ACA1B50E852E5FD47142F762E107F6
91AF9E945ABFF26CDEA98112C2C8B5CFEBA48FA8766D132335B2A4940D4037B8
1258E54FA714BCEB9D1A3A2268162C687171D0935CE72073D73878ABF61030B5
A9733F6B21D48B4E59D982BF9E06969E6BC5E6D5DB6A310F723F5519F243C73C
44EC877FCA7389A25DC6E9007C357491BFBA0CAB5053A1A14064448BD3E8742F
6F04C3DBD06FA0669CF7775414D07B3F5927ACFA908B12495A477C1D326469AF
678848D0EA70E5E9B6E0D538FE9400C351D86CDB7C52B72879152C794199C3CD
0439A7BC2AA2A2C038FAF787628427381FD3DFAB68A367D1FC762962B0D5A0A7
6151A94704E28798B4BB88F6735E7BE7B26A2E25877E5EE22DF07A30F745BBD5
3201C75DFB142D13285E87CC401FB86062722874CE85E3AA78FC49D68F7F48CA
C29A9681715FA7A75C14B685E2004635A717A7911245A671875350CC81F20A83
DD496C36C24947A1EED27A40109D38DDA5BEF5075B4D37B7850C4B8FD2D3A67F
359E0963E59880303D59BE1D3FDB4BC86873D179D88A0A94D2B63DF18953A8C7
1289CEDA0A84C9DFC6A98895446D46E90D8C93231CCFF8B18526D4B876AD9E08
87E13D0D965AAD25730449352FCC07D4BC5A15613AE032CCE548FAB0C8D1C07B
A89A215C8FC1470D926D6E7D4C105DB43791E82077A55DF592632A3E6730387C
5E7CC9F09E0010533BC14E56C291413C501E0AB5C62A9DF4B29195EA4378CE94
2D14E1E9AC03B9A0085CB9CC1F693ABF03C400DE4379F746778AADA0979B620F
84259EED33AAB9D7B7BAE9CE7EDB09A1387E31A3179211295573B72AC403274C
694E5D0DA0864719499BF534828BD05FA84F2458380F0F83803B5353FBC52704
28C8F57AA1F8DA68D133F004338F3589A99DF60BCF37D594B9283EADA5947913
8F0A4EC6C6AE763CA422D6755320D01602B364C07010B5F178CB8C6F6AECF2B1
D346F644A8126EADC4813F842A5F5EAE1946E75E8AEC58A269D0B4B7D9F78D92
C884BC76BC592152756DB6D6B122B9875063C2DAD8F9A550781DF65AB43D7D05
C5E39FC4876E46195F82494D322DE3779FE9F8714B518561B17A9860DA936CC6
1223A77214FFCF55BA91FBED2B28C6D74015EE6CB698E393EE5B7F4D5357992F
6D8C8B9FDA94874E501104AD024DB575F3504749F70DB717EB72DD4F6B4CB9EB
614E23F7D32B7AAA7361EC25C282B6A0A49B5EDFA8FF2CD410CA5374D1C2D78F
E64DB80B78261A2AA913F4FC32095D22E0E2E8717F0CE7E9B0693C6CF02B469C
E9F2C4C82CE70C176517FE9668030CD7EA9F222E44FE2E6A8B1E5252A9D4BC7A
7CF1A9AE29408762EC9F22D923CA574511A78FD505E6CB052BFF9D02D00F4561
2764D8E27354230BD298EB33D9DD15F881DCD822178A446D8CEC5AC289BB9BEE
6488E3781B1FEC0FA77A4F9D4A077B51B5A149D85E5803C606BECCC8E16ECDAC
540523109C2D67621B6EF21D2DBDE76CEAF0B699C3032C28D3CC3A9DFB4194DD
4AB3AC91A12073495CA295BE6933B1441A825338B3E019174B8F1F6C9F49A088
1C778C74EF4E266DE64CD9FFE20059D241C6709E4871DCDE8EC3694BFBA8862A
330B515EB96D8CB78AD3E99033081FEE7F85E61AEB6C09620FC5F2BBCF76FAE1
ABFBCD46925290932DDE0D4AA0E3CC3C51F181D90992785B8D77F24BF59E3D1A
0EA3A059F6075A69EAD7D2EE94F53C3380BC1F17536E1902E82B66A4511E9E63
F2D7A853486251992EDA8A76508FBD4DC9F1318E794ED89C47409E478B59FA5C
3ED9C725B93755E8315784661CDD3CFC4D87F864F3D952C3C7D1A53A98C95127
837879FBC5344878436F05BE2C5BEF0839BF87DD18912FD7D3646552A788EE6E
DCEEA21BEBDB854D0657819F4A6D5799A8B95D1CAF5760DF13030605F7BED34B
F377544C4FE0D9E2CB94C90D217AF778A53161CB156A7F8DCCE5CB3C0197B92B
1E413DDEC857FD28ED582E646B346E4D93FE54694EEB77F329BC4A761605889F
AF87884BB606362C9871E1A4D4F3A0DD97C43EAC87B96A7173DAA892D93832BF
7DAA190CF4FCFB72DD0DCFC91E50358753C897AC2A47FB4AC5E9B50E73D9AE90
3E6613562221FA90085DDE5D7DA6EFF4CB716748BF93CCC7C6A83E5EA7CC8E1E
C71AD88E87889F47C668325DD037F853AC9428E88173DBEA327228CF763A6954
B432891B8F2DD3428DD96AB93E3A62FF73647DD1FC0623F8517213544E8CA05E
5E6111ED239F4E4499CED87A0501A4A39A2EFB470DFCA7C766EF8114F3027275
2554A64A69B0857BFC16F30531FFC2D3463B820335ED408C1F2374FEDCA87687
CC113B93086450749F59CC549FA14AC44E77FA872027C1041723FC113A457DB1
B4C0B5DDF3DD248B8BC462230A005D972B219739022860C06E72D4F82D7D8BED
7A557276FF2374E36EA9667E9C4D83910926C7B1AF5D9210483ED3DF45731C69
CC6EC9CD8DD59FD1C7F22A266FE7BCD92563CBCA6C2C6B50905C92286EC71D79
EB1292E6BD02BB5C388195E8035A55BA3C769132EE95EF6A8A8FE7596CF501FC
00C265873C923DA723401541055834F51807453C7253F0DA055DBF8A0A732BBA
A284751FBB466964587B2F57EB8D5467C1ED2932DDD7D974F59A929CEE826F64
08B56A3E970F0BA4F7A4C566C61F054D8C429F0A7AEC6F42E3C7976EDA674C57
434FCEE9AA048B59AD93EE9AAA8BE98438C6183E0B94ED8252991A78663B92C2
D4B4ED1204D2B50EB843420ADC081057601DAAD9BDC21AA65005CCD1220CBB38
6098BA3ED1AA95C72B7D9B52E1643116E662CAC5F8B14B952493BEDC9B67EA93
48596347A81D5448A78AE0722AE99AE00B384F2E8D9F9ACDC867171F0BF2934D
7D66CF8B3099B051B7D6BAF4F76C41856986C1341AB0F1FC68DCCF67E1AB4EE2
8F46D77A2E3C5970FF60F5A8EA6428A753A30883AD0E478802D0CC5BB2D00665
5BBA3AF2BF9C0EA3CCB2B7DC11D6579DA37AB425A5E3124AF58E8D7BD54BE090
8444365AF1CDBAD2238164B0F1D3366F83D997A4F7DC268533FF505FCF55D409
355C829CF9D4AC5B27073C16AA8B80A61DF255239C0BD691BC7D052022E889CB
DB888C84AC7DA666954D63F5634D4D446F83297FAA9A51C82D6FEEB1F8D584F4
345DFABAC4C2122EA43F24F738F371A77BB00E9A42DF896CEFEE3439663090AC
624D90ABE51EBC2D7D69260FA5632C0FFEF90A864DFC8050FA52A4328ECC575F
3DE18E174F6D518807D02D3EA7E77D79E47029E40C4B5B596817F2378876BF4D
2C305337055B9FCF4542133E0F21105715814EFCCE88F9BDB696284A5BD9C7B8
019222FE508BA4BAFE39A5A2B5ECB118586FB381AA8928962F64F44664D1AC53
7D31DA7E3F61477095D537A796741EFB75E1F6A834A508614C4541CE81A539F8
903A760C8780542A78C7156878591C85D37B4526321909E34176F3E042860C6A
FF44BB54E99F6CAD5255E12F68DF8FB77A6480E97748EC9E09B9CD239F61DB4F
FDD73F1821C85C6847C4C503F5AD6807F29A6109796D1854C1EB1A0510505B5B
72BF158E72300A2CA19B8BD40D61E46A153C3C25D0C7DC1256F76599ED41F71E
CFE3BF1A71DFECA66E04F30CC7FF04822E9AE3FFFBB92A8ECB72DF7B32D9007D
52EDC516EB48845ED9EC42BA3DC260B1E0CBECC7898D6AC135BFA75A9EF43251
1E003BD366409F00A683B123A0576FF34E102563C5798C446D447342C7736BA5
6BBA80EA8BB281F750744608EE366E30C5CB623702C787D6FC4EA8E472DF545D
24A3DF3E216F728D89D06EA5960EEAFFA4BC41DDB56D3D5FB07B3C626523F230
0BE6193B8B8B70BFADD6913C261A9054DC56953E9A8C9C7D8E3B9949E46F7FAC
4CA92840DBD9A852FCD1D06764E93EC2A6373F36A725F5D7D3DB29675C6C0221
4E81FFC726E6F7382AF4433EC880CEA71A4BA7830362372A0202BF126C35FB52
3B345EC97AB5684F3269A8FDEFB9466A4066E81C54781C05A71B623B6F8091FB
9D94210F34C1056BF638CF863B0B463D06B0D39916C2BFA9548D54E24C86F131
44CC616FA04BAF43DA1C74EFA205D43BF3207E2C3063E6500BE5FA0703E25105
A09E79B0AA18A1C345F153C67290B290324EB8365B1A4507D9F708B799C5966E
0BACFF824A275DDB6A89D89F5081F1FE0DCA40F04BB802417BBEF56E3EFDC21C
AA28C35982D81CE2A83171CF2BD29C23074544C9F4CE9F86205CB05F370A1F20
1B5741C02CA87E5862A9B1F1A1E4230C4A0A0099D280AFB05C2ED4A5F7BD5CAF
A9135CC1969E474F2C2E0CC3933A1F5C39BFC5CCB48C3928DF8EC5EEE1780A78
C587F31B62E3BE1991CA0BE1D908E4C512E1AAE11085D68EB9A7078FE42912D6
658BF3ACCF715E63468D6F77BF18AC181025AF9377005A6B6FCFBFF04C73D9D5
5F145963B6D0C6B27F94965C62BDDA15586DAB0F3D90947C94C9D4473D5A9C49
0EB3B6FEC5A91F1F266609281D84C24AFF9C656CE8765F7A44066BD4350EEB84
71691D2638935F2489E87EBB5D3F92FC7CB45520B129C5612B04ADA368E75CCC
7A54048E3F48D4314FD9EFABBB7D77A8828768D6F4822CF05153D3E5A4A71219
C38592C86237B17D6A6026A1F39941061598C84237011B4DCC72AC6BF31E280A
AD4A686AD314AE577FE9448CCCC17BFFEBB66F78E2C6F07B071AB9186B9BBF59
48C2C694137ADB9AFD39033A42F990426339FD6A95C3F46780518D34CBE784BF
7D6FA959014F0E9A6E8758CBD9F6CBE68F5CC53D80BF9FEF50C6C974CFC51ADB
D60B4CC365B29EA2F459498BB8DD44A5DD3F3FF43551384B8E746F870E68F4EA
8F994E54FB3169DA2D3A10A636DE6B8427381FD3DFAB68A367D1FC7629642E70
3FACFED58772BDD4978BC0A27D0FD32FCA51B070DAFC00C67B49D501CAA5B861
344413F1F255717EFDE079EDD6F3AFA7705CC40EF32CAB3866965D9BB5DA96D0
7E2CDDC0C6A9B7E683199CAD092D5611A19657FC7C982519BC3A09A9D795F030
7C776C25071D0B0354CD853222F53920BE2B47FA5F9B2204FA846CCB1904421D
A3242DF909297315D82F74BF79F47CFCCFDA431712371A143FFDC83A9D7A88A1
4159B3A436BDE5E19967A80B304325E3CF06E9B2468083435CEC83A6F629B801
453ED2F28B1B9EDBF53AF1626D75983A6C3B383A6FB3025DA828E12158E4A9C2
44845DAE8BEF77E829EB5FF3C2A88A4117E0DC93A95C4D46B4105E30246C55F3
4047D3E05B101DDC75509F64E99855336EA75E82BA9E34D4C3B896C593F85AEA
9FA0EACA669BDCD4F0E2AA3438FAC6FC62FFF85796B81569886EB1C9C20C6CE3
5264953AA806F512E976E351613F23E810E145B329EBD2EE9D8723A6E28DF047
68CC0AD74EFF6DA4523F8298CE381D567C22A1B58098554491340EEC6BEB2AB1
AB21AC051340F5C24A518AA4D57F35D454521E715BE967990071BCCD21A8206C
5C40608203A5C662F178E9F0671D80ADFE316D582C7A94DFE656954A7E9E5ABB
1154009E0C18A6CDDA3DDFDDD88F70564DCD8D03F8905BAA1B6C6A386B924491
D64E03185A78C61F7393E000AA41F04375839EF5540A30BECCA0318EECFED17F
D37779E82F47ECCAE0749E97B0D9E4573F7B6BE316D8AF143BD93111D717FEA0
C56A0C86CB2804718E1124A0C6E82A0FFA58FD013D9EAD2D88B01654F4C983F8
1A3F877C027FFB0F440498A023876736CEC917E68548A8CED2095BFA7DF83AA8
9AF9949188A90AB9C87E6AEA45F9C3D2D7DD49A5121D995CFC630B9E1360A784
AF0AFBC5982F003CFFF22CB3EE03841E657F3716353FC1A8564DBF7145BC5F59
B4395881CCB81211038A6D38763047D0180064377806909AE2A524884E52445A
E7F45857949472A9005CBB14F32F1C3D39BA8D1243BF046098D499D17920056C
56795EDCE10321CFA3B1CFA4BA5DCE1627CB5B3D175E88ADD1EDDFE83055D809
6D73F650F14CFEF80336C985DD66CD26DD6475231521FB620C2C1C392677CB07
502BD623E63F673C4922CC21BD97066F37B3B40C4C9DF8D4DB0AEBF35A2AE606
51A930E97F6E2FF49AAB53CEACC4610098E8E203760F07F84BC5DD2F2CD98801
4662E46950E002DD1EF770BA4778296D06C85FF4ECB3E8711A7D96A669411066
9CADA14CC5D48364F8273880ED40DACA3BC49CAA5BAFE5F553D5507EF1B5711C
32E17928D26633B242128B907F82CA9CA946E84E8396F18FB4D1C9F2D3A6D13B
C6B93AE8DD633ECD288DD69057F351AAB2D25E6D9A09EB37455E03454CF93DC2
E85BFD19567EA7C79A95C907872F5603C27A5F76D534722FF10FCB40EDB69502
8A8E84998F5E1689C4D585728A94E426B23B8103DAD5CAE80C6547ED846947C7
CB0D5BF28CFC6DCC07D024B7569AB27C1A79399593D71AEEEEABC20A0709B11F
311CE63E0D94A75D85AE1BEA97194A2B62D7F5A3AF54BCCC1ED05DDAB14D19C0
7C64F7E34AECAB27A1A571B1D127B4AE78A4E9D77BC70743C30BF59EDA5E6206
FB74DD581040F921CCAF47EA535BEBEEDC09E5F9CE40F7F845B1EBDC5B1136FA
BC9898C5721FA9A64D8959043EA55562933CBC859DEB55EF822F5380F0E5CFF5
154FD2BB8D15422F5AF9372D3AD61B2D6CB66CD6BF4C733FA0CF3832B8A12016
A5AF5A64DEE8D4BA6042FA195ECE203D69FD06AAF8C72659580928F44039EC6C
77923C16E69883362F840A947FB0D690D6005BFEAFCECEDDA1F3DB1A0C2DFFAA
11B149ED60FFD0C08B8C765679FF0FFA221A10977BBF4ABBEE79E19BFA83DA58
B7E0B86AE371F88916F7CE9C3787474FA99D22AD65B7BF32BD714A8F491E2808
B6A9369B642D5FB4378B048A811626E0C0CBF9A367930A8015C023B5538245F2
C015FCF5F235343A90F7EC9BDEC0E8B841FB5BF2DF389AF363A8D67761C0F2A1
DD706C88E65030E021D4DEFD6F871F7EF9D23EC242624851D8A184C40A73B179
2DA8AA5429637130FA6B1435B35CFFE1EADBC6A675A7CE095341582702DCE4EF
EF3A673DDC442F02A39B1C2274D5C4E09D5EF58E253DC0F8D3DDAF5AF7F4AAD4
51781E12C156A0C13989BD4CEDB7186444F1649D8A4E15591C09734249B37BEC
07959F1920EB0B6ADF80F97B2DEBBFDD58DA9D4689E5D207751DE0B86F7251D8
0BE818D61E6740F1523F30B48365C2A8588440F9DF56D327DA01637CEEE0B707
F36EFC28E1B3A46318DB4A058B98CB92367AFCC84723B22E05955082E1FB3C5D
A2997D960DBCE77385E78500879B375DFE6258B3610AC8145BFAEF69CF8C1849
94DEF49D77D9F3C98E953BFCCF3D7166BB4BEFF24F60924D537A4B2E5568C871
A39B3C32BDF8A354C9CEC1281F96770C9A13B0C2720DEBB9432F01A550980BF0
1404E87440A3E6197D5DFE27452051462E2F3A2E1728C6C32537B33DCE4EBE81
5CDEA4631EE275B83B62D4195BD05545B04A521EF4AD03B558F4AC437E82947F
58A30DC4C3823185A18F10F21A04C3CE364DD00222E3135715814EFCCE88F9BD
B696284A5BDFFB2108B29B09222E86FF1D890EE2689F27AC0DBB5659EB4FC9BE
78A90A8BC6988EC021106493CAA0667D6EA67095F7E64231E9D8A5F942BA9513
5C08ED14956234C19F7580C2B003661EF1F2729556E93802297CF25F0ACE1D65
44668A511FEE990DA3A112221FD4161E90B8C7D900193CED0B6E1698F966B4F1
C15961D374DE25A7B0EDE87EF9DE8BF75DC41C003B05ED038B66C6CE38A97957
AFB653B04F2614CD81E64F1C330C0EA23FFB44437311BC55643D5AB23257F948
4534F38C37D19152F9B99F98DD697B9DD91E41C8DFF89925CFC5D85A28B616B9
EDA1ADCC3616A5D11228209CEE30FA83953E0F95D11C201018FE91AFD0B44644
1E0D4C268B79B86A81A3041A6EA24E085EFD18962E446D65DF0F65EF55031CD3
8EFC48EBD2582C723C32D368C2080CA8069C6B0CDE19AC94E0BDF9F7704DCAA7
8FDB914A7DF0884F7E2BF3CAC51DBB388102E674C972E3A3DDEAA67148875B3F
A6DB4D7266AA1D574E595671D73A3499EBDC256E313A5A19233DAE151C63CF7E
54B43BD28AAC792C2E450B9BF1EE715F65BC146CF13E9FC00E316AD709E0CF9E
BBA3AC28F42EE409EBE71CA5DE4E232A37F459D0EF18D8272A518D7380386793
5EF9F82706631264A3631413D94E02A669BC69A711612F51064C1375A60F63CB
797D3F2267A66FC82706705826819B52AAAD0F72ECE9DC7CD4DE6CEA6D5E8BD5
EC5A3633B36E531A430598881E5E00F9762A049FB15DC548DD9B6C71BE4FC366
2B61C59F2CAF8ECF54E132FB78F6843DA0B2594EE9642FDF96DEA84CAA9A6FE0
F9EE7E854D53B85936B31C808693E66B33D3D4FC762880B589A038A5102ECCDB
8736CDCEC853DD25DE15C6F86294CF38E4AA678BA8A08F81174FFF1FA12D73E7
AA25EB57451DACFEE99AFB89850C6243CBBAD33F74A53E3F70FB08ACC8E0D151
442175A1B1EF865445EDBA2C9F4E71A972E63B498CD052FC87931B81EA6500C2
268DD643900B9DE5B6FD103D2DE1F3B7875616349EC7A6B72D81C1624D48749B
7F8796D2855C1D366F07CFF3950EE828851B409827688B0DC75E790B8C3BF5FA
A2C6D758DB6B0F7DF64C81DA33E9A68B9B834875D96749FD58506FFBC9507DDD
77014C2924CB223E405F48F339DE67B23AA4C8B47CA0DE5E713A988B0833D77D
22C6A4E93F0E0210F030C09354A99608ABBEC8F6ABDCB403F0E9B9F002E0E963
A85D37889376D26BE35ECEFC05C265F81067183ABF373060EEE77393A53270FD
8E621120116AB4C81C19328CD271B372032A0A3229790B7831A2EE223AA7588C
68111E3120000834F31E53D51A3D12A141F41BF0471E32989755B7D83FF58464
7B807D752C9F0598CE0B324996DD0DBA1D8074DC6D874CB2247B8358B43FB427
0DB6395806EBC72923899A0FB79F8113DF87DE9D4BAD3A8729BE2E79F4AC51BA
4EFA0965A11DE5D53C5A66EFC05539C901B03E68FCB40F57F3C85743260BDD24
1E10AD256DEED77B14571B11FB879018812A646471E9F0C1819320B766793F24
9827D7B0C791FB75399AEC03FDDCE6A420A6556B0473D8CE242D56D62EEF6079
504A5809102BA714C1D454282A55B106FCA0EA4DA15F0FE86B4060A052979EE7
9B616B0E85A05CB8C603B43394DF2A4E2C4B1EE23DDFE63DA3C7C8710FD5B93F
2775696BD36C6DE515EFCB9F1EE295C55CB1C2F4E43E67F00029F54AC2D89675
1FC8A196672FAF4F23F9D40B1956EF5BE0EA84B15E6A8F1FD76BC306585A1225
8CF5584E8048A95BDB54CDEC59A4699BD9568E2E9A1BF9D2E5842CDDBF74140C
3E06CF36C34709E5223CEEA0A86C9C89D9BD6F7434E9462CA6CE1CC41034FF9D
DD7C0B479B82352E0497AF024C1D02D39B4380965AE8EA3789FB48CC5E29C2A8
6767D2874B817EB8E064F4DFDEF28601CA4F43E13DB57C81054245EB54984558
81367B21D4B71CF5A14A3269EC5DB4A9580916DE799F5F09D3C6656B3F87A0CE
1D458591A88B2F51962CBD6085B3E530D4DEB4429D777D6C653BF3C326945F5E
C60809A9F78E45BE3409822E5A52593C997CF959E00469F192A288CEA5E41229
3FA1D62FCBA2BF778FE68559CDDADD31F2F3BE22AD097C23E3D43BC2A5698E1C
EB0B5AE3BF68F02A192428D4C5BDF2944DF4D3FA880DC7C73D37186DF6A9B62A
73482C427DC7C43DFEA873FA4F3241FE1CB13D5E4D777BA1B20B2DC5E7492FC4
475FA531D5F9AD0026521621F41AA3D7E7FF53A0F7161618E2AAB51A9609808E
57CB966FB9721A3FCCBF9B37AD7801A32386E6AA48764C909B0F3E3DBD53B7CA
9E411AD23929B0BE66C44F3F80627CDFFCF8CE1B870927191490DA5181474BCF
AF08E92C9966C19F581EC026DA1E7C55340CCAA2C29EECB5A9AF76FE1B769B87
37C7F50A6787EDDB73669DD6039FE44C7A035FD97C16DA743F7E26BB7BA94965
74DDBDE48F2840FDA10178E44CDC08B36FE5FE6655DFB53011C2D95C3D384864
AF4B530AFD8A10A4479EB1B7ABF80D8F869340B27ED5A068F6A42402BA3967B1
0B0CCD4C5E6631A06E36F445CBD959E396C85116AD2917EBBA9FF678F3E43F4B
AD30363C396D95993B850D16B50260C9C30CFA7DD1FF2737F1D3E5D466E8226C
7EC9B0B2C42BBE5DAC75C41889A7105C0D9DA0422B3C323AFC75F0E514166139
84A2C4DF565F70BFFB8311B01ED6871B8522B7E67A25B2CF0F8748370AFC4FCA
791350BAE805F3499A0E63F4D9C388E4A864AC9AFDC0AF5FF81AE00D6E6C276C
775DAEA6F594E6B091FDC72862F98823E348C2416FBA3F5D07B10ED47D8BC757
705EC1D9682EB14264FB488AF7C5087563E054817CD2D5845BEE7A690DAAE1C8
0ADCDE2D28414B71D626BBD5A0CC58E599F5422BAD83C62B6A88BD186E5AB380
3CE32E51EC4DBB64BF440ABF0803D53F4DC632CF1CDA60BEA3D4E10D331ABE30
8DD1D17BC1BD3FC40EB7229605912F59749AAC9EE1D540B4402277A83331201B
AEE10CB788CD74EA72279194A4FCC106D640693701C4FD583C8CD5840B169FF2
6E442B113385123FBD0EAF3788648BF5BEBC551BD6B17FF0E88C7F528859DE04
DA7417C94E261489D18806C15321387A388E68FFBD027B81248E7B2F40234C6B
C28D01A91B6E7757180CDE35C1C2D5B7F7EBE4C9A81AC6ABA40773EECE5FEEC5
400C687E2003D74A23F300C66F259F69A60D949549315DD15877886D253D759F
30E37534743210743F02A130634E70D438E2B5220360DDCFA34384A5D2F6D633
6534F49E4FB3BA34DD2E646B60E780EFFE49485038FF95FB8515B2935E77F83F
F9D12D9D37137311D23479A3581C9A980A0C82AA88CC9139B4943E3FD64FB216
4EC709DCC9B4B09A6995CB7015A19980A8E6DF27ABED7158F2F1BDCB9AB9A407
87C6339647F631DE208615D577871CC667445CE0472E8066B36AD6C9F9229FCB
F7E3025AAC04905CFB5CF07EC1426ADACA3982045B5F62B55B98937CB108CB3B
E19DD38D460BBEFC59A82B9AD41A17D04F0B91E76C71786366E62FCE43489AA7
B679DBABC7B488C8543B0D9D238DE29D0145D69D007DAD4F16DB8FBB2072C9C2
FB1B1CE70134B5060A112BC4E9B6307028009BDC6E13E0A69094392620048680
F6B72A2F1AC1DBD29E0C12E680AC09E96BDBAE63B6EF0F36F698BD630E7C47D6
27F49D1C2F0FFAB33B01181E4291857EC077BB6E64C24E8B2C66241489D18806
C15321387A388E68FFBD009E86F16E00DC0454841956E4938C6DF8A81DB5F93D
6D1F58B7CC0CEC0118A77698E4173745E1899670DC72EB5AF530BBACF55114FD
831AA662D47F36BFBAC09CA9962794C022A83DCDF832A5CCB67E898219842965
140389B64B2C49D680F8AC65FE25D9CA933C917FA7EE6FD539C8535C495E6CDA
6F9299BA48F35738BBD9C2B73BBA20C72A9553B6C6FB49DAF4913E9C608A8317
85480847BCF17CA512A8AF0B7CD120CE0FA2FCB4923FF39CBA5B4156D8DB312A
C8AA4208BDAA3A241789F4BFD3CE966F93ECB9D742027BBF737546E24AE249AB
4C865B2AF89C0B31AACBC857592EDCF0D2AC772C1BA775A40817DDC66C9BE91A
9EAF866C3EFEBAACF27D4C56B2A41CB83147D06B580C3A67A90DCE5A82087F4E
69B7BCAFCC13B34B86F0669792189AA35753AA44C58100851CC85FB60E7DF968
B801465E27FF42A412CD417BCCF201947FA513293C407CB9D6E4CAABF844D2DD
5A87A7CCAD1EE54F8669DF366D3E164137DAAFD26C70760A96A3116812A14B21
C2A3FC572A939790B6FFB65BFBA2453F9DC9A01A397596E2381CDB6388F15CC4
8DFF74875D80D9691027D825A35B712E0861FF3869CC1DEC25FF0F565E56B1C9
2DC39AF0CC1B3D61D95D83750A4B70F20DE86D4B7FCEDB081808AB8A493F1792
3521CF1C39BE0F545435FE0BCFC55B3C9D56A57E96CA67691F8A0335F31F3939
94D3E3966C8CDA3FD999D4E170B78093F1586A76B47201AE534FA1039BA22A2D
2F31B0B75F8C6348AE5E701A0CF7D2AC62176D954F261AB5EAC44985F2B8E409
E73E4618A74B78419E955F4BEA245DF58F1E998F6B1BE325075D5C4B4D9AC223
B4AA42ED70CBBDB25B84EF56B9B4251460F072235E955B9F4ABD8628321493E8
4927F7CFF7EBC4A80DA2D1DC2D2E96E1CACAE3C922AA636F3954FB1AD748CFAF
54A7303A09B79E1F1932E328C03A1B36011AD17150D9DDFC74A5119C22F6CA9A
30105D2AB931D1BEDFF8AD90A00AFE3BDDD6EF014CD23A9857A7055B3CCFD009
A39C5DB4E4B6E0601C7C9192184562EBB0CCADFD5D029F6EE7B2B8526C7811B7
A83DA6754B94AF98FA27E9A59BE3A6C7AB8C3D5256F99F539DFCC8F48B5F2327
FA27B0E3F70A0F3598CB191084019D6563849F7F5ABC08FD5599DC53BAD6B4E4
C137B6CD00389398C23FE50CEA0EE57EEF28DADEA0A2942FB177AAE57C0D5665
B86FAC61030402D5A81D91A826F15CCAB2283A4545F149B1A0C077C4160BC025
4AA0548D4E93583E83EBCE09C5F74C458E671C6792B034BFE4925886554A8018
9B909DDFFBFE4A96F1F836DC23DAC07CEA9151BB3A89B4FDB05BDC8BA3B16C09
168F1E372A89695E72235EF555E3762DA45902274124FAB7160E15C7403D5400
2FDDEEED609165F636393BD95BD73C692267E19016053FCBB22AC8F22E350BA7
5870C64F62644BB102A7B16CCA35D3B4BE9636F89A3BFBB16A5645560883B5A3
B6B11DE5773AE5AF9A06AA792DD7293D1D3C7B0D2ED774FF080795B23B4E2DB9
9DAE981DE43ACA2E51B9B33866AB214C10818B35E2ACD622CEEBD235DAAEE75F
7CB4982A8304C83207070D98DA81698D5B45CE0008CDB87BBCBBC1DC9B1A82A5
2BB1AA4C389131FB17A2BD7F04CEEC32B78372E74A8C3085D65857A285B091EE
0534588D0E32EFC30419CA94A24089B4F6F95DD7C5940AC43AA37C26F368BCC5
9222F7B3A97AF495A7F2B527240A3BF51F3FF9B72ECFEB8047907EE46804F69E
3C31C1FF0C7C204212EF567A0490163FDB3DD89008385759C978FCA80A786854
9A64ED2CBD1B1B450B5BB2B16BBCB0714F91A9DC1CDEFD3BA07154D1F65C5981
4CBCD9272A5654316F01749580078271E4AE65007DAFCD7C871BC80E630AAE94
119750DD97A3577F89331CC55DB78F779C07EA23F8F3B53469585A683D1BF0E0
7FD71F593A04445480204C51273A2243EB9E2B58B9201807CB287B9B6110958F
8AE79CC20CCF19272BA104711EEF8708DB4091F5CF994DEAF0039BFD962B3C0C
732D54356D07AB78A6EE9E11B1C87BFD898670D940E38742A92AB81B01B9092C
8DC53490864DDC9A3B24E4E4CD547C9540420A91749AFAFFB185D5177C13CD3F
C2D54EFA893D48EBE1DFC39A277186B4536CB77E73602F55EE3D3ECFFA56DB16
21DCD543F52EA2C8DEC9A46BDE038E272914A6E9E2AC5CEF9F939A79327515A3
1DD77976265F613554ECBFF3A058CF327A7A4D88441297B981B5CD5FAACB5821
8CFA0192AE3BBA0B49EE279E7BBA235CE8DF21D4438F8F467D17348728927339
58AC9CFD389C5D516518398B98EF97F1E7B59703CCC558075404D13E49920C8B
EC099EDE4DCE4030B697E79922AEB32958BE1E8A677A7DCEFD80233D6B9BECE2
64D19009D10788A7AADDBDCFB559A3228C582BC4ACD9224F0ADF955FDE1B54F2
7E41E1FE35FDFE0770F1CBC596B8D5CFB8948C94F867FA620D00411E591DB3F6
4930049606F6E6DAD81E3B829D10037D4F250022AC169CFCCAF7B4E9DAD17FE3
3D6254A09349DF9D70DB7987C808BF08FEA787E3865E639AF21CB3E47DCB4E86
757060CF7EE1DC4DE736760F5CF3B47F7BA589A58E1F7DADF05F7019285A4349
F7CC8A12B57CEB986AA1C9FA2BA8C45C94919234359AD9416D67F68ECAB1355C
50F246011AB1DC9ED26FD0F1E4E4E31CA5239A449B6B060BA06BFB17FFFE25DF
4FADC7E1A2C37534ADE0DCDCE6AD1454DFF1C8B4AAE9F22396E6B95A1698FA15
4975C15A9386F0E3B1814CB27138B926635F6E7845B1B28D923E4C1628DAC087
5DAB05D7CB2A1E10C8A197CED9A180E2035E5D03B4798CF3A66A20FF26D2C156
C2755A08FA58A8917CA80C31C2E768A4FC6A36A451D0FD937886D7ED3F22DB92
088B5D6A6385747AE505FC9C5EC7467FCB039418845780ED20697C67C54DC089
7106DD631F6D650BCD6278AE4F45B4060DBABB4E5006349233EDE98FA51EEF53
2681031683761268FFAA3FF8A637E2DA191CC184FA02FD7D73610AA31BDE0EFF
A823A8EB8466413582E5DBCC686AD466BEBF2DFEBC813AF8E349888884BECF69
1191D88E336682FDE5B7A92A72DC9A379962BE6C8DE6366CE387A01273C71907
C59CFEE3C5642BD3B55A4218F156B80B091A806C68007CD2B124386835BAC144
1F2396FEE1CB05A36BD05CDC236656E7B7FBA305BD8D2C6FF35AD0FD32735F78
38C98060E4D9BD6BFA8A80D3843CE08C8FD14D52B22037060D77D0347FBCBCA6
564FE7B35105CFF16DCC8B88C78700CBB47D6ADB79D5639E1A751300AB9F95C6
BEABDA4AE41B665A2F7C931826A17BE14BEC32034C44024D87A445DDB654DD3B
83A831B2F2D8814677F046710E0E051ACBDE41773B033815C699B778AC96D967
F64D7E479288A7D2747C4551F5907B66ED0334DEA8F545BC0573225EEA3028E7
69109A3CEE51F00DA5643091D574027B84BD1667C274B85B66759C0D690C59A7
647D79F8509C5B6CDE8F6F89B5AAA8A8B89114540A1F3ED06185C94C8455D111
E0F5AA4EAF9537010DE525BF5DCBB68BC537FC3F1E7D04513F0E678EB012D08B
4F134EB3D953FEF3F84D70A279F715E41D18E51E16EA251C49EBE85303DD54F7
112E2D44B3F8CC8AAFE98B384F6B1F48CEC02F77F2C4AE2F15084F5C57B3A6F7
E3C3741C19C039FEB26A248413954CC28AA28999D6E4A21FBA90BFBBE07EFFE9
F8C7429B47905B91184D0E9B0CC9A0E2044B8FBB0F056412B5FFA260C837D76B
2BAACDBC9A84A934BD0AE37DBC2067EC814CC5575B88EA6E19FCAF5097D67BF3
0E87D523F12491C796E4038B9DAB42E32C9BC5941E09362CC34E1E8D6734E707
6E8D21939325BE9C8F951DE2FA1CB50DF0B0179FF1123A80AFB57470A50E6AB2
6F3CFB3CFE695C779075C33C505CA64CE82103B2AF2E61D4824993C0BEA63E78
B26E677BF9804BD0F19FDA1B876623088B4B8B19C78C1A0A48D97B4B9616E003
69D49D47FD0DAC92EEBB236BCC3446278AB770D7B1754E091F0E4F77D052E4D2
F778F54C835E1D22C34592289E8892B64B224A00DB9F8F9A1FA8B971AF90F58B
3ACE2BCC1011EE5E71D8D8ADAB1CCF6F6E87B938BB29CE3937CC35C3715CFF2A
CA5380ADE4745599F8041F4CC83A330497355B028DC36AAF162BB34333C807DD
C7F0ADA3EA0C04098B8EC04303657821DA8DD739E66C23178AD80CB3B7858FF1
783DC42D7D3A63CDF4835B961DF1C0D7FA6E43AB242F7B60722FE97562B7BAF5
1E4AF0629A2692808EAAD09C9FB700EE88230A116296B888C3C9FCD41E7BA921
D367B0F308A0BA8592BDC410C942D166098545A7D7970E1AB753D26023178AD8
0CB3B7858FF1783DC42D7D39B98B1E0BCD9C642E2FDFB5303979CE2298D74418
F03F2D9F06194229D2F9F2FC8211B2866DE57AA7A11C37C60965C54F38ADC875
63A8F6FDBBAF7DD40307F715DB714DBFA7D0B310503BCC4A4FBC8E5424456609
84603E1E872F836797DDB8450C2484D2F2E15EDEEBB357ABCCC9EAD49833AD1F
C0B96D9E9CC14EAC1987147A55594F1CA1463E1D05649DC650A35B6D9C4CE0E4
69761CEDFC984331B8950D60E0108AA71FC346A142BCFF0D75224F58BD5971D9
3162554D7F593F5F01DE84D93E218ED142B1A2B451142F689632F5AB8111BA12
D6ED54BBA43B13660C7308A5679355542890EE54BAC37AF9D64846C95E27C447
0E3024A309D0EB598A9E5EFD32E68F2E04EEB8C0ECE1688BBCADE6762E190CDE
E6AC380DBCB7C2B6B0B8E51D4C76C8D291C80031EE6CCB9DEF18F9A178576061
231B3A48868E5ED36E933E21F0FB9C5B1040F921CCAF47EA535BEBEEDC09E933
82BEA0A587D1619E1DB68005C7965750BE080654E87AA569458C45E48DAFAA56
9A947435C3486D00A5847693E14B94978647F8FF9403DA9D33AC81EAE0B0AA4C
E5F703CB2DE745D8C964BC672573139F173E270CA900CB1AFB0520A73B3E622C
C4BB97B9209BE1EFB0E12C32182FC67947EE4C5B2F917191C8360CC8DAA8BA59
FF936230894C92B121299EFF96F2E1B0E6477059BBB61BC7EFF81AA34A79CEC1
1CA7D422CB58C8E2125F46288473740C94A6DC104D71240B5162C43048A8050E
065A3505E7CFB3977916ACD6F7B941CD70C1389B735CE10FDD9D151FA106CE48
DF79DEE5663A8E8C8394AB7ADE0483B15069C85C98CA8D537F2D0956C520A7FA
4645A5AF9515E57AE70AC9A1348DC7B8A64AEE828413009BD7E36DAD065A6869
DD702A4AC28011D57280EB679FBC0566E2F25E69367951BCCE1C4576837DEDD0
ED2C921586B433146DC9A135C88DB3618D77B66A18415AC71F3BF6043D308AD8
9E7C5BFEBE1592CEA0938753571EA4ECFA81043CED8B0431DF6EA11EBFD274DD
A3FCAE379FBADD0A8ECC1B3FBE79BDB97D80CF1EF32324EF601DF0E030A838BB
8BF6BC66B370C7BFE81EA4D8B0B8EB8769DF99B45D8AF3A2138E2755392BE818
95323E2ACFE54AC457D222ECC1A449DBA42FE411EBE8A741D28561050EEFC38C
2CA5031ADE35C2E6BBCE3B73DA68CB05A06FB720B88BF5483E74C30C6B87CECB
4603E3A2EE6A02894A286B557000AEEC4E80699AFDAB9839261F94F3172250DC
E3593DD46B778C2D617B049F082D159051412F27E412DF0177A3862D93DB9BE5
8DD240B05FDD2038AEA57D121A331862C85C6EC34F753E03E99D426F6A4E26D4
98EF8B3A97D5FDCC48B96119C72AC2375E52CAB31F85DDF9A0A0EDBDD0F02D7F
CE8672A37BD8FFF0DDFE3F0B55FE5E4D0A0A6587B52BDA2CC4E44D6F1EAC284A
FD4B493044E28E299A27846387E83301CB58B9424C83D0AD28BC5AEE3FE1BA07
54F9E8EEB1966924F1246DB8889B1EA68E9439216F085AB9484989DD86BA437B
955E06F03D1EBEF2C076AB62399A458B194C91D92AE743B4607BC14EDA36C8E2
D52454F7C7425B6901476738B002F698E49234C804FA9043E442A214481C40CB
784A68E3005BC07CB77432733C8DC1EFDA44C2811255FFF3F927B774C765D517
677A7520234104BECC6740C87A1ADA31A35BC1EB01570629C317E60CD87D8D84
FAA3CC1C0778BBBD42893DA20DE38CADA7489AE32DD945DDAE805E654F06F4A9
02B60120714842A8A0CB54194E0F2EABE9F5DFDCA6F8025862FA3D6C18C78144
CA2843E2DF1B6551E3A9D6E2DC28017AF15D5EDE9A962E66D3EFE7E08FA47504
1541569F6782E7213A06FA4330A10EF35F587D31401158AD976CDF6BA18E8F24
5580AC74F95466CE8802F92D3368E0F408F298D63938587EDE6F09B2E225461E
594C598BC8FF5827A4CCD48F63E5020E43FB210957EC8B19C6C4A9154D37B3FC
B40B23B69DC177F28C2D2F3475CA883A55C7F25DCF82FF89D52EFF0F32029CC9
221280B81878B585704A80FA1F954971BCC322215B5DEDA6F039085BD9EE5805
2F7B4441CDF49B178118120591E82194B40046A8E2CF64EAF31F65FDA3A16EEA
20D8054F8C539076D1C54FF5CD4CEC1E823E74EEB274873A0327497CFD1BE933
9B3166C8832BC4A13F9E53AC3DC48AD699AB26500FC832CC58FA19BAFDB53739
009344CB03DA3278400F44D28ECAD128934E9BD8E09E2FC76EF1B94EFC2C6619
67FF60444A2C9478719F8B36B921ACFAAA1CE03A13F6D150889878AC5CE6F427
AB43C4EB2CA396AA4E618EC54656A9F11DB651A68E4532B21346451FEDF97BA6
4E9CC1FF66E653626807AEA7DF4332CD7EDBF68ACBC1C50C9328CEFEAF70DB97
373580D4A793B13FC3DD0BEB764D458998F76AEF8AD6ABA312EB54ADAC99FC15
EFF0C199BE17CB50398F14A97E025CDF45E646559E88D6CE5EAF88D5EA218CFA
1341516B4CE569E4D08A4CC0028DEFC042C09DD456D7DFAEC39A350641E2E8E8
EDC0308EB82C33457F9CFBA56A4ED76A5D9546CEDEADA207FF420DE757E5A1E5
1F297D8A2D86BAF190DE23F9815259B9F367267185CFA693AB69DB7354099D06
9CBD36858549C3B9143E50C14C14D1D758DD8DD1C0CB6836E4F598C97ED28843
67E6BAACCC65E3B23D30E618E827E5258B80D65E5EEEB53BCE3626B2D5F85724
79BC77F713B504BB4030B6EA13E4F2FED181B4EFF7A58F9C73BD46F116711CF0
678ADA87200AB4D36144BC11DCF2E44D782BD43AD1DAD969368DC8AA494DC70C
E1D6683BC171CB4FFEB87F2752AE3F175E48D0D5AD9C485E8C3B62EEEF57CF7A
5B984E4BCCEDF6B32C91B4495E4F86B23803857946ECD28DF5A948716208797F
8425E5700178C1CF6EE7604B4055A0D4909B62620F6BAE983E1437E5597968FF
A2AADE238B32980427B19544D9BB4F95B059158280C5C8F5CD8278AACDCD7415
56F9704D8CE820D72374D4E815DF11353AD1468D53AB5F7A0C6DE4743D1AB8B9
D7C6C3AD4938CD18365825A40A8BFF47EDE915F181330A574529ACF9461119B6
E66B11DD7A01508E0E2A6193953338FC5B902B9ACB6D9F1FFDE70482D1A24EF8
2D057267160E477B4AD16BEFA44E34D8D988831958BA676DB0DE0162B37A8F62
486464B046653F90A3BDFFF569FE8138E2DAD70EEC20924559C820C014696709
2CC5374ED2D4340F8B17B12316B4B467ACB48DD2558405232EB5B6FAA250AA3C
9838BDDB670CCEE1673222ABC9E532C31C0F7AD51A36781A8B9797ED9BB0F913
1F5CB18780D7CD08AC17F9328462C2517151E43E4E35F4D4EE98A9CDF95C6715
BB5CEF03953B1F67F840D7562DB98A035DC07F968D6984A493D586ECB0D0B2D0
1C0EF8606B7B45B354AABD3E503D878B1B86D6BA10437B7277684AD055341463
F1168A364D3FA2D3E716F1BD1D0477B53BFAC582D33F5395638291EEE5167393
E16B6DD9FB39205C86EE4DCD4EDF45D3271E27D15BCA55F0B52C2F1B576E88A0
B4827BBC5FB86A2879AF2B898590B0A3CD872EE1BD9E8E51B6B99D2FA47C417B
F51D6D644E6E5E1F5D74625B89CE843EE4BDCA42E7910CAFBACADD1F7D4FAD91
6D7A26F4611836088D2ABA0FDC2DD8DA36B3DCAE684D5E2E054572103954789B
315C4C78CB7BBFE9F7BEDBCDBA3F5CBF20964057F342A6E88BE905143A807947
ECEE27ED42C2794C515206A03DDB89BDD8B0DF39622FC47D8FFAA4EFEE602BBA
FFB06E640AA6163070002BAAC18E6128C7C1C82874099E199867F4FB32A31A3B
472D6EB7C832197D10562BE9292492BD2ABB12D94F30BA0072DB4A3731DE9190
25F47B8E9155B40F46589EC4A181178E09B79434A956F34071825BDEE615E9E7
F3380357CCE9386F02ED14A873D2D2F53C664605601EC2C9EB152166B4274118
332E4B10A12646362393144BC3DBCC3E64A58BF8D14EFBBC11E641B21D0737C9
62C953BA3CC579F489859F1282D65E083F313DB1FD984A6955AFF8216FF3E055
99D34F07A9D8DAB7EB6CDEABC20FAD45AFADB0A5668F91360F242F8B0154A8F5
7BD61032836B027B44B0D3D01612292A4947816F8373441445E9563A5AC21594
A41AC57F969632537F525D8ED2C6137FCEE726B7F5537AB35595C5750D11F05B
4A6BCC4ADDFA4E74760A493156C707C39D0C277AEAEC98E6C31C89DF221A0A69
5FAF7E2C8F133ADA5D53FA46B4C205BFEA174650CEEE93992826CC3590B32D8F
2BC655A3B8BCB0C40E0F332CA85AE9CBA9B3AB4E87C4E663A7D595EB87A0BD96
A1B88FF77C489D68B1E19B78C5FCEDC446FA55760A8C3045E78CAFDB8E10E9DC
2A4C658DBE68413532C192CB1DFE172FF37D5B70A5AC38968B7141BD6B000AE8
C00F69E38F4D9CF52003350618F8456981640B0CC056EF6735D050EBAEA077D5
81A8D93A3BB6F913924B2C6E77AC0185099398DF37AC2C6174CC6A9F902F8A80
A80ED788ABEBDA025D81FBE22BB6539DEB0487EBFB3E41A906E701CF299C1B2A
53C3CD4059BFF6AC337E49586FA38CF4EAD2BB2A5D7EF3924C25FAE699892726
C0E1A557D828F7BC549B6EA8D6CDF71A9800E2EB79405168B2F25F82B3CD636E
F6F679D03DDD0634E1810C4E144825E7AA2EBF69D95221E4F8E12DA7D57FDDA9
0FFBB2949C9AC6ED5AFC00CF18767F0AE2FB05E4D361E82C7FF35708547E4486
AF7CD8CA09762A4540E588978358A0E13DC442B2DA16255581C6292A898E046E
6EDAD6BE1FF5D44670F74E090C52B2347DB622BA3D2DD9E668915A2E811BD877
73A6EBCCDA5B5CDD43FFC6402A60DF1300DD29D7ED03A7F32E96A85EA7FE08A6
E4597289D016176E9603C918FCD0A70EE18ADF916861F08D619A44B246AB6CBB
DCD3FAAD7AEDC9FCCF1CD388D8D3DBA9B0A59F945299DBCCF42729861451508E
E284575CC5C4F5CAFFA57436A32858B93AC58694A6BFDDF91D4A00BCDD827197
91BA1FD2B37EBE3666A228EBED53CFCFF5D16CF00CCB3B9A6A2BA9ECDBB43544
B1F036DE7460A2244C15EF835ABAFF4660DCA63098458F31E90D4E282E6239D5
F47A93FF95EA600FA327779B5FA01138DA37D9C0799EDEBDDBE4416034C34804
D6447C36C3C6FDF1780CF7A0D392D2FE54799572091CDB7749A04E3617F347FF
5A23A4CAA8A8FE98F8A8565A7DF611B8959146D286F2A43668E68A02702D3041
0D5FD6C685518965BABF8C725995D8366308F3CA2597DF80411D5812A5B0EE50
67B4B82DEA6C13F5B80E3F6917B628F2B8992BCA2073DAD1FA758F6FBD90DFBF
203B02B0147B9BB089AEF4A13F6E7DA357F2A78D03526B9751BE6F9CE0E28B86
2EBE107FA11267FA203F8FD3350FC1E216212B65248AEC2778076DA55046A0A1
6278B755DBBF39C9BB6DD23ED71ACC4792E91D5DB0570AB09957C9BF233EAE03
20CC4E274D3933C10B962A229716C546684D867F4E37A86DB01633D8608252CC
9E37C099224FAEB9AF2738E73C61B781A4DCF9BF7784A028FEA2FFB33C2AE454
BD20987278D08574D2D42309236D71128AD3E4ED61B29363115D2A221A81DAEA
9EFA24EAD82346C3D7D5987C33101D87EFD1DDA8142AF76EF2C228A1B6D0F264
7194BA88BF78A428DCFAF09DC79915C8D4305B7845C8063A03A98B2698554BE9
889E0AA44A4DE9A18002EE1D74991625BDF11FA63B5F2B08D89C2876DA7A16E4
983953AD982BC6A37AC09E81B1A91D474245BC0FC1204E4345BF28E4F8713089
D97F1CB5F706AA3668EE11F60EFC8920F75391886EBDA51C5E30762F88207317
E3D99A2995C11498A905D3A9A1F679F43648AA057329EB964A0503D2A7081080
D2BBB96DCA39477FB423281CFC8416D1AB9272AF121A6DBEFB4C4CCEB195D849
70084E3E3B3401042F690632BB5E93765D591F0FE4E341B4E10C31C991735BF3
1CF6351F31504E448D75BB1F1EA20F357E11B70EEC5CA9D9B9268E7C8B32CAD8
BA29B8B897B10CA038E76576F96A61E88D3F0DAF1115ACD938138FD8B912C639
394E275EC58DE958CFFE37BD095A54132D5063D6521091246DE1BAA3F2B0940F
D63D9C390B2D8024D97F19FB6917A07A42E58CA96E7B478228CCA1F725C7756C
A7FA573AA21727C37D548D27830C8E56E4740FB21391B4A4275F6F71717D851C
596D0A393D65AD8615A822DC65720B370A206E2B47F004B89AFFF02031F830BF
E917D3C3FD938E6548E383535A03B25E10DCBCFC292EFF7B8E1EE42A857535FE
68EE57E25F85AD5437BB16FA5233902FA9B8FDF122B3B9FDE61A2CBBB3365A5F
F85D59720A052561E61A88CE28D088F51B455AF47FB92964DF81520FCDC3AAB8
ABBDD10778D4246F4B245B3EB682D871A2C9F4F31A53B6B4B5766C11BC943709
453479BF1068972190E5CF81E99BFF52CBD457A38513DA8306F8935B24AA7B91
46D5770BDFE1176C752268AB8B160C5AE8735162632052D3F1DA33BC86C18084
8F8C17008B4B46B5D37ABBF52286947075C3347F10D335B78CA254029A4712A5
29DDDBFC80BB9DFFB2D5524CB23186F687375EFC32A39ED51CE0924DB9AE1FEE
C08E3F97A94BB46CA7B334E136A1B8FC332EE2700C9B241658AF8A29A8B765B9
CE48B39D2FF96BBA81510BF8E27DB0A7C82602B613684AE84CD230E1C0F6304B
556A87D7960CD27B00D2A799862DF7F611BD2E14BC8B70FEC6726FE366DE063A
E69478D299485E3D76BD8A90AE21D4632093047BC159CD52C4FAE6CDCCAD091A
4BA2EBEC446C999B5CB73C1DBB1C9D629E8636A3C6BA437694B8F166C61BDA36
319FF2856F2F41F2C1A70C8D2754581C5656B28E16397C88DC27982E5EF2C42C
7E546E9F53FF8511EE7C300877926F7C3A02DA03533A0F948D4314F387281407
5B33BDCD80D9D29698BF9FAFC660DF15CE38CF886853018E26B769C902F3B708
7D5A815D7DDE5810292E8A96D06FBF58EA7454675EF039BFB4AED6A95B52908E
33528E2F097A5051B71B654B9FAA310301758011D020765D2E9EC9F93D7F4408
95897E46191D6D40CC6D8231ADA63EDBFA2CFC431D5C494D74B00642C66BA4F0
960A4E5CA09EE3854B1A260480512E22CBB158CE0F33111AD8F93171E7C1B5A1
92E4CF48A637CF5835D431928A51D6DEE6B166CD867C47CDD1E475DE3C62DEEB
0E5279A3CAAC51B57E44A0D5236DD39679C332A86A2FE5FF623A9864D6305E3C
4A83D81E141BB817927731CDA6CB0B240EBF3CAB57289DD3F59C8919F298733A
DD1E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82DC8E344A7CF2AC71AEC18
36F139E7A4EB59A67192BCA9ED0EB25DE13032F6FEAFC3B1F4FC81BB0EDC41DF
B9EB92618667C59EA499B788CD26C2137D70F1B0AF793AF5AD0D0941F2E746E3
F5A7F0288BC1EE11E982EAAE763CA422D72FBBC0D754AD58FBF92629DC8866A0
431213513744DB48E52EFC89C83FEB082588E4F30D7DA77BB26D62443837E9D9
06427B9B9CC102857D938EAF09BCBFC0FE95B09E21BC24DF15E8668BF7674384
6FFD2005F87494321FE1418FFF1B4429A56410878A6390F84C90140271F19E79
DE532128CBB04A2ACEC3E0181AB6831409A052B8283DE8B78EC107B541207A3A
5EB675986A598797060B710A585A08BE0E1931E2127F955F8878BD2A042878B4
2C9F2BF1B6359D78E0853A97B3569EF2E3649039DB6F436FFD8F96E6245ACE68
EA46EF9A97D042CA411A23E01C57BBDC97E26E31209D41DD8E0A5A46D9EA5856
B057D9D98E7866CD6C75E36A3902C98390ABC55FD9021B51E57937FE0636B6B3
C41D325D75E64FF9C60D6CB3A4A5487E698B8A5C5C37D81D782900002E3E3B56
B97C1428E4A4C10E26A693655EF607FE7026BED78591A52490E09C578948CA79
87EFE7B8439377A722C868DEC2996C5CE885AA78DEBC41C3511CAA1C50699896
C567C124064AE3855C3D88C94B05E1F1B1FE3E02C594392880C4B36D498A17B8
5FEF7CC035819DE786C2DF695EFE0D8D2B1B591F1B18B66D915BDC3AAC74396D
3313FA08AB71D7A18BAE5829A87EC8CD918B61D93F9C9607A63A736508D42EA9
5091DDE9710A888B4CCA720228F3D8271BC899A5AE40A4F8998DFE8A1E36A59F
3064263DAD48E7BCD7F5732C8D70A118D9A331C365B09867215357B46FE393CF
47D76CDDE5810861C4659CB53A83D2930B31B6AA340DF723BA207624AEB2F7ED
AA4F215778E799D62DA2111DEE27C814C1CE837C90C3EFB2B9E8C639236A2EA8
2073B68350CF9CB477CF6BCB4F23E3826FC3955AE682E0BF24E87CCE89B8258D
4AE3FF853F7B01FFD098D1C26089776B94B37B821D1E3E6E21BE592D5739238A
C727584D4043E7D69332B45EAEA27C52BF2C56CBBC13E8F2C36D14CBEA35A09A
917B807AF2731BF30472641BC990311A2151FE814021E179DAB73D85601ED4EF
FB485BDA439D60C8F73DCE4023ABA6C04801181341D5BA53289C1B053A079C4A
75E550682EA349B0EF86877BD95689FC128E3AAC4948AB9F8FF47996214D5A26
598C1103F3E9AEAD917F4FA64EDDF52CDCEB6F3A02B927A51A82845E6E6112B8
A194069DDB714B6C0EA885CAAC8DEE03CD71253A77D501868D113F57188D3CC5
F55BB0EE2225360EC9DF679087AA1BBBCB426BB3721E2D021D39AEAB2131FFF2
480A7190ABB5C75A92F17481C630765B616398A7C93A8539BB0DFE299ADB54E9
CA6E73F146D5AF959138F2172C78C69548DBE706E9D5932689DE7783517DCFB7
F4D55B1E210BF2BF5AA05ED6CC7DB03E144C098351BD45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D452804B3142DCDCAB22773DE75726823F1BB198
1C1CA8D89B59FF008B054F0322A543DBCCABA518AB9945020DF8C049A6E112C5
3F67BB74E95B7EB282BEF7147BF40C5A3FD4BA839B17CD431691921679ADB9E1
D6EAD8E8C273099E6E5746323C92B16886E33009706CDBC81FF7B5D5BB611934
7A047DB498E7ACFA77102D761F64D98C3135AC26A5ACCEDE71455F41425652A2
826AA82257415492A460656D594FBACA8287CE1A05D465E3E56A04812DA0F2F9
4F98E3144143B33514889C255204901EEA0A8F480070082F18DA981E95E09E12
DC0073FCD7E6242C22B24827EF073C7957B719561D5B040B3840EE3404BC0F42
78313EE13A9F086DC6D26670F347DBEAC0517DA350EB73A1C5D869E144A15D7F
EB8D39EDD1190AF018AAA72EC88E86CE63B5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 79 /O put
dup 105 /i put
dup 106 /j put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9042537872831BF5F1F340A
8D3E6DEA1D9675E87B3425FAA0172DBEFD7C28E30906B9FBA65517C9B58FB6BD
E0D474E69BB90B0D130A32C4130974A1C961CF064A5BE8EC1056858553FFCF7C
0D78627BDE04E5D0B9F6F72F92B61A915DFF7AFE7DC3807891D039AECEAC3F50
0A09579E661D3DC3022206061E0250B09A05CF198DF82D4F28FCD3671E815A6D
94820D0C87AB1DCEC251605D9490BC465D8A62C95B7352250D76D9FF1D3D5A32
9690780A5B56F9BA2083B29AAEA996FA95246D471693F2DF2608C28329316045
535EB92036397343A7C9211DDFFC557CFD5C64C6FEA484969F523FF8F497CA40
F7D9133C7CF1A483462FB124D12B54F7A9FD1F664DE0D8FB91272E792D90C250
8260C5238239BC431CB7150AFF4302A4EBACBE730F581903054F06874514DC74
E0BC264D1A85964FDD1ACA8DF5D4245179A87797C36CD894E9A9E4987AD6AAC8
6350CC585405668BF347F4F82766F2C355AC4D4F483647A02ADACD300641DB7E
F3CDF732EF8A04A55BBB16BA8DE43BBA6614C82179CBBFCE99617531B13D7B04
94AEB0917B902001488C4DE7DA14D26590B6828D469B9A722856880AB853F37C
A0D3889B09781A10FDBD7C3E714EADA8667D343677C3C641C2E4CDBD2052F8F1
0B183FBF57E427199F082BDA8882A070F3AF2B16B8BBC56ED1C3C624939086BD
3281C1A95CAB1897A565074F301D3085EDEA4E243962461F32B8A683D9AEC6F0
19E5656D588F0F055E646B21D0678A829CB89F57BB950986CCD781C700DFED56
7B14BB6F12598A387832F1CADF2B8EB264D2CD86F7969714DF4F0284FE734DBE
C71C909A8DDA896478B7AB563F9B9B97004D1A82FEE238CB19DCF750C0ED6EFB
B6F74F724952307662B9CD61CEC9B6212A2F5E654CC461AD11CCA8A1C4AFBF4D
44C17918ABB969AA4DC2174DB2A00B0E11B9320E2C9B231991313A7250608058
EF90ACB0014155BE3D0CA2082BCF751D74F475808C3FCAFC38FEE2BF0E11B891
BFBC5EC11CE62E9DEDBFFD33DBC46CA7B77210F3D3B149794A6524753DBCD105
73B58C98921252A4F0B2DF8079DD2315F135AF779ABA851CD2C2E5EC3FB2554F
335E41FB4A6776CA8A754EDEE4ACEEDC4C9BC8D2243C48E9CE76F91EE5A32B58
4D189FA4764DA89416D6E3FA2D60766FBC81A7B47D531FCD973CFA5E65814831
5126C6DB60756B31822BDFAC80E0E42331B40C8BA93DE21F8A031E2BA99A7AB8
5189A1D2453A46B065C260CCB8F82969399FB484BA9AF4335F01EAEDB7BA582D
A1B63F7B8E0D2F32E81DED569BC057FE1E0FD73B6EC4BFD6E6D9D486
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDC299DB9C4B5CC1F04E09FE8BA03A83D734BD05CB9BB269174E1BBB037
709082441C1F212697D41BD33C74186087F5CA18CB6922F1BD276C56886F1891
6A6CF891C0081144839691F8EBDC6E207466958AC42BCDC986DF24B4B0EB76C5
23648FA031779FF077DA2286D704B03626E1A1BFD84EC67D8D260A192242ADDB
D2F999C64962DC3017FB223D0F654DA8ED8DF6EDE0546DE0BF02194C38E0F1E8
DB693387C6B275F64AA9006A45AC9BCDE9AE2A37E8E20ED876A2CB5B4E813406
778E1EC1CC15A12F080975901DE76CF0B88A67883DF455B180D64E6E71B3129F
C4A6D60BD4738C823CE1A3C79A85ACD7ADA86B4EFFB80785C82F1C5D9F6F86C0
40CBF9CA45D3B820E906A6DC4FD642BBF82DF94759DEC41A3975FC5BE1A3C5DC
941777D9E7D82E2C84E5475547447CCE42995F8CE345724A821B8AACC3DE453F
830C47A6BD9709FACE7CBA9B93D9747ECE03DB5E8B7C08A33CE582B22659DA1F
A2D259B5BDD978B6F391673FA5801283CF4D2D8B4A028B5C0F95D4EC193AEB48
7456808CC297447C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF73E09239C1C2DCF00DC8A2CBBEBEEE
9CDA3F06B60F574C8D0EE82BB1955820E5C0F4CADB3E3F7C6E84195D322408A3
31A32EF182CC123F00FE5A35080388587B81BE692A456A6B6CCFE54B72FE5217
CF6286DDB45D9AA70DDBB61D46E6926A18BCD25A3EEF30797BD3FD361873A507
A5B5BBC5E1DB6A0DCB8D0CF788A425281D675358850D4D893C79F1BA2236CA7E
A16B5ECE1B27E19A5A755A8706BB95F29275875B7741AC9BFE117D0574F346A8
D1B0056A4F3057FB8029DC05B31E18DF511132E84E045BD8CDEA8656DCC4494C
076A2A46C308B15A58DFA959E5EA772826DCCC56A87B0624F57ACE6000E63C90
0F2A6A93878A6EFD56BB49E8513BC6B7FE43F7FC60D37A84A60250180CDE35C1
C2D5B7F7EBE4C9A81AC1A1A3102F6760237C1BA7CDDAE5E1B2C9B466CB83A812
711C25E8ED8341D289330FAD9C5FF9E675CCF64208D863BFC858FEE5E97097A7
815233163562A54144C0F61D07AA201B917426FC775736E6BF71C6959CC2EC7E
9A2B6F693442B3E3F61372494370B12022A3F78C61FB3614B78F59EF536E91DC
86782E3170FCC21D866628A8FE12343741BD70210C1948BA567536EE47FEB933
A6BCA1396F2043E9B574A876C16F8514194C60DAF7111078FA6AAE97F17B51A0
FC350D1AF45D7B3EAF09562EC98D185E5947E0FC19562D5C0EFD049ADF999113
0DC91792124D00B4AF86467541E0A68F61F56B91025F353124DA79728CC23183
6FAD378F7242F1A6635EA65F28954F7127614477487F7DB9B920ECA94ADC6377
CA469C545315E5B7C888C632BAFB66F052CB767CBE7858F5790954BE2B04EA46
7D303679A609522A90C4D078BE92114DFF885ECD22389437002D5E8CA6016241
3193144A9C2EDB5E0AF6C42C75DEEB75FE08CEBA21A99C4CA4FA154BAF8EF140
5978DABD2F9A4F2FC047609437BFEFE10816C98F6C3B9A4D6E6236D90343F81C
9BA5086C7C62A81FAFC5A7524C0BDAB16D74B8F8F28DF3EEA1A392B4E91F381C
566CF9C76964C2FBF17B6576E87097F25575EAF45A8C953D3402E47D3F7336F9
18E8D2B7867B6994E2BF2CC729270BD14A4005330239328466F19A81D8AA6E48
9A5B2C1DEFBE3725FF730D526B12B3559D2E1B03230C999615F64A973FE7E8EC
1159A3D668EE3121032B4DA1D334992E49D7016CC28AACA1C46A81AE70C68319
9B7647325D295528EB787D37E589E8F0C902C07645E0F1378D7EB5E2283FA618
18266342C514D418E4ACDC5B12B9A5F00DCC529403C38B8923866D8067F6482E
816D4F0F544C00B58BDB15EEEF1E7762B6230C8AF7EF4ADA5F16E7013FB7D423
E7967506C61DF1ECDE0E7AEC6F42E3C7976EDA674C57434FCEEF4B61F986EA6F
86FB01158AD5EF929328762F81E6158F5C867FF833376EDD4B405768487AD50E
E819D783911EFAB9012493AD4D93D2997FF03384B33BC05A3C700AA9C17F6450
F89355BC3919EB6C563BE0D47A947AFD7FD015C0747BCAC97E17341218E00EB5
39984808520A08D611AC35E5D35EEB4C69CE0D8D416AD0FF129A1669482C0DA1
F26530A4CFA735658855EBDCF2E781553AD92A7EDEC8B2E936E72857FBCADD69
3AACA8D3C9C560604F6394DC55C63BD8362BE30DE6CE793715D255AF74821939
BBDA4324A41B8BE616FE62E7006DBDAF8EF0FCF6EBAA9E03FA10DD1796E8EF7C
A2CE19AA6FA197A055ED69BA9FC17A9DFABD5B1657FD6F3A111FFEAECB2BF1D3
A81A2C88C88B3080AC1E3C84CD6C48B1EC2B894428FA7AEF046773EC6C89B429
AFF2077439F378CA635016930796AE78307B41CD2873A023AD84B713F85B3299
36F10E6B07A6F8DB91E12FCA84BA0E1F52A1732A856F96C88934C34E027D5025
3EC67BFE723E90E176AA27505DF922C8A8E5A787DE997CE19D3DE64A8E03C605
C152A0C444C6C3EAF7D3E8963F35C9AD1CDD5B5C57E4EDEBCE75ADD0E21ED1C8
0F69170257C0566EA3CE7E98250FA15404DB84A9B54400732E9876D059BB6A6C
C5B6EEF0F4130A40A592E5408BECA5E7862C1B608CB8071DA64D5A46C6140E8A
99797CCC2FAE2B1C40C56283BD5B4792C63C6135A564A48A6D45E6AD13F33398
9BC7CBCD9F9983E1116CFC440DDC591BB666BC94B70F305D6C9304C79464550E
89A0BEA1A7A3B51DFB1BAE4797DB00520586358B3BDF3A9EAD8E033D98F60C8A
3B83181BE26B6F1B0734503C7138B82BDAD46F67323361FF1A9FDFEACDBDF605
5A56F8E10490A0EB68DFC2B8A594FD0BA2047390513AE564B965ACE6C41E243E
DA8F129B61A916E86C74879B5BC79B57CB39DDF26B93232E6C622127A46E9DB0
58AC627444605865247909066C24A56E332F8F1376AF73909E57392327DAE9F7
67A385B15D0E9559731EDBFBC24D484802DE45CE2364288CB8E6058723B8214F
6076328C3727650A170406ABC85C93EF5A6CEB635601EF69F8177BAE11091D9C
45CB622E1F4DF8CE1B5933AC0A550382B547C4333D01356B31AE87D5F842651D
1461CA469F1D0EBC4574704FCBE71114842D91C888C8313FD50BE552A4767AE7
4C3D19DE6FDE8760F1D178BE48EFB933A35575678E14535ED49F30F6C3579C03
206BF002948406A8E0C46E0AF1A537C00011B4ADB0555C4F6B04DC33C44CD436
629B226336B0270A75114E7A4F3E0B5A4155BC07E1428551A238F9C516DD99E2
E220E427DA214886E4B30C4ABB4CDEB7B5C1F425772184557DFC573A202EB9CC
89A9E7AB94C03B686B13C8880EF06401843F9BDA7D8CDDD8D7F2FF0BCEE905B9
E38534AA6784E649A8A08C578549FF711E3FAE54B8FAD9E3F706E26FDC9AC1D8
623FC5D1506A63A81812A7D4D142D0E8D87A541FD67453FC59A5C02992B2F396
4B99E200CBDE9F945574DA56639B0B73187E5BB9C4AEC3B2713CC34AAE72411A
05FDB24366A8D4BF3E1DB3F4CF471A6812EBFA51F6941170C9CF19AAAB6A606D
D4615347D646C018642A04E228EA3E501A11DBBF70DD3497A4D632BC40856CBC
D50E2267B98332731B1CF7EDCF144F489EE76A5256A46B87152C6A3406C5DAD8
44CCEEB825D293B2C2905D740A04016187EC0A2FA93CF65FE0F14DAB9686A28F
8D5A69CFFB1A9796A0A60B69DCB11CFD21C3D30B09DFF732DFBB3E8B72976227
4BA7163BC5BBF4AC556E4644E666621710005BAD9127E3CFF86EEE927CE5E600
7CC0D074E4C8F4771ADBC7127E48D8697C8267E7006DBDAF8EF0FCF6EBAA9E03
FA16F7F4D6E40470DA94D15B62461313032476669236EF78CC0E9FC816F9F8C7
2AD8DED7982FF8ECC424EFCFA0DB2EDB45E13804EBCA8892AE67446452BA50DF
EBB3440E2E652C9B8F92A52E6AAF677B6E0088B5786E7915191115A66834F5F5
5D75CFB0AD3BC263B5441C95E1982454888FE6A8F9B9C27FEDDE674B32688842
83F419A1D07C3F4BAB17026DDD824FCCB58D386D4FB4DEEE7EFB13B92D964CB5
6DA11B12A643022BA9CDF2F9EA52C2676122F9ADD82472F41110CB02E02B758E
27E4FE0C0B817A80162679076CA10BEA116AB215993E7A1C87B7A8C644DE5A62
F119FD475F9AD75D13D3F43680759C54CCBC85DF8EDC59CD1F48E68D80059115
F74245EC5CEAA467E942B805109D5FFECDE5CC6E523C853B4482C3D8CB155A03
A55E5B85F445BE7D8F7A6BEDA815948E5B5E23F00BABE6EFB0A718CB204D4D37
2D68B5C88DA089100BBB3BF729C2B6B24C0CD14763A1A6A1D954943CEFBCE832
F6E57CD482A248FE3EC819FA221A67458E0C722A4B1FDF72DDE37F75E52C3778
B5130371A0A5B53E6C45991F873823DF9FF8D21330BA776B0D6BFDDAD0D9F368
22E3CAC81BF76C29622F9044A3AF979E544F00DD5551A98F338822A9ABBCE7C1
ED9E8E1C67C3029DA91CDD1586DE304C642F210E02A3AE9284B599C63F2C3403
D9770AE380B7F7E40C88CE49DBBCCDAB9F55474A63A4A0213F3D420B4B56C7F5
1D96F6EA8EB5F9410D24FB6CBA16B7A866796D6D72DFCFC9B06F37462C3DC344
DD33CB5EE5800B2B623E0488BECDD26DBB0B3CBC4ADC30652AD9F57B76492532
3ACE4A871A5AA1E9C6BCFC2118A2A8F09826DAF8507469A383E6C4B308062A0A
611190E892D8A1E1B5330CC50C167FA28A7E650EB7B1DBD122E742D3EC21A464
E65B1A3374FD4E51911545CF43EB550198E8201C7B9AA0F2E5096D9FFB2491FB
6CF11BCFFE103AB285CCFC79C57446ACC46D7FABF5F5DF57D97EF7EC6C6F4BE0
1A8375ED147E3CEDB295474BFE894FA1D4CCE3369A3F20D09617237F5A4EA67F
E5E3D3BD02D6A519AF0D965A0FDC4B0B38D721F88DF65D5E946C65A4C3584506
6DC57A78839E4B9EBF958EF7FEA5F5402F50B78CDF20E990AFCF0D0AABCB55D2
BF5635F2025D5F415853C4A4BB7C935C4473BD3CE69D9E052BB70928EFE5A1C1
BACFF9A63CE1E5C47111A558E7FA84646C1339542AF5A7DB1B480F922CFA1796
FA4C467943C2CA84943175FAE2025B4873C9C949A2D3FE9261E86690C385E42C
89D4B906997D5530FCF547FAFA6C8E42B2453E9A3C0BE4942CB7255EE18A915A
AD59F20357BDEA11DE8ADF5115D2F1DAFB49B3DBD4A2032CDD82576174AE0319
6211DDEFA926A80A3E2D176E6415A34DD8C8A1B96AC6CFDAE42D3F98CECDE5D6
992005B6B0928960579F6436CA6605F36EFC28E1B3A46318DB4A058B98CFE4B1
D1A2EFE8428746BFF9055B426B1CEEB1D7A24A6E3CBC40A3DCC1D1195D91EE42
D69AEFFEBA06DAD2AF7ACAD20D87BCC16D0C9FE24C1F8C3544E0C4724D95B3F4
3EC036EF7CAC6C6F8670398A8B4B855CF0A4025E2E988226C73E75795A4EBC4E
1B5025AD6E2CD0CB0C17E4D0C8675669A84A66320FA66CE7A0C8836BC6574C0C
075378E78D236FF0F49D3ACAFF453B973BFD68DD30256303EBCA7BA9673A2E8F
F09CE3B2B6C417D88222C8B0E9551CB7A461A3B5746CCE8AE6A83DF90E7F3FA8
5CFD58F8482272C24A38E684D4A424836160F3B3ABFE4360955D6ED3CD2635C1
317CD71B2C89D4B906997D56E61ABCE6153436D899C6B1F9BC1210AFA77F281E
26E5C3ACEDE7D3EFEEAAE9DC08846626DE877E5D7DF711C33391EBC607F7052A
B07CEB251EA812D386BB275AA6D6D566D45CBEF6320516B77062FF81CB388A15
FCB3FFBA4CAE1FA73B0FBD9BC820DD8F5FDAE7239C8C92620D50C44DC2C8853B
B3E2BAEE3F55ABBFD9390EC35C9FCE61FFA44D52476F18BF5DCB5A8B0AB4D837
1C933E0BD695CFF0CC0B3099443CCF46CB4DC451F9C5269B21573A53DBF3C2F4
794A4608FE94465F3D3119AB3704F849C2316F95BE42F08D42A78FAB2F587C4B
26252957EAA9071AFC4E14B9B80B8FD40F0F8818FA949289DAC32209E7E73784
54206904409E9FF99BC9B8BCBC81B08E09C8B30DE6764D2443EB3A0CD0C9C2EC
B0F5405BF370B45488F0E70614C2785A1EED4392F8D780F9CB2509B6551F6361
3A4226509FE3BCD0530EB6F73D82D06D5861581CDBD5E2D5B3AC065B4DE49CD5
0CB66C0B7350D1C02721E5913F1D146B293DD549CF337C0EABFDF41F56AB44A0
1ECCA686AC8A3C5722A4D7FAE7672F132E065AE1AEE855F622CAE0BCD2C88870
D04E719B4064A9C9F66CBB2D4A521C91F96B3297783CEBA94CA1CFA72528C4B2
05C2E424AC789F47E772FC60334B48B4BE659E7EBA466A2C63D9C8F38D87FC29
214611C32D2AE1AFE4A7715BBD86FE601397436DF6CD99E6C491B5BD82DF4D92
5BCAEF4F9CFDADABB26D67B120D78AA59A6EFB7EAF94DDBC9ED83C26F88BADC3
AC9CF383C73C2A2ABC50596C022E3086A46DFE514E21DEF08811C66BD389F07A
212C7D845525101D92E78065FD67C4448148EE8FFFDCB5E03A31F2EA80DF2EA9
77BC1C6A126A6C76BB597D1EAEAA55B4650A0D521E532775712BD4F5DB1F7986
0690864E15D502CCD6075AB5D61A801701C34DAE1C86B99440E54875C03E466A
E803B4A459F40A86BC6FC5280D1E09E891522400632F58A03F9A7DD2335E9F7C
97284940D651C3B538BDA47427D0E082B57014209F2C1F92C31F3D7253A22EEA
B6B562DC60CEFA55970A70E7A5E382B3B3166F933FA2EA6991BA7B5C6D613271
1F1CAB3BED624E3B0428B30CF075A4DCB646D70E1C12FCE97ACE3575D115EBA6
E3BFEAE5F4AA217A5B8C1B6100F5749D16368E0CB956D6C4772F01A2CC0D7F50
EAF306729AFCC64F4A9959E04268CC90B5674F3C6A82B28FE58CC805DEE5BD66
37E04B076AD4AC025D0E116140922BD74D31C58240A8CF6F1A61CEA7FA922757
4EE40B8D207AE531E1BF18499DF8C812F0AA5CC87BABAFAA5E72CFDAEDEA14B7
F602CDAA6277B1E978E94B1CDD913269816346C5B9AC369ACD699F7AEB86DC98
EA7FD3DF1F705EA8667CFEECD0232F9124DBBF37C974D73A6365E3C9181FA1CB
AF4B0D544E71D1BC437B955E06F03D1EBEF2C076AB6233FA0DDE293094158F2C
092B42A314497D1EE914AA31DCF5C1559B318EA43B7CC317D83ED863460578BB
4590E399A9B5311C2E7504CF3FB76BE24CD6EDE37C8B985D783FD6CF5B7DDCFC
A58A507C290E7BEE986A9A0BE5F5F0C3DED280D6FDCFB195416FBEEA99D19DAC
3F458A51932D7AA774B2812D6090F909AA6FD67B11F6A711D816A851B73B8E10
A43913D833F2B5FC6B4277AC8BDFCADB384F7D763626A7494944DBC6BD6B8F8D
D1112C8F11850F3F5EF2ED794E4F789CFE3CF7C7315CC7F3032276A2DF316CBE
4C5F65E69CA31B1FF10CF8EAF11216DB04DDC2F39043AD563DFD4CD5C128AF2D
C718E26691AEFA80B348598A3744487109A330FC50AA0EBF8D87B7AE7CE82C11
B22DC2EFF49CBEDC31A8F4A3AC0C38BD160D623BD5FFA3413F79731A8C04B535
DCB52406A2FC117F2756B15AA631D12FCCE09881A3095C755E4EE0C55EE36342
942AAF901661AD78BA4412900472558A4E9C3C363BA71BCC4E6AF1E0687979FB
C5344878436F05BE2C5BEF0839BF80784E873AC972266AE6DAB6064D5311256E
F987D87DE3C3280FE6C3B8387EE5732AD56BA09E43EED36C94C45705EA9242C0
FECBDE6C99A53E14D6B2C971B5E71F57DD744C0BC945B1C82CC7F034506E73B4
E391FA14CFDB2BE3384094EF696E73347CC332B47C37191A28733984A9BEC99F
EB3435C0890493D4FB925B42155289F7EFF91D63ACA87480CC3A835B288611DC
DEEEB596F45197536B581698AF4136A5F55A83246B63E4EFAA85A8D7039EB216
9740CCA12416589918D354F948F0DC2E13D4718D04ED952724229CA0EACA669B
DCD4F0E2AA3438FAC6FA8AE23DACFF4C151A69B59E69D6C55924D2BD48C5301B
91E8ED5B38E84AC06B816315FE61B84801670A0513DD920776126ECE16D0D785
2083A24A76044744BC424AFAAAE13305B43B84D1F9A194A5D6A42025B278E8D9
27A1F5775D2F487873EF02A3817121EF56AAADFE0F54CD58D95B0C631FEF52CB
B254DE0788E6B5F22D897F59B0C6F18FECC00055E01E15F16DE64139CBDFCA3E
9A354E9212EC94547193B9DDBF29812BC67B634874CA9EDEA3BB1C6E10FCF223
75719E96286D770EEA0421B60B1545DB74A31B8E86E6C90394CD87DF532243AB
50495E94E2E244523300810127740D1B3A2377AFEB429CF59FC53B2DA44C8A9F
47097547E3505ABAAC936FDFD88ED9928D934169920F7F6624B417B3833C960D
1A81D47C3DBCB7A16C1789BBAAAEDBC9A62B4A83EA97173400073C230A578364
EE119544CC5F4AF1E2367E46F2CCE5F2E51F3A9948F80FAD5FBDD0F08D88B358
E555F94FBC07BE33A006F8F578B499BC751D51B792C14D12B6515261C85D4A07
3332C2D7D311E1734B2F2075AEF496466E45109773229C002274EDA6D5958092
060CBEF3EB2A24A96E4DD5EFFF05EAB31373A066F21DB46A991C263EA15C0663
A8522939071FB7CC4DEE702DA0DF2727D9E1AA2D98B62A210331F12286E22596
CA9C38641769EA642D14718D582B240DBC135672D7007237BD95D03E4ED5B0D1
E727646A2FC08C8172ABE5F29AEFD86F8BA0AF59030780CCE9AEF353C95F176C
F011150BE28F17D57CEDE48EBFCB45605FBD58F065A6A210BFDE79779A0915F8
F7F20B4A0A06606D33C073991221BB83EF512496224131352911A8E5000571D3
812D65E595932E83F8A9A814589FA17BE704294E2DA6BD959A6822C8E94A311E
348C449E45BA764F5B8D6B74D2B54D37AFC1A77F04A4EC5576DE55EA27CDA4EE
25EE0870EAF8EDAB28CE2E6A31E00C17D8090D50C4A14F002A0A6D6381252DB4
8967EE7E480532FFAD1FC4C4C8B8FD51449F12FC2CEBB34E4509E64B0654AADF
025BD411A82522891F40ABC0B36EB40A342CC1D2A2826A63DD8842A2B6700A01
06006E84D21ED837464B868B68D21D35704E59BCFF03976849843B508D7F77C8
C341A1FB529EE1252A1C646097D65D9F39908B4C85C13AF52E32088C9D5B4C05
ED4F3742774953BB6790BF3A9FFB3367A7365549E193B3D601BC9A431B35D7CF
B6ACB5AA96C7E8251D2D384837D999F13247524103082B4E3DD2E25F1CD83103
32C34A5AD7002418F6A825B0E4D345C1ECC6A203FBD7B0D3EAD324001929DEE3
B4CAB1CB9BB3D33A8CD74C506506EDE0ADE31C28A83909ACADC096735AD98E4A
79433888781CC04E9131695F18870D52D97A647A6BC32929867FECEA06E73290
E29A0CECA443A35A0C2B62F1D49B407DE09DD4E822C15D0E0EF755C12535B1C0
FBE462E14786268B7A52725ADE54452FC5E7843269320E0334F738292CCA43B7
B4FF956846605418F01D58C31C5159E068C96E35F4BA28952EFB92605AE23E0F
19AE6233CA7CE575BC434ECAC51AFFC96C2B2FF23E464EEA52BAC2E39707AF64
E711723807BB0C9B27AD6233483D99433888A3FFD76EF7C273DB1BE1C47673CE
16F04C717548AA6F3D9B178EDCEBCCC59017C40E00ED23CC892D3CECC51DE806
1A5A12B9F86308293A1395D00B096DC4F253F7ECC50843131BE8F85C95571926
E298CB7B08D7929CAF75A45BAEBB4F2B057CD3D4828E0F33321E3D2C25AB2BC8
36716512B95B34FB5BD5C904B9A441625B4456255FB076DA89313D6A83343298
F34461B13734F6125A4535A09BFD125E71357666762FE89DDBC5B7131DD5F064
EFA694BFC4C5F16154E1CBED4DED0EB9A57805037D921241C4C239A6CF954815
9784A8A5A74282463A1F817036DDC3A1540090F5BB2B6DDD4DC8004EA96C1FB3
FB67089F1E3CC89CF705835A1FA76F6555F6E1B523E6BF7C91D74BFB6F70B099
D52B2229DD4B026146AA109B8DF9D24107D09FA6F8DAF204B7901829DD867B22
4BA695A7B5175A93F3E804795EBB84548350CFE2687882D304CFE1A4269E5E41
8622DB267AFA967F80C8260340BB7B6AB946C4F5176958C1734F5D54E6F47CB3
78E953C9CE8AAA1D8FEED652F5FD4EAFE30F8F75BDEF2B15FF13A4C29FD895A6
B5D5A019C9CAD77E4E88DFCF78074F5379A0716AED45632193EDC74A5C4E8CF7
33D02A7327281CEBAF213A97B28DC97E550E475C4970EEC2A84B4069A33F6BA9
7E0F0E584DE6D4A35E717197708790304C0A542D7E93AD5428C8E3512CE70C43
1648F3691E63FFF6B99BB562794894449A6A3F4B8CE14AB04AB9A24B1478CA5C
6796FBA7C1C8223F9E340C674A0CCCC49AFEB8CD8F3AECFC6DBC7303672AE60C
E7CB472209120CEBE66BE894C8406033847D85AE20DA0887356A79F159CF0AFC
182EBA0B7ECFDD328813DE1D442961F3F237D9D129B072FFC59A00A52A8B48F3
3D0993C3EF68DFC2B85776567836CA0B1D5F291B9D05FE0527B106F9340D25ED
5EF2728D376C23C74650FBC1210B2D54592FA44A058C5811C5BD7E893DAD2F2A
CCE3241BB7FF6231A2A6E92519E0A25A8046E0B65CBD4BFF021D82019BD808D6
4196EF68407F37C20A0DF1F618F9601E8DA386136A2CA7149C5293C795837B32
F84BF8EE16455CEA29E0F9D7DE61DDA50A55F4FD8DBF4C824594E4584B5189BA
EDCD9E573A2B0233520698E9DA5C7366A3EFE4E0275CE8F0D3BF4A24E3462DBB
8D45174D5852CA247669F6392CB223D48B4E59D982BF9E06969E6BC5E6D37CBC
4A6668332AEF1116EE3E168C9B4AFDA1545EAC2124372601376869A676906BA5
F70227EC641B24BBD6900FC03EDE7DED8D68A14CBBF0ACFA532714623BC0B755
824A0B52C9877459E17F98A36A628FFCB7CDA7E83B88587B2B01C3654B195AE6
0787DB3B744429FABC9F697FE685C6329CB3420020333F09771B0BC003F7B73F
A1B0A55054B288B39CBCBBF6E26B3EC934A55BB33E08712A768DCCE5CB3C0197
B92B1E413DDEC851DCE431580BC11763854C4AA81969255AB3E0046FF2AE617B
D084051708792A50891E6E5E943C7ECB13AFEA4AB933168304814C881376F5D4
DDBDE65E84C51724F312EAE92ED22E43FD578C67F85A763A54F98A822863C01B
21757CA1C2C93E7433B94133FD5C6466D384675ED26F27EDB7D3B8DD91D49CFC
C79F662C46EF31E57B4B694DF8BAAAB83763A8ED704680E4D0759409068CE066
9056BD79076258BE982439823EE928160342A8B2222EA07B8F13F316F30DCCFB
DA67F302D9FB5E7E25430EC718CA7ABCE5E8CDB456ECB95ED2D8F6CA2D47F2F6
35AE071BDEBCA343C7CD8801E02D97E30B996B1649EC7A222260A40CA9D33422
2486C7F8848E94DED4DE67DA4946CF8FEB75D1F1662445F6B6576202DCCAB0A9
39482D896AC7A39656829117BD66D9AC5B01B2B01B289D953CE8F35196A9A6EC
F3AC1D64E62BBA8F01DFC19DAA0C264B6B3B0C4988AE9103F9CA4A8C289AB593
9157F304EE78968FCA40C0D8608B9D8AF8D48D1863EB01B8BCCF6F2793AD6827
E99D9CDD7E39590DC25FA98B2F04D0E6B50D1D200E4A1BD0EFF80FD505A13438
CEA81EDFFE92A4DEE3DB725BBD80FC88BB68519781707A1CC19509B048CABEB7
86FCD067646CF5D5E704841443484F7A53A2BE71BE8291F7CA19E63BAB119D17
4083F0654E47937E24BF415CAD0BC9A050397513C18D5ED6819D2452D01F393D
464FCEBF55EE4D7521743F8DBA42F031BC6AF27033EB76F3D4EE5E20A00EDA06
D6961CC682212B9455C5A3A4A7F37394810E33BF64BEFE5CFE308300DABB609F
455F23B7ED90F772BF2622419CD3F203539F73FC7C36B47F98527667D5BF6A31
12246806E0B9F63AC3417C576DE0AE95A7AA91570CACA784A130FDF9F1EAEF66
3CB12B41D8CC90637FAAA554106D2098DC53419D5D192756B87148B78967A4CD
C2FFE6BF9DF2363D7AFC4BD079834D235A9E394F4E28ACF7B03E2A8BA5EA2291
51D7C8923B7C9C8C26BDFC11A152F71DC4BFE61745CF43EB550198E8201C7B9A
A0F2E001D716D1E500653F2599ADD0094FAE8257425BA74B5F3FF6CF40DB53A5
52F5999A1C0557E17D7DA82F5244AE0680FEE259DC0F2490F88126C17A44C6E4
689727385DBF13AB84A7BE31636A880EBF1726CB5F05EC5A4CA303E7AB28AA76
B49456E9CD36B33600AFB450DB12FFC3DD9DBEB1811F3A0088BDEA0330F0BC28
4C2495FEE0CF62D091D525F79512874D8511BD47543E22BADD90F85B76323A6A
1B1C21705F8B6AC6C253E91AB7E7717551BF1BB7D7EAA8C639E5EAE869C6A25F
87F120799F3350AE5DDB7450C0CADD69A6CEDFE8F0BF848F93299C2A83B08C6E
6C7DF5DEAC046F35FBCDE657CEFF63AA92315569A02DBC99B3C2484B071CA186
2056F261652DC73A13807BB5F44820F7BAFF40C197AD48554918A7D5F6A2DE93
63FC7DC5EA242C7D5632494F1C9DFC6926013E424711B4AC68A1029BD6C7598F
E2A2577774BCC3018CE47819A335C90E2787D8EE7D52C279CC550C9AC3591DBC
485BE6F550F939239E0EB8F57F1825974FBE0C17422B71F1FE441B58DCB5267E
F356FF37A9946820758AA9F242D8EFA464089F9630E2EC94D8F6180C691C90A5
28A6BF7A35D6E9E687F69752C01DABF81D19598621A5482FACFD91D0D99A5788
1BD2A6789DD442E4ABD8D3F08C94D6388C42192FFC5FDA7EB282702007937BA0
F360F2C53349503940A618EFED89C424C5C0AE9AD9EDF128A76236561EA185C5
1A2D1269446F53C950E0AF08006A4FCB9FD84F60EF3B3435695ECC19A940FA06
5E4DE02E5F5F899C63E3C45599A3E1B0FE8490E31B38F1FB7EE5411C8E41C38A
43EEAC6048ADB9D96C2ACF1EBDE5FFFF60D2D3A2CF436A51C989AB63F2873E7D
AFE6AF1F16A08B444FC2537AC2B29B27BB68300E0B1195486C75DB15570988EB
6207F64D7DF540A0854D87CB33823A798B40B16130735E62DDAF6FAB37AD92B4
7E760BBE2F70F0F2D6FDBCFF35BF2258C80CA61485BB27EFEBB52E5B8576F415
339A2A90E2DED1B24FFD726EAC5E92939E48F8732762B7688381ADD5A98B11A3
93324285BD8C1760A77D052CCE37667D12AA9E25FCDA102A69A8360AB0D794FC
EBB58A28EAE9BFBBF2A42C2ACD8A06F2989FDC83EB007CAC8185B1465A7BD863
1FB0F3FD4EFA9C8A8D56B0DC6E93ED9D24223E1868DA2577AB21E669469E5BA1
A334F4E135E4DF5442E4C5F08802111FF320EBF19F2E3F43437475DFF9D449DB
71105122A7F43376CC935486628A5CC9CCD1B74F8D5C7C0F6975567E77A8B604
F45E03015795FA9129A51EDE7CDAA21D241DD3A13034B8CFFCA61F6F5947B215
88C09E459F01D3CD32497D4616227C7361585F2F83AE4A2886F5EC83DEF8FAAB
8AA3FE78ED4CFD67FCBF929D03339F39A2AE8977D463C37154D0872A254C65A5
DDE1E2D6592BC3C82DFBAFB1E18E51C79861BFF6E74C23EA07681C391F7CE4F3
AF82C87D9283FCF90C4EAAE6F23C16858058F7BBBFB4D4A24417595D8D821CD7
FB746B985C5234C45D53C144EBDF1EFABE4860C3084F382FB6EC298698C5CB1F
DE6F09AEDFDD0973531AE51F97F3EA71460082A208AB0E7F9061138FFDA78E22
ACF21781FBB1EC4D3D57E3B979EFC7CF2554AF326DDF8407396366C48AB203BE
7DE00AC57C8E9C81BD78FA92D59BC869EE885E16DA2E1FDF693A6DEA08E54C68
A2524CDB0FBDD745BDE4B9C928A44F80EAA5F1D0366E3AD523D81D1B90A780E9
1C8E75A9CD8CB62CF82CFDE2C5BAEE8D01EEA736C98A98455D1EAD58E53F342B
BF362C236C30A120D858127606BD08226657CB0B002B4F768E2D4D83EFDD6CA3
4F1A9315E7B2BF432EA8E7D4B12392B4CC44018D6F607603C23FCE4DDA344F57
50CFE993E0B69E7FF6A47DE99D688D56630E585612C9671510D8B358A40B2812
488B8DC997D1BED93A6A5CE6673DC971BE539173F3B6F30ADAB249B3A82F7BB0
667F03863B1D8E50B32E0FB011E9838216CBC34C745845BE4434CAA915737737
C5A9037A4D15F4DC7EB25B2E16C495FA9C9F94B5758DEAF93C42683EF0456C3A
0D74E8EFF35D7DB44B62B753AF6BD100261A6CDA280902D3F7BCF9E031298F8F
6B866E05081E15818E977419F279DC12832379941C598F44A65E2959E9E3CBEB
057D9DCACC5F70504EEE4A879ED36656223A55C9E24F36B6A2B5D3DBA285B2E4
6169F5A89E970A4B58083F708A77EAC8C84A00033A28BA80137E48616690B882
119C2A883F9169ACB97BB0F9A0AAE6AFAA3DF09A92D8625617A080C5D35A9A2F
089A8DF22A92EC8D5D1C475377DD6677D82214F9CFF9FF58DD7A472A9FF0C168
479B6FB3053F7404F60E30369D4E2A96080CCEA3E225072D1081863F9CF3AA4C
AD2FE404C473C6ECA5017CB3D93D820105BB7CFC9392816B4B51D70EF433CC4A
C2CE36F0C6209DCCD56281F6F7F3B4657562ECFA24715386152674076538200D
DDF125E9DF1C22D1E64166F5ABE124A2C413B04766693591F60DED04EBA50240
D281F2142496F60CB3043651B6C89E09FDF1901D8A43B67E620200B4F4DEB86F
73CE3B2BEFF110EE0ECC75DF41493A39DE89E1E2D099183E66DF857E72354154
FC30AE252CD70E47A5AEACC54237FA4C31A8F6285779ECF4BC648883144CDD9A
7032E97E2E6CA8AEBC0F6982183309AE01A56DCA45408C83F710909D4545C844
8B58EC4D0EA9DF8BA01EB2D2192FBDE6EB1E08F6B1222AE4AF9E2AA3A52709BA
37237B9A8E577188083EEFBB91242CF041FBF55B8121D3DDD88F70564DCD8D03
F8905BAA1B6D1F1F02ABF90F2E16B7A18837E97FBA9320B95D13228B9AF937F9
BCC7FE453C4054D79CC012B1442AD53D927E73D12016975E426417A5ED80CD72
6A9360CA144744E50AD66F35E03D1CA9AD392AD246789FA2F37D71E1647AA585
B0DC82B366D12A7F2611808339287D1454358A1A09A98D602F55F351538FE4A8
9C682B328703A8A7823D877E69C1BFF58DD8A682FD59A96C3B0FAE81305B0C1C
1C41542320AF0B22640CCBAA719A11EFB5672539235A1651BEB7FCBD1BC5AAF7
594918BE1C9C84E6CB4359AB23942DB6D33280BF1591EE2EE410D42A2265FB36
19FAF0AEB6AE1EE6D08F1E6042DBCDB9CD0E3980D169EBD49421237F5E84C46A
F22A62C1D7D3A74B55E2D4CDA8C2B197CD7C82B8E88DB1124DFE31500BACC12D
D93E91E9A26EFBA7C1A2FEAA317FE1ECE7258752D2A576A2CF96968783A6BDA3
D5C55971A88D4E430F46FE319C9B0C6C79D701BBBF306C539E3F55B8371D1660
A651C229D30911A6698503BE25D7812CEC7CEB983E71575A684ED6204A5144E1
F34B481428336BB8886F62C0F89453A945F3D9529FDE42E218AB27351B8A75A0
950BDE7461C19BE13680CB7C79890E205115D37978C4E030DBAA42C1545B2F54
9E20551D436944F59745747E0FAA200C72DD73D02E7D3CC945DBF5CC6353CEA1
D87CC981A251DC2722026264EA6B1E34FED258548DF7AE96C43D8193C5E291E7
C124FB2E3A4ED735D97A23E39A5A22133A7E145327270A05BD1C3DD1B766C581
569D99AF370C68497F9187CE30ADCF7E712A8AEFD3F455A2DBB8815B964CE458
9563210019C09C3C9EB59C0AE7393ABAAE317BE5744B511996E6A6DEECD51F14
63A922E378FE862F6E917FAC75E2EA5A1B3BDA157D23881F8C403A3435B4728C
96DA237EE2205F867D657773FFC06311DE701D44481761D0C872DF9DF9A1D6F0
8ADC5995D857CF8E51074D77C5773EAEA9353D7BE0E46D69A9E5495D0DF7280A
96D4CA209B76961FDF86CB5B82D7B86F73CE3B2BEFF110EE0ECC75DF427E5288
1C88417827D65EC092CD5E35949E82F290F7CDBE1922034A56C0247834B45095
6B851CD74D3CB86AA7045DD4BB32D03978B7E58AFA6CB89A6F5A428566252685
191494472197C141D07B7DED25AC401A0E088138050998948F742B10789DC6A5
B3BAB60E83B3F93F5AEE80DDBBE571AEF113C74913FDE3AE828500753B2E5302
904D0CA4B5AB588E5FEB893542D8D04905A11E4649F0D2F1E2B4F22445402A7A
A2A1D7463ED69BFE7A226F4F47484C7C2CBAE9ED756FCA83FF1DFD6E1BCCC6D5
44933AD4C08907D10C9D109E934215A8C111B0912E20BF09446FF1E264BD84F9
7CAF3E27FF16727EA0F822B783B5CC9C9AA31999801726CB5F05EC58ED057F87
EE73E6FBBCD9BE84D91DA3BD4DF3BF1404F7E1CDD1ECB34FD0EB54324912E96B
CA153D9EC6B5E7C71C69E8210153046FDFFE2041C4D31279330EDA0A83B36C91
F9669B8F4BFCB929FFDE29A5F87B523A22C47FAE2FA500D1387AAD73E7C0220D
844E3CE3E815487C96AA5856C38067C9C0ED7044FD88CBE5C52D7C027C268E75
0230D503AEAE841F919CC91209C8A81359D93CC99B1785868F402AD782488109
7544C70A57AC58D31F401565810B06275F3E90EF3EE62177CCE11D1213F39594
67BD360670443324C30EDA6FE245BF568355677A9DD49EB4D9FEB973A68CDAD9
E7BCCDA0533E943977A20F7B6DDB5D752F7F7016C903FC4F3019C58CC0828C8A
08FE98C99C2A55EFDB97B56ACACA2711487E126103F76F44718A3573ED77C2E5
B8AC751E38519F5EF4AAD6612EB07955B6634E8EA3C0579D9536A29293C517E0
AE0C290380675C55BB5D25990858F99007E20CB788CD74EA72279194A4FCC106
D6460287CFEE556C1D86D1902001FF87704701EDD16B790B08CDD65638E190F5
0D2770D4E1107055882DD2EB2DC9AF1A437A205B3EC11B3E4A50CB88EAE01F5B
FA551C7AAA523AE5720B14EF205A863CBEED9B500C968559A8D75EE9D71727E5
2F27A63160EFD85A7AD9AF11B2D56DA04C40A41C168548C7F8ED81CB373D4934
364E8DB22C5E531A6024552947C92273E55B4AF2A738C2C03D01CA54C298A71A
88052B3E05FA9E962DC65E641CDD67DBAD61C0A0BFD662794496BF3D0C8165DF
AB71D66B980BDAAFB148FCE2FEB0DA4931B4D1566B478E0D9E6DDD321D56A940
7C4C0001735EC02EBAE844A143C633EC6ECFCB0D7B07C6765B85F87A6A97405C
FFA3CDB5966117462F664EADC049DF79ABFA84C21013D174F16C6DD7B482C08F
FDC8DD37E5A553CB06DFF48B2C8FE43CD00F51943CC6C1F14261F31CFD8519CF
F95458762EE4840CEC82A0CB7D46F90924B9FD409E0ED2E724345A9B30B333F1
161168565E07EE4396C01FE2AE6D051CED70655CF3034D7EE481784A16F8F33E
50BB66F44593DF897CA8126FA10690C9260DBD8815D319AF745563786D8FA150
63FF9CD3D84314D939490AEF31264415AE3DF7BA9F765D421C915AE2E33B5979
AF6FA991D7AEBB785A7A71D022CEC2B864928B6B817E165D37A68E599E790444
71257FB2FCCAD1D156FEF121AFDA8DBB4CEAFFE39F1D27530DDDF56FEC0F5FED
06136960DEF3BCEEF02CE0E011E8ADF91F6CA3559B40A0A0F16AA8317DA3CC28
F80D7EABE0C7D30984D0BF79381ACF661CD5AE3EF90CFA34AA413033CE7E8011
78FB42A0162C96468E4E39483B3C2565649B536A7223C789F90A650344E60D96
FE85284B3674162DF5FB249A07431EAFE27409C51832EA39544D8A94359A5039
20D4CA8DAA5B4FF8D448D7E851D5B85AF54314CE68974297E5D024F255519FE4
D8E47122B4C4DCA0EE05DED467BB36E301E79964300C8C4E43B6442441AB667C
4844EBAA8ED325F02C783FED4AE31B8B23A9C7E78D4ECF53D08212FB8FF93C47
D5DB3DB83F154D3B99092C8C0D5027688023B4B5B33BE92A0310DD612A2F75C6
94A0FC38F09139ECD44EDC4C4D95FFC847D4EA469F29B77A47DF880829969400
6E5114B23936070AC62714A07ACD1FFC99466D5F6D33EEEB3BB19C8EE354045A
2014694A4DAA50D94F69C91D9DD8E1021F51CBDD0CDE2B67BE5B206883CC7843
4B7BE9C99DFD68A8A58951957698BB8CBF4FDAF0DDC124FFB93523D9F14DD014
59FD1BEE59B22CEAE6AE805C97890743B0B8F87ED5B96879B0BF0B392C6D0C89
E9AFB0EA7776154EE6B1D0FB35EAED6C8DA83A763EE0F509286A0A661E2BC60C
143604AF24AFFC61266B7AE1B611BC5AC6069566DAA19066B51C2BAFAD249D0C
5F5461B48923F5C29D2907B090A9DD2EF04B731C2E42C49C0A4DD6352472C2B4
AC7858B02D1AC329A2A3A485C78484B9EF2759D25BEFE3C9943F3676651A9BAC
59E70F19D908FC45FFDAD06F8E219B55A3F7CC14BB93939B5B9E26AC8899CD0D
DF2BC0339642CA970357FBA289F6043C0D2A3C4AF348B1F98F7A6B6D360D5BFC
FCFAD695B08A561083C467CC2F3872A25995D5973A494D1BD904436BB8A83E25
069B6A240D71FBFB04AF42E666C1FD29237C4D63BE0E77B32B4863B8E33674BD
CC8A6E97690922CE11CF01C3457A46B75AA796152ABFA8C3095AE9408F749476
B50584B0E8872B29615D0206DBF1E095D43077D02421798A698EED083B11C65F
A11E9D18C7D0420BAF86AF38098846BCB6BA4584FDA23E7A3684AA579655B657
066CB1C474EC2D85365A32F152EECBB7A09EEC70722AE7154A86228D4F55546B
6FB5CAC393B8AC69229638279CEA3FB1118FD1A2852514DEF3DA1FD5A0C02CF2
83A6C320A331840900454E745574255A02CD28BA9E87A2AD15CEE3E1E522BAB6
3FC19A7C4447E7ECDCA9412ED1E95B7F121A7D1D70A2FC838F7514AD92F01194
68853C0884C3F2C2638E91FEF0DEAFE7F9511E9E965D487A531505439EC19670
844F11CB17933E808D983734133F0E2C7D0B0D2DC0B0A629F10E883129B596B4
04DA4CC237483CD57F37FE6C3D8F45586E898B6953E9A9A607F2EE011844C838
930B9B7A24728D973C1B060BF404064435F5450F2D97C5DB8399AA39320171DA
4BDB71745822720B55AFC8C0315E0F3772DFD28E39F7865F037FAC56C02D2B47
7440444E32EC55AAACB4F8385ECC6D6FA43825CA0CCDD54E9E63F32615A3EBFC
9FBA2CEB867E24FA99FC0438501EA2C57A71EB9C4ECB22E5050564819FA141EE
1DEB612B40791EED3BE026E01976B7771587817073DFAFE7AF4B8BBF3D4EBBE8
F76FD201E5A9211C6E5EB80886A5ABF46F08F9F9117D3D01CB4EE48BF11D6649
78BFDC9BD20A19D1A88988794425CCE7E564B0DC8A143E19AE8CCF7E1E95061D
7F1352301C402D8653E17E9AF5426B8357D345CA8DDED6D95B8308B0BD644F0C
10358C0D52038928797090B3F8386DCABCCA42F6E7F1F7B63A4A52C014D4F54F
CA06EF99D645224381B02A7C13EABB094688795CD832B17D1C9ECF436E710346
73A9F960E98232C12F27539F06971018C9622C0CC8328504BB7160AE6196F33D
80F9E5BB73766CF17894C57399F49CA33D821347509E704B5445B48BAE0D5E16
DBB195DD2D4BEC86396A87ECAF05EC4F1FCD382858463BF19D4ED850D529C4CE
40DEC5DCEC8AF203C4816382810AE97490CEF7B00BC7B09FC88CCCDF0CB81CAA
65E0D88CE4628A88D57CF80A6BDD3879469204223C96E4232C9E62C97745CC6F
040F4F65BF5CF8A6A6091D4E1AFEFFFE46902A6FDD602C0BDD43826F97F25B46
EF42EC2575625583C4B1A5D2C2123B213B657BF5A5F9BCF8D7AC0A03FE083FA6
1AB045F867FAE8DEA5F86F4AE262A709AD2DF26578FFE8B7D6BCEBABBC6FED65
4BE304DD084919A95992BE5111F3D520C611CCDA4A853BD65474C4BF055EAC02
AFBBDE0524BD476C7778E3C02A771F55D6A73AA8720136EDB60C8D4352D4F01B
A1A16EFDCD79A7222DA1BA40A96932D4D4D9310DF7546E034EF820522C735916
A10E32A4C4B4E799633D6512F96F12717C512238F6465B7855B0BB30A4366916
1716D2D6BF561571B452EF2A09562BD0D43466325FAADBF507AAA9B70B772D34
3A46B7DEAF15AF26FF2901A39FA414277CE7B0291DB9EB3240B860BECBF949EB
1F69F0D3AB487A43C1A120024BB097452CD18AF3A70140CE8DE79F2046B42A51
CC8C164CD022C7D64EB52583FB0F932E15B850B1643F73D5A0D0667B79872F8C
91DF1AA6BA863628E9BADB44803C081B5393F7E7C469C9AAD6786E83BC3115B6
67FE2ED085F2F260F183DB76D561CF4C0C9032E691837C96F1420AFFA42392CE
8E24499B972846077EF30703A714935420A7A5320999F1E4D9F07FAEE77C6359
2E3BA951995A21671075B7D880F04E2A27F55AE6287A69AB5486097A86D8B1A4
61FA8CBFE85831B7740BB82DCD279BAB3F1C075B84CFB468DC1645080120858D
BCF386B19A08C4158C9A8E4E1A19847B0496C6FC245D38DBBD0E21EB9CC43E5F
5EBFED1D1319A3D579B8109E0089750F643D909E68E449EA11DD718D61C22C79
7A55F72612EF227E85366F30B433B4CDC4C26FF3CBB18C5427D40A9A91CDBBCB
C60D05ED5E47DF161C6F804D77388B1148361D6DB76AD4F5083A39B9FC3087D2
086651747A3C02E05E6DEB86743588D6A702C86A5520C6E8092A1D494D1201CF
0A35D2487DE3F67AF342796EB8D765C54E9B2DA2B868513E522F0A5D89CDDD50
B0C5BECB1D7BEEE5BD853E7FCBAB8BE3DDF1E1F3CB31BDB8254692F6F47AD23D
EAB5FE3211D943C18F426635869582560AAFDF602983105DCE3EEF20A0FBF7B1
A009E7BFF7A48ECE581BF39FDB6B4E0BEB1DBD0FD11594EB79B9C0DA5C502E12
7EA656CDBB0029433586ABAA0FB9A2C9CA862F327405B421FBDEBE0F49E9E7EC
C02D80D77990029EA7C4D5E984DFF970286D0B57D06AE10D8C3DC2BD09552A9B
4CFE5A1065186A19A2FB1198E54E07FEE1B83EE7E7913A65579ED1708DEA43A7
75542C785BD96593934A26644E7EDD6646E588C6C25C9178E02339C494006F53
B3365826AE7B34F3189B302776DA3115EFFD0C127683C186F134F713A78EF95E
3AAE26A3B0CC6159D6307D377447C7918C43305160DAC1878730B7BF17A65125
122CFAFD2EEE27B6608C0A3252A0F0C3AC60C2BE6A840C5C08B1CEFB5F043279
6BCDE0681F98E5D3F7926E6A79880EED55E5751672239BD65F5124E451B0AF8E
B676D4176A75AC3F71B0A6A5B5787F72B65AB99A0FF160B99949B6C039EFFBB8
25082A58CA6133884D587515228908496FCC9CC458C2AE96463C84877D7F0CEF
A572D1F8EBEB852AFE0EE7E2C1C07C1B3756F5A60860C81DC469A98DA861BD82
4071FE164C2EFA0345B2A8B3C6218012108119F6AF0F70FCF450D416F549767B
3E12F199F15CAAEAE262CF8E49C0FB6BE838963FC539A6E97C94C1ADC3CA5154
B6B988D7CECD3DF9257B02DA478B06068207A9CEEDBDAF3A05CA5146CFF39B35
8958554F2221CC087DE7A288DCB39DF9D022EA8ACB33CAB96833B6897EDFD2A3
AF1BE55BC39194CECEA23F98369296B2161CD43F53C2F78B89E7F150636EF340
29298D1E94525C1D4BC6E82215BEF4190D2B93372433F9D2BD23F78E021A43B6
E9A7A94ADFACA26A6CE27803551340DAC294B7781F8B15FB4D64484C414B2228
93BC624EEBC8C68ADA960EF7443B02AE9A8A862E6F91368347469482686071A8
2DFDB1D58F24970CE2DA44FA6F5BB1757252CBF4EF3FEF88A083D24E809FD491
904309DB9D92AAE4026339FD85716BC1717C80AFA06C4826BEABE538C3539C68
C746C60DA335F104E0D05F764ABA24F30A5E5C8854FF3106DB1D47554B7695FB
E837A58B93960726DB2253F96E5F7B5FEF6D84118F0F05F771835E4E3BFF231C
EC22CAA070ABE5F8F99BB09A16E17D342FFBE158897B26386E1A160DABCDDD5D
F4E56D9FF80DC7E1709A63435007B54909653CCBE636395B101E270A9317E10F
B7D96760747E1B77ECE7041221114905411D8E756B13905DEC5512CD0A7ABAB9
1B3E852D8A621900B3DECFAD74765D3E6C71E72E9FB4577D2C15440F33A36E21
4CC2407642BEB6D3B1F75C14B11B3C4C6B5BEA14D7A697A51CE8E0DC5E44328A
33C3E696426A6F6C97C0CD31FD9BA1F5DE43871A5D9CFCE9793498E7EFE33FA0
8125F7A39C958691CD97152191E2C5F0F2059B8F2078ECC2BCE14F9C629A6395
1909E8F447BE2268F5AF8F66DFCE112E23DC756B5BB9162A68503468B467B000
D519685F2E59DC30A24FD532506473DA2D132CD9DC70BA6C1476DE18250C0D1D
B672FC657CFAD25205C13745B85772131A6ECF352AFD510080C1394ED51FDB4B
E5DB522FC8F7C06563B85DA33544E92F3E0E0091911C95EEE4B6F2494A516ED6
77E65470C6DFC34E6F8D4FECF63CC2A91D4748005FDFAFAF373FF08A46E8D916
65FDEEAB2556BF3739D3B73357E78C1839B7967E7ABCE290E85D368DAC2EF0FB
D7A6E37F3E8690470A265CD951C3B69E40477B49642EFCCE4DAE4E0E10969B0A
9C30F5FDEB7E41C6B9B157887A1EF7C514724252162D7CCA95194111B87A12B1
A8D614E44DE268C1414D0D18B1F398B5055BA0BA55EEB15F9A415AC27FE9D513
A5FB0730EEBCD4FE787F7F1A045E0104B03531EDDB18F806AFC3FCA500C3F4DB
FD89DFD0D8AE4271C135EE2EAD7380BBE3344245A64B6DE4214E5AACA76311BE
A2EE57CC80EB576EB2ACA5D640929A7ED7E0F6CBA084F3C1A582A1AB43B7C408
29493ECE9E36C13DD756AF9612C90FBF115D9CC420FD1D3589F7322793C8DDD2
561C37D25CBF293B93BA094064E27BEAB91C44DC49989852A24CC48F07845681
754393534F5DEBF254355C84323450F3500866C73010A9F466730814E6D56525
33F0B38C460250A0AB1A50247C268B65537850FFEE2C591C10D6A677C2E7F273
8003F9C82780EE2E2B86EAE4676DB6A6C096C921906097AB055652B8A33451D6
423C98E88D41EC02E089AD52DCFBBC01C8EA17C0B08B1718D0A8D8ADD1EDA36C
6F6DDD714CC9F1513BE5BFF44D031AB1640516DC267744C1B35199D3B51D4937
45B76351A103653B8F7D89082E5677F8853B28D76E6735B5B0B526F3CA38D003
55F0B2042857840E798E278D3FD0ABD53952F3C184593539BC0406AA3B1A1967
70D283690A5579F36F7D0D479FA61601520C602F9296518227564200B4A4AA10
760391183B27B7701DC3ED5C68C8F575A253BD54275131A21C002E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2E2A68EF8D1C1218D4CAD6021093125A73710FE
E11B6B3B23CD2AD46270F92FB292F30D852DDE60E6818C162254247893637369
C7729F5A4CBAD8D78B07309AEE44069BD87AA928122D1FFF56B8FD5782BA085B
A2213F8816F01183C3CA298E658EE9C13C6350F14A9209DE8A4E08DA6FE245BF
568355677A9DD49EB4DD3686B5BB030C72397BE2798DC546A5040B8F17C5128A
779AABF374DA038B94733191AAF942B6BA35E22B7DEEE932B202E981784A16F8
F33E50BB66F44593DF8DB37452837893CBA42634629F0D64BA7581CF5E966FB5
3D24198F715A9CCAFCF4AD13465DF0D603C48302D7E683BF122B339AEFC509BD
A8400A5A1F19EC6C599E20238CEDDCA78E8314EDC6B44B38419ACFED6D092481
50786DE3383AB03CD116D52E4190353903E41392A1D01A4EE8A4BC53F31E205F
6E13FF42D9E05C483027FFFB98237D8A88F0E9AF05FCF284185DF4F84430F2E5
809E05D69ECAFB6E970CF47EE63D152C91D08CB1F2B597128D999D41E5475852
43A37E9C40B98C34E4C548CB681B4F0CFE0C808A6B7AD79F5426E165D8E117FB
75434FD3280C18757124D4823CFA87DE5DDA61E2B4C57392779188B8B1B8C05D
0A67AF2BCF74B60574111AD8538E5C868CD9A507E82C8FB885FF2A2FB18CDC67
08D9817386472C80FA1D0525852CA7D9F733FBD0822E7A0BF87BEB994EF5BBC6
F11E9AC04682962D485C410574219353816B83F3F1233322EA4807BE9511D8F2
D78AE5FDEE28D416CA830483D8BEB1F5338AFF9EE7A2C46A5A5618FD4CC4B79A
65A3B693B5C418668CFE7FBA284E1BD6ADA158CE5E34B9080416C4F4938658C7
BE3FAC870A28CE055D4D73CA3186CA198CBACA20DF47D2DD3E4F67E65BE2599E
DCD10D0407325DFB284532BAC0CA783402E666543CFB72EFA692DC73480762C5
FB6D70BFFA48734BC752DE3EED3C9B1CF54831588D2E79165C79B067492DA642
C1EF81D9CD3C67631F5ED2B6567B2314EDCBB705B7CA58179B636C03E483A80D
47A482693085432F9BDBA616387C68BCE6F7F90937F82303C708B017F783C29C
3604D09D059CDF5A93BC30021797C9913A4D7D411C52FA69B38E1541D82A4BA8
C17A0CDDEFE0028AD44FC178C378FF2920AD491DC499382852EAEA2383627BF5
736BCA3DE34E62141F77A1CB63CCDACC8FCA97B5E0C1A4723A8887C768166FC8
4BA0884F0E07386257564615DB8773D9E8B5AFEDE6F666CE4C8FA4C886317967
BBFDC3B0A09767B5E48C2377AAA7FFD5B9BE66F05942607718EFC619F484DB15
736702FFAF60DFE589A19101D1876F1DA8B9FA761422D7F0825ACA113F08C2AE
EBC2391ACC2EBE5D37BFF52E9148C5F2BEDDB7334E238D9E648E22F4EE561EDB
53866B14A0B800720C07E0E724F14F6785E8CE8B310138920BDD9EA1DFB6038D
0570259653C198D38BDA07F1F5D4CF09EA69BF264FB98950C71CE86973B852C7
821848F4BBFCD65FF035F6ACE8A844D683580300CC2654AC34B6001D2B05BB98
607B4CBE10AB3761503BDB4D474A840B488474EAE77412E2537FF6858109FE8F
9E63D897BA0934AFB2BFDD5BFE2BF1966F45C3DE3397E5E4FE085C1EF041B4AC
DF21353F370B3589B65AD6818A966E8BA1923BF6DF3D26F371AD3951063F0B22
FDC003228E7EDE8096A4D8A47D0C7443BFF50001545C4F340CB9D33D6AD3777D
15E08308220151C3E67CADED16D9C451DC4141BCA87F423CA3D6270B08D42741
A67A4F22C2D72A71A4E9E075BB316D8D1AAE16BB13E03499273A86C3A45F797D
13199B68FCBAADE6EE0FE410BD667BEB0A2B421DD8A51DD9AD9D83A46EF9BC52
36760507CA54A845A5AAFE119D7381434823993EEBC5CC244BC533D473316178
CEF28EB6DDF2C228E532E58C488CCF362702F73B6BA4CDD6193FDD8292157E42
EA4C4CEEFEABE9D4D0C125BCE18F8D9E2AEFE43856C7DAB7A7BA44571BF1BC71
D6B7F08375014D057B77BAC92B1DD1C96A089DA275941C1189A6135CAEE72CBF
E212137A07EEA25168B079EEAA72B5F655C20083DF25FD7D1E8C04F39D6F564A
845799AA5D9426F0B6A0995FA0FEA7F53774A492FE177001F6930F992BFE6703
9DA2E012EC7C9DE265454909CB0B54479EAF9F152E3217D0F2593D6863E7872E
3CAADC66E7F2860EA451BF29E8EF0DE16027D5A1505F27504B85F0F16989E85F
CA21BC518BFF48A1B8A5A20E7ADA891F6B6C2DD245920797B2020D35D5A00D16
9323C871ED048E3DC32DF83662610A7299E23A7AD75D36498455FED52EAD7E0C
BB9E031AC71C538B77F097091DCE9472A43B5FD6AE51F6CFB1F6F4B94EF9735C
53B3A4CEEB0C836C777CEBC1EA4D9C3E7F59BB1384DC2E6373B60697C152DD96
476C106396B7B9CFDB7E2F20A54E9B58914BF80E1405E3CD4E8ACF4E0A0BEF43
3D3158B83C0D6B8E07B7117E1EB3196C57B881D5D0462B0EE7B1431E111551AC
C539B529B01E55940C65DB647AE833CEADC12F14A5B209788C9BF4E38DCE8AB8
49C01C47CFAFE2F8843674313C4E0BB89EE4A92E74BC31702D193ABE5CAF809C
6AFBA2CD05D09EDA580CABC3E81563C7BD44278F30A42AC346E21968DAA0EFB2
930FE0464437B9F4136154CD2D8757A9D9BEDD1EC3ED9650607FF03F1320C0B7
3A3C9B5FBE56DE9DF86D93590B9A573439609B3A3D29FBA23EAA7A83E803CD66
7147E1D403E194254B2241DB17459FDCF177057130D3F2F0D3D584761104DC06
CFDA438E6E1C6B6C5B93304C6666CB1AC36FFD053DB503773A3C03E1573F7B6B
E316D8AF143BD93111D712F124C2A50C3165E4CB49DA6AEAAE9552A31A49AD25
F73B34E3DCEE17348D9AB2153E5D660873EDEA0B3C0BC1053EDCE4112DB18267
A277DD764C5A399FC282629FC4BC6A5250ED1DAFAB6053766D30C175AA223ED0
0F684C2AB3CA80BF787FBAA3043842D5E8D48F3E9E17178A7A3AAA7F1CCE1A08
A96FC36363A671470123910272BC1213B00A770F1FD9D7DCE21BD581BA61EDDF
6C37B2D1DF03A9C3B609D77B3FE6CFCC959848E592BB6A18BF5DCB5A8B0AB4D8
371C933E0BD5E19A8EB7A00B5A38964AD9FC71490ADD5A63EB83B1C169406A80
FD576BAAB1E8DC378D204562FC859031DB7F4B6A74DD81E8EA66CC6EDF19F33A
6050CFDD8E48575769447A6D6F19D9C51C35B0AC71633E49E6D10CD65205CD52
B6B09FE27A63BBE50C195D028C985188FED3B46A0429248D1C8A69D840F90A7E
79A1F9E43D35B94FDCDED18D6B78C61BF990437978DE17270715E6DAC8C7C7F6
6728CE50380D93BB7D813CE8818625DDAEB582DE5CC1FC54EDCB110D97ABBE2E
2A5AE9D61ED6DAC34342591548E9CF01B273A8330B4892FC932686DA22FD47AF
DEF16001DF4B870845D5BF753F09A810887C702152DC52D90BB8B332883B02C4
3F522466C295EDEC695CD4BF2C857DD8EA096AD9CB972E862AB467CF3BC505F3
9B41A38D55AC6812980352F216FCEC8EEF0C93AB75056859206FB59C264E9CDF
B2CC880379F2CDB80A1D741DBD9A711E8E89195B5C6126E3443D41E147AE2550
57A4BD4A3E14F2D8BA1FFA7D583672522AFD19F8C75E98FF8DBAFFF3C66C77DB
2BECD582160DF87205C997CE1B6D866C3E7DE4EA963E2265B64FE0C126654916
8126AB66DFBB8C892A7D47DBA5336E6EEF1C51EFAF1A5E5016C19EEE33CA9DDB
B6106307D092DCC56A2283A546A7A7F02B1072079EEE8097A410A032A47FE7DA
10B61C0307146A45621E129B3F7CB2BFD1BD23D76A8B551164E8F856EA098896
68C33A0D9172DF3B1B12AF2E752ABD9226BC94EFD4B859743A67B0166AA2EC17
EE21471B1A569BABFF11561F48BAE3AE95CD2023EFC0B8D4EB2B01D5A9F66C4F
808208F414B206850B3B8C0280FC67A306D217B257C7D8915555544B2F61A40F
ACAAD74A3002D9C498C3D8B4AF2179AF87D099C3CD9BC64F7E9C926241625425
CFE64B843C8DA0FBCBF4964CCA0BA2027EB23DE8F34CA1DCC54E0BD8EAE26F07
F2496A308467D06923DC02B3DDE39FFDC203B9C5CFBABEDB7C0F5AB15E888299
0CD72B3D0D16E9D6F468DB9018BA8D8C8C771F3B74C0ACC8DDE965579E3E61D9
5D83F191E82B4BD48C112010CBF45DD97F5F6C0315AF82742C86F76F35CD926A
4AB95C44FF510A836CE183D432F6D009BC4911B6AA97485D153FF97E5F754210
350F70A046732B115C4E8026D233EEE05259F94510E52A858EA0E61D98B0DF3B
4AE36AFDE134B1222D03193CCE50E1E3D043B33B90EF0FDAD8BCDE9AC2BC70DE
5DADBA9E1AEF9F795585D5FBC9E8A17FFA5B802ACC35E8C474DFF8AF72F0154E
4B79B16714593D4F4CAD9445EF65D5D26F3C5557E73ABDBD50A5B55EB9CE614A
4A57FD12E9F3D58423C6693BB954098175732F64747A4FE241BA59133A4606AE
C81D743AA916DD208379B3CB9AAF49B055D326BEF43FC3D0E84E0319A7060A4C
993C94DF419336AA668FC0AD140EA51C09226882E8CF3C022BC1A398163B1C52
81192A8B373D444D40AAC90262B581E48DAD284B19F24E21F842FD0F3FC332BE
973AC6B0A6D4827B6DB779DA5062639637AD4423119C98D5DC1DC1A3FE088389
2E6AD662812F049EA44CD7DC6F714657AF749438758EAB6FBBCF197EA977B02A
31685931DEDC5096CCC5372BE48A48E44CB854D8130C6F5FA16B886CE9606BB0
F3230AE01005A07A2C0113757F0DC1A0901097301853556A8E92BA399EF964FA
BC1C7B0B4890733108FE08ED508E5039526A257154FD6958E834D2F522D521BA
86CF4F9348EA49AB7BD6CA792F4AA59FFAFD897BC9C6E095B1A4743F861C50F0
0BE89CE410D469A787D4EE89F3160729306E4F080CE29AD1F7AB42D8F9BA3C45
4B2D062366D2EDD758AB2851DBF378E87DA7F29B16C314B427BAEE5B4B1D456C
F8B5944E9CBB50E624B6F32542483A3C7303EF0839A439ABC01ED5E6E49EBCBF
D4D23087FC2960B45AEF792F7CCB4ADBA125281D675358850D4D893C79F1BA27
2CDB1A77C3937511A093C573E74B0DBCAE3B82BD44352E372ACD1E8695E2A57A
C09D9FA9B02CEBF00F0B50B7C856F14CF9522C53FE91EF18458D29E3D4839679
354CDA6F15F74B1D4EDCC43816AD379AFFDB32CBB7DCB599AB9B56C6F69DCC77
C25BBBB53FF432E4A3EC3FE2B22593F7EDADA3A7DD72A28EDF97B5D5B29044CD
92D84898CECC2096E0B8165A43B959E91D92CA902166FD5B9DE86CCD44FD5496
1BA8A2C3E26184D68D5C52F78349217B65A2C6E9971456C23EEC3B25AEC61247
1BC33EB5563CA921B50D54CAA9EF32B24495CC5C64383357F6794E4F86407DDA
8844EB5425521407389C627A6861669B7200F2699C455D213AA27A723EC10653
BF0AB9C0FB3CE54A2AF8C847C84253F6FCD874B5F5716D80F59C271A0299984D
5960B9B025A80CAE34104C780DB2BD058A8C92FB42DBA8939FC29A7D3A108E22
E96B1A237CA8EFF5FD694306E67ABB1C140022F6CA4A8CDEFB41BA731ADD3C20
B9FE9F780E30D2CD78A2C24E11CA961FAF0E3963EFDE9CE56262559C84B7F52F
467224324C88FA71C2B305E94F64E4CAC866DB70CEB5E67074838D480C4FFBAA
393A68683D07E37FE59E747F8DE193DD53584E86BBA90479824AE579B8E064F4
DFDEF28601CA4F43E13DB2EF943E96E066F96AAF3D9B96A3533F94357AA22C18
2DEC18D943FEA0F7E7607B46F62B6A719E675A8A36EDE8F6DC195E944C6094FC
1493AF2DC3305F1FEAD60A211DA571C5054C5B8517BF362F5EF1E095D43077D5
2BF6A259576D59230FB428CEE7220A24C71A8AB26BC8C3F9F7FB125AC97F952D
C8ADB25120EF6EC9A1E7AF65939A11ED9F23352DC1B917AE43FD96557907EF85
7768FA81DA58586D459054790D28EC9634E9A1548F354B89602F76F629C1347B
EE2EB1058D6C091F64CE0C1AB2F5D83ED05966952482A2E42EF365412B509BB5
746F7D44706674D631134E73C92CCE3BAAEE1D7C7FBFB9FE6B840715BC34C219
54EBC5029FAB9ACB87B4507DBD96C7B1F0A60ECA75981E943CD725EDB19CBA44
48AA595EAD2B623303ADD60299B1FDE0403E2EFA6AD3BE983B25B8B8CA37D557
26A3656FEC57456870BD7E64EC79B570CE16F04C717548AA6F3D9B178EDCEA1B
AFD40FBA8779FDE1B0ED350E58ECA8C732872DC6D5366F993ADB0DA182DC7C20
5EEBC8959B0C5EDB08A29C32C4D432C913EFF499000C63139542BB68F83A3E0B
767F66837B6B2190F30E2EEDECE8D09B9A6A98301F8F4A8810A60E695B617907
0C904B4AEC85BE2A72B5AFFE0A91A7FC5F76F471A46B09DB4B063BA5181AD9E0
2DF243B335B5B3582AAD76FAEB29D0724C0A871276B9BC81466A2EDCE68B628D
FC74AEDCFC5F6F6E633F0FD3CE45D0EBF96AD373B546D16B29692A07AD9E9682
F94AEC9E3CB751B4D088DA020D46E2999950871F20C31AE31F8C52A96993445D
0E1126EEF0FF5523957A15D11F15EFC07E453FFF5AFC65829CEE27DEB4075D50
68F66EF1B00BA453343FA6844ADA6F4CF9F136F5AF9210837AD3BAFD9547DFB6
E6AD1C3BC2CB3A80E631675A7F10378A9909EF7BB79A2A631926D544E6887D1A
3A499606CA8E697ACEFF707C5CAF286F43223A822E44D432004DA354352C5F65
03160BDF0E544F29AE3F9AF5652F13F9D164A307CD6138EA2BA6B4DCD2A30F0C
5B2D5D6FBC18E58D941284296E678343888C8BFCB4BA4D7D0E8B59FA560DA5EF
DB22578A7F9D695B9AB930D46EBEA99D7443ED2168CD64263E4DE10E3D9D1DCA
E35D52C8A337EC7644EFED29D76AA70CFA232D50A8E4ACBC3A4A08D48D60295C
7DBF4D1EE1A4F7E280B79C990E82AE0E66F0970A4099F55529BB528DAB466113
6A636E650898E42E18D338D884EA33D1BDE795DA2FCF877B6A0E736B1DE557F3
54607F29471FAD15F4BB351CE2B183F5969B80FDA54B3863F6ECE5866A2A0732
52AD22DCD1274B609D90189339EBE38E2A8DD40F4F8688DC0A423F54FFE3072F
05FEA7284506453D56A0FD51213FC29A0FE8B683DAE8119EB1B9F94380C6A989
81A99E2443A62EDBF42029F90F4451DC84DEFF1E8EF8BD4809F2FC0B379F3A8A
84E3BB231F9B2A3F070A42420B5D94EF7A13011E787205BE38C2744E8A478E03
E1DADFBECD441A5E7DEAE962308ED0820E6BCDAC8AAB91FD490F1C1C8FFA0840
20D07F3834C8034B08588B9A691B016A13368CFBF084446BCA2EBA9EF4004BCC
7AE2F068302B479C23EF64210680C08BCF5EE0C7988AEFBB9AA05D395281FEAD
B320B6F6DD587C96E8DB5B0EF2EF5919396EAA4C14832705F37B72557A6FB3D7
70C880D7A7DF0453FB324D770F7112D355E1DB727A062202D944434AFF03751A
4D702B564DA410FAF48DAC9A6433E2C4E3EC16B3C2ED83FF46024B7EE13441E7
59A7CA7E1B05E4E83D61F68D73A3734B8EC9D803D2BAA0DD1557FADEC4574EDB
72699FDFB1D266BAB4B1A5B116321FEF3FB26BFA8A80D7DFF9DDD31E75E530C5
EB5E56720D6CE4B103A56633379364171174FB24D77EDF67F707FADAD557479E
6FE5E9DD147DA54DB76BCEADD7EF81D7B87282AE964C4528E9DAB2F306FF7346
FCB4163D7E927764CAC582CC32A0614F00F3428FCE6C7D2E3451EF0E7FFB9285
7610208F39FD775A2397E6D2ECFDB3D4DC101A75E7B55F34AAB89FE4BB8472BD
B86F08B9F29B0D513675FE8E849CF8FDED97975F0BB6CEDBE9245CE99910FFE6
B103358A70CD9080AA87A96DB9468DD403026E5E12CDEFCE5E92749805DBE1B0
C05AC8A7E89A2E452CA72A11D47061C1EE74FF018BC9C421B1297A4D6B8712B3
BE958098AC6DD390FB8867810AAF4715E339375D60A34AED0671B809D61FAED0
A5206F65681739A1C38649DF8E6F1FC9B1350298C532CB0BA30E044C419B91F6
8EAF293A2C227BF1450BE6602D1725F1508C9B01C06304B71258FC458A3DC5A8
A658C2428B2D6DAE2C3C6556B929E622CFC807533D65CEA21B8FE277FB9284E8
39F3ECCC711BF06E260679732C9E5EB66096101CFAD5BC1F973D5A0917492FC8
1C1A83BB6AE25523048B4D30DECAD98A3E6196547620B6E84314C5B7A9E30E93
7349E49434D575CF2EB8BA6D03BF5EC2A9B409E4B62823877D6AEB29959E6940
40B7FA7C96EC0FF82D233277A2A7402EF6A7B1F6BFA0156E63AE071B3E67F000
29F54AC448F1742D63A4E89D1838A585862FECBC60CA78D8008B916E0C5873A0
738EBDF041542A5E5773B6C146E4222BEB3C08E4E7A40E862F1489D18806C153
21387A388E68FFB818338838D780C6C6C20EC0DAB0F6BAFE6B5338AC4E49CD32
A2F79AA44510B1A8C7C9D43C9E7B08B9C95AB10DF2350FE3E8BC91261DC2AB3E
640EFDD3B35D8BD6C09F29CA2FB02F5A91404CF583B97F788A60AA13D35241BE
42EF10DC8195C74537F28D2266958B1D1DCDF3C6B4FE349CE0A5035987A8D037
7B1AD94A2C3F4FA1736C2F608A37D3DEBAFAF68DAAEA19A2D965A29AAAABD812
0DF3DD6E366273C74148C1EE18F330DE6945370AD05472C33C523F93D849B449
BE2DBF966363F583ECFE7C1FD1BF4D289833C02C797491CA4AC0FA3EAC58EBE1
AEE6EE2EEEE736CB10EFABDB32658494CF5624ACF7C455F52D2F29003370A63C
B3C12F4EA715800AD9A9B7AF56296934D03D01662472B9131CF9A9C17B28E971
67510ADCB8E16F23FEA2F6224490FE5626C854868A5078567C0ED428D80FB222
06D9705E4C47C2E4FD1876DC178AD619289B228121B2582AAD76FAEB29D0724C
0A871276B9BC8088C84DF7A31E8098E63AD2D062C59ED0A4D6211DACB56EA39D
00EA09E91037F30CF2CA7AA1E558070F622A757B97828A9661A2C4CD89194D08
68E003DE18BE594B65D76B18E0209CDBDB93E8C746CD15EBFF2995FCCE5547C3
C1EC2CAE0587DB3C71DC1C0D12D0958EE8E552D2DAC219A8EBFE2F44AA6F642A
008D745D290CB4710FAC91474BA2A05ECAF43C34E4DF83DA3122BEEA272FC934
7998D40D3569303E28CC398A2ED64AC35387E1E5B5720163BFD1502F623E4865
D8408D27538EF06E332C11D2A9EBFE7949B845B8F2497A10935CE8F681DFF83E
7AF220D534C8E6616842EB765A4AF19B0B22002836C2A4C3E66F8DABBFABF822
FF7C25DD5ACFEDF2C607E6EDB6407FC4A23A7FDB6B9553951DFA8ECE2D4C2734
2EF751F4FC23E3156AD4F0C79AA804861B657B480F336F734521F13DC07D3C60
6516CEB67EC4910B836D5BCEC064AA3C01AE29CB56FA80FB695BD22A4015794B
7A1BEA96746DF927B1B78AE5966AE00204AF7959BF2D966705D80FBF0F900A90
73746B8C18D9E2F5B41A4BF1D711EB76764ACD56B6D724F4A403284E859623E2
61E2395FB8D69CE96AFE1471D485F5139AEEA61A9CE619E1E0761E13A5BA19D2
7243DFEFB818DD50433CD02A64751BBAF49D03AC6FD2A3147460C67EA899B196
87E503137302650A55FFB9EC3D2D61A5E37FDAC8381B32AC146DC646E7F5A922
749CD74813ECCA24FFFDC05DD565E5C3596AD5B76325B895F8829CB25125E256
2529D99246B2B167FD81AF4E966D313D8B6D636E17D93850A634E803724B484F
A183B77D62FAEB611F9916C69B1D50DFAB58560EFB0CAAB9C88E4A3846F339AA
122208752CCB57D81CFED367C75369DA38385B8DBA102E0FFA1D6201F9CCC4F0
1B2F034AE7A5B9351DC61E31ADB08C8409B2A9E909D38B90053A65AE1FF70A72
8A6B1EFC1874B51663414484DCCDBF4FAECC25DAD4032A8CBCDF482F71DC669E
F99B161066F558EA39F4632321E3965141A7A76B49ABCF4637D1BCCF1C865A3C
E1C7186124757188E150E9A088340BAA063C6A13213D3B0B5645FD12419224B6
91FB11A77697047F2355AD4F82662DC40475CC3DA1CFEC4275E283CD196BB8FF
45986D96B7A03962223A82E9239921FE58CC0B13B522BC073F18286DAA531468
932E60C19CA8BAEC6B3D3A6C53F47F0BD7462AE367580D62A4CD184318F1034C
48B5AF21CBF4DDBA641F6B4C034EC715D55C98A9745EAE6A5254B1AD2A9B92C2
39C0E8018952C7AE3F0134DD3C8A79A67B34D2099965A36564178DC0304731E2
C5F9C96874FD3418B583A55D565C04F8DAA1582071AFD5F1C57444753F21C7A5
58F04A4475828202E5901CC4B58095CB0D9F72D15EE58878F0458D522DA2EAAD
F9BF2B41AB667C4844EBAA8ED325F02C783D0465A6352737930E0F89FC00DC09
82F066A3725EDBAED37CD11608A5E06E4F7ADDABC10986A296D8665BFD59DCE4
6351F57E6BC2D5DCFE8EC07330174190FC19948EF5E1371327E520801B60550B
98AFF4D46E8B571555446107F7D88608108350947148EF66ACE45E5D15B52661
A4EA33999BA08C604B07F6AD02345108910180E7A56062181F7DAAC7ADA0578E
F014FEFF0766A361869B94ACDFBA05098B432C7941CC0D753AD1672E2E80D551
5C47A3029EA61BD66B3714B8EC9DA6F62E4BD94B65DC86690B13EF02D749A0AF
30BF39EB6C73010E0A15B7D1235C3A37A37E8C61CC15333BD0DB5AFB480E9816
7460AC7B454F398E73A28F9E859BE6FB9DD4CECE8F5A887DB9C8A48595E399ED
18CF2E7ABB5C99CE659819C9E8EA7673552C9CBC382FC094B8C48677B027A418
DEB2EB2881C434F0BAAC05315F1E06C9F733F2E0D0CB3B9DB34DB4E4416BDCDF
6FD1AEE7BD8BF2B7AC369ACD699F7AEB86DC98EA7FD3D9652B8798EB391AD61F
E849A61B3899D826BA4753D34BA8D3323B847A40981D306CE42F138B50C1A0C6
0F7542550BB4394289035DB39F1E16D5C2661FFD874109CD47BC074EBF22FB50
2BF42DFF8E39CC410AB3F3A7E42911F9DE62F562219204B3E2A225304110B42C
FD7382CD184FE43D8D0B8D1E0D140EF4024EBA49B5F35AB3303E3312F849B879
724884E36A477334067545B6EFE8BA2AED0D76108E2C3E7F0B6BDE55C6640ABC
AA80D3503F9BA9417C9FE0EE5E141C2F54EB8377D78D5BF4F625855E0AB86FFB
49EB64AD54AFC3A920D91EB38BBB3445719B6EFD4A21B6EA2EC4DB3C71DC1C0D
15646EEEACE95222A130E97E6D408712B812E4A8D239B17BE769B82A37B26E5F
9963F220F64E102563C5798C446D447342C7736C55440310CCC6C51819E323B3
1AFB3808A2F3F27664985FD115ACAF775CA29A7E732FD7A22E9B8115F2BD0997
906704E49C95350596A23EA5FF4BFDA67F464A544179C5B2B37ECEB699B084AC
CD44027A7E8A840B44F1A2F01EB0B265BB441FE03FE3684393D18541B1168C06
32BB3AD6E600A47E7C02D26FCD97A0FAF3A9A8AFAB2DE0E7CEE1D3F1DEEC0849
F87F1106DF064688F88F754C3C107B356131CC2B0EFEC3E7100592B42C03B430
DB8843873935EA60A88581F21DB4FDCAC3BB9D7CA119738ADC24D7AB7F99ADD7
7EF3DC56C94B18A58D6713B84ECBE93CF172DA8C3EC797C2AC024E9921B693B3
84A05167EEAD6A269573732F1921CF9765A451B9D73E23F4E913FA3152802FD8
0B579D02637EAF0B9E8644F315CF4E3BCBAF6CC5D425666A953E85243886AC1F
48BA89F1ABBA03AA588BB2761DDAD9737F5C7CB519B7580C62DF0A28DBE62A85
4163A7BA0BACA856682FB52E92933901274E30C4D51744A45D96EAB7D932F26F
DC2B9B2306A63566E4E7DC33FCA3D8B19A87F344A481438CA22335C5739DDBDB
9CB1C4B5989A6A2DF1FBE1991BA449A6851EDBD4879C07679F19A6B45274B12C
A13A5E5DA6866E0E3A510173E03B4A8FAEC1BBF9F193CA48711C8B8BDEA687F2
1359CB4859F6714A1D468CCB6A6E64663C76B4E51D6F42CD2CD08700741F1A2E
3599AD8BF5E30A6BAB1D04F95B4C11422AE12ACF74C3678FDC0E545526304026
8722EF4D1102CA1BD0C9EFA4BE0463CF2406CDB8F1DA62F4F1D2869A58950753
E24DB4BCE066B665ED53E135A545AD444FE5BD50E3EC120210CA145725E35486
8B141A69C27FD2E4B70160984B474ACDAE74A3E89A76968DC8C50A59E7B1C3A4
9E76674B285DAE0EF39D52AE693867679DA46431137085E902850B2C6AF69C27
27688329A67197208B143D124AD0A3FBFB5396D7B18C73D8DE6452A75DE120EE
0A48999BB689D6416CC9CE26BD93644E4C26926D65FBADF2F6FF1CA8B8DE5934
CE2EF568748D7FA965BE77A4F482C19F39378206977CA81F8A8E32342EDE163E
6BCD63BDDD76A33839D7830EDDA635611B705D61C42CF070DA8891AE7B902A02
30BD29E56475379E7A20EBB2722067AA0FBD3918F7F9AB0939D136DC545BA4C4
41F00C27AC43007217C26F5B608F03B4897CE7461AD5BAB068D8782FA0950B76
3F1C588E150EF466D40B6EE2EC472C3BAD5D08FF9613746C405422CC358DEA65
94291130655FBE6E34A8F8C31CD166287FDD24E75FDC445E8124266522650D8A
CDD7BEDD81966C66E0E94227FF4DC352C4CE5E9770A4FC654F5DC709A9B2FC13
3EE4A0D8F44DF0E93F65C73BE7A22843BD15A6DF99E14BCF76530FD861E3A838
1E4D2893A7B8F1B3C54F8B174A9E28B55BC3317300335092074DA6B967652CC7
1B3B327884656376E272C7181BE5988CF046E7406019A4D628C26F57A223F456
93BBFB1A82DDC490BD2AD13EAFA579F91F534B15A83432673B3FD0CDB70B28A8
52FE88D2883F713648BC681D271CE0AB8E56F9A15A8FE4216981403BC56E116C
EEC9338C2273A47AFF1B006DD8D0A900224E19A470AA798540DFBCB0BD8BD09F
7CD15FCF9C28228E74B02B2AC7AA65D6B3F591AB473AAE1215A28E5660B5AD48
4BE882A31EB3051A5AE5233ACEB387CDAF4214F3361BCDBD50944ADB0582A674
B6906BCDE88AFEA101CB3C474FB5CE9AD8FBBA1A34E3D8DB5328DC7AAB49611D
7A65603C6B8EB35BF353D19B9EEEC38F0CC680AC52B865C53C607426584812DC
CC52EAED9BCB9D2F8B34DC16AADC734D470E4AB6CC9BB157D65DA15E9A5390AD
5502BA4FC5659B3F3B3D7C63DD439F069E1460FC5ADBBAF1B1FEC48D4A2E5A4C
6D38DB16CC416D7B8A8426BCFCDAEBD1AFB7A7ED9EDB11B481BC86FEADDE5507
E1D03D9328B50E28C6CD3DD5548FC828D4A32BC13CAAD317253A0F73107217E9
DA6195AD5994E179D3D35D3E099C58466A866FE9117F235B34FBCBCC2AF0CDCE
5B3522F28EF9E8FD54E8DE6A9D72EF349BAAAD9188ED4253089649CBEC2371A2
D276F8A913F021D5731F0E395EA244F0E9C5C74D99EF64AAC047E720385DE32E
5A0922385FBCAF8830CF75E903ED9EF9369D56D089060208BA5002120E23DB0C
9FB7E54830CAB6F3D77646DA75697206D7CECDD51BDD64636A1E9DE835560FEF
4F937EE4F65B49E54FBB28E2127A06C26FD439BDC347418EF9053116194E6250
20B56DA1BEAD8130E36F949D9A92E4960AACC2011E84292857CBDC7F661FF60B
57B7693FDCF8F40B9FAA8EEA6A55450CEE728B74EBDBE7A95450AEE61EC4FD0D
695AE00574D0BD030641D595448D9EAE18AB920B28FF7A6B6B145DADE6CCB1DA
EB243C4231F232F3C81073D7D8FC36D47FE634011CE53D2E40A66B4120B34062
63DF81B021993F727ACDC8C0F3B955F0B6EE13FBA27265EFA86B3A8E40671B7A
0EEE0275A1AC2BACF1563204E59433F1204E4BE83048E3B2431BF89DE0CB8875
F64925BC7CEC1E54A639DBE0D00D7223B592C2A8B1A911EC03D1F5A405AAA811
DF13C16593C6FA8AE384E2E27B5CFC69D1B18A4445F192668A0F4AB8C27EF517
E326AE2DC397F2C0F3E7B5C209964A2F787AE26AE57A5419F1C253ADC20659B5
FD60DA7744D9D2313D0DB956239486A22788A666DD520C7543D649BA7F7B68A6
93ADD2F86E15DF10B5D7F515CEB552810FFF3EA91E0160703EABE2F4537605A5
34DDDB4A69F74B6CBFF6091916A23871E4E377278A33815870DFCA7AF2812965
64B5AB27BBC9E136BE37A0DD59A63D81DE41F7C24249DA6BB098B5AF30A3F994
0F5EABE06F23A0D0EA0FEEF60C0A0C1D1C53557AE1E29D254B34735A283744F0
DEB375A2DE15500F281FDB9B0C5B0A0470025FC56655085AD9C81C8580DBD8EA
6FBA2C1EF5332C61623B67CD0B416B95E1871E88201311BF06AF31439F9ABFDE
D4297ACDB75AD3E82770F2644C226573BAD7AA6EB6E054FB6D297B0F812B5373
0EC2BA91ABBDD22DD5B1DAF726DBE0EE4C50A4E2691DEBFDE89EF4F5F9AAA3D3
9F5A1A72B430EF00E0BE77522D02CE50F1CB4BD1A9E818185E9E357CA7BCC24E
1F0EF4FC9971C05FF15EE71B12E61558FF7F67294023A9360A02C32453A8B002
216DF77517B55EC45A9E731920A417D3CA9A4CCCB636F9CA857B3BEEEBCC20B4
A598E852CBB461976F46EF112861D3AA432C505DF922C8A8E5A787DE997CE19D
33F54A4CB2F8D01C4CD2B524B40A3AB641E6F181DD1AC8F18610EC214C0D5CD5
5A3118E98944F4F0DCA665B9AEEB07FFA2102DB7E49AE794E478D8F020939CE9
F429E9DBAB6CC9656742401BF3764FBA0E66BEFD41F20513A12E878AE5F96B54
E744F89EC0FF5B38DB695818C0E9D9AEF42E1508FD51080752962DDD68635FBC
339AEA0C8A3205F257DB1B860AB4944345AC8006EEA335B5BDE7D6F01D052585
2CA7D9F733FBD0822E7A091E6DB9746E2E2AE7C410938C5BC5DCA1C2336198F3
FFEB2EE33DC1AC28A9496278C667ACCB9A4CB9AEB036B69D4DF4082A54728060
77C272D5B872FCB48FE4A864AC9AFDC3369C841AA49B49E6722BF395887CE66B
1D2492249CECE108411B4D273EB9E4CEA8D1A30AD23D6B4C503DEF856054E229
7F5184416DC8B908540A0C553FFC97F6F1331F51B36CD9D95609ED91357137F2
25A539D7D556B759A1F5EFFE50ED5BB438642E42F8984CBD89E1EC30B408F687
975F04A6CB5C7FE3C49A9D205678E21B720133712788F9D247CB7924C8895952
42BFCDD1896E3E294C810D0D01F1C5FCDCA82BB3E7DE00EDEC6309C807571C66
CBCFAA97BB1570AD58E14BCFCCB71B684C515A51952EF0646D2E0769402B3735
A911C97858D01F60422EE7BB4AF2ABC9F5F52456D1E083D18DF56F31B5E2044D
00F98DD64711458AB1CF6305530623D824F745A1B9CEB4C3F2D261E309760B06
11E8DC8A1B569CD7BA510291D44E807990492167D9D679845721886E058A2DCC
6C4BB62A7623E77D6B5C58DBDDFA806CCCD84239732FE81146F9E43B0720FE01
B30792CD00624787478FAC3C7358FE9669F35AAC2EF22033DB976A55583FDDE9
B18DFC863CFE46D41AA855DBF78EAE46587952E2FD483F58B8B5D1C96120DC1D
4A49FD15D7B594FEA789359C4B7F90284DF89C04819363FC99A3CC275FDC6F28
894384C48FDD4D1334B800B0AEB28FBB0FD05112F39FD99184AEB538B240DB14
FD88FFAE2C7509B3DEE24B459953DE4AEBAB2402C71AE8991338E5C9C8373E29
E7097570D7EB69BE4329B97EFFB52EF7234BBAAAA9D47400D400D1F79C0B601C
41C312E08C2C8205C135AF45D16369662CFBFF59BA4E9C625F6F865DAAC65481
643C768CC0BA2C59A79F9010124FFCE47B3F28C8E4E8F84E09BC2F63ECF94025
1574CD7A40A1B8141CFC49FF3409E0CFB48BD8305A979FB9773F1D44EEE7C849
8CF1AED76BB15854AE04B892E64C26EA303ACE9877DAE15031624A248C265190
58625F9BE81A41EC8BC46E16B786DEEB65F796BCDD859377D6337A4C5CA16CB4
272A729E1FB63B8A0C956119BC09DB32695E34EB7238692EB7E1C7BBCDBF3BF5
A4FB4CDEC20B6248FBB0DB8984D52025B188E06E96D3F725A7708D2DE7113A22
DC9646405523FB6B386EC6CC7B5EF6F17F1AA1FB0AD3E37AABFC7D4591E444F6
2CC73A5E549E6C45C1DCB4086F1986B567535AC80C18F244ABE9F2A95589ECAB
948FC2E7933316B55FAFAB1D57800452E9ABA6F0E9C8F90A93AAA8A2C57AEDCC
22B9B93C5701DCDEBE9D0D54DD1342578157ECB6FEC1043AA2618DFD5284EFB5
9598C5D6236DE63FFE99DE4EA4631E02E9AC1FF3AA05AE2831F9B1B8EEF3DF08
B8792776E3F096936D0283A957155DBCEBEBBBAAEA60A56354753C607593CBE1
6B352449FF43718AAACAEE551B608C9BF18DD2428155925BC2C6BF57D817F43C
716D325A4F1E267E7B0DDDFE8F3F350FC8ED47A84B487004DD8A0371AFA18AE9
7108C26C824E4B23467EA003E8F079DD769ED39718DDE1024D89E14C3C8DE730
16C82FB530F59423E14F44F3685C20226198EFD9989D152E9A2D96030C82F88A
4E432013030605F7BED34BF37754480AF2CB3D71CBB866A80D47938837DF75D7
97519B5ACBC44942701530C9E5A66071A39080F94B6552F418EAD563D53FA404
1B0FDE3F075E56FED4D2A848F95A8E6DFD5839E8D60FE1D59B63046CE6504479
02EEF916378C33A660729F9E2E1A1F760498C875ED78171144B5BF0DFB5F106C
29C7C87BD079805D517FED084B76C9BB8BEF6EFE726C575B742C51A69960F313
C93FB5555F3E688872D04C61F45276FF350A6FCD1A9EDCD171789D1286CC31D0
752A8E212087231C485DA93D06C5DAD844CCEEB825D293B2C2905AE3DDA52D81
98DD33C4DB7ACA9A6F6CBF2F2922D60CC05C2478175BF6B5FD497380A4330073
B3713F0BA12FDFFB63E0F9026E2ED880EC1880DA342C140DD35A2907997EB6B9
94FB6766CA99773D34AD44CE5BB1A709A960A999A114BEB2687E56DB4CC373EA
B2CC45D02640FF1C193DA29EB6D494C86F65F8E1781950EE6594A975460E6564
6218E7ABE52510B75D094BE2A2CDEF7BABAC6A70047D324D6769141A9F357FA8
C18B4AE20B014AA512730BEA3941CE7E4B4E94FF8B5E78F3287055A81702D6D9
74039F4BB0C41B375FED4EAF6FB839BDA1378381C0CBADDC131B9979A11555B6
D35BEFC7D5BC0C07D9D7C8785A215E9094C92A8AA70F19830266A157152F78D9
2EF1A94FD6B204DCB8978BEBAB01954B303D271EDD18493A1CD822E80F8CAC4C
831916FCD44BDDD887CDFD9623CC9A12E23672AA2D0D34CA86CF09523836D3B6
23A4800C2BA31A51A3D95833BE67D82851FDF59B2968AF38047580725A7F6B23
0634BFD4C776A866F71F5A7C3B8517B2374EFA047A64EFA07421B4347608FBD9
99B06F59CB1EE5AE288BC5A33E201A8427BFBE60945D331DA269890D159A6E55
E00596AD9C98596B23583864EBEDF67316030422232D219EAC6EC0B674A90102
E455A10CCA1AD585871ACD9F9EE1E7403C4C26B958C92AEF5EA4B754AE62BDD9
0D489F7DA941E696658A4A734000C94FD543B7B37F89BF5A01E5FB673B68BF32
04F8C65B0B3BDB2D8319522E58A39EE70E65D42049F2419EBB5E86D15D27D0EE
23FD8DCCBF17708EDC11669B63F82F0FBF22792304543295FE4F30A49B964DC4
6A295E3FF65D40890E56185577D62F758AF0E3144FE845DCBD205C60979D5A02
C95CB9F4B52AECC4E9EEF90630ED98A98D3949A7F8EA7DC22A59C7F699302BC3
C90FECBCB5E6A3EC28B33FC3BC5E094D7370FE6C1A80CD353754655BA4CA13F1
387912D67F630693B53EB5028B22520F26799DA20A31506B6E4A6F89DE20BA8D
D17B6395D13191209B85CCE5DE41E9860194A04E8D2D870B44234992B381313C
FF896DECB24EB4AA6D4824278A4C960979CA2C640A9BFECEE52425FFC940C8C6
4B523C349FE1C99DF2B6F9E342E7AD95CBFE899879C163858C41118344817EB3
5967689FA828B5C607E7F18AD89685A80EB049FBB2A111920602B3EE2D502CED
ADC797CC5EC094B726756591D80E2EEEA5AD855E6C32E6928C619C0FF09BF6FC
D68C13F278F30B3C8449595451C3AD9807198EDE52C73B45583CFD653AB20406
67641A198A6D5C182F51F2920DA69C3E21EC3DF22215D64315980B7C0105AF23
5EE7754DB7939B0F78E56681C375AB90B73981406F4E51D08670D2480BD3840A
5A7CA5753AA161D2E5DA97756FCAAFD2D1AA2928F2B7A601511610763CBC5DCF
6F32D85EF4AD3A98E7473CA702653B072E40E83AD3FA1D7BF21CC30A5C91024D
FD7177191A15E52BEC4763940D93341545C60A4FF9F5A9DAFF06D0F7683F6448
3AD90FFF27240D403B303B939441F2DEA9F41AEDF2C17B83DE3998B2EB9C9B56
49313AED0BC1B5BA4E355CBE1F75076061A7C7B0402264715AD86CBFEAE23958
9810FBD531119AC49F2252610ED5771FE1ADF1FD407FF3DE9324E740BC4ADD45
6AA659D13ABCD7A9FB6F34563C0D1F42B671EDA05DD26B0A328B63461E78F619
8B1265FE0F76ED2072F2ABF90149610946459FE8E0864FFA601C324274C62952
C0DB8207A796956D922DE804151040B9F2202D41DC2E304A36176425590665A8
6515BE6DC7E2AE219B6EF91A378E5913D7847739D61806F961D161A1C51B1B20
832CEA6FA0ECBC8A4A129F6AA1D31751411C299B2215BF7AD14EDF64DBD4E240
7D51AB6C638906D3F8A9B8EB3833CDBEE3A38E7D5ECA98DFF047205653ED3BE2
E00470734D6F29B8C57A3325ED0FE250E533F08FE8D2C3D1620F04078E70A3E9
1D99323DE7B3BF4FD2E01A1161BEF91383A4BD4062A3E84E602BF6673F20F8A8
5B501F581F3222274ABE233EC3703B3941D43E6A4245169A17D6922AB809AD3C
574252320C9324842A3BB998DBBF874E28AEBFBF315A0C434A4708FC6E2CD43D
AD3762162ADC37C0B1F0C7514B0086974C1C58B553F8446AEFA5D63E85E9D8DF
FEEFFF2CCAC1B0D16C0C79C30C28E793C222ECAC2DC9D2B3D3F3703AF55E4A9D
AD6A6E94F39461668F365D48864130F12E8F2C87E4EA3DEB4E22027996EEF179
28F1DB8DD226829915D697B141F530A4A814F648283BDBA50684B300B167E2B9
5F4FB2EF2786D6615EC15B2B26C28F6855AC7CEB252364FFA4D8988045B11F04
F253EB20CE473AB3E97268690A6C23A63EB67B997C4DE1CE199ED5D36A7F5924
3ADF106907426341AE1DDF26EFC9F446AABF54937F235956EE6A484FE883381E
F040FFC7812A4336D23B6DC641F2E777D8C443CD34F0544B35C6A5273C297C0A
83379A57EB84F282B4F5125231E39F931C17ACEDE5ADB8E6686689595E7A6C8B
ECDC1505786DE881A22C96259FE9D6D6B4F1BB842CE3281EB173674BF0306661
82D75EB129C3C3601638025027AB00169278F356ECB75587C211B327840FEC69
2000B85220F78DD1D3454761D623DC7B79BF442D21880457F7E80E27190E366F
E9AE699FCF9ACCB4A62C1B3A9D2E0F2E626716DA04B5C77475EA2D457AFA082A
1DB424CF5262BDCE80EF295BE65B258A038AE8239E251B34E024DEA6D758CB3F
71DD803234C76DA6A8FDC20B43E2E80ED62A4897768836CA2BEFB3CA20C8A384
178F94B3F673FDE826E707E848C5E7AED87B2AD79D71F529B6072B742D94C934
409F0BC926421BBB7B5A0E6C36D41C7ED57036709F1282BC6EB1C973167CE9DC
BE530DE36B34201A4270451E5CC591BCAD46685B62EDBE727406537AF5C31E7A
627DFCAAC9114D834B813C56934E32728F8AE8AD98A4EB8E620249CD5FF68F68
D8DCD314E9B0F40097872ADB5D47847D3B874413519D82F39DBA23E0C98CB5A1
204AE95676B9BF621376FBC62CCA7E1B55EF14F74C0C61CB1D831C1088600EB0
7897457D5DF7787DDC2CB636051B96AF910F2A9880730042E7E9F6BF014C6B05
47A6FF9A7E73019B90A4999704A097936C9C54C86357181E44BEBF93D1BCECA7
C04089BC2BFF496294FFDC96D23CBEC8019FC1BA814F2C0471AAB789FBE965AF
8D93BB8772DA932FA85162E164C792551B3212906647C64265564E10A8AA77E5
C3434B1F1932DF864D2A59FEB83FA848EECB6408F07B423C59E6991CFFF48D89
50DA55C197E2CADE700802BE6CB518B538036EC6FAB7BF69227DB55FFA9D9DE8
17218CD5CB70AE2A1FCDF2A061BEAA4020E155D1FF5EA061093FE2DAE16EDE71
155BC39AE0BCB7E8F7CF3ED34C727F24DD0AD44F30E0D7C6187BB648AEE86A22
8D96ECD22EE812B90049E552624BB9378A3FF391BABD2B020A54A3AF7A47B470
10BBB3437EE8BCDA8F13EFD6AAD59AFFF51764BE062B21CAB6FFA84E2254784C
424370CA0682BD2647233A587725A4A49F4F1453F93E4AB925E09260D47E81E4
997934E98F0EDAF053F5ADCAD591535F053F39709C9D79C1ACCEA385FCAF6A1E
28821A39F7D6CE41CBADA662E417C106AE7B764B2009FF32EFD29F738102A0DF
5C48E6D15140178142F707A3D53A0F63B67ECCC9F43D7A176B472041B5C0BF15
F4F42A097F774F1876F88E9EA94E8B413F9B7D63481F00C0CC327549677DC062
1740036FCDCA9D2D4CB41F582EAFAEB7170063870050E7FB74A9BFD7A4282956
67BBD3E4F328BA8E00505BE5CCBD3724E9D59C37AD5265A7A910653796F93CB6
6B2C3F1F67C4C93F44A3C930CB3695397D54E689335365462C99AC89DC8E5A38
D448EC944576CB1A691649ED6FAAEC72F85249C6792832C4F190DA45548ED968
5A3E80C47EEEB5C7513B9E150FBF411687B1EA85943BDB0DFCFD0E742B3F982A
C055FD464ABE2E543597B7ADD481FBD2E8F3588EBA695C9C42DC4C4C2EEC6F82
AED39092F836555C737B1BB9A124950CD27C199BB0FD0FD98F27EADCC411EB67
4C6B6CE165DD9A371F6660739618D013688945F765EEA2C9FBFAF1905BC3FCE9
70CD8CD70B49C33BF152B8B0180B746F371AFB576B97834D5CC8EE22BE77DDF5
66FE73F038722906191692652E4C419C37AECDECB63B11813FC210CE11EA0095
8C3C028B28588A1F6B6F001331565930F5102BCD5F57A0EFE5C05BD9672C0CD6
AB9310F948DE7C0EB7076F930032382FF784BF9B7AC36DD58E8AAED367AC7472
6F975783871299C2583CC3847245FF55EAC2633A267F87DC5826DF98E50AF840
05FE8BA1B86BF236B1D8EF076561EEC70EDB174E0B893975AD800BC4F11C61F6
3BB04E2969808EADE17118A9DAC34EC3360AC6A15D338E5A12B4912A6BDEDB33
9CA055B0440F66775660B0E6053239376B3D9203075FB3A69CB62FCBB7C3B3AE
335983691714320FE09F93DD2E941416C7AE0693FBCBE1FF1DDB961C5ABD053A
0EA032064062A0AC7FD01747D122E0F969A53ACEF662B1B0049C98A51AB10D88
D7E44A90C5C2B0ABA2C1F972BE9F3FF058194A3550DF3F1AE45175104C8AF0DF
4ED5D7BAE5E1CB9B0E8AB4EE966866AE7A5DA601B8CB1FB6D43DE626AA16E5B2
15629B3BDA9BCD50096A213E269E59F18DC325B695901AAA738AC57AE638D68B
7EC56395A6588F465F4DC63EF720833882F26F6E95367D361F25872977A0C3CB
0EB6BB10699E8A642A87334053A168D9653523456427233C88350927FDEA63BD
CAAB36D8B4D9301E701CB00B9B215E1F695131F69CC602A94976A71B83832644
6AC8AE80F95D6877F9BE717D38C3930679DD67F44253359CC09FC67AB60068B2
1BEE26203CD0AC6D50B9FEC93CB9D2B691F2DDC009CAB55CB7800D126FD02C0F
7889B02A2ABD3AB91C2DA6536D3ECCFD4BC7B87670286E57AC562E51D15963EE
23029A0AA0118563DC0026A38B81DA143847079A58E02BE0C672B64D729BC5D0
C7CE02E55147A29686404C735DACF51CB9B1C4ED01A0234D484AA2E0627009B8
C993003274241970553D6A5DEDAFDDB1673336B77EDFCD02B95F04DA3D899754
7A1E82DC19CD5281E0DB0A6810E06ECA4F95BAA1A5479A66AAD5EF231CBCF16C
9C3AB29A6F6974501CC4D688B9FFF37C56603DF544634ECFFC70D517448145F5
D2A7B38EBB1740B470C526209B9F87B7572027B7100A38D705DA5518F72BC2C2
0868A6A30AB55EAFA793AD17645AE3D762E751EDAAC748728AD4953B1B373847
56CA3EAEB5C84C41FA6978CB96FF9317E914D14DDEF4F0E092F2EA72BEE2CD8B
FB269BF9C096E455CAB997BD8F0840272AF2EE817A223C16B59964A3273ADB4A
40DE9553FDA1C3DBE8E31FC4E52565230CCE1DDB409D5AB8B793D8F79C35D68B
0C83E52D0C9070FB26B5EA9B3DA4BBA5D05F90DE7EDA966AC8D109D7591121AC
B4E012F37D335820A202C36F286F7D0A40C466D661BA0631C917F3C78CAE1737
F60EE10BDEF77FEA300B7C94D3839B42DCE227E9894EA655827A2E1E74DC929C
1A02FE1ADFEDABC1B5FE1B0BB4930012ACA4E7B5C6E8D5516BA34FE3DBB70846
DDDEB1CE441AE73236F9F196E77BFFA24903AEDD02E96D21FDB8D45F7A2FA422
270EC270980B18F96E39E764D9A4313C05843400598AF185ECC76466FF7A4D6F
4C84616A229C04A7141F93659785B8D2F166DAB89BC66C99D2D045F15229920C
E261EAEDE6668ACD5D4CFFAA3CB62D6456106722CE05BA8AAFF905E5E193E779
8CBBBCC69892EB35C001BD764D92050A84863EFBE194EDE918CB9B2B0B34568A
6727FAABA19D99A0BB0845485DDA9B8AFAE613190A3A658893F40ECB39707094
034487CE6FD6F4695EC3BC421DD58EAD8FDC54C5C31D5C90FE3D71696E9335F5
3F5AE9167DA4694B4AD9AC6ABA7C346FB5616AF860BF05918644125D1E232376
8B792C565170309F59F7E5BC445AA2D62713FE024B893A44F400FE73BE17C89B
CADAE461A6B1670F7CF51CC4CA919BEC999F36EA168594F06558ED4784D9A378
C2C7399156235AF581A54E4F07F34F1382BBE52774FB585CC113ABAF4AFAC84B
4A9C8CCF86490755EB21CBC930E2FA697E01653B0290C8AA3CE8D2FFDD6F2EBB
E2CE0471CB29E1A5173C11223AA96FC975A9918A275605C3A7D05CAEEDDEC0DA
7AE3CBD6D1D608EA1E639E06988D839D95569D2D11A8BC18142DC6996F11AEBF
25A59FE08F0D75707928D5320265577064D2EE4607E18C3BEAAB40CD094BF35F
D8797E478FB5052E07DA87B5ABD12762A8B556AC352012ABF02E1BC91A69ED24
2930C86D3F349188607DBEA702C4B5FA09E412291E214521E5408E28D0314BDD
3D0C36F4EA064F3CE30632CBEF8EA949D457DFCC6F244C13E40C5D4FF8E55802
DDFA22D76F9C390E89359F366805BD08B194DA59DBD204ED6A017BAD23BF867E
6D7A669D6EF05257654A29F81DE96A7675A1AAD9A52698A52E5A85359AF1E623
E175336C67E69D6147E2E994BD4B55BFA8D0838C5401C52A2C7614DAA6A6F600
3117B4BBE490D1DD9309605B7294CF0E8622AD6C555CCC79A9FB73343991A51C
43F599D66D0663827B480901FFEDCE98930A97E8A700F30BE19BE8EF6A017642
9A12AD5A492EFC11CB4CBECA0EB1016524953852DFD4F00F999A3680924F6EFF
09140E00AC87D1FA35DEC922A9436FE3773A530ED5929A34408B561452D48484
FAC90BFB4E3885EB95E4FBAF63EEE98CE8E354E172119BE4CD2E65D28993BB3D
E756E35A470DB1FD91B57C7FD16AEB83095770CB3E2F27A32580BE97BCC2AC0E
E9C3A6D83CE3E289112950ADFB6FBA862CBA784247B231A3D1DEF084F8ADC733
CECB35E90BC1CE3E1186D0D56AB5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600 (interro1_23_11_2012.dvi)
@start /Fa 145[31 8[25 31 100[{ T1Encoding ReEncodeFont }3
41.511 /SFRM0500 rf /Fb 22[27 31[41 79[32 2[32 34 24
4[30 34 50 18 2[18 1[30 1[27 1[27 34 30 10[45 9[38 22[30
2[30 5[18 44[{ T1Encoding ReEncodeFont }21 49.8132 /SFRM0600
rf /Fc 187[63 55 58 58 65[{}4 74.7198 /CMMI9 rf /Fd 222[91
32[71{}2 90.9091 /CMSY10 rf /Fe 149[37 31 25[69 19[25
59[{}4 90.9091 /CMMI10 rf /Ff 214[35 35 40[{}2 90.9091
/CMR10 rf /Fg 135[55 2[58 1[41 43 2[52 5[29 3[47 1[46
19[78 81 98 7[68 10[29 7[52 52 2[29 4[40 40 40[{
 T1Encoding ReEncodeFont }18 90.9091 /SFBX1095 rf /Fh
79[30 176[{ TS1Encoding ReEncodeFont }1 90.9091 /SFRM1095
rf /Fi 22[40 40 113[48 50 35 36 35 1[50 45 50 75 25 2[25
50 2[40 50 40 50 45 25[71 2[69 13[45 2[45 45 45 45 3[25
4[25 39[{ T1Encoding ReEncodeFont }28 90.9091 /SFRM1095
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -112 -451
a
SDict begin H.S end
 -112 -451 a -112 -451 a
SDict begin H.R end
 -112 -451 a -112 -451 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -112
-451 a 0 TeXcolorgray -104 -336 a Fi(G\351om\351trie)32
b(rep)s(\351r\351e,)f(in)m(terro)g(n)p Fh(\260)p Fi(1)1694
b(mercredi)31 b(23)g(no)m(v)m(em)m(bre)i(2016)p -104
-298 3969 4 v Black -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -104 -132 a 0 TeXcolorgray -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a
-104 -132 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -104 -132 a -104 -132 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -104 -132 a -104
-132 a
SDict begin H.S end
 -104 -132 a -104 -132 a
SDict begin 13.6 H.A end
 -104 -132 a -104 -132
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -104 -132 a 91 x Fg(NOM)i(:)282 -41 y
SDict begin H.S end
 282 -41 a 282
-41 a
SDict begin 13.6 H.A end
 282 -41 a 282 -41 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 282 -41 a 0 TeXcolorgray -104
147 a Fg(Exercice)g(1)g(\(cours\).)p 0 TeXcolorgray 45
w Fi(Dans)c(le)f(plan)h(m)m(uni)g(d'un)g(rep)s(\350re)g(othonorm\351)h
Ff(\()p Fe(O)s(;)2627 87 y Fd(\000)-70 b(!)2657 147 y
Fe(i)30 b(;)2758 87 y Fd(\000)-70 b(!)2783 147 y Fe(j)30
b Ff(\))p Fi(,)-104 244 y
SDict begin H.S end
 -104 244 a -104 244 a
SDict begin 13.6 H.A end
 -104
244 a -104 244 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.2) cvn /DEST pdfmark end
 -104 244 a 0 TeXcolorgray 1609 334 a
Fg(Exercice)35 b(2.)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -104 1996 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.2 SLW 0.6  setgray 0.0 0.0 483.69664 199.1692 0.0 0.0 28.45274 abs
28.45274 abs 2 0 {} 0 /Helvetica findfont 0 scalefont setfont Grid
grestore   gsave  1. .setopacityalpha  0.1 SLW 0.6  setgray 0.0 0.0
483.69664 199.1692 0.0 0.0 28.45274 abs 28.45274 abs 1 0 { 0  setgray
} 0.0 /Helvetica findfont 0.0 scalefont setfont Grid grestore  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.5 SLW 0.1 0.05 0.5  setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def /ArrowInside { } def  [ 199.1692 56.90549
213.39557 113.81097 327.20654 113.81097 312.98018 56.90549 199.1692
56.90549    /Lineto /lineto load def 1  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.5 SLW 0.1 0.05 0.5  setrgbcolor  1. .setopacityalpha 
 1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -104 1996 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 -104
1996 a -104 1996 a
tx@Dict begin { 184.94283 49.7923 } PutCoor PutBegin  end
 -104 1996 a 0.1 0.05 0.5 TeXcolorrgb
-62 2022 a Fc(A)p 0 TeXcolorgray -104 1996 a
tx@Dict begin  PutEnd  end
 -104 1996
a -104 1996 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 -104 1996 a -104 1996 a
tx@Dict begin { 312.98018 49.7923 } PutCoor PutBegin  end
 -104 1996 a 0.1 0.05 0.5
TeXcolorrgb -62 2022 a Fc(B)p 0 TeXcolorgray -104 1996
a
tx@Dict begin  PutEnd  end
 -104 1996 a -104 1996 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 -104 1996 a -104 1996 a
tx@Dict begin { 327.20654 120.92415 } PutCoor PutBegin  end
 -104
1996 a 0.1 0.05 0.5 TeXcolorrgb -62 2022 a Fc(C)p 0 TeXcolorgray
-104 1996 a
tx@Dict begin  PutEnd  end
 -104 1996 a -104 1996 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 -104 1996 a -104
1996 a
tx@Dict begin { 199.1692 120.92415 } PutCoor PutBegin  end
 -104 1996 a 0.1 0.05 0.5 TeXcolorrgb -62 2022
a Fc(D)p 0 TeXcolorgray -104 1996 a
tx@Dict begin  PutEnd  end
 -104 1996 a 0 TeXcolorgray
3891 x Fb(vg)2924 b(Lyc\351e)21 b(\311mile)f(Loub)r(et,)f(V)-5
b(alence,)20 b(2)3725 5871 y Fa(nde)3834 5887 y Fb(5)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
