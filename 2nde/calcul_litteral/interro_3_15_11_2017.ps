%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: interro_3_15_11_2017.dvi
%%CreationDate: Fri Nov 10 10:55:24 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFRM1095 SFBX1095 CMMI10 CMR10 CMR8 CMSY10 MSBM10
%%+ SFRM0600 SFRM0500
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o interro_3_15_11_2017.ps
%+ interro_3_15_11_2017.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.10:1055
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: cm-super-ts1.enc 0 0
% This file is generated from `TS1uni.map' and `glyphlist.txt', `gl-other.txt'
/TS1Encoding [
% 0x00
/Grave
/Acute
/Circumflex % ?
/Tilde % ?
/Dieresis
/Hungarumlaut
/Ring % ?
/Caron
/Breve % ?
/Macron
/Dotaccent % ?
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
% 0x10
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash % ?
/threequartersemdash
/afii61664.cap % ?
/arrowleft
/arrowright
/tieaccentlowercase % ?
/tieaccentcapital % ?
/tieaccentlowercase.new % ?
/tieaccentcapital.new % ?
/.notdef
/afii61664.asc % ?
% 0x20
/uni2422
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl % ?
/period
/fraction
% 0x30
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
% 0x40
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/uni2127
/.notdef
/circle
% 0x50
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Omega
/.notdef
/.notdef
/.notdef
/uni301A
/.notdef
/uni301B
/arrowup
/arrowdown
% 0x60
/grave.ts1
/.notdef
/born % ?
/divorced % ?
/died % ?
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf % ?
/married % ?
/musicalnote
/.notdef
% 0x70
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow % ?
/hyphendbl.alt % ?
% 0x80
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/uni2016
/perthousand
/bullet
/uni2103
/dollaroldstyle
/centoldstyle
/florin
/colonmonetary
/uni20A9
/uni20A6
% 0x90
/guarani % ?
/peso % ?
/lira
/recipe % ?
/uni203D
/gnaborretni % ?
/dong
/trademark
/uni2031
/paragraph.alt % ?
/uni0E3F
/afii61352
/discount % ?
/estimated
/openbullet
/uni2120
% 0xA0
/uni2045
/uni2046
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft % ?
/logicalnot
/uni2117
/registered
/macron.ts1
% 0xB0
/degree
/plusminus
/twosuperior
/threesuperior
/acute.ts1
/mu
/paragraph
/periodcentered
/uni203B
/onesuperior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro % or /Euro.alt
% 0xC0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xD0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xE0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xF0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: SFRM0500
%!FontType1-1.0: SFRM0500 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0500, tcrm0500, larm0500, lbrm0500, lcrm0500, rxrm0500.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0500 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-211 -338 1855 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E586FAA5A6FAE6CB4E80BF6467C89E1A97B49A0DDC14A3C22BD6C9A3110530
C714F12B664F8DAF49E7EE5F26A1FB39FB391585B92BC143D8AF7A1DC5828C76
FB778196507F6ED7110C374F71354507E7B06D427EEF72F711D631F86C25A6E9
925C4A2DB93AE4A00FA4C9F8545D5FA4D703130E507323519A405812AA421062
F49FB854B4609D87682D0A4FD3B9BA33B2D25091F366D87C885FF732408D32E7
A8BA8B0AA51E0F13E4A5D7A70070334AE4261F477CA6C958111FAD37A7CCD04C
D8B0CF660CC25C087D9E1DBA8EE4869EA22FC33ED6FBC968D1118422FD213F9E
4DE09D8C881B27E43B46DCCE9E2B7ACCF0FDEC76071C638EFF82CE7140F47015
4989DF72FF5A863C785657413A01FE7D0DFF6DC80111DC022CF3C7527269AE6A
F593356351153315F1988814C6020B73672E573048FAE6EB62D784B055001E59
A19509258D7B194D57F0E5C4C0C66AA7D5D54CBC4EF9E83155978E48D01D7913
0B2216D451B4DD0F51D39287B08047EF0E9553C125E00405138078F533037280
E0EC61CC1EE3A221A96B274A72BDF0145BBD8B3D09DF401AD597FA7054E3D205
CB3483DA30F2E7621DF3F48D108A7B3BF2A4430768F7659478256AACA9317F9B
6FADB8E3E012D2C4CCD0F2BB85BA167779CFFEF70063544EEB85DCCE975CE375
60B7410ABF03C828D929A764F4C9A6211F58E74D0934426C78263A746DA754B0
D7D84FB32709CC53990D034E24DBE5F3D0989F144E288DC93DA5F1CB55110940
BBEB6C45FF676AECDF2D48D37FD91D19CE363D7B8B6DF54EAF37C38CDE8B686C
B7AE2864731E6C80876C4CE9D4702C219BD57C52489D7CF2D01895E1F8306324
952F73C5F19711C12E6B20A03922A685B15D0EE737DDD4C04049719B3AB0E8F5
2F3E2E0E713AA0B61CD8FE307275908B4DEEA3879399C6A1C93A5855A4478556
B5E9E1182618196DEA4A5025018D836D313D1590475A0AABA71A968EF811F0A1
E700F33E959679513B6385A96D40019DC86A602204F6D2F1E97343C7EBEF775C
E3821FE265D57F0EFB221735B2463A1A3A4769EB12679F2FB2129CC6F0497358
7C4A53DA1B791E68FE5CA8E1377EB7EDD9349A3E5A4DEEDA0E333C4DF52CDAAF
6C71665E77CA065B8E85C638298AE371C21384E28677CE52CE0F145AEE7D1EDF
5D8ADD48EE58D846FA5416272C32A04C1C3551D95C989D5063DE212A5154B2EF
45C39BC86AF9E234817D0FC5354DBDEFB17532F97280DFA6673DB00533415541
234238A94333B92421F236AA205936A7E9DF9C4F11C555CBD73D6B09B029E483
E9B39639AB5D85C6FD22FD07E8D4E41E58F8149E5A7890BF5C7C4E4E47FCD620
0534A47ABBB330BFBE165415E5356D4C55AAFC10238363C29BE958831122160D
7DBE17C5438783B8382E4415E051C097CBA0EC56491EB06E455320BDA1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM0600
%!FontType1-1.0: SFRM0600 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0600, tcrm0600, larm0600, lbrm0600, lcrm0600, rxrm0600.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0600 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-210 -320 1719 944}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF7C144CBECBB0B8AC425A
08F38901803917D730AA3A77964447A6FDD9D1D5D6CADAB899C866A153F41D19
22B1F8E853431D34A87708FD95EBAAE0636D632C6CE8C8A24746216DEA10FC2D
C907A32EA036B850F319450C5EEAE2F44F6816A6D06D366C75DD9E360D9B2A18
87A6A24EA1491639E588EE3DAF1357CEE96FDC53B9C5C4428602EC516A115B16
B137347E3ED03B4937869940192CDEF71C0F2AE65E9C3738407DB9F6064DB42D
E38A19BCC21F30DC69ACFC17FB5C81CD536C0E8FA6F05081FB5CD8F85031FA0D
119767F746B580E784CD0928454272AF2B8FB4F5D53F2F011685524517BB6B38
E8B42394EE37942132A010B6CE3CFE2E6CA24D320C12D62B1C9D401A74AFE7E1
D4B2B0968BCD3E63619574B096BD23B59496071FC1536DFE6937146ACDD7CE00
25FCE9918F9F3439D5F9BF4494CC501FBB4894E8C454BF46C615A2407776C621
762E39A14708EFB767E2EBB33C8ADD59B3A589F3220142F98A253A164ABC1AC4
C32C48557C507A9E3021229008ABA8BA85B43B193A537EFE14EE90DE56EDA1A1
CF40CE8C0C510EA30599B1381005621984F2BD4A8B15EC634B26CEFA8B03CF43
612FC97D3C94DBBFAD6F325B3E3C314F0B0AF5DD1BEF045D7E5A054D99EF3E21
91C1D5C91A760D90DE6D62BF425C79A481AB376FD2CA46F949C16FEA1B452840
4AA8B56B201E4E7DDEA75D821FE434B5676522496D357B621059C6E9007CB5D2
190161111309D2476139AFE57269C6361CB6F09E0F463AEBE2BA17C0DF2B676B
EF8AD942A3BD1FB35B44B11FCEFCE048E0A413CA2BBAEB9BC90A5D78E6B1EC67
E8D53B310731AACC60AD7BF22137C721B0B6AD0233FD1DD83AD47EAA9EC9E3E4
45BE2DB9EF5D34E7F747AEF16932B3F3C6D6D3C8C6A90BC4FA26BF967AD9B019
417A876EDE63682A24C06593AB2C0F1D1CE0A1C1B8976C7550F275C4190A3AF1
EC6DF13854712FDB81061A9F5C00FCD0A977AB4B7EDFE86FE9668BD550DBF3F7
DC47B85620B641E77FE5F73E9D14B1D8CB415F20F739EF1B49B6D65C7366A3EF
E4E0275CE8F0D3BF4A2151CD13C45EF003C1492E94840A2977DE53BE29CD7775
3162646B1D7AA69FE0830C05ACADE1E4039D242E7434E22EC93615FA8ECE2D4C
27342EF751F4FC23E314B5E22BF8000FD3DAF9A8B70334512ED37D33598B51D8
1420F45BB03781F64840D49C9FB69442DC88166575049E84F39641519C59CC09
CC78560917B2A7265C39784EC4B319959677CB943985B96CA9D8FA3A7F776916
70F5D42E29A509EFD1D8A9DE08F1FBEB0759F70A51E2136B6E937EAE13534405
28AA547B5EAF4EBEA0BC14C055FF8FA189A4BAACB0B978A58EDB6B8787C84C6A
212F067A28BF6C8D599A656CEB8AF1F0D2B736572A20B8CC7B4C8D58109179B1
5292027209A25CB68EBEE9E67D7AC8C5A90D47F7DA125579AC4CFF4CA716E425
C9109C1E32527227875588480241B347367B30AFDFD12CF23A050D6C1328C340
A6556729C317E60CD87639E1B4F3089932369CB542925FE084E208AE46D117F1
A0394D0BAD6A6D318033C85E12B77DB6B54C920160633B59C2D9285F7363165C
83F1DE2D6CB5FD306F441F1C09E1C5281C859EB777FDA513DFAC697F562AA3AA
092FAA20A211D4684B72AD8BB8A5D1B3144B7822C5431691AB86A1D989C6F6CA
DD3CF01D2D43AD2E836C43E520792075672344DCEE4F9F1687F5E18A1F7F2808
A4CD492A90B1AAE543C2D357586AD16D5DA61C12E13338F52F290C7D1A78D50E
363B81CF19262AF6A41B35C3CE298F8F6B866E05081E15818E964BA26343A1BB
05062BA3BBA2174F6F457B8CEE274AE7842BD8077F90731D9C031B08EF9229C0
4D4C6E222909211E8149E3D6E0956AA272BA4C49335A08E4F946E74BEAC062F8
FE26A02632ECDFD0BF97D135B0FD0EB25D48CE4F478E134BB12CC9AE3A5456E3
64D2117D60BA66CB7B4A5AE95FA40A28D7DEB27B069A47979A1CB7AED352BEF5
8C560E44F27B9FCC33D3F2076382F2E96F2F1C94F11476BD78B3F62DCE3FA965
B44AD9300CB1DBC3E3A03639C338E6A47CBA39AE6DA19468F81907C0F2E2A593
DB7AA7618487B1D3D924DD0CED0B372AF195EED1ADAA95369820F88AB02E7F52
2ACBA51836956E4FC7FA005F9847900918832730A558067D2FC40EB84445E85E
8D8315D0A0E3E26DB60F6F40D6B935E1CC0F1D31D3D04EB580E1EA68C289E7F1
94D9CA3F7B1DB6FF17B5BA27C4E2B5A23995C881B05A205779209177897802F8
08498A2A584787139457A97D7E6068500894304EEDA172A99BDFAD7204FC8E23
23C873222A626FBA2FB12BEE4E016B527EF236E5AF135276C81FCD2A8FA1639D
0D55F3644B802016095E6C99BA46C719578BC48E9065AA87E8BDD5575DA8BB21
01894B0C047DB7EF79B8ED91091CB575ECBB38CBDCF48A1E092152EF822F5380
F0E5CFF5154FD2BB8D1670F027599C8AA6FE85CD867387C82549B44DC9F1318E
794ED89C47409E478B53DBEFB94C0024CE2B31A24FF1964DD143473893F650F8
1E28D0CF231296F67B8634C080131D4DA2FD54B4CF7EB11374C471EFCF1206AA
29EAC385C9DEE25CBB81AFAF6027C908EEE802A295E4248C4A1BFB7A8CB00F44
6D25ECD21B236424453711EC6696146B9904A8B18B8920635C99049CF76B116F
0162BF431ACACED6CCF9124B91389A2FA3AC852DF8F0748C75C19B65D2F728DC
E0876AC20486F7D845BE697229F5F1DC7CFAA7895FE9B3144EC77E3DF61AB8F2
2FD1CFB4E40FF4068BE1111CBCE2EA64C3B05B1B3AC68A0B8A83D298C4D9F570
45BCEC024AFFEC50470EEA2501AA72D34045969BC0B18565C063BE0F3E9F9FB5
BB83FBD4E7B60DC1EC13D3A6E60A62E18CBEC95D4F9B797B26664F9A9BFC33F4
366C494E561534BD33798A933C315BCBD971C5D5627A380A78F81319D84C6274
B75247E7AE6939D00ECF677824D4823CFA87DE5DDA61E2B4C573977F19D9D9A0
B8D58006A2A7E81C50F1CF9F68DBAECE652A8E228796299F7BBC7ECEF86ED1E3
99242AFADB8A19C661F538857EEC8AA2D7010D493631FE0BBB09C8ACC305F5D4
DD4290C95FC176BC039EED99160E3E7290D32036155553AAB657D60E2C36D1BC
7ECBAAADFD0B21040E80F87A53D8F90EA0F63D004DB101D5CFF6CCDB24D778E5
7338E8A6DE3B431A32058344CD094018F9B4B8790F6F59291A879E9B8EA83B9D
69D43746B142E9AAD81311765583564A44AE56F46397C5E1009223C277E6B0E3
E71CBD4239EEA0D2DDECD7BB7D063C152982D388DB7A0B4ABACC60B3D708E521
1033D3425821DAAAB8FE4ABA27990D6B91B3822A520D6F9C1CB12188ABCC309F
EDD4FA497D23E9C78A275F71858BA4CBD359B870D40067F132C3D31CF06DE8CD
DFEAFB8A0CBC0119E6711BA65181B4EA0E9538A6DAF6921C5F3881436FF74C0D
1664229029635C383EBCE1CB7C2B074B5AA05C938E87FBD241FD064DBF03040D
46705A1F6ED7377C7126ACDCFC02B7C16E0A77DD6C9A899394FF19037D8A673A
A442E7311093FF3D0A3AC14F3A7E73E9B60B21C842F26EFC7F16D94F29668DD9
7D27867B2D2FCA8876DBCC1722A7C5127FD3D47DCBC817B3D5859FBE06922B23
2B0AC83BFAF220CD42CF45666E41F368E21319E382F750C4BA3EC3E8F6CDBA3D
110893CF1748613BECBF7549175718FE22328FC3356C5A1D6607986E151EE943
E301D9F0A0B58494405D4DA5606E89BAEDCD9E573A2B023352069DD1BEBD5199
146A70324E3CFF770C9A0815EAE958E6A17B3CBF9B54D5E17000CA4114259479
70F983C721DB246CC8CC072B11B3AFE65E5C942182AB71396E9417455C5DF4EB
DA48A165A439409570DDF9A03CCD80180CB25B803317EC7F3DE1F15EC45B64A1
F4E6C4956DF4F0118B300D1B6D20927C4E0ABC977DC8D49C6355B9CDA3F3A115
780B4AED8F5099AC2362EBC736403D067D95F379CF44F3F87740C01DCC3A870D
125837CA28B754F35C5874A9204432243E66A9837BBD9920A5FF22189B85782E
E6195EF6ED3B6830AAF55514AF1C63E8BE31F1F410B1B4BFC44C3E7405DA63B0
5F451A01A993B6641CE1F15CB85317CFD5AA48A8F8DD351882D808976A265030
337A8DC576F4A165DF6415A5893135ADB098022E7B84D9CE71BFFCE11A66AA20
BCE3049F990744F6BF1261BF5F17C6202574CBBF7165183946BF0855A675432D
0D3BA6137B672141302E0C9A9A82F0FA379DFE60338A73083C4108D9470B9A6A
2D88BEBCC30B850EDB381163192BB5742C3A1EE933CD7D3D2C7AC2D5BDDB2548
C6300FF4A5362BAAB8F50D5EAA8BFE9F953BF0CF63093E310562A68D662F0F8A
E1482310DCA6672C452F9D35CB11D347779A5523F607B504C7A0DF01F728F1A6
85854A512F7B0BB9F40C0A431D263F22D091D0F560ABF27CC28850C4CC8AC536
7B366EBC90C9E374558153AC833F4251F04D159DA667468781C34EBE11B77F7D
00AD989DF67305D3A25280EEB707DD2DF0792DC67F835A307680724ED3CA9815
2A36BF36D2F51784D216CF9950858BA54CA7CC4A17F54D043B5881BEAD0F3FA3
DDE2C62A9EAA7B5CAC4A2E427257D7C2AE685F7131B04C23ABCA88D3E224CC0D
4C47CDFD603270F3CE1806150C2BFFC46A5F71375D722DF6ADBEA3E9F50D35EC
6D1D463D49582982FDE4EBA45699E4BB7660CC8A938AEE2340AA12BB786CDD7F
AF7FDE25222EB7D1B85B203D71DC802866F884E753A2A0FEA464ED04E8C7CF76
43E89D5BE373C48E9327862E9C661AB681AEAA9A670586F9ADED6DE71B653E1B
5F49E9CCC94270E49529011A9EC366AD4A745A6BCBE22DA1E5D4695BD0ED514D
CEC1C0B3C7D589B1CA0D10DA32EA97C42CC132FE55FBECA07BE6F152F1DDAB70
0B6CC69B9A1B63AC5634E056C0F79EEE9D91071D0413F4FCAEE18AF239FA9A43
37A44F0D79447E9C5ED2573FD9DE75A1E4D7B0CF43B5B28255712F2E5C5D0F68
D1B18A4445F192668A0F4AB8C27EF1DED74EE602FA579323C5E59E09A4F10ABA
DCAB7204AE358E7DDFC645A619BC423F77E4C7DB510BDC32FCE3B34EB4DFC3D2
A1790D49EB6412C2618C640AA60E3E1C4057B07496F619A02E659CA508BFB769
7284F9D5F89E5798997FCB661211C72C553CFB252C7EFE330EEF63D68123F899
F1164FAB22A392B1E463EE135D9D9C902B17B51AAC0CB2528AECE9DED5CD7296
08CE8AAF3A48C72C78E9693F6829E3381EDCA87B9DD51F01AFAC344014375F62
BFD0CFBB4C097DE0CF3BF39C25138064E46C5E5A503C8F0D77EBB70150A2C54C
D77EE5F902FFDF896FB2B71F3F05B60DD151712ECD1C0A710040E77E88BCA0EE
694D1BC7F57292ABA161F72C87504E36306E6B4631CCE454AC5F434DFBD7B601
80DAE6860EBDF62FE4F7FE74ACA3475F26B881B3477407C51F4EF185AEFAAE39
BC6BB6BEFF9DECE02DF429857C99EDB3FADC61CDBE7134A84685C012D596CC56
7D03D641C190D9CF2039A003B0D1B9D4A5E9539858CCAF28AD7F03CA78B37667
40C47DFC68C7D18DF5EBBD067E65874AF23CDB0DD546C3D2F3FC1DA14062CF64
4CAEDBE0A0DB2CC5E8A65FBE05F8891932ACA1B50E852E5FD47142F762E107F6
91AF9E945ABFF26CDEA98112C2C8B5CFEBA48FA8766D132335B2A4940D4037B8
1258E54FA714BCEB9D1A3A2268162C687171D0935CE72073D73878ABF61030B5
A9733F6B21D48B4E59D982BF9E06969E6BC5E6D5DB6A310F723F5519F243C73C
44EC877FCA7389A25DC6E9007C357491BFBA0CAB5053A1A14064448BD3E8742F
6F04C3DBD06FA0669CF7775414D07B3F5927ACFA908B12495A477C1D326469AF
678848D0EA70E5E9B6E0D538FE9400C351D86CDB7C52B72879152C794199C3CD
0439A7BC2AA2A2C038FAF787628427381FD3DFAB68A367D1FC762962B0D5A0A7
6151A94704E28798B4BB88F6735E7BE7B26A2E25877E5EE22DF07A30F745BBD5
3201C75DFB142D13285E87CC401FB86062722874CE85E3AA78FC49D68F7F48CA
C29A9681715FA7A75C14B685E2004635A717A7911245A671875350CC81F20A83
DD496C36C24947A1EED27A40109D38DDA5BEF5075B4D37B7850C4B8FD2D3A67F
359E0963E59880303D59BE1D3FDB4BC86873D179D88A0A94D2B63DF18953A8C7
1289CEDA0A84C9DFC6A98895446D46E90D8C93231CCFF8B18526D4B876AD9E08
87E13D0D965AAD25730449352FCC07D4BC5A15613AE032CCE548FAB0C8D1C07B
A89A215C8FC1470D926D6E7D4C105DB43791E82077A55DF592632A3E6730387C
5E7CC9F09E0010533BC14E56C291413C501E0AB5C62A9DF4B29195EA4378CE94
2D14E1E9AC03B9A0085CB9CC1F693ABF03C400DE4379F746778AADA0979B620F
84259EED33AAB9D7B7BAE9CE7EDB09A1387E31A3179211295573B72AC403274C
694E5D0DA0864719499BF534828BD05FA84F2458380F0F83803B5353FBC52704
28C8F57AA1F8DA68D133F004338F3589A99DF60BCF37D594B9283EADA5947913
8F0A4EC6C6AE763CA422D6755320D01602B364C07010B5F178CB8C6F6AECF2B1
D346F644A8126EADC4813F842A5F5EAE1946E75E8AEC58A269D0B4B7D9F78D92
C884BC76BC592152756DB6D6B122B9875063C2DAD8F9A550781DF65AB43D7D05
C5E39FC4876E46195F82494D322DE3779FE9F8714B518561B17A9860DA936CC6
1223A77214FFCF55BA91FBED2B28C6D74015EE6CB698E393EE5B7F4D5357992F
6D8C8B9FDA94874E501104AD024DB575F3504749F70DB717EB72DD4F6B4CB9EB
614E23F7D32B7AAA7361EC25C282B6A0A49B5EDFA8FF2CD410CA5374D1C2D78F
E64DB80B78261A2AA913F4FC32095D22E0E2E8717F0CE7E9B0693C6CF02B469C
E9F2C4C82CE70C176517FE9668030CD7EA9F222E44FE2E6A8B1E5252A9D4BC7A
7CF1A9AE29408762EC9F22D923CA574511A78FD505E6CB052BFF9D02D00F4561
2764D8E27354230BD298EB33D9DD15F881DCD822178A446D8CEC5AC289BB9BEE
6488E3781B1FEC0FA77A4F9D4A077B51B5A149D85E5803C606BECCC8E16ECDAC
540523109C2D67621B6EF21D2DBDE76CEAF0B699C3032C28D3CC3A9DFB4194DD
4AB3AC91A12073495CA295BE6933B1441A825338B3E019174B8F1F6C9F49A088
1C778C74EF4E266DE64CD9FFE20059D241C6709E4871DCDE8EC3694BFBA8862A
330B515EB96D8CB78AD3E99033081FEE7F85E61AEB6C09620FC5F2BBCF76FAE1
ABFBCD46925290932DDE0D4AA0E3CC3C51F181D90992785B8D77F24BF59E3D1A
0EA3A059F6075A69EAD7D2EE94F53C3380BC1F17536E1902E82B66A4511E9E63
F2D7A853486251992EDA8A76508FBD4DC9F1318E794ED89C47409E478B59FA5C
3ED9C725B93755E8315784661CDD3CFC4D87F864F3D952C3C7D1A53A98C95127
837879FBC5344878436F05BE2C5BEF0839BF87DD18912FD7D3646552A788EE6E
DCEEA21BEBDB854D0657819F4A6D5799A8B95D1CAF5760DF13030605F7BED34B
F377544C4FE0D9E2CB94C90D217AF778A53161CB156A7F8DCCE5CB3C0197B92B
1E413DDEC857FD28ED582E646B346E4D93FE54694EEB77F329BC4A761605889F
AF87884BB606362C9871E1A4D4F3A0DD97C43EAC87B96A7173DAA892D93832BF
7DAA190CF4FCFB72DD0DCFC91E50358753C897AC2A47FB4AC5E9B50E73D9AE90
3E6613562221FA90085DDE5D7DA6EFF4CB716748BF93CCC7C6A83E5EA7CC8E1E
C71AD88E87889F47C668325DD037F853AC9428E88173DBEA327228CF763A6954
B432891B8F2DD3428DD96AB93E3A62FF73647DD1FC0623F8517213544E8CA05E
5E6111ED239F4E4499CED87A0501A4A39A2EFB470DFCA7C766EF8114F3027275
2554A64A69B0857BFC16F30531FFC2D3463B820335ED408C1F2374FEDCA87687
CC113B93086450749F59CC549FA14AC44E77FA872027C1041723FC113A457DB1
B4C0B5DDF3DD248B8BC462230A005D972B219739022860C06E72D4F82D7D8BED
7A557276FF2374E36EA9667E9C4D83910926C7B1AF5D9210483ED3DF45731C69
CC6EC9CD8DD59FD1C7F22A266FE7BCD92563CBCA6C2C6B50905C92286EC71D79
EB1292E6BD02BB5C388195E8035A55BA3C769132EE95EF6A8A8FE7596CF501FC
00C265873C923DA723401541055834F51807453C7253F0DA055DBF8A0A732BBA
A284751FBB466964587B2F57EB8D5467C1ED2932DDD7D974F59A929CEE826F64
08B56A3E970F0BA4F7A4C566C61F054D8C429F0A7AEC6F42E3C7976EDA674C57
434FCEE9AA048B59AD93EE9AAA8BE98438C6183E0B94ED8252991A78663B92C2
D4B4ED1204D2B50EB843420ADC081057601DAAD9BDC21AA65005CCD1220CBB38
6098BA3ED1AA95C72B7D9B52E1643116E662CAC5F8B14B952493BEDC9B67EA93
48596347A81D5448A78AE0722AE99AE00B384F2E8D9F9ACDC867171F0BF2934D
7D66CF8B3099B051B7D6BAF4F76C41856986C1341AB0F1FC68DCCF67E1AB4EE2
8F46D77A2E3C5970FF60F5A8EA6428A753A30883AD0E478802D0CC5BB2D00665
5BBA3AF2BF9C0EA3CCB2B7DC11D6579DA37AB425A5E3124AF58E8D7BD54BE090
8444365AF1CDBAD2238164B0F1D3366F83D997A4F7DC268533FF505FCF55D409
355C829CF9D4AC5B27073C16AA8B80A61DF255239C0BD691BC7D052022E889CB
DB888C84AC7DA666954D63F5634D4D446F83297FAA9A51C82D6FEEB1F8D584F4
345DFABAC4C2122EA43F24F738F371A77BB00E9A42DF896CEFEE3439663090AC
624D90ABE51EBC2D7D69260FA5632C0FFEF90A864DFC8050FA52A4328ECC575F
3DE18E174F6D518807D02D3EA7E77D79E47029E40C4B5B596817F2378876BF4D
2C305337055B9FCF4542133E0F21105715814EFCCE88F9BDB696284A5BD9C7B8
019222FE508BA4BAFE39A5A2B5ECB118586FB381AA8928962F64F44664D1AC53
7D31DA7E3F61477095D537A796741EFB75E1F6A834A508614C4541CE81A539F8
903A760C8780542A78C7156878591C85D37B4526321909E34176F3E042860C6A
FF44BB54E99F6CAD5255E12F68DF8FB77A6480E97748EC9E09B9CD239F61DB4F
FDD73F1821C85C6847C4C503F5AD6807F29A6109796D1854C1EB1A0510505B5B
72BF158E72300A2CA19B8BD40D61E46A153C3C25D0C7DC1256F76599ED41F71E
CFE3BF1A71DFECA66E04F30CC7FF04822E9AE3FFFBB92A8ECB72DF7B32D9007D
52EDC516EB48845ED9EC42BA3DC260B1E0CBECC7898D6AC135BFA75A9EF43251
1E003BD366409F00A683B123A0576FF34E102563C5798C446D447342C7736BA5
6BBA80EA8BB281F750744608EE366E30C5CB623702C787D6FC4EA8E472DF545D
24A3DF3E216F728D89D06EA5960EEAFFA4BC41DDB56D3D5FB07B3C626523F230
0BE6193B8B8B70BFADD6913C261A9054DC56953E9A8C9C7D8E3B9949E46F7FAC
4CA92840DBD9A852FCD1D06764E93EC2A6373F36A725F5D7D3DB29675C6C0221
4E81FFC726E6F7382AF4433EC880CEA71A4BA7830362372A0202BF126C35FB52
3B345EC97AB5684F3269A8FDEFB9466A4066E81C54781C05A71B623B6F8091FB
9D94210F34C1056BF638CF863B0B463D06B0D39916C2BFA9548D54E24C86F131
44CC616FA04BAF43DA1C74EFA205D43BF3207E2C3063E6500BE5FA0703E25105
A09E79B0AA18A1C345F153C67290B290324EB8365B1A4507D9F708B799C5966E
0BACFF824A275DDB6A89D89F5081F1FE0DCA40F04BB802417BBEF56E3EFDC21C
AA28C35982D81CE2A83171CF2BD29C23074544C9F4CE9F86205CB05F370A1F20
1B5741C02CA87E5862A9B1F1A1E4230C4A0A0099D280AFB05C2ED4A5F7BD5CAF
A9135CC1969E474F2C2E0CC3933A1F5C39BFC5CCB48C3928DF8EC5EEE1780A78
C587F31B62E3BE1991CA0BE1D908E4C512E1AAE11085D68EB9A7078FE42912D6
658BF3ACCF715E63468D6F77BF18AC181025AF9377005A6B6FCFBFF04C73D9D5
5F145963B6D0C6B27F94965C62BDDA15586DAB0F3D90947C94C9D4473D5A9C49
0EB3B6FEC5A91F1F266609281D84C24AFF9C656CE8765F7A44066BD4350EEB84
71691D2638935F2489E87EBB5D3F92FC7CB45520B129C5612B04ADA368E75CCC
7A54048E3F48D4314FD9EFABBB7D77A8828768D6F4822CF05153D3E5A4A71219
C38592C86237B17D6A6026A1F39941061598C84237011B4DCC72AC6BF31E280A
AD4A686AD314AE577FE9448CCCC17BFFEBB66F78E2C6F07B071AB9186B9BBF59
48C2C694137ADB9AFD39033A42F990426339FD6A95C3F46780518D34CBE784BF
7D6FA959014F0E9A6E8758CBD9F6CBE68F5CC53D80BF9FEF50C6C974CFC51ADB
D60B4CC365B29EA2F459498BB8DD44A5DD3F3FF43551384B8E746F870E68F4EA
8F994E54FB3169DA2D3A10A636DE6B8427381FD3DFAB68A367D1FC7629642E70
3FACFED58772BDD4978BC0A27D0FD32FCA51B070DAFC00C67B49D501CAA5B861
344413F1F255717EFDE079EDD6F3AFA7705CC40EF32CAB3866965D9BB5DA96D0
7E2CDDC0C6A9B7E683199CAD092D5611A19657FC7C982519BC3A09A9D795F030
7C776C25071D0B0354CD853222F53920BE2B47FA5F9B2204FA846CCB1904421D
A3242DF909297315D82F74BF79F47CFCCFDA431712371A143FFDC83A9D7A88A1
4159B3A436BDE5E19967A80B304325E3CF06E9B2468083435CEC83A6F629B801
453ED2F28B1B9EDBF53AF1626D75983A6C3B383A6FB3025DA828E12158E4A9C2
44845DAE8BEF77E829EB5FF3C2A88A4117E0DC93A95C4D46B4105E30246C55F3
4047D3E05B101DDC75509F64E99855336EA75E82BA9E34D4C3B896C593F85AEA
9FA0EACA669BDCD4F0E2AA3438FAC6FC62FFF85796B81569886EB1C9C20C6CE3
5264953AA806F512E976E351613F23E810E145B329EBD2EE9D8723A6E28DF047
68CC0AD74EFF6DA4523F8298CE381D567C22A1B58098554491340EEC6BEB2AB1
AB21AC051340F5C24A518AA4D57F35D454521E715BE967990071BCCD21A8206C
5C40608203A5C662F178E9F0671D80ADFE316D582C7A94DFE656954A7E9E5ABB
1154009E0C18A6CDDA3DDFDDD88F70564DCD8D03F8905BAA1B6C6A386B924491
D64E03185A78C61F7393E000AA41F04375839EF5540A30BECCA0318EECFED17F
D37779E82F47ECCAE0749E97B0D9E4573F7B6BE316D8AF143BD93111D717FEA0
C56A0C86CB2804718E1124A0C6E82A0FFA58FD013D9EAD2D88B01654F4C983F8
1A3F877C027FFB0F440498A023876736CEC917E68548A8CED2095BFA7DF83AA8
9AF9949188A90AB9C87E6AEA45F9C3D2D7DD49A5121D995CFC630B9E1360A784
AF0AFBC5982F003CFFF22CB3EE03841E657F3716353FC1A8564DBF7145BC5F59
B4395881CCB81211038A6D38763047D0180064377806909AE2A524884E52445A
E7F45857949472A9005CBB14F32F1C3D39BA8D1243BF046098D499D17920056C
56795EDCE10321CFA3B1CFA4BA5DCE1627CB5B3D175E88ADD1EDDFE83055D809
6D73F650F14CFEF80336C985DD66CD26DD6475231521FB620C2C1C392677CB07
502BD623E63F673C4922CC21BD97066F37B3B40C4C9DF8D4DB0AEBF35A2AE606
51A930E97F6E2FF49AAB53CEACC4610098E8E203760F07F84BC5DD2F2CD98801
4662E46950E002DD1EF770BA4778296D06C85FF4ECB3E8711A7D96A669411066
9CADA14CC5D48364F8273880ED40DACA3BC49CAA5BAFE5F553D5507EF1B5711C
32E17928D26633B242128B907F82CA9CA946E84E8396F18FB4D1C9F2D3A6D13B
C6B93AE8DD633ECD288DD69057F351AAB2D25E6D9A09EB37455E03454CF93DC2
E85BFD19567EA7C79A95C907872F5603C27A5F76D534722FF10FCB40EDB69502
8A8E84998F5E1689C4D585728A94E426B23B8103DAD5CAE80C6547ED846947C7
CB0D5BF28CFC6DCC07D024B7569AB27C1A79399593D71AEEEEABC20A0709B11F
311CE63E0D94A75D85AE1BEA97194A2B62D7F5A3AF54BCCC1ED05DDAB14D19C0
7C64F7E34AECAB27A1A571B1D127B4AE78A4E9D77BC70743C30BF59EDA5E6206
FB74DD581040F921CCAF47EA535BEBEEDC09E5F9CE40F7F845B1EBDC5B1136FA
BC9898C5721FA9A64D8959043EA55562933CBC859DEB55EF822F5380F0E5CFF5
154FD2BB8D15422F5AF9372D3AD61B2D6CB66CD6BF4C733FA0CF3832B8A12016
A5AF5A64DEE8D4BA6042FA195ECE203D69FD06AAF8C72659580928F44039EC6C
77923C16E69883362F840A947FB0D690D6005BFEAFCECEDDA1F3DB1A0C2DFFAA
11B149ED60FFD0C08B8C765679FF0FFA221A10977BBF4ABBEE79E19BFA83DA58
B7E0B86AE371F88916F7CE9C3787474FA99D22AD65B7BF32BD714A8F491E2808
B6A9369B642D5FB4378B048A811626E0C0CBF9A367930A8015C023B5538245F2
C015FCF5F235343A90F7EC9BDEC0E8B841FB5BF2DF389AF363A8D67761C0F2A1
DD706C88E65030E021D4DEFD6F871F7EF9D23EC242624851D8A184C40A73B179
2DA8AA5429637130FA6B1435B35CFFE1EADBC6A675A7CE095341582702DCE4EF
EF3A673DDC442F02A39B1C2274D5C4E09D5EF58E253DC0F8D3DDAF5AF7F4AAD4
51781E12C156A0C13989BD4CEDB7186444F1649D8A4E15591C09734249B37BEC
07959F1920EB0B6ADF80F97B2DEBBFDD58DA9D4689E5D207751DE0B86F7251D8
0BE818D61E6740F1523F30B48365C2A8588440F9DF56D327DA01637CEEE0B707
F36EFC28E1B3A46318DB4A058B98CB92367AFCC84723B22E05955082E1FB3C5D
A2997D960DBCE77385E78500879B375DFE6258B3610AC8145BFAEF69CF8C1849
94DEF49D77D9F3C98E953BFCCF3D7166BB4BEFF24F60924D537A4B2E5568C871
A39B3C32BDF8A354C9CEC1281F96770C9A13B0C2720DEBB9432F01A550980BF0
1404E87440A3E6197D5DFE27452051462E2F3A2E1728C6C32537B33DCE4EBE81
5CDEA4631EE275B83B62D4195BD05545B04A521EF4AD03B558F4AC437E82947F
58A30DC4C3823185A18F10F21A04C3CE364DD00222E3135715814EFCCE88F9BD
B696284A5BDFFB2108B29B09222E86FF1D890EE2689F27AC0DBB5659EB4FC9BE
78A90A8BC6988EC021106493CAA0667D6EA67095F7E64231E9D8A5F942BA9513
5C08ED14956234C19F7580C2B003661EF1F2729556E93802297CF25F0ACE1D65
44668A511FEE990DA3A112221FD4161E90B8C7D900193CED0B6E1698F966B4F1
C15961D374DE25A7B0EDE87EF9DE8BF75DC41C003B05ED038B66C6CE38A97957
AFB653B04F2614CD81E64F1C330C0EA23FFB44437311BC55643D5AB23257F948
4534F38C37D19152F9B99F98DD697B9DD91E41C8DFF89925CFC5D85A28B616B9
EDA1ADCC3616A5D11228209CEE30FA83953E0F95D11C201018FE91AFD0B44644
1E0D4C268B79B86A81A3041A6EA24E085EFD18962E446D65DF0F65EF55031CD3
8EFC48EBD2582C723C32D368C2080CA8069C6B0CDE19AC94E0BDF9F7704DCAA7
8FDB914A7DF0884F7E2BF3CAC51DBB388102E674C972E3A3DDEAA67148875B3F
A6DB4D7266AA1D574E595671D73A3499EBDC256E313A5A19233DAE151C63CF7E
54B43BD28AAC792C2E450B9BF1EE715F65BC146CF13E9FC00E316AD709E0CF9E
BBA3AC28F42EE409EBE71CA5DE4E232A37F459D0EF18D8272A518D7380386793
5EF9F82706631264A3631413D94E02A669BC69A711612F51064C1375A60F63CB
797D3F2267A66FC82706705826819B52AAAD0F72ECE9DC7CD4DE6CEA6D5E8BD5
EC5A3633B36E531A430598881E5E00F9762A049FB15DC548DD9B6C71BE4FC366
2B61C59F2CAF8ECF54E132FB78F6843DA0B2594EE9642FDF96DEA84CAA9A6FE0
F9EE7E854D53B85936B31C808693E66B33D3D4FC762880B589A038A5102ECCDB
8736CDCEC853DD25DE15C6F86294CF38E4AA678BA8A08F81174FFF1FA12D73E7
AA25EB57451DACFEE99AFB89850C6243CBBAD33F74A53E3F70FB08ACC8E0D151
442175A1B1EF865445EDBA2C9F4E71A972E63B498CD052FC87931B81EA6500C2
268DD643900B9DE5B6FD103D2DE1F3B7875616349EC7A6B72D81C1624D48749B
7F8796D2855C1D366F07CFF3950EE828851B409827688B0DC75E790B8C3BF5FA
A2C6D758DB6B0F7DF64C81DA33E9A68B9B834875D96749FD58506FFBC9507DDD
77014C2924CB223E405F48F339DE67B23AA4C8B47CA0DE5E713A988B0833D77D
22C6A4E93F0E0210F030C09354A99608ABBEC8F6ABDCB403F0E9B9F002E0E963
A85D37889376D26BE35ECEFC05C265F81067183ABF373060EEE77393A53270FD
8E621120116AB4C81C19328CD271B372032A0A3229790B7831A2EE223AA7588C
68111E3120000834F31E53D51A3D12A141F41BF0471E32989755B7D83FF58464
7B807D752C9F0598CE0B324996DD0DBA1D8074DC6D874CB2247B8358B43FB427
0DB6395806EBC72923899A0FB79F8113DF87DE9D4BAD3A8729BE2E79F4AC51BA
4EFA0965A11DE5D53C5A66EFC05539C901B03E68FCB40F57F3C85743260BDD24
1E10AD256DEED77B14571B11FB879018812A646471E9F0C1819320B766793F24
9827D7B0C791FB75399AEC03FDDCE6A420A6556B0473D8CE242D56D62EEF6079
504A5809102BA714C1D454282A55B106FCA0EA4DA15F0FE86B4060A052979EE7
9B616B0E85A05CB8C603B43394DF2A4E2C4B1EE23DDFE63DA3C7C8710FD5B93F
2775696BD36C6DE515EFCB9F1EE295C55CB1C2F4E43E67F00029F54AC2D89675
1FC8A196672FAF4F23F9D40B1956EF5BE0EA84B15E6A8F1FD76BC306585A1225
8CF5584E8048A95BDB54CDEC59A4699BD9568E2E9A1BF9D2E5842CDDBF74140C
3E06CF36C34709E5223CEEA0A86C9C89D9BD6F7434E9462CA6CE1CC41034FF9D
DD7C0B479B82352E0497AF024C1D02D39B4380965AE8EA3789FB48CC5E29C2A8
6767D2874B817EB8E064F4DFDEF28601CA4F43E13DB57C81054245EB54984558
81367B21D4B71CF5A14A3269EC5DB4A9580916DE799F5F09D3C6656B3F87A0CE
1D458591A88B2F51962CBD6085B3E530D4DEB4429D777D6C653BF3C326945F5E
C60809A9F78E45BE3409822E5A52593C997CF959E00469F192A288CEA5E41229
3FA1D62FCBA2BF778FE68559CDDADD31F2F3BE22AD097C23E3D43BC2A5698E1C
EB0B5AE3BF68F02A192428D4C5BDF2944DF4D3FA880DC7C73D37186DF6A9B62A
73482C427DC7C43DFEA873FA4F3241FE1CB13D5E4D777BA1B20B2DC5E7492FC4
475FA531D5F9AD0026521621F41AA3D7E7FF53A0F7161618E2AAB51A9609808E
57CB966FB9721A3FCCBF9B37AD7801A32386E6AA48764C909B0F3E3DBD53B7CA
9E411AD23929B0BE66C7C79F5131371E0D1C13D02F8FBD144D40AF22090580A4
CE7CE922E05D991CFFA63F89B994932C81844CE88B89FFD650F8BDFF365FBB1E
F36BE6029B707453F8EDFA049DBF73D907E4E856D60F007C12820CD75104A1FC
3B39B6F174FFEC15B2AD9D2B225CBA3B73337E0D1FF6E3B2E5004AA42EDC8E67
E316A893DCD1B52B1C14C88C1767D8F0A4AF967900FE599D419B3E98788FF157
F2DE91B7552C551A93A97E2F142D2EA8A5C2D3D467A8805ED5563F49920F9A07
3E9A0931B90650E6FF796DDCD038BFF2B745A8022BD9ADC9353BFA3BBF553C2D
E2CEDB734273DD9168D6D4F2D9077EBC356F8514797F918B34DB9422D197A64D
FE86C909ED4026200A9FEFF374224E08B2A88597E43EE109A13F97843B172F72
82FECE1279354D5923D7A9D25672C408D6BE0DD214F79A08B5FDA8613055B7C3
34001273112220F8300193966BB4C3A0DE35572BB63A7B90986A8C1CB456A012
97D4938358081189E3226F824BDCEC9D42FD75CE5F5B3D5A5F9D7CD2C87E175D
0435404EF38BDEAEF0BF8C67D2CC7455C4A914FBEEC22E21BBE2FA148D62DF34
40F95E97DD9B83EADFE0D19A48F5F0D556672AEE047F1A3924C079144821781D
DE65520F564E8FF997531EEDB0EBE6B76E576780C1621225A259A2C390F61DA9
BE399F69980BCA1870F9437DDF98B5C5E6795860F8EB626A6C452DDD53A655EB
94E2FDC07E0435438122A624D8D71978CF93536FD0274C5DA5A51605671FB420
12E8DDFE23EB148AD8E1E23412FD61F93B0224ED596C293A3F2DB8A1C8118C56
61DEA6D4EF824E4E8DE84D6B70B315658DDBE16D82BCB452E2F93BC5ECE2C1B1
98297D4CC32B1D6B7142F88FE20A5AB8A16663EC4ACF6F39971298918312250C
1BB477C45ADDB33BAFC6FE5A71F6077A28EA55B38F9D2E026F45A03766C13E3A
6E5ADF4234D75CCC07F748AEAC673B9A3CC07CEA9151BB3BB206A6AE130E3961
AECF0CEF5235E1EAD9EDDDA6B443B60D1B20A3D2F22F4D82468A31EE68C2D6AA
1703682A4671C30E226B3861D674E27F696B442C31F0BEC519652AFE9476447D
197D259E79B8A5BFB7A119CF9009266474A9B6A94BC1A3F7DFFEDB3327BEB4D6
B83004923DF88971112DE0551410F0175B06F454501B1025AE0F18E165117EE7
3470A453A058CC424CECCF0CBBBC526DB2A3F53F28CB84850C95BA42E77E089E
2C293B0DD12BB1CCC1BAE80992529539B990706A7E05D8E62B26B9CA13E18DBD
66830A3CC3202761617AF55B678B6F190B1966AA20AB390E42EC0B89A5A5BFB3
05B918CD2D0B6EDFD1CF9318640AFD502DF08D7496EE9341D32AB3441765E123
8AC2BC2F8A98D16F60B7201B996A7C66E0B2E15B66EF0E8B59A6A52B3C5BEC13
B783E6A870317DB2EFA129D784901004EB112AE678F1979B767AF62A5965A160
BB04EB45943BF7DBD6469E715E26AE66082B43864A50D37E8C350FB87CF551E3
DB68463C2C73438901B700BC0250093A7C7555C4FA0324852EFB3480CCFC3B95
34BF36603F3F77935F24EA6C597FF33D69D02627465E8326ACE6F0E9523EECAD
6B0AEAF364AE4C80E5607CEFC6E723505EAFDC5CF7DB813E365F3AC66020971A
09CBCB3004F5E43D8344D989BCAECFC0F1C4319DFCF7BE6724DA4A9A860C3B92
961EDD64636A1E9DE835560FEF4F937EE71C47A262C2D2385181E3F22BE45C2D
6F1E364A30E8C8E5BFB97F824479739F7E849AA97B2892DA03EF8251B1BE7AE0
4C0CA35E0639689602EBC13B14F637A353D5AE542D94719AAC9EE1D540B44022
77A83331201BA5A4AE0B9FEA6716F601BA31D8A0E1DB0A9DB08CAEB99C22B2F2
F8608CC44B46287016CE1B8E314D87507F1FE502A7D952D8E73461A05286DD0A
033DEFEDB32694A9D0B28B7B42929F29AE099FB7331038EA2BB3C53D1BB66A23
18F38D99F67408AF14C7EC19F3A13DDB6BC484C22ECFA2329BD21F8131B159C6
27333480202440A0CA36225772F61009240C6CF74A3AB02E841134E4A28CF798
C374B3DE9E17E223AE2FE9985F09DE8EC180522A90FBB1D640D2A6B38F279F98
0D57F5E18BBF484BC0F6FF8CE3720C7938161863B28AB406FB94F5F23C47EF3F
E333B16AF9706E0EE6A07FA53EE9D16881092BB98CF186D8241B5A21BA22E5D4
CCC029B3C232811CF0E4B1F2BB064C3DD0600A57C6044D9646BCBCDE44BE8FDD
4B53ED658D048C5B426A0A3FF2986C6CA295B8746F32ACFE1CA99C8B22018E76
2544A34F1B14E9EFA5B3AD0BA1F17438D27593D7A52ABB72752EC33390EAEC92
58D51AEC9CC2F790E8467F79548DBE174E29CDF1B5AEC7DEB95533ED3F634A35
92BF1214E74B029A7071753D8C57DE98149A3C1DACEE22411AB1C521297233C3
448A51C8E9877DF60CB6BA20A13C3A4C7E0504CE00414630C5CA174C5983CE8D
EC5933E783EE93CBDF7584C849F229D5383797B33623675290F3D98118E8CB14
2DD6D0EEE2B8BE6AB7028715272A329E5F5D845C20C8AF34B15CBBBB07036357
04AEB1AB98D6FAA29EC69EEC9AED9F240435345FA50E91A1707F9B7CFBDAFDC0
B34D10F241C4706B28E605AA5B29EF26A34102DC43A42B35B071221DB5552DFE
B2173E7955B1BDBFBF1418DF7832308EB60CED7D2F5841767258BD28F1C7923F
2B18E8D82BD808A0566AE3EA0E57D5B99D1128F8193F53E23DF2A805FB9721AB
4392D61BDC14FCAC3534C65C2EC005975DCB7D51F1D2048DF06164EDF58F5AE0
0F69DCAB5F4E9D01334F4DB23D0D8F61B0EB7C6E5944BBDD139326FC0699D55B
AA86AEAB1BF329FA98C4C94F23A4A6556E238089C7ADBCAF015F3B223C2E5CD6
9368F0BAC1D9896EFEB11C35A5C1612223307EBA37E7D67ABDE015C94A45362C
74BEF868651E4459E3A12252571F743AF61BD3463DA6ECF445C884413A47EB24
BD060BA3F1D884F26CF41089169426E44CE9FA0FE557779402C184A4941811E8
3649F87C126C46A8C8568FE34B94447EAFD66F6CE9055A3D9E42CDBA2647F86C
EE0790E1E4273BFF14BB6E61BAFB497EAAA77F8BB8FC39191954A6EEE713D22A
147E3E40AE93DA1F075E84FC2FE0B2A3698E3F716796AA10B77917D792EEFB66
790435D7FFF7A471DD9AE53236D4DD320B3EDD8FCDF7A816E0910C57F24FD107
EABE24DA14A90F125BDB7326E5FA61AE09FDB92A63A91D9F69C74D95B368D165
FB20200C8B457A28C771EC6A399BFA14A9C30A93F22CEC8DECE75B0C0F3970F4
444818AB259FFA594046A3FA5028B30EECE52915952C8513B77790F5618A1146
145D300EAA72C7441F142268ABF63F356DB1AE440806E2B3D9BA1091D0461B64
7A9FAD8D2C7353442F8F076619AE4DD0BA4E3326978EA7866559897CF0653AC7
8BF7FB2277C35C451BD6D13916C1B68AFC494F646964CCB875D7E3696C9A16C4
2B87DC2C2C505DF69355EC3E5C1F343AC2F6071317CC3035F9C88B306A2EC947
1EAC9F2C02709DE6FD026B6835D12D487FB29998A30FFA67263BD59BA2E1760F
73F58522EC6FD339BA613095EE3786AE2772D2FBC5D75A7FC59B03A3E675A407
692533DEB969AEE111E75168D70563A337127B6605ADD9A0BD1C7A2F76A50086
A54F076F34DE6A129E6F95C41DEBDAAE23A37D8C7CED1561D4CAE9E03728967F
7D0C65F6999FA3227269364CCA16643C9F1BD0653924281F254FC8A135610C3E
738883A56EE609C160DE8C752E2E45B8C169D7D58221067FF8FCA3050F9901D2
F91ED4F2948D5C3330A0985DE6150645266166FC9C29498F852DB592E10EC37A
E2049EA3D399E3F6BDF65E4CA34B00B0429087212E76A3DE3A67218CF24DEC9C
75381FAF2AC65ED9F9DDD31E75E530C5EB5E56720D6CE4B55F0D05D8411AF327
49D5F391CAF8D0B98716AD2C1777CD8841F8A17D3B8FBC8E3A578C8DF072F674
3A4A26260C362AF7068A8A8E859CAF55E46F84B2E3960DAB18D604C9E1285AFA
3AB3AF782E48D7CE22ABE468EE483C19A5CF2A51F61981D2A539A4556B9A4308
12D6195322A25CA5ECCF3FBFF392E9559945B50F4D7C40696774E35E6A9E4FA8
336D6E3FD78756177FA1A6CDDBDE5CD4F65951323731577C3B60CEEB3AD77C07
BA81527F97C89586F7CCA1EB12675CCAB12798624E84F8656A6FED73192BA9F8
17ADBD1FAE698D66DF174AB29E242F90407746B9D6D8F77B1A7A1DE94536A24A
A61A47B1A58C3DC14CCAF497CDC4B39155C33B65E0BD277B17FB4B643B69ED7D
8F45E68F2A60A84613979A3DAE4B8D2A0F63A77F07ABEA1BAA714F6CBC3DAF2B
9D536EC849A4630F4F173876694CE76949F58F31816635D2412028C1718129BE
2CE5BB23092A27A5AE85B3B56C6370A3542EC04E6803AF2582F5515AF13F6A0A
49F6367351904E1E2865C1F737A428EDEEF2473FFD63B302B915FF910E63CF73
6743B84BEE7156AA61FF86610BFE936F0A571CC81E82250FE4B2B99749E610D0
236C1AE01222D74FD830D63A4208E827A9C2CBF7F0C3DED280D6FDCFB195416F
BEEA9C6556FE0BF405D2A4882A8C71EAE1B8944873E8E67A74DE94C10E7EE856
F678CDC3008A08A2A16D9EB73F6EEB2ECAADF1C109B63B0B10874FCD812D449C
A5632EEF618E6FB9645B608F03B4897CE7461AD5BAB068DADF6F95FAF7D1E975
3CB3EE5241C75A3E4A2E69A8BA7556E7DC1FE4052517107A32A3990936511260
6804D0E68D704039DAFC5C05855C1F6DBCE36E6313C32A4C728BC84A30E133DF
5BFC5CF31EC0CE6F75B5CBB4E810DEF0921A02B0D1E6068418F41A007E62F059
69BE76B9B45B043A1FCF2CFDCA9AFF9FBD0A09487138C3176DA0C04E0FDC543D
B3B02ECE4C75851E7951E39295F87BFEF314993EC66F7B9ED637163BDB11717F
E7401CD0BC8D5DD424FFE364428BDCD23FACAD7C42490546598B1382AA53EFAE
26EA9694E9A5273105F11543F8133C32AA1444A5B3718C3E9F981E76E8FF657D
7CCFD8957FA914BD46DD9D5448E85D01F41E5142CC0A7FAFC02A20E3972BE90D
F409488F510E909C721E24D014879A246E321EF659D0D19E4B1EF02FE45A4D65
C13DB9F96ABC40B5D1670A21D840EC9383FDE56C1874390660C14E283BE960E5
869A967516CE23138B98E6CFFE8187EBF064D5A975F6121234B3D8EF25A3CED4
9CBDE58480FD0C9E9EE33528A11713AFD9520F86CABFE102F0047B3476CFBC69
9206E2DF3B85F29E5096844429BD3B52AC6F491A24F2CBE99DAF861394ED682B
D914974E5A0227C679528C9D5BA28781C1FAD7BFC6F91230E8CF1CC32D55B845
8C47BCB678ED15459D627A9E65A1323BA915C106CE08A081632544650F926F91
B7B84E228C4D5C918F2CA4FB1CB68EF960D01A54E1B71BDADAA74B4068077057
43A7238461042289D8B3E729DCE5D211CB05EB43C89247F1D581B8DCB886F94D
51A32B031775B8A30ABFFD3215A143AB621FC07C3319391C9C0F1501308E8F83
2434FA4DC081442B2266D1431C46F8AAA08B1B0BB86F9EFCCB15098FB08FFECF
AE27F49E6F0A52ACEFBCAC72D73E65169DAAAA9793D0DBD102AA25E4E52E43B3
7906E1C4AE758DC8D7971744DA02FCBAFD56A6415D83334B829C83B3C93EE951
5E9C5CB3943B9D00568942AB2D85E122417E23C75A6D6066D0E23D2D1460913E
0D24AF79501D4AAF1117D4ADA03CB2AFBE30987B1019DC080F678B7E5B378976
945E19A05B5F0D10B9A47787806F9F69D5E10CD7116FB2DED29C9DE80276197A
7689D0A96C89713212EB83AC5AF8C3254846AA18D71F3C765A794E87E45FE582
9CE4C2A656A6F430781CC5BF9739264A8EE1265DCF82C186862D7EEF9F827F1C
C5E65B515BB9489CD0A12E2586EE2B0E9DEB3BA8B06F7C69451728CF35A18622
F2C49FF5532684FB8D0F4A7136879F0FAB0930956AAD16BC525B3593073BCBBB
984CCFFF49945CB5D1BFC428DEE9963A4596FB29631B6F7391BCA4E76473F2C6
977BF5D17D8D207E603304077B139B56D46FB9A4B093EC160157567F48B332D4
210E053D217057104EB02036FA8CC986D7996F5D37EF78BEFE17C2D518B07469
F871F979B0CF6DB13144BEAC7E130204CBD6CA04405C9B2A8903B0D202AD890E
700B9A05BC2F952CB05DA5AF20B551159F13B93D9B5C2B043960AD99B695828E
511EA649164E976E6A2DE3580643C2EF4D6A55B5AFA1C37B10E3BE7615C82FC3
000FED17EA056D12DAC64379EE629C95B1BB7AD6469E23050DF6CA1D73E538EB
6D4F48B113C0CE23DD088D7E03E597EC53A2322930BC6BD6C485107FC37F18B4
6D7857FB335448C16C3980A769A82393EC5E3A2EAB2BD07F3F3D64DEFADC5012
622D1797A899AFC90120FD7ED73DB24C8042A5253510208B4B0D7DF6B36367AF
A422BAA634B6D413CBC814AF034D8886E146E74BEAC062F8FE26A02632ECDFD0
BF9A65FACC14BB93939B5B9E26AC8899CD0DD0341352CFE0239C788889DBE2CB
072755973D56FD5C1CC7E9B4F96AB94C3421F3E2F50D792A3EB9FB4E1533711C
07DD5A7B8E16DF4C14A43F3D6F9EB6965DE9588DBEB61C2463D9DC4791447D4F
0AA5585589CE492D8845A6B5B355E95EAFD6989386C7DF2A8EDD79C1FEDC28B0
BBC0CE198A3DC7471C53D6A0C8B0A6894A97EA26FE5F9C284C70B3887782B21F
6154B5B458D75D286477D04EBE5DB44B15C7AD6CD21FA920846A32154D39C713
1555AF7A866B15C8914139C28D5D074B934B26ED59DEE755D0ADA383BC3E3DC3
5425E1512AB06A575FE7FD3162CF242FCA1ABD971F397BC945DA45C49E7382ED
C9D924BB09843A5E0713DA04D41802D11CD481B279A1AE06EF7E4366C62D27D2
91FA4F8FEC19BFECF91D6547AE0EE608A8C37BE31B8BF811D4DF910AAD34C379
47EE4C5B2F917370A117E46EAA5238DD087C88E82F822FCDC58A3796B0EB3186
0E74F649329E0C00E98009AC80EE6177D9E09E418B68CFC3CF6B78D38684C8D7
DBD0E603260A2770FE9A3C115262786E8C2698F87056EDD8C2AFF2FC1228C0FF
3458DD2256B631C83835BB72CEE456DF62E587D918BDC79A29F5708FE4EF0321
C0A911B7A4E8041B1A13FD266EBCB354B51AE29FFC41FA65EF7C6391CFF3DEC0
CBF1361C05E59443622A96522575D8D86FCEAB44FE0209FBAFCC9140BA35FFB8
0AB48B6BF3DC2DF69EE874DF3C2D2533C418922CA15F914C576203DD8A41EE4E
56E83A8A0CE8DE1F408884FE98C1383EDD312FCBD763B0796B52B9CE34558558
65BCF312236EC000852A744AADC8BA2C0BDB7674A2CCC9D63F56A6398BE03DDD
1BDACB1A00B9E29FC47A0F57EC4E54E98B4ADD86BF5F81BA215107AF7F4880B5
39B756E12586737F89666B3EA353C166CD05D5AB7DC23CF5B04072FFD31EBB90
DF8B929E806E915065A8E9FB50C6CB420E62D9192A5B54C9093CC65A6BEF4AA6
44B698DB9E6748CBD7600BA4271A835770DB51CEEC9B5491969EB5069A147DA4
A0A66EB88EEA855072A39AAE37C11C32B06D9506BCB1058955B9A28E26D5534C
BBF2E5452BE224886AB603F5D2BC28692E499E4C747AF16C90083BB6498C9487
6F3D6CA88C01ADA276BC559B29CC1D1E472DAEFAAF1CDC157D38BC252DD95583
6D500449949A1BEC88F39F16184683DF42FF420578683EAF5A46316135476B45
A3385300581E9A53DB27E255CF50A21B05052E44F5FAA181DAC881136499BD48
665272E51BEC44D260EE0BDABB0B95FFA8917D4C03EE9FF98551BBE9A1C7D764
E1AE3356B5177ACB34697431303BCD422C867DCB59CEC6F0057724E5877D0D5F
26D7F722E53653DC9F6509B2DA2B0E6E8C5362593190A801E17C57BDC3F57A4D
75393F0FFACD524211AD714EFC5E2A81C650FE0F11156B214DEA1ACA0EE4BE7E
DC04ECBCC1A8989A149427959E245C5878B938FB2BDD29FB35AB6BDCBA75B0BA
1EA386DD7358DA57F5B4DADD4137DC07A40B59473CE3F788BB698DDD4A5EBE82
7B7F1DF5915A8E1E458475C5BAE6206F3666FD9117F33B7B8D8085AC32D294BB
94EB4B81995669955B8FBA239C82BFF9F8EA68A35441FE11FE02BD3682B4B8BB
F447917EBEA19734567D96E577D15DAA7F09F9AA322299351044D260AABFD8BF
208488BF33E2350CE6FDD0E66E06F048096810CE1E8B3882D5707E129C78868B
5680286A3790918A41BD9DDB692B805B933FA51FB1D149BF7186DB8E6971E724
230645AB79DE328522A26C4F1EF4E67E206E11C0126DE1CEA6799CD238FEEF56
37BDCD09552411048A5B0D022B82B7A16DC539B976C05B5B9A1C219D632017D1
ACD206A4D836A170426598A94849C298801277F89D3E87CF798CEAD8D9B243A5
E57DF0560D4E83572F551C7B04BAEB865998F356F4FE1D79BFA88BF4A4338A55
AF91D1015C042CD9ABCA84B5684C55351DABFB171643BF26B853F8F9452C06E6
A2A1AD5A6C64CD5AB47623CF20456E33D416DA1D47B4C78A3BA19BE4A269F1A9
D317D92AC26733FEFC08E384163D95219A80AE82B94AAF3A27CD8EC7A2FFA583
B96D3EDF419BEA000E9441F73915915DCC261EC48981C6269EC7B009B21771F4
BF37C82F6E76A2C0631A63D75CA355E896D348A55CB1748925E40C5D2CAD4DF4
B6A8E97E9842A1DE39B47575918A0B2E711192A3124C930364C14155177857A2
49DDFBE714542FA7431A16479A3DDB388883F0627C637787716A077792E8CC26
0D24DA3C67F37C2F4A045A38F882AAE41482313E88AC303C20366BE1A7D47EFD
2E884EAACF18F03A82618FFFFF95085F2DBAD869EA1278BCDB94B752205C0E79
B8893C8AA1969A140D1E1ED2374909D3F8628F1B291FC35B85400A3E7CC0022E
7B5FAEC22154BA4069028B79083592867F77914B91237E2C6ED461D5DF59EC46
E6CC1C8C11F2E5EA0575229960D7634A75A9A7E3D540BA20381C60153828CAB7
59303DC99A1B8CC90F02DAC754AA266C6C87917E5BDFB16CA84290E01C6BD41E
BE72DD3B8D22650BFBE0DA268A7663AE038D0D8E9FF6382D0BB84E6EB407EC9C
AC512B4D8B9BF0211F66CB1FDE75D1F16898A76C52B670599FE5BB0BE07AE4DC
9231F7CFB137BA4D607D6D95D6EE750116A064FF340AC1A25CA879EB2E61E47D
13173C30D95C56CC89F061837BD5928A53402BB822C2F34232608D80A6D4930C
CA713625621E1AF4004B8FEE36A7B20560EE2374D2A10B409C1D92832CE38BBB
EDBC7274D23170EDB4F435A68B11A32D98B3CF09ED00D9B4DB94B8F49861ADD4
BD5EFEB0680B29E0DD73B373934793299DF62ACFCE8136C8EDB1E350AFE044D8
F5C003FFF94325A682B4CA11B9CEFEE5E1196599A813D650928E20870C9A57A2
011F0F8052882FDE4F5AF4B7EECE1C4D6E45C7C6DF9D1EC6BDB38864E6D31B1E
BBE3ADB11383D30D8B2CFAC23E389F578791E73B005BDA819DED07A8118D0809
D7C85E6DA400EB92C1FFE0885B44F054B6E02AFA1A177563B6D9940C95D80959
4101C91FCFE3C7B1DEBDDCBFC864B113995D945A52DE9300110809803A5DFB01
1E575595FBFBB79B5DC065972DF125F97E5C071848C7328C412C8124CB1DCFC7
97F4F5A59D5E518C47D82764D59DA3A1F45DA9943ECCE1214935DD25AD19856A
131432FEB967885CB01FDEC6AD36CB4F789512473C649EC814E2F77C9FAA685A
184271C13AD34A6E9FF7BE9971CBA0815FA4383DCBE87D61276BD84C5D2F15DB
2D6D684B4A603B8B41A93DB68C2A2A15C62E6C28728E5D8F978E0629F0847EE6
E2D058DDD67C51597F9C40A5CBA3BDB8B4F5F4ED2E00609711F52A37F0EB16A8
15DC623C89D971C33930C4E777A30ED35CFEE41D6211CC894CBD79865524E752
676F8D459CB7B65F7F7833A54B03E04F7DE1907F587973C16E33947C9980D4FF
F7C575114E6DDBDC06E257131FB92EE4C2E9969F56432AABC2E8694ACF5FB9BE
C3E88334406B2AB3BE7D9DB1969AC89E3CD08828C27E81AF897217FF1DCC559A
71812ADDA4E342C2BBEE7187C6DF173F43ECF2451B74B914754814BA45FA48C0
DA4AB86775DCB6867A9EED1F59025F12BFA6BF26C82A7AC74A2DA373578CB822
73E8FEBDABFE0043236A43BE9B694324D7F3DF67839B5FF6AD6886BCEDBC7243
518E22B8A12F47EDC6578CC3B006963428F2F0BDF28305F4B885DF766BD7E757
6479277F1CF086AC3E99C9EFC93883317C5B9BB4EFC9AEDB51FB6DB904E58392
87927488797C05E6F7AE27D65DA9B8D1F05387E9695084C86D2B5B0E2B0BEA99
CA5A774C1D59924849BE60D87FFB7AF9EEE28CFD381F7F91CFCE86DC3C772F11
EB2D078CD6CF13D6A1F9C6A9ECCC6807C31476A77CBB3D49D46921D8C5384911
F05836F45939BD48B9AA4FAFB2B1AB82E984E6C40E7C6D18EF21279D5E8A2983
ED306C96FF91F7CFD7B7C2C74DF084F45A02B293B411D836EF46FA2E283612FB
33264E4E7A5E6C69920FE3A2B241A4C79ADF26FFFD9E32D8262D3EFD94F1F215
BBE8E8F323B87A9ED1ABB174BD51C09487E21D71344CB02C1A5B0B5C604C0DE5
A99C23986689A0F0111AE0A106E4D61DBE6EF7EE409FD9020CA0DDCF7508F4FD
79A91F530A0380607E859B9169B9471FFE9509B54D10DF700AE30D6C43DADB44
2C37F64C781651E0B93648B2324BA9FC9442807F800957FC7837F5DA2C1BF177
D44F2DB11E87066F7161A5CF5B57E888D31FB72E2F62010EF217C5F2E64A9787
E63614AE8D1B6EC1D557BEE96F3B674948B90946B3507A28F53E19E55098C512
83B65451F3B35EDA4B318FA8F4DEF096E1FBEDF983492DA1F491FE969F345F6B
98B0D70C07B14112C2454225794F211BBBD5A7B2C17344891256D721114BEFF7
74DCE192FEE8B67DEED9369E19B00B456223027E805879E7775B01E8B54EAA7E
4BCE1BAB18E96A485A29EC31C7B37D8B8F1F64DCF22A2E90991956D71D1B306F
85FCA5FE9A6FFB2A4490A038D20AA921C54C2419B38B4788FC95E17656F3E248
05795E8ADF9F45A8D2D9B54860E16ACFB0771DA2E982F03F56C9A2CAEFAD90C5
BD34C7904351A1C7FC0FE55777560949FCC9AFEE3532CD3875BA907B177ED2DD
ABCD88022FBE914949B114B9285AD88818C3E2D3A52919588BD1658294015EC7
6A0703F9EAD88C510E7D36BBAB0947152D874E08011042A4C5A1F142EF25A436
F2DDDCD02122B40A1A2DE0909762F8F93E57C51DCF8AB8E1B0EDB6CA4A080906
1DC2CBDBB5CAF9C7FE6BF513D9810F506354144F98E0FE67482E7E2542AA4240
BF7022169AF5E324F654985D80C118690C6A3C3B58219922B3EB2BA11A269B13
71FBD8EE07195066332C020BA89EA87E106145A16431C85A6BD3D683E67DF4DA
AA8A33DE2722490D54015FA7DCC3A679DF7D29AAEFEA49667C1E0E88A17198AD
2F2F3941DFB0B28B0F4458D09A15382967944C2BC8E108E7DED7BD2241E84160
5A326917AF95CB5AB18ACDB9596284002FC5AA613CE433E30739EDF895D3C004
6E05730C345B9B37ABE98302BABDDDBB501B7E42A1AF35A250324EEE2B5D5302
4BF206FF2CE077C34597C7FAE776656FE3A7D62A7FF58D562F3A92DD0BE110A2
F36F1E0150D4697A70FABDC299D33E29B5B94EB424C4DAB191E0E27195C8C808
A55DB41BE0C09AEE5B491DE6E74D3F0B1B53E988622AC63A0B88AD1513F4D419
FE6281BF45D300AD3C94AEC244845D6F80657A421D581F75A269E77D5EB93F3B
C8192101E7A97972C2FEEB422B0752D47DBDC0E02618D05AD6498E4DDE9C35D2
A979BE99A949984B942A373348741758E6CEBAC7A701A52499A7023B2DA17CEC
FEFF1AF8BA6ECEFD33FC872E17BBDAFA542036F1E372A4B05F93D4C0228E3EBD
618103E8C5FB59C15A7BC5B35DDDCECC13BAEBA1E9DB8B7934198A718062C641
0EF067782DC79FE28FB5C54EDF8A4CEC8FCE5C9D53322729B337DAFDD7031994
2124D8C7C624B0CEB0DDE7D5B94233461140ED2A2FC215502748360966F8AB7A
C8C8FAAC068B9988262188425D7806775A12F48AA55DD6ED989C5B9C3C619106
9875F602057B1E39C123A5225283FB0E2C9708FE81328417DF9E89709AD6DDD7
B1CB8CFCCE280B327F5CEB80B9760B5163A950AB3C3723CC1B78BFA3B1DE61AB
80465DA6A7266F31C952EA5D79F573B8C7D70C09370298E7C3B4AE694785E1ED
325AAA56EA7D37688DF654A2A28360375D2EEC970959489C3B1D21ED4A77C08E
39D9D2CB56EC8C0886023155FBCE60E4B443CED230130A2573236B0C28BD1E92
DB3D9473F02F30FD701682D3D962A0AEAA22CCC5B56402316D7659F779E658F4
339B20C1CAF45D21DF35C6248AA98C5FD164DB66F1B20A9B0BD175C8AEFC14EE
D6E31F62181DE6B711AB4281B752AB1AA011BF22B382D1FC5DACD69A9374458A
9A261D52BB791103CE813DAB4499FD0444751E20131AC5BA4FC65116DDA56C0E
F2CB4107B237881A84653AB9B338A59188FCFD97401D91BC6AA07FFC96CB1487
A9A23BECED2E1D1B347817A0BDD1E27AABF922D9D64CF2B77AEA5227267E1EE5
8A8B94C970342F7C7E3675721CDD45CD1D9D8312FE8055E6E4E3902A6C3B8DFF
7A65E6098E3C7495EF5D4BC2ACE1A5833BEE6EFB033E94C143076DA92D274AD5
F8F9C9C7519A5169EDA8DC1A88E982DD01587BFB23D1D68D9AB2B558A8128B5B
0BEED9D490A6355B87A3DD96219B3EF16C9F6A410BEF116A1CBB3CE8BD6F225D
C83CC5375C973A8AF6739D8A0079B486685ADB2BB7419CBD614114D950300C18
BDAFDE97BFB61973D79AD1E52F5042BE9DBA57E463EC6F0FDF95D23070AA3573
297D1B8ADEF70558C748EA188E8FCF2F0941BC6DE9371825C0E6DFFC4699CDE5
11EAC04F8483A28F0DC7CE855B38E731C5B3E4D5B852C9858E639D821CB6C8DA
597E2923D832198C4F33F8BA5FB0509564E315AC3F11C563A0B3C8B5EBB09DE5
1457C4994C8EBF6F33CD5BA1E7FBF38E4FB95BE558C71AF2ACE3884BC02A8E7C
7DDA886D1A87A890E62EC23B7520B617C3C493F6AC9FDA04D47C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 50 /element put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D452804B3142DCDCAB22773DE75726823F1BB198
1C1CA8D89B59FF008B054F0322A543DBCCABA518AB9945020DF8C049A6E112C5
3F67BB74E95B7EB282BEF7147FACBCC86841F2CC8F4DF57A438014B5902A553B
4C8BB4E69641668E1D925BA751A81B2C857CA281C017575F3F890023FB3950FF
8417936D0441ED8EB9BFFC0117C54C3AE4F34BB54875B5A236C0419BE1C51F5B
B598A28934E054B75660306717CDAEF6D6F5AE490C9C6A40DFCC74ABDB648432
11C7D6132FBB944198899410FA84DA717F74F19F892AFA8E115869194DEDD58A
0756CB50BE31017C2E585E496643FE2741507D19E8BCE0327CDC2E574BCE51AB
8FE230B17F6F6959DDFF5E2FA14DE09B4822E904B520CB3268305DA9DD521690
9C0C1D94E1B8D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DF4743FAE6668B61F72C8700992755522AB11C765981A9BEE0D040039D
6C2D64ABED527082C97CA606127AF5C0C98647BF46AB8149F215BB0F1087E62E
740D8676CE8A486096DFA164A37E97EE630B2A16FF4BCF31B9A630D93C278ED7
6D6003D463C33B8AB5E8BFB9777F0B3D3243D650AC5641B91082A85801F907A1
54CDCD22CDDFA0F5E255F1F7E04A621013F0F3841D824897E67DFC2F5AE51C4D
36411D26424AA9702018C26AE65120CE396C9B001DBE259A3638455C3F4949F2
BB23F04E53097AC814F9DD04F0F26BE3F8C2118311C916D2FD21628BBC018A31
021BC222B518F904ABE96333EB8A033D13E80033452B2F7C8F400CE65F0EAB91
81EF6447CEE4BB024AC35075D24EF62ED3E393401BA04C01CA115E0231AB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E702C6D29A39C16F7C66E0B2E15DCD2FC36A606C0EC22D1790CFDE6DA7CD418D
D85039E733793041E83EF250DD499477E7AB494E1AA44CC705A5FD535F05B261
2654089FB093C25C18720E3E3C72B00FE7E88EB45B3939415E3709B1E7508787
8B5E21214B74B124B5FE36BC5D810EBE149520CC13156B025DF2E518AA39C1C7
EE84AB0158FB4208CCAA455C3CF06981708E619B5116A10310B9B180DC2074E4
4FFAE3CA1C359295C7D2967195AFD2D94BADCE1E930304DAE34AD74C4F6EE4D8
8F814913C32C56CEEA4630B71E25E517C60BC448891030BAE0D3B1DF3067DEA7
F016221CB34AA4EB20552294F3AEAF6C9C22A817DE43146AE4E04FA79AA91C81
4B18ABD2C5597A11EC057BAEA084D203E197CD50146460DE396AC95850D198A6
6AD2991F011A878BC86753A989AA0B5800E4BE6B9E623761D24C0B7CB02DD90D
C8A2CBBEBFA8F587E6BBC957E31B764127ECC5CD4D1718F1294B62960C845C5A
2B81ECB5A523CB2915A925B1655FC301C72BE097018749375D92AA335837AE28
6EC255135C878B06D9774D944B8F077BFD9BDC2EB03C158F0B4D165480511171
EF9A30D87414ABA2676B03B3060A57AFC433A6E5D42CAB2CD2AB08BA4AE24FEF
2B67CD6C3EBB1C0E4AA0EA12349BEC2C0217289E81B36EEC9DE76321F3DF1B8D
279AD66877E0B05E0220FB8FDE96E8F11832AC295BB1D4ECD9FE817B07AA754B
523AB4F643BFDF588DF93B6925100D074E11C6D288042023656B73B1A1EC29E2
AC3B8B7A0430AEF9BF9DFCBAD0ACFF0F2E068EA70ED2D5CCB9AF9913BBC020A4
106A166B1B624A52ADE7D5B869078828BDF7EF38AF941D66D70C0675919F26D6
96F2A5A3DB8176F9C326B13607C4D2AD083467DFCE3EF958899D7EF260262689
66CD70F84D4CBC3149C444D2BFC6FFFC568810EE75CC001A8D44DF11AC914012
F66C731225B9420BF545DCF033EADDB8887D3DB2F8F5FC91792B97B32ADF930A
9FF05FE9FD570C5289218D585E471C9C3EC14CC670EE8D563CC659E4FEEDA0BD
B6997BCC7ADB0EBA902B2DE3CC959848E590C2EF04663CF953FBDFF9AB4F899A
017252FF9FCD56D1D594EB3808A7B14898276C07D73A209D539A899B48A1D1CB
242260694BC641C156B1C24A28E6C7C8AF7CF499E0121C9A7BA34B7277EE5FA0
09A0EE3D603BEA4173B001B902BD9176D2E877C9D1425DFFDE0AC72699CD940F
9615117E9F357456B934B287967B59BAD929E3E3E5254E82C1AB4000C80CAB2A
D7ACDF2DFE8BB6FEA60D3DA8BBEAB72B6FADD3429C5277D6A0D6E7C35AF7BF31
F66800947CFF7B757C512C8213DC79F8C7F9BB77FEFB9900553A2D6FD8CDE188
3016A9BE748675E49087CE084C9F61D451D10743B05264B21C4EAFC20D922600
78CAFB6412F3EC8A1DEB9844FABE985F922A5773D351FA2E39A58EA63476B41A
D739D0507F13D6DF421D7AF93EE9C1F377CC7CFBCCE5B52441257B033124C9DD
FEC7033B87072A685EE22861B67588DE228EA69D91D022C7E0E5C88120C65424
A3212813EE5D8D68525F0078CB2365966C16C454394D33268483F51AB72E2BE3
3A1E3BF371B38909245FA0ECCB6C795BDD3647F28248DD978A1D3ECDBFA1576F
8384187FE64F721FA5ED7799B6A8820363C2CD099B646700958F17D09D8B688B
91B361F18175AE9D6821CD2829B137E89D558B30420E11C7018ACF7D2144738C
C225D579ABD3983FAE9AFD409769615C6EB3831281315C320743716F18311BF4
CCD8CC855FE2D06B5637A5D57B736E5AF11AB60C6B0C1DAA2CD8F438269A4631
60CA7699963C86983D37857E3F8BFB20DEBBCA745F67266B06B756BACEB5FC1C
6BC9C62021B1BC6975D0E4A77FDD7759D75FAD89A3B7E4D087DD8D4752BC2CEC
10ADB146B1ED006120E338EB63B70FFA46FBDB6B5F9F6915C8E41583A2FB7E64
7DE77DEDF8B93863E573A804B9D9BA3BFCED91454C11149D6A4002AA077A403D
93110150F7AB3BD3EA4AF587AECDA5EAD06CDE91DCFC11A6128164CCAB79302B
8622AC1FA005E225E6F6B051258907CD5DEF6CAB1F8672547EBD1808F7761D5C
9F537DB2BA094947FFFC60D3A24BE00AE4F5B2F2DE66594A904BA91E88DFD83B
9CF9A63BD6C7BB7BED32EB6E612F8243A3D089566963F993EC736EB3BD339173
4CDCA6778F1AF475F6A83473DD34D90CDC65D6C2E025386B8E8B7BD6807A9A0D
FA363E9DF1F1D2E671A4DEBD7311703B599F974E8B7DC32F79CBBE1E5A6BF035
7D5B7F4D868E2D7AF49D23F8DA5DD409BCA5BA5CD21AD3A9910A258B0F0D7F45
18C406FE77ADC15F24827696E1ABD275976A866B944194514145E88C2674CC4A
458C4729575BEF850CFC7DC82F8260A26AC549C7AEDD054459E6E04BF39E2F0C
7C5D5B06BEDA99909DCCBEC9D67B54CC5950350A1ABC0AE357DA0816B94F64B5
356158F35F293EC72263A0B834986639B1D20BA03684CA3A633128D8DF8A5198
0292DA6DA175F22B7E01FB0EF9ECFCE485103FA13D56C02F6ADB85718CD65046
0F6C9EF7EFD90495BC3308CF657CB97D598002D6E28D599D9743A032F94D5FDC
318D65CE629F9D4C0F28A95A2FBE86446AB593E48845C728D0B8172AE522DEF2
C5C325F3E3B8E6CEF311571547F4775233BB3AC59B3AA4A3725FA8C06D70AA3E
1B3A0FF5CAD9C8E52ACA2CC620C713FD892444794F47D2F6912FEC659CA784F0
03DD6AD13246C09549A459FD2DCA71821DF4385DC77443AD8C529F43FC6CEB6F
70C5DCD83011EB21E371AA68A7B7C26E69FC7987E3727E5E51236644804C967B
459D84E99F0D905B2DB31420EFE4AA18D41A7BA4D7CB5E515F090A626AEEA011
30112B7CB56C8ACD822A637C002CF80FBC9F812332A937B4052762946E6D17E7
2D2EE29AEFB98CD3F8CE634564227DD496AACA400E611BEE0A82262352932696
7AE292522715E0AF8F87D5F1F44A7EA1AF39FEC22C1A9338EAD8E2BDB8643B8E
5D01505813DCAD7FCEF0C5C2A9EDF1CBA481F3A52479CE9174EA27F20DEBC4F8
E80A54D110F5A9AC22E0887447D14F23A4F7AB5D2C404289F4E8150C690E9EA0
CBED58470C11FA872BACEA5571FE8A2E7F4EA3C7322DB9927591A50E9AB7111D
331E18F8E572B8EEB9628FC5CA30279DB0B374B85F640E202780EC0B3A92B7DE
613523F60833F492517D02AC06B81324F751A00B06BF56474DA8B7B427FF288D
965CFDFA933131521065ED7C8DCF32458AD1F2EC9E00EAD431E0FCA3D6ED35C0
364F98AC3E9A80F6D7BFE3F43DB5FDE01332511E2715E44F8817E6A04BA846BD
67434D64A2D7B24F09528EC96434E70AFF4310C6B416CB648771FAB5ED30D2ED
A090514576B421CA7D5B1D755643955353E561A8388DBB3B8A0250421ADFEB3A
89E77E700B9E1426255EC7FA4D85DB89CC1C58F2FCC46B8A2437533589633701
FC8813AAF6482436C15E6818648C1B51A90C91E9891DFB9FA3EBC0E4C55EA3CA
E4FF448C24DBF13E47348AF5AB8315927E0B6999FBD2ECE790F845711918C79D
AA0E9C706A9D48108979ADBAB74DF4FC0A490BAD7E65FA727980286463EEA6C5
ECE122843AAF4B6D9A258BEF94BCEB9767C94ADA36B3C5DA5D55E1B83A58E840
5EEE719FAE89F5E26E3777D7BD1F0A45763535EFE9BCB1FB82F44ABF4C3D228D
E56B246C6B1196A5AF400BAFA7A401BB4B57D6716F74552CCA485DDA5F62694B
213A385573FBBC8D7CB14201DF1E81D978ABDB0C5FE832CE0882E1FE371C7D0E
33E5D36021A298699C22A6D0DD41D7ADF7112DB70A51C6141091C6CD279D5040
B7D750186370B9F5390533AB31A2189D1D80058BBB747C1AE49794F8C6F99E70
88460156A8EA731FFE24051F7E9DC006BF4FE1EF9017EA3C567876FF6995D49E
0EF61B58FD1DFB385528CF909D9695395E2870CEFD986A0A7B3E444138FFCFF0
D9AF04D05FE32A9FA436084F8E340208E6C5566D56F981852FE47E14AE42E34A
917DD3A7BD689C4456F1ACBD1CA28364A13FCC59F79264DB81353FC68A770143
6588B3433C8016CD1912E74211411B0F1BC95DEC9C21B1D88FC62E8CAA59C5A7
83F73D8CF09F4D8C12989A675E86A1D2D663CFBB9F4271DEED3EA9F9C538798D
684EEE6C12F2AB7D4E2C0B0D7818FFBED7FD11695BC9F15BDCCF0D70F4C88052
23B3DCD13707DF32B7550D521940D69BE80C5A98337F0EF3F4AA16714E743F58
5A1DF2B5514D7AE3F710BA76159481FB3F2C30A8594D80124D0826FDFF3F4D8B
7BB7B6FF443D85E3B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AEA288B48E6A0693F75308FF5FF6D4704AA8FE5B223358DD415BA8A
C5F3427A5C26A5E116ABE29F2FB420E659B6C973FC0C06639826AD42417C0853
B11AD8AC3B02DCDDF09F78A9FCA629741BF7D0C2D1AABA32751AE8BFFF7E19D1
298AF207936C341299F1F33237F51AF6517D70DA17A956E95A5E509A923AD9A8
CA6882E41B7B81720692C0C1E5535F449A4015E77D7E7874546E510FA855B462
DB619CEEFCFBBD9C58F95EC5B23D00606B9B54C1A9A701106EDA16F806EB145D
CDB8C719FD1F08BFE2574B6DDD849D1195780D0963268EE128713FCFE62A650E
7DE11691AC39E376C0584DDB6573D0A19583746C276CBE01A3BCE7DD008231A5
E2D7D8C0DBA1A21270D5371C778EF28B8AB7D527467018996A06DBA25E94206D
1CF02A4376F7B349464105259D974CC21621515ED7B877B18E569BFF97723E3F
C1DE3CD89AF13E7F5F4F40564813DA3F942771D8FBC6B7B2C0EA600B2FCE8374
9317270A2080FC1C58098A1047F680D7E3D6EBE03C4633F6D933BD4F7E0DA41E
B242F97EF626992941DBB0791CD812A0117840DB1DCF6E22BE6B2707A96E47E6
26C8CB89CF5F7A75B7BEAB55637550CA0156DA5D294306A3CB1940DC8999DB19
CAEF754CF4812B4923CC481154D1215F3AE56CF370A6BBA611EF6638ACEF9C96
56FDAB1038910907176F22AF939FCA42276CA50C1ADB32E9D9A181035647C30D
A324C97633BEA474B90CDC6074C78BB5AE37956E437C350BF9961B6A74551418
BC88FA0C5EF772
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BD38ACC
4F2B176F782DABE3FF8C270633416DB2A3FACC4D1D421713135FD84718A13369
0E6269475B5E4B670FABF83F454E745574255A02CD28BA9E87AD4906113E333C
0DA452A3DA5FF5956B7894282537D369351F22856D2EF0908BBFB057587A78A2
7DD1FB51BB55A87A51DABC564EBA456E4744BCE41747DF2AFEDB4F26851A3D5C
3DA98A1B9980375B4E22434987E45FE528CD5F851D62B3591C05A9589D855012
D3F3D0D13EE0EEF871FD8A03C1705020D7381E42105A2A2224DDF9747D438970
B431C0BB2A965B7C111ACA3EAB3BD534E51258913D28B1E4187AECB612CFF041
C4F4F4942C1F0EFE883FE6FAACC6F652622FC03DE148DCF82B8E63E9359A5B11
5E46DCDC5A39509BC9E3F3C815F8199964C3FD719ECB74D639C0ED76689E15BA
0ACBD591A7AA75AB220F4AC889718848F55BFF2C2D5AF171212A848B43A4D6BB
ABEAA86840BA0492AC60E02692232371DF709E4D5A5E2BE68943ED567AB90E3B
09390F18345A9AA06A037781846BDE4B6CB3226E979DBBA18CC0A925E842C583
E5E66D4C5A57518EEF814955F58FF9C27214E2831ECBA1C6E9033E21E66104A8
3BC7905714C23F0848389298558FEEB4F78393191A1534B527401BBE3E8DBB5E
29A265FCF8B2D30A581B874E89DC4E5C7DAEA11FC318CA9861BFF6E74C23EA07
681C391F7CE0B8AD5C17F514B2F56EDF8E5E176D10E70FB60245683C7598990B
5288EBFA21BBC85A7C2AD5E0964EF7F2A3580DDE4F376D3F0D47759547F644E6
A6A4C6F578A70E297A73EEA926D14682C13267A0BBCD01C3AEEB13D2E3B86403
3110DD1572CE251998CD0CFD394F642654F712E93BAA78B4CC011D1BBA0ECC7E
E8DE8411BC5AA681EC8C6514A72AAA37C9C06E133407613AF58800443F32CCD5
FB469B376539D4D2498477C8242EEED8ACE087A01273C71907C59CFEE3C5642B
D52EF6186F103AF5A3DFB8861ED69DC71DEAB1921EDCF8E0536F0E0A766224EA
5D456CE9B31F63D8021C5DC8EB0AF422E9551CBDC764E59D9F6E3FC67BDE0294
90C31153E6E35F906356E3BA5536FD22AFDFDB89CE8EC855BA6CB968DD682DAC
EEA0E4DACA3ECE4B9CABC0FCAB9914BC9BA40BD8BFD50CF2E82560D9BC47E902
779A83264A4431884674A0347CD0969679B30C08E36C7131B484E46308C5D9F4
F76CF3D0943A1EB5FB5E32902209C11C50D814F5CF52E3FB1EA1379C3764AB1D
51BC79F5989026401145ADFAC72B7E1CC16861E237872E77748C865593B8017C
F871A10B59DC915429233706148979ABC45339AE2A60CC8E87DAE6F4EFBC54DB
DC4F85D44AEF5C98A4FCCDD53D8F768590168A53A9C02743A58E505C7C2470B4
17CF255F88B3EF7986468DA02DA2CF74AFF497618BBA0BB81F600555CD1A896A
3E69FC23C81515347A094B25F085347992F0B932BFB88B9FDA9A8BCFB4B44E44
259299A70CB104EF925650F6817660A979BEFD3BBB0E824A101D1CE223526109
6E73CE86FF9DBAB825EEF795DD08E10E5BD978A09B3A4CA9D4D06EAAD43B64C9
832BF5FD6C097D80179D2EFD2936C1B63D2DD37CCC60D6824FB3D9AC601F550D
88470FD1FAB33291878DDC748991BE92E4F23B2D0BE413CEED24E591E3585874
F70E72C8E325B59FF2E620F47E52BF2EC7FFFD4E4E4A20BD19276C9E536DE56F
6D3C578E8190DE5756330C24635D6C0389469227839BE7ED239D5A6797D7EE64
43E04D616815B4A975A08A9EFC41C94A9EC8CB37D718E34C0A571BEC251CE187
D5FA30968238CADDE6639ABFAC975D0AAADC2FA9ECE0C669C03B88C002ECDDA6
D3E10FFB63DDAE8346CD6EA2B199DC21FCD461CEECA106FFADFC82AD0292874D
9A773A493AC6D7E603D54C4AA1702D6DB77D6EAFC562C2CE69C4FC8B2C757815
B18C709972165913CD1AB9F1CC61D0976928315266C0F5724566F3E762FFDD44
0D8A2A654E8F6F609232C728129D8B1123D57A890E205115D37978C4E030DBAA
42C65894BEB58046B83D590B463BCE009A5805F771310687820B3366DEF81DFA
162A4DD9C8CF303070332D3DDDE4C116B0E92B66D5BBFE8C893CE42D784528D6
8CB2D730293FEE916CDF1901B53445CC26B3E501CB5D764A23B184F904567EF7
26D514A38BC01864354D583641111682F39449AAE476588E9E8D6DED1008C957
3009A0848C8843A60DC1DA146D0308A66EEDADD188B1C9AF1BF5935D7EBD9442
1B6CF295EDEDF1C80CBB6EE89537D7CCB0A2565DDE48A32EFEB078DDDF15FDD7
DE61DDA50A55F4FD8DBF4C8245915F66E6F7D76F49049B6A79670C7D913739CE
8CCDD874FC123C78A84B7CDC3C2F1C7B661118B36A29E28F5EBAD95ECDB46CFD
354BEAF487DC9322CEC536921C36397A2A2D4E0C47A16689BCB24C21DCC84EB9
46AB47F72A74D6CFADC31662D75760978AE0D5CCE8C85FDC64BFD62B0F62BC2E
8025EFB02CFCA3BD3EAB3F9B1E1CDA3283C0424B11FD8E1AB73186F982EBC388
DBE2988C00C40D3028044886D2FB9651BDD4383C30B0554E57ECC900227AEB6D
B5A87EF6A9FC7FBC2D9DAE3839D7830EDDA635611B705D61C428B0722AEBD18A
8297C4F5AC7D67178C57421B48500D1E37D3D606D94147F28C20CEB307B19678
E27393B963B930E9759D588765372BB0AB785A2DB297365B2C9B201C49B75C20
CA3DBF9397E0AFB7F8F252EC70527AE58A10B87B9136F37C0AFFDB80FFA13B59
611A5405E58B63E94CE1E36A85AA31C1BB7373BA98006C9DA3213EA46535D0DC
F53C2B0E21AA82D5F08B34C8F05A829DB662C70FD45D9ACC5DF8B4C9759F185C
3972FFB1A56D5EC318ED34DF8996D55CC0009E14367D3860BA1B6FDC0E50B54C
32176750C089131FEFC9D256061122F97C868450EF0D01D6CB090BCCDE6B6F17
3B59941B84A0F188387EA1B2105085D145175A79DABE52DCBDB06BA8BBA99AAC
E0B524CA6B3611F7BD528579071A6B8793903332E5A2805325F936BA4A46A0E6
19D723879545E24B979DB7A16E59C4BAE891B75FC22F4C691F9E8A3365F74ABA
555658AD5019A2A84D5740F601C573F4C1538800689BBE65EFA1FF1DA06BD97E
3952C4B0CC02B8FB57C500138FD047218E939807460B62F4744C5843B69E00A7
49712C404C3E6E1A750EF9E60E890CF427C18C141CBC5542840C27397CF20460
D4091161399539F5AC4A8CCE6E44A4AC7A720443AAE18C577538CBF7EB736A5D
EA95A929C2379AAAE6FA6A38ACF4C2500D5E50634A486B4EA96DE01F45E37768
09003E6D283D46BCD254F948F0DC2E13D4718D04ED9527242BDD771393F5DFDF
1ED421993F727ACDCFACECAD0B9F397B11A78532CF94A72E87269D1AEF796B4C
F9747867D1D8126A2D82B8420E1CD74754C23F0302382C61D87C901C926FB975
A26DFFFA9A8F43B31E330BE53C346B921F2D5D46BAE105507835239CD822890F
B0CD6052A4B15EB6E1CD670DB229D4DDD0E5EFB0F593E31EA559677A3C0E43DF
C7461FC719F4390767ABEEA1F8653C2ABAC86331A1A27AC24AADF1CDE71BCC60
DCB215787EAEEF5D023BB95949EE39E783623BA064FA41B6D3D2F4BFA13BE391
E92EC655F2AF4CB9B98A404BE2B515F1F3750B8A5E54090027618E020AC13725
0A1D330CC1752CCF6899FB2EA6BFB56EAF9A0B2DEBEF40364C8BE5ADA155445F
249B9E520CEEF7DAA850F5997E39E4AB83A0FDC9250EF1460C9E8A18339A1D79
93C92C9DCBD09075410F28A3A3102F6760237C1BA7CDDAE5E1B2CA6011229D5B
4BEB894DAC343737B9E9E6D3D60B985896BED9867B64738C273681D55E4FD05B
12C687B39B276E2BF158FFE415CEA91BFEFC9FD4BF8ACFF0E6AF4D8D22068CFD
4BB5D300D2CE49F5DCB6C591E015E6124FB32130624BA5851D6C6E6B1D1D1902
39EB67B5EA622C5BEEC735AFD8BF715E80C6C127C06BDEFD5725E05379DA8AF3
3E9B51C02074D6CFADC31662D75760978AE0D5CF7972C980C0C1DC9775C83BB0
334995C1569E8D75EAF532D90B411986A9B8EEB3F9B7A6E314CEF135200C4609
C02BF71E56683F9DF6714EDA57D5BA62EA9BDF6929B1C7914696CC5E9854F97D
EDC2A6E3431FA9FC4F56E2509F5FFE296C33D2F11263F252B16C0DCD38189870
AB14E5E31DC1784217AD8D3D383A3D91648E4D0C0D203C995E7B4F96ABB292D0
002D8F9D3C44EF68E4E09A0E25A86F96D936B7A7CB7CC584AC196F341FA45E46
9BFB27715DE1C595D904436BB8A83B98148C4CC88FF651AE208A96477E0B2851
89E45E5A5D1C6A823950B53AA7285727B0FACAB0BE9E426DD9C4D3F28A07FF88
4C989C5F4607CD3CE27994012842AC489105169DC23D3394DD2972008E79D1F3
E208CC50AECE75C62FCA59AEA7EA2DAF74678F6F31F41A5938C5AB9CA320BD30
EA9C76D10F54F4A8DD101911C412D933E9559C5E7E303FDA21F75491933A1C59
C2D96526A41CB145152B3A27B3C7BA0D8E256BA310F19C7710CEC3B58933C514
859212CCFFF5A79D1CFF7B651EE76589BD8E8BD13DE2B96A0B40AEACB373A455
31FCA6A3415BFB34610D1A4FE27CC292B4FB5440CD229F47B1BD06E56D56B158
6E4820CEE6F2C77BDBDF65731F185C38CF075358AFD573BDD19CA75A38253274
DA71D32384616393B2378622A7A5D1997ADA354F9E38FBE1ABAD591050BF6E2E
023372DD9D5E944A4B5023060F377820DA5A4709BFB348EFEC13DC6CD829EC27
C0DE748D594ADE9D5B8D92455CC5B3962B4FBFB2C9D6E038204382D99E026DE9
307561A0CB256F40D97260B6B7C0436E605DA8420AF13AF791BCD00514333A4F
D2950BC177A79A55EA0E3CA9A38242B083132F5CD08137512EB6A045B024B187
C45A711A346C5B78CAA3A93E78C0317D33197D106319DEB18F9EB41CAFB4E31B
4E6C689BB54227FD7BC1F83638740869AF1707FAE634F1F770E2089CCEEB45A5
23BEC12B758EB7287A4496727DF1C1BC2491DB5F06B0C6024DD93B600EF82E61
587E677981F6EB744D3FDDD905D1BAC701BB5462AAF8BDA883619E203D158FB5
18986D6A6B4022079F97149F1C2E3B2628BD9E215971758EE9ED90AA9BED4F94
E7500C6D682B4164A1150E03D3A9755B9041B83FCD9AB049F324F887732D21C4
BF9C536E0F334EBE2ADF2D9B79B93E84F2100092B4FDF4FAAE8BA4181A6EF2D2
CA5F50626F22176D37B0FC97237AEA8A9A0EDCF5B16D23A1E622D552BFC12C92
71BCC7992E51350F3A6A5F6BFC7B1A41B641BB1A506B03CA1C59CC3362364474
71F3CD34554B7A51DDC45A6F093CAC02EF741669117308DB418E6F3743C01C47
CFAFE2F8843674313C4E0BBB2E606151B37DB086DE5EBD43D5F8211C92ED934C
D6D83EFD62976E62327DA2F814077BACFF5104CE94A693DCD7FCA7EA73E1EBB3
1970B3725696CDE1CC45A2A57156568B7F0441914B37BE64662F0C91225BD1B2
6157D126CA958770255FB3367A6F59DC8AF87820BF2C07355D78E4D5B50C996F
1A54AD326C5C8AE1925C5A6241C5B93BCC2935CEDC8DFF584841E420EB974A67
1D66EB451B03401C60614D701AE41D3E11315D0D6503A368C1D120272E0D026B
7E87234F09C3FDBA12622A5EA875525D7ED993DF24CA8DF4E117DF1AC75EF70D
CC9FD9B1F3E105BBE0ECD405E2DF4995E836833B9534EE4F2DF880B9F2876AE8
152C09A3373BD32479CB4AB4598A6F8C14172D3760ED7D2C074997AE6C7CF5AE
DC98B4111935FAAF7A7DB810D55D6407E9E07608DB2C617787902E04E197043F
A76A29E5050C79442C1747473ED6C88DD764A07E9006CAC0099FF54B995885FC
AAA1827D87972D6ABEE8BF93A4F8DDC880F65BEABAE0BFFAA06F4E257FE8153A
BA668FAB4B2FF1E27963647A88D2401A80CE21E95BAA5AFA54450CB339B1085B
F92634D01B560D45388E67F0AE516B72E82AEFCCF5F182164ED346ABB0317969
E0A255A0C3770959E8329A028E9362F2224DDD73C0C61E31E05F07D5A401275D
AFF14ED5A8DA7D9A7FE1DE98AE6889CA1EC9EE16168584EF0662F262978756D2
6A0C59CD21A7157A42654C8F6A43B9B03E1ED2A26A63633B06BBE16C94D564B5
F148C8933DAF38098846BCB27C38F06A0282285E5F2B3F2D460067CEF74147F1
77E6367E0E76C30C3398B4923810E9C359CB930B493D16AAD65483DB7DEBB1ED
E3C79F8BC8FCE7EF94EF20C62543E2679175C1B865F6A61B4369FA6CBB0A2A53
1B78BB23D4D0C79699A55778B83FCBDA79DDC8FACF2BCCDD68DEAF24CE13EC86
71211A79CD00691409F50EEFA69A5A3E416FDA641FCFD2182564CBC6C00B141A
758934A724726611B500F78AC9F2BB3212FE6F8C7D4338E07BE7DCEFBEA1576C
0730EDB15F6F26B606A8E6FC5345FB9E3DA949129F0F2E60FA2F2D26946558B6
FCDE2FE1341025B4F3A2E3F156A7E6D8DCAA36A6F3AD360A8CC19D8C0186B286
AAC2CC7932F017D6ED3ECA172148C545B345B17C9E77BF875D7087C3804D8E48
0B6A70C4722E353B6201E1F9F1C406839083EEB0035C42B87A51DFABA0D85B7D
12C578C6FB7E0B6CC20680E1FC1892456E4DD49F62B2FE4D6C5BEC9A0A2E0ED3
534A334DA812F8A30ECC3C17A339F4D405B1025EEC50728984BF50DDA0B83CB6
45BFC27C3BD3D6F2267BB1550808AE2CFDC472739113E30AB286E1625B2B0549
65BD2205D65E82D81CE2A83171CF2BD29C23074544C5BBAEBC1B6C9B6FE0ACA9
C88F882E29F5F1EB3E8846D0EBACAFA882B9AC7E77DDDDE0D639D917D5C10B78
C4A3466D34DF751D7E9CE60BEBB8BD72F3CC50B9BF382CB9A089A7DD405CE805
0E8179EFBCFDA9A5BD49D9EE1FF44A49C4B603BC00F258F8A6D0BDF0755DFDF0
C13913B46CE7E02ACEF37737A7D7D6EF816AFA4869D539242C2CC6BFC9FD4254
7B2F83078A77AEAA234F730A1D2C95B1BAF2863A7FBAF66143E6FECDE716FBA2
DADCFAD237EBB2BCFF7125C0640844690C097AEFE2A3C0D3C12A76B86E0EB1BE
0E8F36F0693EF0FB94DD866A1701589D901AB237FA686A7ECB65F6EA1E9ECAE4
72DB89FA1008009DCFEBF20E222C4382F21C58697298D65C0DFE3D104403B4F4
69068B96F5C9CF7C65156F8D83C3D7E0C7F398B49BA39E7EA97B47B7DE08125A
0C60391D13C268E90DA8E48524A513FA04C776B1AFBF0CEABDB1AFC824E2B418
4572B40593A1A0EBF53C0205AD2E75FB0BB9F48441D89700FA1AAF4C1EBDD560
2BDC80E780E3B876EACEA91A5BC655FBCBEBA21E398F72BC4B85959D7C06EA4D
4E2BF509062926B55E7F75E7F8A3B4E0A78E0234EB24527A306A3E2B5F688940
7CFE3E242D32E730CECE906E4CB48B871567C0532631E971A700E715B765EEB1
EAE548BB00A49CA11F6D002514671FBE4498E3A882D4BBA1DFD8A1373B617E06
110F594E68E294F0CB38DB2EC294CA4BE214D2D5E3DDEF6F606499052925A929
42B5CF2B665C70C3F8E7E32DF51DE6795DFFE69A516ECCDB6C9B920DCE2381C0
46306800B754144C55246DFA433D772AF7572A42B4F49EBBE3D2F9B0ACB1F324
000D5520FDCD2D96F3E558197C9B8C231D506CD7D09EC95203CC7837155E1FB1
2AB6BE4D44A925E5C17C424AF6F8751B19B07B1AB806F715882AF1316CC32671
69C712DB35663B90EE6AD37F327E31D725F34B1A7A62AA18E9DCE7FABEC8830E
677A6914390FBF6311C5FE4243E6E41DA15C92AA33097B3C7B9818D3B7D3B6F6
4A4217EEF00DD31404605BE7AF7719079DB74E5543CB63168663D3532265F8D3
2B388E7334E4551F173982FC56E3F40CBD359232A0AE17F2BAEFCE229F903C60
869AB6FB70B09AD889D6387F5DF8FBA51E499C4650ECB62D8E2841D9E8A5B7B5
61FBBF414E5477033E41C71484767D47560F3B3905C62F967BF70890C6612BF7
608DD8EA2571CCD54FD108073392E31D2450B7B9CBF2CC3E833B7341E2EF2EE5
B0E394C5C86283EB4975F670F1AACD7FFA40D0192CDFA1107C410E94D28468A2
BFFB11C1B61C8FB7FD93925A77D5D5E74F1A2C0FD4C5EFF86E090C561CC02742
8E566C1C2FC4FCCD2FAF8CD0C0D4C9C43E861DD1E9C187418D16CA42529DF4D8
06AF65C8D239670EEBE0FA7711ABED29CD656846F76DE88A57DFD782CC5EA81D
0EECEFD187C1E9DACA88850C6BD0FE3775F385EFF887CF3C5187A2C92AAD8041
3729D821C03B9C38F5A5E7ACA8AC73D997C4827FBD6B2F3A498C1D8216BBA57C
400F062A9C827A3586A992C2FBB1D9A2EA800482A0863FE7F41DA9ADECFA259D
1ECE0553843086E8E06B6836A688BD4AD18D94622DD5DA5F0B4EAD08203A72A4
F7E29133F0C37FEF0D6EFD4033E3D93750ACE1111FA45A02A9406C948276D785
EC5E73A7DAEF59F579B32D6432CA4058BB3B12EF3C1DE6C11079E11622C758E8
782877E9589D9AAF82C4663F24465C5E1A0D41DF2815F189AF38C49D8E284BDC
65E571CAF6CD0F5B24F400933CEACD0E57EF5A7677B5D8923748B24D078D6859
C8BECDBDF31A1587E5B84978C588F15ED061169D1D02B7DBE1B514EAD5C8185D
B531B77D7533402E6F664EC44831F8AF16043469DC780BCA5096CC65DFC64D29
B8D53D24F9E6C13B32BED4E9298407DA8C72ECC65E49D8739CF9744D3AC324DE
1424D2420CA037ED6DFC78D15C9A1E4A481A602CFA294A7F3105836E406BACB9
C5B5CFB2EA123EDC5AD710AB3372255902DA4FB16F76AB234211A4214E15027C
36A85688257A0ACAEF3C6DB5E6A600D0DC4434ECF0BBC5F9CBABDB6E921C7527
B57ED21821F45AB5BE7635F2EE578A31823AC0707CAFE783452A7DD6FFB9ABDD
50966DE4CD0388C695E910BDCB0687C9FDBEC590EB6542AD6EC83CC42DCC2A4B
C7B69D7443D52DE6BC422D090457D83C808F318F4A59484B3924E8C4C56CA2E8
AA6C685D5594F53184FB2A6949A02C4E3600CBB3B2A925DDAC7BAA0CCFC12980
C2EA758668BFF884C6166714F6AFAA5A8301F62E72D03FF3863EC8FEE76891B6
C4DB377376C2E5B8AC751E38519F5EF4AAD6612EB2DC5C4B8A94F8A551D0AF1F
4AF71A1E8789DBFFBDFC734C4FE9AB1BD41BFD7640789C956FEB7A717E6BE00D
0632E1C42B5BE292F12B9E97F17B7BBD2635387137F29D0452F2FB6D5E08D7E5
BFEEA256D9DE87E23C22BD645EC0A0D871A620BA85A30BD858175183A8207349
5CA295BE6933B1441A82533E6FABC58B32E1124C3EBFBA68F44292B239C54180
6EEC49A6E2C413ECBB9A046AFF0837C3E1FD1ABF827FE884D9BECD91AB1E9E2B
61786C0DE81F21E52073633C7126AD50271D327A4DA1BCA9DF66CFAA3E3C9EF2
EDB492871CD668BA81243062773B8D621B236EF2A6E507D39E1395D05B79D9DA
069D78905629F5FDA3090669AAB659DEB9C7A4C75B961EA6742634457FB46017
70F3711455459CE2E1083115F0D7D2656B106857BA94D4AA70CEF72792979F18
8F76F0F229976065DC107D0AE7CF56269043610C7F68A82AF80DC576BDDA3663
F22FF707957C96CE51AB18099DC010BED9D23814BD30EB7641081E9CB0FBD24A
F33847BE161BBAEA7BCB4CE227D5E4521B172F7FF0B32AE7BF96A0A362B1A29B
3D1612CCAE572B540B3D0A896521219EC9B82748DCFDBE8CA71B8A651C05E6C5
A6D1ADC46D04D6178E19990298D2144C44451434FFC6B9AC8F7C23EABBFD7F1C
881EC9999731E298C36F2D71D4F4AFF84434A4409507C046E30548DE1276B0F2
BA201B69E7BE5E2C9FBB4907A532CBFDFB9FB919E3B3FF7FB909F51A032A7464
CB460F7E680681F171E0DBBBF9E07B66994CD7100460355385822D64823A8479
25921AFF53DD0593E5409D6261EF5051343DA41EF7DED7F3ECD16881092BB98C
F186D8241B5A21B8492B25C3E04E4B3197D00A69807F31630814F08C3650EFF7
6222C6C82FC542FAAF9EDD8DC306B3C07408C7AAE52BBA326940191B23A45650
1EDE77132DC2589783E90868AD56B5B49FF2314783390EC6AFC1092DBD97520F
9C2E4BB6CD58B85E9355B1CA091A4794FC4034C49A513385607DA9C643C351C9
8C1EC4A20763CE3826CA18400E0BF4A0FF9161E7627CF8FDCFC0DD2265160BEB
3504496CBAB8A7BF0B44548899EFC8727D2BB0787EC4A5E4124E46B412A7C21A
B713B352250728D36025E09907967FDB90C16C797A423C51C16C0F6BDFAB8547
48172F646953B9BBEF0E945DC7DC15C2099AF0806598A91102C161DDA50A55F4
FD8DBF4C824594ED91EF1007E502B073EBD44FB08AFB19894930D6A5A4A100BD
A398EE06E7044D5344DA99AAB6B8A1A9E2F905AA076DA15AF385E43AA9ECEEEE
52A7167973D48046DC78E4FDA5AC3415571A35BC9760DB77B0F15E901D4D0C54
576EA7559E6B6114267FC316FB38619D76198C318CC58AA6206E80EDC58D245B
0F682F24890DBCE037952AD69AF7357C7B8BF599743D2676A06243B24137C668
479CE24C1F8C3544E0C4724D95B3F43EC4797DEC388B2670558DCC656F54EF7A
0056FE4B96ACE0C1E04FCC0A33BD2FB99B76324255FEB8B4E235E3DCA09CDE93
BCDA24331DDF466D2B619F467BF8357B434AFA1C9E8AB2F64678EEC85103C9E2
FFE07A95A186B0560955D9885423DE1DF88E175C71E2719BC5F45DD97F5F6C03
15AF82742C86F76BE23B7E04196AC990715EE7F059D2A80F13B4C53D90EDC6C9
D0C2AD47B679838CD6D323F5E030A838BB8BF6BC66B370C7BFE81382E0C5F78E
6D99ECF7F38A31AA151879B7B6A9639EBDE5D7C7829E67DDA9A382634692FD21
2C69E54EEC1853CFB9D435CB9B059B60FDF0AC3B011E2216D813482171527FA9
8FBA13F1ADC6F3FE9CD2BC37824CC08A524AD933DF5B214BB42B6DD39C20CE46
CFA245CEA72E71AC6C4AFF3514C01DBBD3B6D426226198EFD9989D152E9A2D96
030C81324BD7462DA74326745D538D71CB310BBD2BFFC77F677800FD3C3A6D3F
D1BF868165FD962F10B49F1B1D08332141EBEA85F76A607797CD8596ADF934DB
B213EBFBD2F008C6E78925B0B431DE6884B0141FF7FA8740BAF12033DB976A55
583FDDE9B18DFC863F0A483B93A7A4CDA6D2BCCF6EC3072C6DC49A0A616ACDE9
0B4B72C4F2DDF20BB1BC3096BBF92809B287FD559DE76210B93F60CDC430DB8D
805A175BE0CDDDD8AE32B1AF8217C997D281DBB4C9CDA8CF01803D8541D7ABB6
E0A7DBC1269991295B712A9A9258B3B54C3D17917C7F785C02DF1275DF573E4A
831A73E0083658152AD806535CC136845E2F02EBD4C3B6EB4A1F64951B61206C
2FAE0BB4392A3BACDCBB2F74E04A36147CB94B6888D0B4122D313D0DB9562394
86A22788A21EA5EAC7876006E6C71C1F5FE888E503E5C391DEF8E61760E4CC4A
71CE34FB84E19134D0930547609A2CF40BCC511B0EE9FD5237A9D09CD2ED2B17
9135060E6B43DFB2B834F06C87398381ABF73F1DE408C2B7E68115D6A61AA95C
294319806D4C5759EEEF8F0EAB1690C585E00ACCEC9CD91126907261C429C9DD
BF3DE42F97DCA39EBDABA5F73D309F89091DF963BD6BFA6CF5E8CCDBAA13AACF
561F67527C7E4644BD269E4CA2A78A3890B2615D87EB3C2DBE90C79FE24F1ED8
7C1A8FB358F5D55533651D791F5D8485044E897E7872E31F12A3970976CEB7DD
B7F3626B3C60F7D0C9CBEFFDD23E7D4743E740DBB4C36227C1A5114AB1C38826
3F35657E527B69D1AF8978F1C697DDD8122A4AA070232873375A989DD0879DA8
DC28B930C55B85049A0B271B93EF7BF72E46B161E4E3D5B8421D2EA0B2B90B9B
8A38465533F2646A4AA2CF3BE42D85645C5D725C1EC2AAB62310D9D9A0B8D580
06A2A7E81C50F1CF9B2AB8DD28B065C22E160EB74339C799EA872C7B168158EE
CB308DEC5FCE160F630FD631160746001D5988A53C0483DEF88E7D5ACA12AA35
9886403C48ECC58B8597A6480FA20543B7485F99FCC05F487DB2339D25B9CA11
AA3169EE243EC6890E0AAAD7E22765D8A7ABD8120DF3DD6E366273C74148C1E8
613E99F27D9C937E3572CA2033CE401D668401C021C1549497932D98AADD0F5E
3BEE3259B8167A1F66CAA220DA9A6A7A1BC4B8F38B775579FF5F530091D95453
A1FA4D72DD5B3923F74878797958D13BBD84E121684933F69045F425B1060680
505B3B45685DC47BC99E09AF7E6C7ABCE9389BC7B4DDB6A513A9D9957C7C2583
D83754A06D57CA57B93DD8F89D3F849A9FC910E7728D8819BE4DF9C602A80BF9
C4885A3EDD1B17A8E6A9546C85EE79D111426CA19AABE1C1606DEFA1E8FA992E
9B547DC968E85BCA016BD8174B7F2F9EFBD2349A572B8D9C49904081F43D6DC2
CFAB9AFDF09C9D2581295BECA7ECA24D7C4ABCB03C2791F3A8045DC239D4F277
5A3ED893E679B394FFCBC3866DAF29AB6BEE7EE4627F41E21B6B86F75FE172D9
B6AC9EE9EBA5EE699975C7A2E84D1258EFC2385AAA2BECD6D87C8A89D49A6986
A70B5F4AC1F84AE523A10B01EBA34E1CE1CEF3D6AB82CD08458BF58A18B0D585
67E6498C1A4EB0344F50EED4242B5BAA76DCB89D9841E4C6CC7D8167EB706AA6
27430BA2856F73AB52A3B20DA236F7438574CFDD6ECD349071A7FE5F24160EC9
2B8790C289B8919A64A12C136DD07E5C73AFCB07F949E0FD3E25CE40A745ED62
A705604EFD0DBCAE1E17533F759ED5D802B04C0EAE0F92D49E46D9801B8A640D
409779314E30DDEE842B48B97A614929EE2787230BF41741C5DFDF20D60CC05C
2478175BF6B5FD497380A74C1E6ECC74F1B4C26190D1FAD81AA210A64FD7831E
10281F4DF8FF006813C8DA871E9284D863B02AC1A79413B45365019221108097
246B459352F82236D34C0000F2F31366D9C9EFD7676FEA0E275478C574D675B4
E9163D203C134B8B706E15EBA812C50D0C5BD2CFE09A32E3F2D84E5DC42B68B1
0C4A15DAB89D8BCB458C9DAA5E37C450949DFDC0CE121DDD79982864BDCA48C0
69C9F0A5B440198444E417AFE89580D6E9EF0C8686CE99B0F695B64BF0751EA0
648298FD36106F163A22836D454D9B36B6D210E2B4D775961390079896578D5E
BCA1A71604E69330CBB356EF5B5BFAE7EBD8BC0125E3465D477834A2B08A45C6
EA49A62469BBBBD14E5DBD9BE4669B3C3DBF9B0661B3A1D2DCF492B42B4AEAC1
47833716AE1A64082503DA2A81411320067CB0789CB14C82E7EFA02DC9266520
B52F46EC9E3A8A391F570610CDF45FE4188BF82663CA731F3585C9B36A75C824
156AD327481FFE21B11B3054F3C9BFCED9B4230B1A4D22EA367492DA80A20AFD
4331C7DDA6C887B2725D885B5316D92B8146D101D363C0E4E80AFF94448AC4FA
0BFEA6F68D0824A44842A5F815B8059EEF3A2AE0EFA4DE0BAA262A55B498994F
27FEB1D9FF9D93737DFE1DC582ABF78917CBF490067692B5BFDB64B9128DB457
27AD637C4D7584067CD36B77C32D2BBBF3A2DC2685E59E28C06E8B2F1DD7DF94
D7CC5AAD9D14395ED379BEA626FFA193D815752F6B56546D498832EF5F04CFBA
D0EC3673AE2E597FC6F6E0B3ED757240BD50608A8314368A21E37A36C1F64D37
A4245F13E1758587FEE102681216924A6CA81640BE7C3CC839B6E14230F617CB
C90BD491BA4343F35C76512C0C6E0149385365BA704D1A2CDC076CFB376F249B
CAAC5FC98B9747BAE7DD1DFE16483AABF7047B919FDDB888DB4F004587367A89
C976C606501B0FC537D3659E81D456D20A2CDE42BEFA656DE0AC23098A40BB12
A0F1443EB9E64B8171633E49E6D10B279E835C86E13DC26F082E557FFEBA7B7C
C2C6B75496D430B16CA5FF05553D591C3B528D02BCB51CFBEA443F9C48A70D09
F8DF1BEB03E8B92962E7391D83C29EA7C2F899344A7A9B1875C81F78129C29E8
C0B02022F439C0AFC388A568DA1E074BC711F42E1BF190C7F3867321839EB857
86DF474139771730EDE274EDB3D0895E60CFB026F19585FFD875DFEA5C976402
CD433223997876509810ED2290F30E2E69E7D4F25C6A1FA8C53D866CC1264444
F5CC77992674167FFD5603B9AB0A7B1A5DECEC84D260AA0BA737E27EFD917839
6F3262485C73338039637D9DA636B8106C494C5E8AFF8B993CC7C4541FF7DE06
D7E4EB44554B948B4E9FB1847FA7B0D899485123E3EBE9BEA0F81818783960D6
41FA99B27C1A79399593D71AEEEEABC20A070B1700882A66E861B91464CBC760
0B429243D58078BFAEA7916ACC79F4ABDD8F9791C039A99041E64351754A1EAA
4F361A865DC60DCC7F9CDB82EACC405D523BD802043D1905304EA6518C960EBE
DDEF2959D826F070A147B86490343A506F5701437541007611073A936A069EE0
604FC4F227DE6A399237F03CFFEABBEB1F9E3CBB1C2EB3546F150A76E37379BC
C6D889F22646859510E9BE492FEA7306D8F288C71B517A1ED383ED601B1E9E62
3083A4E955FBC28965F2EA46393DE801C77B7F1363169B5AB2352BB54DB565CD
42DF90DEC50559B82D552B24B5E0BB60EE2B88607FAB4C37B6AD0BDA80B8F938
F2C8E60B6162FDB3B1963EE88E9745BD75C013C063605F5B24AE8BC057DF892A
6F9063F31D7F28BCBBE1FFF89E51D3FE6F9B938EC8CBF0E18E1FD4B608465D62
7CF97FC8CA7C22CD6CB22806C5AB66A64C8BE732A9C0B48A4862F8B65209F703
D6826FDB5CC2FF32104D5CB91AE7D909E55D402243128A17FA37115F9D3DF5ED
49D2ED78531115AD54BC3F12ECF5D2A21749E12B28D9BC779C8F875ECDC76455
16FDB1E9CE933F203BF8846B57ADCB5A230B890A321CD59ED4A6FA37883FB088
93B5E2465C63ADE17E18F4E34BFF594F18388BB171D0956A6877912CFC2812EB
5A14D3D81053D9DAB27E501D4AAF1117D4ADA03CB2AFBE30969AD897B5D5B290
44CD92D84898CECC2092AFAA4B2AC1083E33A7800BBDCBDABC57574EA6E94F86
825614DFA21AC8086072F20449024EABD0FF7A7D07B9A5BED35DEE30B843AD51
3F8C0EC1AD99379847B0D88B533369A6784847D77AE1CCD0F16CE9556272860E
A020C5B59443388EDB91F8A569CFE3C5BCF3C432E1F4B00C331C41B3187F017A
7D0831208FF537A32D41A235F013EBCBFF2E56B30F6E6F0B69FBCAD18682119E
8EEFA250C33674092C631DE215B22EE9C0FA967E7C206B60BD8E8DE59349F07C
18994FF413F4F01BCC6884451D1B559008927B936A1017CC1DA7F632D9FEBED9
6C69A06007D987D8774F25F37733E85613210BF6EC0333FB8A0616976A47B321
D7241226CAB4684ED3C845637BDE582428E743699DD44EB86047B4F07F07D1E3
93449D509579650E646A0165E7343ADDB2E667774D3E27D16964F9ACB57401BA
A4F32284DA303E026431BC892E6C46E92F6241990D57A89CC59A00DF442F6B63
BE41FA04A036272F789F3C6CA9E8E412FD810E723C0D953E9900BAEE2FA914CB
464ABA89E207F09C21FCDC052282AE177A5401882D75D1C1FB40D06B955B1E11
897F33299B92C239C0E8018952C7AE3F0134DF9274D5D5E74F1A2C0FD4C5EFF8
6E090C54B6D8EB4E04B744597C49AB980E868D3458C0EF4BB839E4DC23EAC7C9
4A3EACEF4394840288FA5A2C4F86F8CA845FEF772477C49BA14D95F2ED54291D
3F4F54DFE69300C86C82EDC79C24532C1CBC137C1360DD9CD9429088A785B15D
0E3F46B0BB09A3BF5B2D6370FCCABF4EFD2A8EBE557A32CE4179F4BA480A1D22
771DDBC55383CE68ECEEADFC208AD319A6D8751EA6A2172DE22DD4B4E1D470D8
B63882894CB6E03B5CE7FFDE739D981DE4ED2CA3F4B4CB2AD7AAC870EA8043C8
8408575F944970FB7DCBFBB579894040374BFB9042155D2EFA9E4947FF31DBB8
C5ECA8A65EC6EC83FAB0EECF2CB56EF871392EEA90FF37D17E5774DA104D070B
704B0A413D9EAC4E912B5BB9BC7D334BDF5CD5EA30CA70455F4EB72AB4BCD071
47D6F8064AF5692EDF5E5F9384EE5E5C0714659BE1E7CE814A68EC455EA8D0B8
8AC129EEFFA6243CB3C863156EC1637E7DF13EA68783468C656BC04624DB9636
82F1856365BAA62E216F4F836FDEE09D265192AF69322B6309C722C783E6C3DF
E282EDDED33740E5C0993703248E6997790715EF139444D01CD4CF22EA2B5BD4
3CF175156C004C0168775DF39876E59E0838CB2FC2E4E84B3AF40166011E0D1D
78CC203D503ADB2CFB1E522619EABBEE2C689C42CEDF7DE0169562EE357855AE
429DDBC73C1A5A5301C59D57A1414B1334140D7AB90D5C98932EDE896299C8DE
FECF7D66AB29745CACEF9C42664CF1A58BDCC832CD242BFFE99BD655F36B0212
5657F49331443C40E10D5971A36A38E8CE08EFBFB40AC5094B68589135E316DD
4B61DEA090CC0564AABB04C4F421C8ABCE06EF6CB7FDEF741582EE5D6301301A
F689A95EA7FB76DB0835A8C85C0AFDE0F4A47F38155FD7266DC9A7FA5FAE2CD7
531FA8F87902348F5E820D43058F54E65581ADB43290CC59C43AD57D357057B1
3A3E1B2E1FA09CD8D54D76AA179CB516D72879CBCD909B0459DA48361528CB0B
B93469C052A08E5A7ABF3C3CF5443F03CF7C7A4F8D56D994F53F32B2C046CE31
00BC08DC666DA85761132321BBD153DA06B81E306AAE3EC0C90662593F644D4C
60B3A2B6295472CD25F2BF8BCC44C1C6CDE0641D676CD124BD4D3707F7E610C8
538FFD28D38054B6D0B085358F0DB799603233C8322E494B0E1CD0B8D27E5168
4145A3D96036B2FCCCD0B0A05AA35191227FCD198B217097785D120A34ADD596
7CBD52E5EC111D92525F8D0116F01DC2AACAF34C727330FD4F460F8E24FCBE6D
8722067D837D7554E118AB6DA3F5458F2E5D58D9794834601FDFDAA8798C2026
D96D8B11D44E3AE9A7A7EC7C499446B6765FFCE12A787D6CF9F19E9FE841F025
6A9436C2FB2A7F81702433F8F63B1559BBA47CE78D75BCEA1293C2C4CA87FCEF
AB8D28B0DDB2967963C7CCFA8E1FD64FB77C5EBDD89DD413DDDB4F0AC066CEE9
F33B540E92D5F74BA96A27BDCB21D8A1820F4E426160BCBE714ABFAD5D6F10E4
B1D5FA6F27F7636039014DB5B03AD085E89FD78D5A33CE2A663DDC926E064AE3
CCDD45F07346FD25DA52FCF1A4AC904F6C14A78499E6428AD036B701037535D6
CF74E956123D5EEDBE11EBCD23948653CBC3FF333C089C5574832207108CC8F1
FB7EE5411C8E41C38A43EEAC604BCA8A6744BE5E5F709D379E31A7CE8E502234
BE18C3EF1BA0E042BE11FAF9E0D2ECB6ACFBBF34AE2B430F5E544640681AEA50
C2C3A89F06C0EF750E0067EF568466C9030C6F6DB695157ADB01B1984A663913
C8A0B37D91DBA616387C68BCE6F7F90937F823021F22C67CAF164B8DB98C29E2
5284C7CAA030C12A235BABBF0EA986C16EC5D132AC0A10F5B6F541FC64B0531A
C7D98A422438DAE3C1B3055B16A3E3B166D0BDD96C888178E29759D1C3B2EE24
ABD913E36FD16208E2D3F88D4450A2082AF7613C9E9C4CDAF00054B722FC06CA
53766A3C1D4AF146E6642B7C8756DFBD18BB8FB3D052E2E010146CB30A4B398D
7801B20AB9F43972FBD40A3D1D8AD114986E09ED51AA645FFA5299A6343EAB5F
1DF2031D2E8086316126E1C2523682573A887FF839145629920692CEB0CF2C62
686373B07A8F742FA5C06F78E30AF86F0A7A2C26880226CDD776A5AD033AD673
D1D8F7F9AD84C243C9DF41A24276C013269284AA7A2D4E5B0A3D3825359FAECC
1A1AED7CBDA0DCD5DAE03A830686C6E70919B19C3DA7E4A3C1710BDD938B98A0
409B969B0ACCDDB64B3F4DEA6E1E83510CF99E852C93A7E42C9B71570E7C061E
CC1BAE2DAAAC8A956367923F3E146D7B371CE8282494239C0213D225B42E54B5
E490C2E43848DB1FF4771E5A3B174BC4411A04A629285F622EC1EC70111BC063
B822908EE44945CFBDB87AB1DBD7FE1307265849979E044D82E4B6A2C7B7C0E9
00112242C6CCA92313039FD6305DA99AF43833FF84B45ACE61C1BFDFACEDCE45
D6D825772A808FE531A8EDB80BABFCF450AAC3EBBEAAC3C93B7AB22EA4F985B8
DB88C09744271DD5DD649C302201F5BD0AABDF6E7BAB972C0A9FCAC35BBFA182
BF807141D9A627402CF9B8DFA21B47AACDD902CACF536ABCB26EBF3E2E80E317
5C29BF46031A430F20004CE95D3D4DB6AE813A8CF47110AA8F9221C29FD0B714
766F7D862035594363F52252E7E34D84F99988FA888755A73B2D2EA422F0FC2B
A29BF3FA418982210BFBA252EBE75CCA3D532D86B4B8DE9529F581466A094706
983D755B02559411DD1100EF0504E502646BF4D9B559D12961DAFB77ED8747E3
08CC72E4E50FF4382DD21C3FFA6ABE732F02E9BF49584EED8360C7F234C6F3C3
018A8BCB5D7DA4265794507064C3A64A92EA4639AD46D2698D09AB3FF4F2AAB4
36F94D508E5D8FAFF35939B44B0975078D065ECE9667BE4D413D24A7E735DB09
6D89A9D8D415C4B14DC2196F7A8A509B1949D8FA38536BC11DEE4ACB149A3F6B
390AD12D56DB8F84B59B06CE046673855E9BF9AB5F5A1722320A8BB0142533E6
ADE6EAB1F722B9C7CBF27346D2781817797B2CBBD1B19C9B77E6C369503570B5
CE8F4C69B09907781A841BB4F17EAEA2AA49D748E8E40549817E2035569267AD
1DFC7296F56DBC5A02955D6621A5D8A2B86B78ACD9B8B34D384C418E523317C9
17B9E584CC9B8B08D0E331B48F7A53B615044A9102F1E105E0345E113266B0F5
A8E465648DA1B248AEA19B80D8CAD2BD9E97750A76316EE162D85E7B2F820CED
6B2C30FA7076DFAA0BB966375821F088E04A715B7E18B2449AF7BAC0A2FC04A5
51541D242A7E11E329042B3EAF8DD3A1A0FFF529BB4A973DA049B84E59234A88
A82CCF25AF651A7121C134FC2EA3F93D04BDE64ECFC26FB349010B6148091F10
8A5E5164C54370E8C37B175F6EAEC03CCEAB00E086C79B88B9A968ADED9F0B3D
B8CD1C0BF36DBD86320BA53079E6B582A4695BBE6077562EFD714DE1F2DC0416
C712C00D92738D2B16C4E6CB607062655695DB8C20B304C9521BAA61522FDE83
402FCA83323C6E1439C0AB7038C8D51FFBE45ABE8B39A70140C045E64C46878B
D0093056B3773936BB598A3C2488A7AF5FE9B89B5B5F7F2562BF24A9245974C9
0AEBF6D91526A7149C54C7CC1A8A7A8E72058281B8B650306A48B452FB386578
1427FAE6BDBDDB9311C0F8E21EA3FE43E1CEC286CFFD5672A9820DCFDEFF9E3E
8DA4A87C23B7BB9762FB79C8CDE56D09757A1B9C7031C3D2C0B82E7990B4045D
5803139DA79BFA9A24537E6F2505E97A4322616CF17D512C1DCCA1D1865F7857
85C7552A14D7822FA5750D22D4A9D26B21B5BE7AA001C26EC08CF5556DDF6DF7
94F16864BD5F4DB7BBA9EA4A9C3F0E5507CDA39945F092B2904CEEA59FADDB2D
9943EACE269DC8D2EBE0EF4D4E774CE1173C62ED1D217B0C14A25809B0B7F384
16EDFC2858C39735543D647D79566AE049E05AF323DFF0C0F10F90C7A8AFF258
60799F7B8BB8275CEE2C682F1B7E87F63AA9D1FDD155D7BB7DD3AD7BD442F9CB
4026669FBC997C1BA06C1A9AF135B812C042673BE54B791098A383577C3E0D19
5B8269ECAFEE522BDDBBE63B82A44B4FE428922CE53A85A48BCF02F2A9E4503E
7AE97E3F346F1981DBC63B7B78D01D4C519D13CF836BC2C90F56C795F7AE7D76
D551D4BA6528A833F062C8D40E5E9BE864EC785ADD7AAC5AAB619B4EB2C73774
DAC51B2FCE08F22587B219CB6B52BD5F328740731692721D634EEB4FB86F3B83
0B5D582873A34E2FB4245DBF3E17658C1525A51E1DC717A07ED1AEA6CA951479
EB3FE544D86F141798173A647E9FF99210DFA4FD6088DA18F794B5FDC7ABC99D
A7F5D2C247CC7F268C007902104E237DFDD313DF1E9500CE5E63BFBDD6522D35
8C2797B3A6714923650044BB351F65C51425A1E2729B2A28A6FBB86D06E76EF1
897C67AF5E3BB9B4266572EEB7672D3AC6B42860D96F9CCF19194FC6AEDACE68
A9D05C4646C0A6F1BFDB6D2B9B8E8E8DA87BD890229EE0B97110407B2C663696
053576E09A1A53F19BEAE86058CBE079B813AD73114DC360071C7E551F424F39
2862AEB627F9931822402C0B95A571B7EA5ECBD974311F100458EDB0C58D1BFF
8AAE62AD7BF82EE0E96A02E2F6CB07A0C8F74FF32028125B02DD8AF3F1E2BFD2
FF8B6D90CC09BCAE5517F98368EAEE2CF5CD178DEA41ABB1ADE387A66685A710
4284F8CF7C0B2F0029620E1256AECACFCEE0B197BDCEDFC4DC71A48126F39E62
96B269F2F35B02CEBB423D11EE9928D6272EBE9A1627D5BB4CE392B85D603258
629328D64D3884E7B4CC091157406B86DFE61CF592D5B3A2715C79625F5956F6
81DA8617C7D2C8DB53F6E1D823AC9E2A5EBBCEDEF15F5927CD59A74258332C0C
69EAE55C0CB51A1984922E7503D2F37D103261A69EB0E8428406205B9856B6FE
7461CEEEDD206AC45262916D1DB4F41B1FBCF8ACE522693A850B0BA7CC7D8650
4984E373231E7CE1D95106146CD7E4FA53E2F6AE68865C20852E97C001DC18C0
15A367A1E71F866A10BEEF56573CF1991499BADA6870076F0881CEA4E5F6A2C4
A21F06B44C1BB53DA83BACCAB09DDC5B86499F1E59A6FBAD6E0C278A428FC35D
B2F6F59BC862842FD16E28F4414A73F6F0833ECB117643D4B68646BE89C2D18B
AD97D1F5CB9DA6E8394E9A41639253441AEC922A8E357147C69F6371C8F94820
AF66B81D592267F822C4E870B5419387FB49AC66DA99B600FA37E2E2D5DEB386
6E66E6C06CC30FFA35DE8A1A83FA35B233EBFDFBF3D6B5A35EDB69D38D48D289
55E84B16C8189178143B3BC0A6FC8BF13C329E46CB20049A76160D9BE051A151
43970B25C87D18F1CBE4E5B764A7819FF78EA4DA5C65FB10E66407C64E5441D8
1C8B1E0CDA2EC0360B6D552D167ABC8D6B138EDBD9FA0FCA4C0C6D492C6519A1
67918EC9C8984741673F48143E9E9027854A8B6A4EEA3E04F51F0E9F4F297C71
999D1F2EE96AB6519A0C265788D72809DD6A2CEDC7FBF9A90232C967F8ECBA84
192B27E86B58C8BF92644DB21A02C50868DDB3132AB9B0375D27C3AB31ABBC8E
6D2D545724F4AC859707566C82A1FD4D7D912DD540E9C450E0FA76BF48B8F303
C0F82AFAF22FBF3EE97ED62700EEDE516DCEBE001D74F4D5F91D86A7A496ED1E
0CBA480EEA675B5BEAAC8B82816A24427F1C81537369BE71FE352FFAAD3F8ED3
BA9E80949479C21E2076D686DB4CD3A1934F31FB5F77983B73F8AAB64DA7D871
AC7A610BDB0DB750143593A95B5F5B0FDED69A3DBC81CDA4B3255DA0E36B6879
6AC7277BC616275BF7F1E20AA95145A3DB9782CDC748705749D3CF17585290F2
B17A6F907591EE52B5E0D9EBCB00DAF443C743B2299CCCEAE1B9220554DF5175
31481943DDE3178418E724D16D773BB447504724329B005F281DBE43DA58FABD
FA4AB8BD7E0C1040E842F7F5DF8345666DBAFC690391A29F320F9D40CBFB848E
83E459F780C42D7215A0E78EAF6CF60BFA24A2BAD6952C414E310E0D94D92CF1
FFB5674C001BE105ECAE86541B846E156BF247629542F392F1611BAC162BAB1A
59DBC80E51AF3A9451E923FCF5A0C980D260A1E0BE06085B78877C3C5201D1E2
6F681700701C3EB565B43BCE8E4293E11B5A724650DABC43DC4BD4AEFF9B5261
559FE8F34F8D359BA13F907DEDEC6D24A6C20F72C6F43AB977527EDDE2DBD7F0
AFA0BBB462EF477652D5BB91493FA2C015837F2C6D4175D0F823130E1213DD6A
A4A6F68F8F38882C81F1235F0B28DA65317F29D91803F280BAA0E494A7391A8F
4427F5B0F1B5E7C406B47ED6A81F63A04853E53DA51044C0E40E67BD3BC6E997
BCF386B312E5F5C869DDD3A19628EF473F5D39045084F8A672C6D4B69D990324
32330B255667E64375574C2E9B42474413FADE288BDA02FEA8F84FC814D2861B
271315C7146B4CF7EFB4726EF0B56548E261239D607D9484B69FE7D05B260ACA
D8658AF753390EEE4B090BE7ADDA806BBC1FDA61B8260658EFA3CC47C8FB8E15
BE0557E39583ED93E7A51FF38FDDE87F6D08813F34F666E361680930F5C20765
BE245A3154FD322F81A1256F4DF4333210A0B5AC4B068D976513331657056C54
E6BE7C9CAE7C6E6ACEBA088A83F47E8AFE344FCCA5708D5C72114D5C3E97298F
EA589FE6669E90EEE2B8F3722C06B8F97E0E68BF62A373C9A48A8249DA7AC4D8
8C1086A5FC5FCF60FE6D0C5C33A14F23494342A6C8F5E646C99ED480E2D3CC1C
1B3A94626B901F2E8039B6D93F34587FF09C14123D6AE1E615750E9CFE7D9CE9
9A54CEF35F075D92FFC220A0713EF69583F0F59B7542210BB9004419B245F3C4
7AF3F438FCDC3A04C60308507D5CFA4A71A361518BEE90CABEA2B041CC8A6ACC
002527AAC582394827ABB3A6C85609C50459D596BAB191A71034D42426D4963A
AEC570631A7106EDA7DF9B7B21F9C7FF5D3CF116DF6357DFF2732128CB71638F
F6F64C25674C06FB291479A451646F70D65B7C37E149BD039637B37292A95937
2806883DF1E1B3031981EF1B5697EB4FB703446350E13F85CEA7126C0AAD5562
BA30AE81D7610543DD8EF8091FDD607B165BD0F2FBB24CE1FE463157CA04DADD
16AC7DC8197EF5D62F6B060567D60FB5EDE04283857B889F13290033CF153440
9F892186D86069F6F86F820A23D6B6CDEB579391
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2E2A68EF8D1C1218D4CAD6021093125A73710FE
E11B6B3B23CD2AD46270F92FB292F30D852DDE60E6818C162254247893637369
C7729F5A4CBAD8D78B07309AEE44069BD87AA928122D1FFF56B8FD5782BA085B
A2213F8816F01183C3CA298E658EE9C13C6350F14A9209DE8A4E08DA6FE245BF
568355677A9DD49EB4DD3686B5BB030C72397BE2798DC546A5040B8F17C5128A
779AABF374DA038B94733191AAF942B6BA35E22B7DEEE932B202E981784A16F8
F33E50BB66F44593DF8DB37452837893CBA42634629F0D64BA7581CF5E966FB5
3D24198F715A9CCAFCF4AD13465DF0D603C48302D7E683BF122B339AEFC509BD
A8400A5A1F19EC6C599E20238CEDDCA78E8314EDC6B44B38419ACFED6D092481
50786DE3383AB03CD116D52E41851B0635A9BE9DFFC634AE239F24D487DF73D7
3878ABF61030B5A9733EBF14D79A07A2BA9D5D44CA6B490E990D75AD6B19805A
CDADD5D39ADFD18C0FEABF1C9D195E2EDD1C60A2AE1CC2C70CE3A293658B0EC2
89A0FF64E651A689822E4D5EC8D77C109EA7FC04160F972CEB790C818F445B4C
A2FCD347D13CF41A65E336A5156B8344F1CCDE84A46AB2CC7F0F052620E5123C
B6F6B133DFBA5A3E65297AC38C36ABDF19DD5DD945D5FC78AE82EBB17473F6F8
429B98AF55D76EA0130064A1B0D86C00A49816C19375BA41440B4CB97DD9B19A
7ADD12100D90F33ADFA4D661A5BDED1BB9E9B6AADDD481DA4789B52AA42E87FD
05AF4A75B3DDBACBD0BCB623D5515BA63C2AD07E13F93391F248FF72A9466572
485DDFEF4894DBCA3F2FB4684FA0EA1C7F0EA5B2946E56800422B5392B6F93AB
77D129E89DB36DF165EACFD249E9E128A3AD06A18B2C6BBB076410C7F4D4C2D2
E506C84E896E1FA498AC0922338CEB3ECFEFEB50F449C01794258F8ED287C7AD
CBA1EBC70CC4106C988676F66DA98957838DDEF0AD7C4F17AA596E814076F1BB
CC6C2652F8497F2B33F168CEB310E69D2899610DCDC65AE2ABDC55B06A95E0B4
19610741A413A1873C01CD39A3945C38CECC2465B60CA4A2711106916F88518F
B841260995D44011BB4C9468028A8D37C9B547C6C1F421514701265D5F4E700E
C9086DA48BFCC7D504C867E59BA71B099102015426F68EA7F9E8C27C6984E8A1
310C9AF4FF497D5482498FC0AB4D8F68C9BABC338BA19D607C566166D6B29176
BB1F75DB29E2D24F4B9CDA3DCB60AC795AA4A8D5497121887FC18A147B8360ED
F4F0AECC6D391FEAE0DA6F913EB7D59C6DD37F99DA8E4B3F9DAD67FA10F2C451
F130B1775FF3B7B7D94FA96D6FA817C1B72A3A0C4D7735ADC8F2643DF3DF96EF
F84355D24492AC0F942E791449A2639C310E4F2DEE07DF4B8D976C33F429BAC8
7C214C6B719779DE0B30F7B4BFD00A5E3C832170C33DE5CE03DC003D3D8FE847
5B87C18222102AE68680A93C2630975D13E0F3E3B38E41D0055C61F935ED217A
3B6C38DD3E7F2BD3FA006D66A4EB257057D55B6766327E4D755D2DBE80E77EED
F0346ED0B8814EA6FDA37B071D71B1277A5A3A64A06CE2855690CA8949DD4107
1E9CA97A49EC7DE7DE0630C5E66E1A4AB41267440AA78A41E4B4BDA98948AF13
4F63C97318FD3A578ACC432ADAB241869210DDE316796C192CFDAA5FF7FC0EB2
EAB05393FA10EA4B6F4B31B1670DE71886BC18D419F24E7D6F58AC6665FEF3AE
88E3A4D078136D61A9B5A99EFFE1357D42B278AFE556D1067F264F4A788A84D4
B0D135054E3DCE916DFE8C8A15901A2BD2F718B80798D95D2F919A478C1B7FF3
E059981A897E7EBE0136DBFE3A1B4411106895AA84AC2CFF3C2197300F80626B
E37279FE73A703DB7B1D6A15C1BACCA1374CF8E01CBC690B43D6AB439485D541
6E4D38973E50A70B6A302A4E07BAD15A22B013FDF3307FB09879071EFA8BB161
C5C4C7D441C23B766D1FDDA8E49BA87C919672DCDBA423D64D1693BE4FC98C32
E48D570FE2E12260364701EEB3107C368894E437F5C947248D320852F5CB2B8F
411400E58F53D15B78C53B26867AAE1DB5F93D6D1F58B7CC0CEC0118A7769F47
F78D164582C20DFC0E1AF48FCC5A39977468163B13DFC8A210CB04CF37265148
636CD36938F3D6E34BD70088115BE17055DD293CC0824A275DDB6A89D89F5081
F1FE0FBFFF8AE0BEB5560A0E58EAE230DAD77D9A07380D31F72792979F188F76
F0F22997656AC863E59D5D593520F010EFE299EE745A2AA69979D4EA55F3A912
6FC8C20FA44020081FDA33DE769E86D479DD59336B57B9B45ED3AA7485F802CD
62FD54057EA80AF988CADE4F9135493D4481463ACDE9E5F075FE41DC2086FCE5
19E27F26A8144C7D576228C8E0F07A21D84883585F79768AB4F5AA13F2152AE0
E13B41733608F35728C67DE8D0468F6BD06FD2B86E311B5CA9EB619A75DD50AB
B3F1D52392951B81CC79F4ABDD8F90321018E2797CF285F54C82F11EC7D14848
F0358B6BD048253603553ED05CF9D7D5626FDA9D4BB8D645F92280BEF7D9B770
758FE87CEB45242024ABC7631A9AE979AEA49FBBB62B91BFA194A97992FE8722
A82FA314A023B8FD3A9F79F4D9BA458A0FEA110C2C836D453585C9905EA815DC
AF1C121E15CF0C12B4A0B48E04DF1DC682747262E21234FE97AD7C37A5C955DF
1D96F5D2CFD4B4AAE1498BD007818A0CC23A8013455A46920DD0B7C98AB5A32A
2950D061EDBC632E9C212629862CA525AB580AD335199E8C82290E44B6D69866
718F4A063A676691C78527F7525AC98D11A8F5C051C58D0E6FEF25B2684CE84D
9DA7EEE62F26C313F48E131A34FFB03C91ECA5B1AB8ED241AD2F9E6F3689680A
02D5CFA9011C9CB28917D4D32F97911F35CD2CD31BEE8EE35EC97CB96B0B9248
0F672BB0C3CF07EC85B33AEC147B3BAA5E1BEAEEE90F03C877658B6071E12DA0
65F1F77E98EFD9989D152E9A2D96030C850EEC267C66172E1F5BB5AD7922BF5B
B09336C7107695EFDBD03424A0BAC815709313126ADFDDCBECD3A1E9FA7C81EF
B6EBBD8D1BF93B89BB10DADEFC3BC31D3FAB9CEBFA1A39F068CA5E4794E7BE86
C8FAEBA2626519F361EA5D8268B206F850503538F9EB6C9EE29D5E867EA059E8
8C602FDB684FC5A51DD14C7EBCA4747493BFE69E08C0A5CB89BD0137FD9286F1
DDD8F08E4877E4A44995E01464AEE839C973BDD3B3DEF8060D7DA7EF9EED76B4
496736B12C01D51B28CDD8CCE82292242981E9AD0588BFE9EE1C31949B185EAA
2B396686DD5FC5386098A7CC2A625CE43F150CB351260EE4A86FA23E83FB2D2D
371E3E3B09FDBDAFC2139829A8FB165A2316EC985DC1037FD755A0241C486AEF
AB270171CAEE57E841A4A04E6F8FFE3B37154BD8A49167CCD626428C1F932BD2
407ADC5B191266093D5DAC3F4BFA69F40676634B21EBDB9E19F01EC1B1B7A338
B6F8F43089DF39DA1133B4E61FF3284E886738B053277C90AE1639DD8F7B7E04
0F07F97E49E3159A19BB2BCFF9F577580B83A53868257723C91CC771D68C11C8
EF49546BAAF35F014ECD7A0B8C75985F4FB0CB3F514F2B3327D780D50CA5E2DB
14A9C2E42FE505F83E771B5AFAACB13BB94C816956859F473B6351AF83C810EE
322303F2F23AA7C1E4FF502E773FFA380C42E6B070A6A0FFA69D34B3F0C8586F
E1D897A0A78C628671BAB8BE4CF7715F5F2B8926E679936C6CE629D9EE3E4992
0C8BEC099EDE4DCE40366F339DE10B9145B62513CF9E1059BA3B8B1716C1E1FF
0E034D80B2D8860951277F59F58618636A88932199B379DE386E2A72FB008621
23EEFC996C4740E4A9DEE1596B6CE6691BD38C222F66F2E1AEA9A1E80EFBDF8C
12F42D49935073C848F540B0DB71B8863C42D8A619454139E4A786B3741FA0DC
F780A28BECA3A7C5369311E96E941651E32454EAC0DECA7B6CA86A0CC884772E
5CFFD233E5733B18E42B054A5B8F93B6C6929BA47E9E6EE2900C4AAA1677A4EA
18CE93A465A10F068374E935385ADCECFB7B49A95CD2AE66E191FC5CD4F14E04
4BAE897C450BED13E8A94F1A515BD7A9B8923061CD16B6AEB66DA75EB8A93867
EDABC048370EAB4E18446549FC64F654300FD11A4BCAB97DA3AD0AA0F34EF1DC
A50929392FF8F648A3A9E1520268599A2F24F91F301CCD238D7A64A931CF19E8
6BB8949CB6A7482E3BF1E4F4ADC133233FFFF3ADAD96C5213D7CC97870FD84A9
EF45867DA4A0F61A347D4A3CA906A3283BED8AA881C0D7F84454EE9B9C3C85B2
AF81A23DA148F1C2A62E72A0CDF05C62F99C041CA8FB85910DE179CAD3E02209
C9F0D3B138CCB3023CA8994808ACC2B41BED1AEF99FF8DC7D9233850ABFD6417
A7461A5324CE312F7D08C5D6D247BDF83B06B1D163DB1EA12FFB5346D7A5C512
7E1F8D696AD67BED5E2DD3676A8A81A1946ED28DF8CAB40F2EAB43254E2F2B85
8DBC35ADD9A0941E931FDFBB23CA066C96595748B648FD0B63636324757188E1
50E9A088340BAA063C6C8E4AF62A429CE3256DB0C624A636BBAEC8AF4E0866FC
88130338E890CD7D2CD30B6E2DBFAF98E2ACA1D4E3BCB9430533036E25624CD2
904BE19FACD7A87B6AD591F8B279F5A026D481DB07E4BED2C8DABDBB83917336
63F41EAE3689A7556645169A35F545E0FF5E8E2CA3DA3E2037C4AE52F67A3160
AEA6408FA3C520F21B5BC53AE4F72E75AE34B0B1E7C5A9AB11C737AD33D22F40
32E1A675E3A524884E52445AE7F45857949472AF3AE230AF1A5256F5F263055C
F70CB228F8826CA964E7CDC3795E04A7B420DEC64503A6CCBE7B51BB7A808B67
BC2A11B8BDB895586EABED6E1E460CBC2ECA045018B639B7302E36C8F9BE2664
7B02D7A33DF8ACC3DCCFDEA55DC35DAB60D79EA274B0C86C0D39B5552B97C7C7
41D1D24B4CDC6D666CD1F73DD5F54BB5A2A6041618BBA77FFC56DFEF8670DFD5
54E4686CA77F47567A9AA1CD0DA9BE3C57F343E143BF2476BCA26796BB6287EA
E426BA68DC0CDD00846E75B44ABB24CD78E34997274464B0BE4F8FACDEA968C7
AB1E21BDA638B481EB66BB00B7EFE75E9C42365FA9E6022C7C01FBB26859B0E6
5792A3D8DE3063E2FED3724A8D0DAE7D7255D8444E63CA51ADEB90A95DE5C9F3
34426B3812DE7386829C25C06C88F964140AAB4C978F2D7C6C0B6D71BF6B9721
DDE2FA039489825AD2C9860BF66837DE0C4A5A5E0722F27123A813E561BB9820
8B6774273C951F40B18AA89FA82F34980F5C2FCCAB754A76FD9260DCAC095B0F
2D969FF03087C4764D42A421B796CB75AFCF6E99EDA8946B78E05FB887406D7D
BE4D8232159C00BF64F5721E07718BF7D01EB5540B7611DCA1D950E0F10FD928
EFDC0FC5661C87E237AEBC396E3345A63889CB9F56116A49FF377486A6E2D300
057DEC9BB54C16ECDD39D13634B978BB1F4547CDFD603270F3CE1806150C2BFF
C7FCC8E2A78CD59711ACB1F37066303958975C7B4476E4CEB868F1AB22D5AD4E
6D502BF04D2C2C88E972B11E54B12207BDDCAAB5FE5705CD52B6B09FE27A63BB
E50C195D01DFC8D9B7B8A028E9038BC8621836C082310E93E0A891AD787FB9B5
8FAA70DF55B9B43E52525AF22F1D189600FB6640D77992558133143C1781D4AE
8896896D1D114A09673B3FA6719AC6D4682A71372A9E803274740757589B50B0
A236F5CA2BD13A3B9C6AE1D1E9744794411E5149E4F3836B09C674467E27762D
AF07B534B75E7AEF02FC4EB765ECBAA26A7908C75BD90C00263C3C9F1B508470
F029DD64C0F7BBE3407BAEADEE68B7269E29ECD539B48217B4DBD7804181BAA1
08B35B304C75D03239CF41E482B3A922A68462AEFF42B446DDE5223BC8D138D9
E07BEC1534B17FE63C3AD72C9900BC04C5AC8B65E14277DA91A7803550085992
A0EC322110509E6C6CF8751A548E6899251C58ED8DF46AE5662883670E6E5437
8D78B9A9DE9BCF82AAB4330B2460BE3B28414B71D626BF16C4923DC080CC3E49
6B7213987EB96A2DFD6BE284C950A2329B8371CAC8CE84E14F9D62E7A015D342
46C8E29FEABEE76B8F12F6B6CEA2F00301B43FA5A083BDC1A519119AF2BA4FB4
0EC8C11D9B35B26F33DF25E34BF58AB1AF660880148C5FCBB746750A9D25067C
F1C8ED4E3F5DC53EACF21BD0C300969FFD073929F2AE9738D0AFE7D585F67180
41C234D919C7F7BA623F3ECE53E795B849503BD89419E22E12523A2FB111DC49
72B453BCA767918EC9225192DCF9AF7F440FFC7DF591C7C3FAD302ACA62F301E
C9B98AA685F7721741FB17924690AC44621F6D796CDFE6C72D9CA6F9C7E02536
219A4504B2E1EE206D1AEA39EE8F36A99F2116964290B3392E1AB1933E62C9AF
6DA51B8B3930F85656E0BDEDBED34E0EC10A0DC546841B2019E4191513D4F08A
0FF2432A2B90961AA84EF09BEE432246585290E0B93D4C6BCD6ACA4AB724227D
E543BD6F3D503F3C9D965B4843449DBCD6EE569C6800389CBF12C7B2213B6A0B
82FBF9EE56C22D6A7C6A48F5A0E60AF414B206850B3B8C0280FC67A306D16938
704A1EAAAF6E9D46910539801393C55DC0B47E20FA0A7B7FC7036812216BD5B0
F962256B448FC89B2EA93CA4121E1ED7FFDD1DC1E336BD6FC65597DB9B12C600
5B983DD122BF9D2A62F0AF852F7CDABCEEBFC399519733B4D6998F7BD14CA11E
9F5F226AC777F99A317941E18CA27973FF22A0D0A0DF623A4226509FE3BCD053
0EB6F73D82D066F0B9522C38E22A553E4D2252D9EEC7DDF3965828270889C68C
C8201090E753792B5711CF0B0E0117904A20F4541B4326BD61F44D18793CD34A
F58FE4D14258D7617C6DADF0FC13A9CBADCD2407B155D311D7B27DB9B6D01771
8DAB72E8DA89DBCA388B710EC1A5F586E72FC967689E15A6EAD01854DD30AA82
C9FFAA1E5789C1E31CEE59A30E3E1609BFE0D23B32B04DA4ADC6580DBECF4B85
DF4FAE0ABD62841CECDD178D4F777D2FBDB93EAFB757FBC0CD08640C77A1A62B
45CE97282521184959AD0C62899B0F39A7F5DD4FAAF4A235E8607AD153091804
325ED9C12BA4500FD73B35B8DBEB8748BA48E0FFE808EEB81921A8EDE115B2DD
67A699A0A615CA95CDD3BE1D9923C1A11D046FFC2E8355FE5FB8512EC1F7843C
BDD076228D148327F2A2565163FA4381471E7EB4BC88FA83641E12BD6A4EC1DA
2ED68FC894A1527C89DEB6F0B5DD3B86CEA518CED1B66B2150EFD40A1665A39B
DE0EE7368EA1DAA2649DEE4B766CFFD7C2D17C9728C18D2F186DA1418D2CD812
E1F06885DF20795F8CA81A98F95D7AE87FB07BE7B67BC9C461BB0E2F6D9048F5
DAA1582071AFD5F1C57444753F21C0C0C398CFFCCEB1D486F79549AB5D84AE98
6E73093086AB594C10C1B6C38AAD2250E8C00E39CF6B65288C973DFF2C16E9F7
2E338FB5F927062C125BB08B9A09063302129449003D3E458BD35B0CAA2A96F7
E1B46655A8BEBCC910DAB600ED071A5A5745012C8C5390999345F5A779E4D4D1
53235E5476F5BD86D582E20060DE7924E3C1B352595ED148B0460B7B8AB28184
2F0E1546611A586822E1B0EA658C8BB454022D10F1B8A03CE10524C447163E8C
083BDB0ECDC694C0A0BAF3D57386CF43DF10286732ABC03561CD9F8C0FF8D0F2
03016682C214FCC2FD5B04E7907C5253FC29ADD3292B955915E160B6E89708D8
E8FFFD085698ADB9AAD008B0A17E3F6AE64355445714D8B0AD7DD06F73CBF8C8
6E9E519CF4B3EDE652E63E44EE5EF03C82D4D5F23A8FE0292FF405DD5A2EFDC3
EBC1380CA2AC2975BAF2A510C75C455193EA21F509B609326206E0562B55EEE6
F50ABBF8E078D5C9A2E3BD77C30C8C026D742729912F097F93C13CF007E84252
04F368919461503E0C648AB987296127ED4C3D2F1D55D83016D4922D0FFFE56A
502FA998F5BEFD142787CAB2EA7B3A16AC53E93D3F846473D87B77727ED9A508
D258B7685B89D4019FFB4E72B13AA894419ED36676220272D5499B09876C636F
31A9E0B790BC6AB44B2409A91B0EFE2BEA4EED04B3999B814D50658E17343D6C
518F6D29B4BDB422028061F5D245F2674CE95120DFF083A04A68B73340A3003F
AA98E50C3DDA1776C145DE69B3911C09D7474831DABAF873C5D6DBF2F7E039F7
16DE01F6CADFE62C391F52BBEBC870F8159E505C58DA5D9DB57B1758314AF80A
E4C0B75326E2694F43829DFE937B6415B64E2C84EF96215E0AD9F9D5BD03404C
1C5076FB78A8246A11AF1E5A29C06FA471576D4891343D2FC21892E6DD3A37BE
4CD9E921B84C4DBFA042F88F531AA8F0EB72D67DDCD7090A717648968C095F79
0AA88F335B39010A15D6B0B42F476D6A22B4C7F090A9398816F8DF32BC40856C
BCD50E2267B983327319A6D29A4A2DAABE31464F61D9745142652BFE7896BF94
26A3A529185BBF63EC9E4CF82E06FA3D8F4082594C8F8DD2A6B82E74BC3170DE
5B8B0E7B4C258DB690D6A8F80F0BDDAC38EEF436042DE1CDBF82C7794C1196D9
3F2155DC2531ED3D434667F08B166C1A2769E086F4A0619E955501847A107134
5FA9E6022C7C01FBB26859B0E6579369FC6682A937BB8857DE0FEA39E046EBD6
B66CAD8305E8CA86A0C1C87CF745E42FF5436CC7B26FA046804A854E12F01307
2DB9F4AAC612471BC33EB5563CA921B50D54CB5ECB2A3E2C7C0BCF19895AE59C
D940B468FFB7BFDB64B9128DB45727AD637C4D7581FE4C3EA210F5B169A80B78
914E1D232EC1E7259F805C5234B353CA64927852E3D984A655EAED28FCDF70B7
1B8417C93F1C9D934C9433EF7A354C7D6434EF90F436CB4C0F1C78CC93548662
8A5CC9CCD1B74F8D5C7A963C208FF537A32D41A235F013EBCBFF2BCE4A0F332D
220A480C10800D4C8A2199EEF24BCAEA2744D04C882204C585DE92E03B265CFF
30ACFC51E8831B909BF79C0F2F5CE834A76A29E5050C79442C1747473ED6C885
4ED8A25DB8858C0204B4F74FD037431E112B0CDE22C6BF6EC519ADBED96E0CEC
2F6127107F417A746482C4DCB73CBFF5CAB426A2EADC7BF089EB62FAAAFEBFCC
BFE37D7C370506DFA91E59D21FC5F4D5016AAF1F86CDBC2491DB5F06B0C6024D
D93B600EF9DEECD3A1EA10C4C44D69FB88D7A56D82E336EBCE36FB590ED2BDA4
E52FFFE690A0DB9CDC63477901B12E72513190113137D4FB1287F83EDB48C467
6AE0F62293A937038C524295E498B54E4DC9835DD69709DF3308FCD5149AA6E0
14CC1D474C2CC8AE995BE6A1FC016E85F1F3B25D41D5D5849EBD6FC03E7C8B47
57C7C3265348CB94D7FC7861CAE1D4D7C5C79ED0A5AB3E2E8C05C0592173BB52
9A317BC47D225E41D6F1D1CAEDF7DD6255D72E01FBD1740F7B3ED9A79FE6FD1A
574A68E05C186D1C28D16084556C0476B96E17F05320CEFD10D003E90D33727D
AE514AC8C15FAD97359934656522496D357B6708C8E39EE3B5A1DD90D2D15121
D3770B48B97451AA4D8C272AF82C92BC692D09C8913F3E7235D91846FECC89BF
E80B6B407F82F6FA3902B9CE1F98079F73F7F7C34ED8E210BF2B51A62F35F49F
D0B4E7EDD8922C0853505EADA3FD33626630A5EBF333433687B10C38D55C6C2F
76CC02AB7DD4A49B269D75EC926354BB7849ADF18210E6C7EC319F165434BAF9
39BD5A4E8EBF98755417A2C0550BE2322BFAA89EC25C9F7D6B56D0EAAC783ED7
9DEFE0B3011526220346C843AF00F2B23DB76C15B5516B778534084B0429E49E
16DA676A8FD166461064BE4150CB95C41D74C74A4E2A74104804F9EFE932221C
AB81C25EFEF310191E2B0758EAF0D36C036985A141413ECB7E4D69D2D9C00EC7
3685E0E43905B911B89D67CFDCBE86161B4BD1FEB2250D6FF27AF9D54A3CD7A7
7156ECFCF5A752FAFF5A9FD1CEBDF3A6841CD8A6797B171461CCD72C20F5E244
4EA6AAA8137C47488F388FFE83164D589F0F79B1581BBC768655DC797F9282E0
15B6A1F5E401CBEB5952409A9D33A6C611BEE0304DC92A25B8486480E9B7A64B
3FBABCAD5790A4F95E540446A0F940357F5586F19057455E4A937B05B56CA999
B4ABB79E370A68B7B05E2A8E46163D8ADC8572C999E639EE243A6156F1482728
C728A6B725F764ACD772DA0F5B5B75A5058E3A0A737176A72B13FF17D3177853
C2F61DB55E78F51EF8ED2AB3B538C021215433C972FFB29E30B0FD443AEB9150
5FAA8251B42DDDD40281C3D9AFC181360FF0E25C27A81263A9B1A334176810BE
7699FF1F0AB51408B3B2B68B869EB02CE8EC07EF399F4E3C21BE7E5229AF91FA
8E16B5AE0AC9B10483C1462758FB368F0751E74C0DBF08A131D49C6F10F2BA6A
A620A0A4929782F674D37B00EC7C7591504C0D2368CC901247235A0AB29A25CE
E992C5D1BAFE3C2A458AD844E520792075672344DCEE4F9F1687F5E0E87F0F48
7587E28F976CF20A782776BC9951B690D8D57EE7018A3670FD551FDA5862892F
19AC18C5BFB03128E6961B63F20BCC1EF8B8C5801C78A16C86F67B92282C5E94
BC64F3437AC57469BC42FC201FE269C2E9471E09E0E1DBBCE5C07FD0195D5E74
D9F695C3D05EEAD310C5A25C01D56A6AEAF78A9A2AC80EEDE74532E61F0A4148
24E7D5B5BBAEED6C82CABD6D52BA08F55AF52A72496DDD55C5D7526784BB4992
45514FB48397DA8883EC3A845A1C10439C3AF952FBB1FB5B66B1C0997FD99E39
38CB3A86D88A048A3485926F47188E6D69A988D637E254A96003B8B69F7140CB
97BA9FDB492FBF4FB52EB5AAF34ED4B7F2CABDCEF041B0BCE534027899DF0624
DD5F66E86F1F3B43C9DAE0F7EE87E5ED6CF1EC93D4857290DC15776E1EE3A9FC
0025145E54941AFD0B1029C5F3CFF6F9AE1706DD04C8EB8090679A0F92B5718E
3B22AFF6955D9AA9B45DD69A897ECAF391C8278075E21E1E1B545625093ABC1C
D1117D0990A8A6BAAD298CB839DFA5CAE650834D865F2FE04DB8C4B96D4043E3
3DCAEA3C47069885A9F261AC5557A602EC182E32DEDB4C0C42336A3ECC10486C
74A7CEBE2DA42D6CA989094194A4D791F756EFA506E74A4A667246DA83057373
EDBB2488730335A6D1106087B363715ADA1125B5E8C57E002EA5001C5F10CD81
BDE0D75B0C7812187F6B0646E6A6698D1C5271D998208C7AD0932E81F821CD8B
7C3CFCE272AAC20C04FB18FAEBC5D13EE53AD6D525231295E1049F51EAF74D9D
0B1B45278764C5465DB0D72A28DF3D5A5E224350C95D7356AAB05EB2BD4799C8
1A3D08DF54D34CD2467A63D8383338566AF3B07449FA8F5744D6BFF289A18D94
3BA437DCC64F9446C357D79AAF6CCDEE4EEFB8FF73B94633C8EA953853D0F5F5
3BEA58A7E0DFA3C810B8826DA40AF57327A5255DC3B21C94594116E0EB90437C
4AC992F87C32EC2A0D8E8B67E2798AAF50754CEFF202A5675C441769D98F97B5
DEF781272500E632C8A1CF160C2BB20CC80CC41C45706E9BBC637266C882C0AA
B19067C96B8B323F5F494DF4D46B342E531218F0FFF4669FE2C843A3C80EC33A
F485762C50C70071667AF599119AD3F245E3863202C3704368099EC6265CCA87
548BF0022039A60F3D9C39763163E56C5E1C9A35D8B14D79D447B1FB579448DB
FD3331AACC94E00A6DB394962FD472FB7C32A6E3E3EEAF36D0D501F6CADFE62C
391F52BBEBC870F812798E537877B9BBF26FA22D376427AC06A47C259DECFDBB
AF8A34BBCBA6C09E2E8FB853D55756330C24635D6C0389469227839E073EA126
1082816909D11BA07A7067502993BE89CBE4E1D937837115D43C0AA387BB644F
7769D40F24AFFC6F87C280A94CF9CAEF7D3BA21271F81B8FC3A863FF8967E35D
5304DD325CD55B00736D33617426738911FCEE9EBBB70C52D98C6107D60CF235
0748B5D6DF2DF9077C023756AD53478DB0D80171F3A7BFECF0F5BA7AC1FFC3AC
0F5802599445B85C1B4303ACE12540B7AC969F9EBBA0A8746AE9996BD2AC5D6F
77AD5026B084780EBECD74740D329307C38F35315DB99874CD62A121C2A90AA2
AE164475AE670FF0BE39AE8EA357AC094876104198728D7C2014608F6D4AF267
292A528DF0167174D65AF973D985C1D7AF282BD49866E12BDD2E8897CFE1D4D4
F5F080E48EB1B2D5A30D974A7E9B24DE144250AD8F780647BAE28788A949376B
C806F126807AD091008E3334AC38D8521F88E297E8EB42D043295BB83A46DCD2
01B947F47D6CF011878B66454AC75984BAB2DA260833583DFE44FD37DAA27BB2
831961AECF15A9662DE5DCEF738E41313C89D002BECFF059A0D9878F2C884498
13611CD5BE08DB00EF3A9E7850037241F1B3A9B7025004216D86A800D3859EF2
E69874CEEB813B03690A95458A3D138E5F331E6D52502BD71B368A40364A4F16
ECB4FB1CAB6B75CAF210654DF8DD073D2FDE032E484FC2CA805A8ECC02885E7B
87F19C171913297E28BA8CC8209362224328EBF1889113AA1187857C353C68DF
31124072BC5C7DDA1F320987952746EFBD23A3C39A72F38FEA896417A9A953BB
79A53E880DEFE6853F86A81E7852527B27B936FE072435C8E3740FB2D9DE3425
7FD3DC31B3320EDAD8CD3CB4263493445F46C8188CFC7591BEA79317E58354A1
908278529D1E42E7EDF50D22B1CA713D71B2EFA129D784901004EB112AE678F2
5DBD2130D480C76F82AF2F157AF42FDB18077714FB1315BEDC7237A0B69DCD78
807449F67EFBC25514072B3D6C1D14C90EB2D850D5E9A6060BCD92EA3FA6ACA1
EECAE6A2DC07AB49D8B8A94F8D1D590C14DA2F7B6F5102C72E597229F2B00127
E9DE38D6007769B625418C68866DD4C4D1BBD27B060EDCC9D70C0353E9314027
08967EC7F18E90B1F3011CD6C6C0B29CBE640B989E0752A8487B1A8F2D234A96
C10FB17EA26549517E0A9DEB5A81B562C579510B9B4C47E0081BDC913ECCA373
DF16A91A2BA41C2C25CFF2F35CCEB3D0492CA5A50A0F997B30F6D489811D925B
8A2F065EEDD89F309FDBEE7B1B2E3EA4D62587D643A3B76A1A09ED71175C533E
9BE125B9014610AAF821D09533D7AD4D044433FF1905B3B54FC8437DE57D9852
BAF90B8E8B677CE63EBE84BD2949166C7F5A2824CE46956FB8590BB6A4D0230B
88330BFD2A83B0EBD3A791CED6A7D376AADC4FD38F0A6A260CB0C2BE3D5CC746
A42EE2B1D57E50F1B35D494FC3D6B57700B112472EDE22BCE13D1400D6977528
C06E964E7FC93C07A6B211D0695CB87D33A75FD9A3B542D1BA054D289504F8A1
604E2276DA7AD0FDA834A508614C4541CE81A539F8903CEBF5B34392A93710A5
8498DA5C9565A5FB4E958C951F2B0BF72CADD131D028BBB563C43EBADB6719AE
00BFB9D1ECB790793CA552D60B264C4F8FFEA0CD9B800347C89FDB49A307C3FB
30D96DA2D8DE3DBBB715BB751E6AE4F6E1182AA5A3BBD39201C5454E03278804
41CC94F605D13BEA8AB5DC0191910A9979D555329475B53C61BDACE276C6EC7D
796616852FAE23AC16CF82CA3579BB6074033D5A93C3D9F6BEF754ADCAED8D5E
C2F0D090EF1FF5CB70E6FCD8EDDCB9320664BDD22D46FAE9888AE49D1AED7234
137CCCEA64C851D80A7AA6A9E3E56574E1532DACF52A04A29D30F727DDAB5EC7
06468D399CB9F21F7EE8AF00B974939869E6DA7BF32FD8B9A9ED9F92C0BD79F6
85BEAA3D275B80A24F3FB172EDB0F4C743474905B1E7DFD42DDF7C61F65487DB
DF889A33AE3DE1E9BDA7DF0739970B308CA23B037CDFA5ADBE09C339A9C09BC3
0D6EFFCBE97827864F8CE7EDF4C1B9CF11AC878EA65EAFB0BEC6F12C172A3448
ACBEA2C2BAF04A0C9207DC3678C6226DF652F4F8BE97BFC28D2C3612F411771C
1FEFAFD35068061FE700D342A55792E6A0CF283AE44DB9BCD888006341E92A38
39DD09671C791CEA67F5A9C6A590509420DFFFD3FBE4EC8FA718D977F90897EB
9C33B1779F2F949BAC7A854FD70F209C5427DAC1E8E5B074239CF3A166C3C3BE
35257629A6B7DA50846C8F8D3DAD511EF3D25662B792A29C10F49D0AAB632EF0
B41764516DDE97A987F715808DC253D156265237EB817B5000292F174274A9E2
F58E923D66EFF843EF3D67703D38F1C1190AF61B709BC39AB586869DBF470532
E692C31077AB242FA785DB8E1F6B72C0AEA2C65E3AACDE9B0096B21D3504F884
3C0FEC7288B07A55EDB464F2C2E7E45144AFEAA96DC29BDE6487FB6EEF22488B
D163E29FD433BC2701A5ADEFBB8F712DAA17DF81D7EC9660D69CBD2AC4B8766C
A5398DCEA21D3710739DA3A826DEF517A01C21FCF83DE6B2CA1E50209B88C618
E988EB66FC90AAE4DD5692592CD4593D19A11CC1507E2ED3657E173A4BD95F15
9BAF2503A3671F3326EFAFEE782C2E5A23B2CD707A6A4F354588512238ACDD24
422887A74EB43265466C05F9627822F375630FC9A28DCB5D3CC22E283978C391
ADF8081FAEC1822A630996D3B6721E4935F08FF0FB12C2047174DCE1514AC253
873C49330A934C372E4C019A9AE4353C71CBABF29343E3A9C5378AC3F83AFBF0
A9406E35FA76FCB1DC4ED9E86DB24B237568F2C06B08D0760887BBA8202D430E
1E25947B5C4D6B3D136FCDC2AEEE1911E88AA792DA3CA61BAB9C801481CDF494
C2B742B841229D0627B0AF182E876B0FD46A5DEA716F2EB77EFCB31DD2AB6FA0
B35416AC82344578DBF83D0FEDA20AEEAD4D6AF20D223D96103FC172D53E0621
AEC483F69425DE9A2486FA693D8EA3E5017C451B0392011E2D54197F24C1A63D
06208281FEEDE820160CCD6EC3EB7E978B7113541C3B84D4342F31E9635E68E6
00FF284E33E9787D1CB50001CB1AFB0520A73B3E622CC4BB97B92EC96B9A9700
A2D03E4E1BFEC841F42B1FDB39D1DFF15552E6B19178606A6DEC9D5D61A956D9
97AD545EC311AFAD7D6632F17765DA9E85C5F3DCF61910F2EECC580967BCFC2F
772DF835EAA366A11F6C7564C80EB1E70A9F7502752BFDB8C6F3E65C9F6BC48A
4E866D494C5E8AFF8B993CC7C4541FF7DE06D2F55C090E03DF56F92D2432EE94
D79A8AFB894FA1D4CCE3369A3F20D09617237F5DD620303A6C229FD75CDFA359
A0CF417AE82FCDD9B5413AE6E0F6D34B98E9F793E6CCAA8D4724D13A676C071F
4EF3E84242BE3EE6FAE37E7F974BA685F6B14095B00EADFE4AB71D286ACAE96B
309C643279553652820A8D3077A1F86BB8DA46D7CC202CC8046EDF7D04E9E1E9
6AF4D980597E77D486D15790BD7E6E419F24E42565BEACD8D6C62549E8382350
77B0AAA5080D23DD538A8A3E5A69D6BDE510BCE5EF6FA4AA3A4573BE520DC302
15BCE7B2A5437B0749170D294584686A8CFECA7110F15E19FF489044CFD49634
83352448CF2C1C4B7BA761D1C476AEB5999BA2BDF1740D3963F76D59A40A34BF
6BDF589BB5AFE313BED8B664590BB6A4D0230862A6645CD69FF54382BB45EBDE
3AADB1C26E9D27688B0DC75E790B8C3BF5FAA2C6D430EFB53006DBE34E767090
910A9D3DE17601DB539EDC3D52BF3D0EAFD00F03986011BBB456EF5B5BFAE7EB
D8BC0125E3465D477C74A7277FD1153A3448D307C029D465A2D6BE709234D73C
597A8FF5B855B9419302F28F5CEC51E5EA8F51CFDDDB8C73B21F88A96470D7E0
95A90359FAB5F5116296B88661F4D28A1B792F426BDBFBB3F03749854017C791
73730771681FFCA394009F557312FBC3B944455A8759EC47AF929BA4716C5471
EEB864033110DD1572CE251998CD0CFAAAF1775F282883D80759D13AD930AF49
79D68DC55E2A11DB3B1D59D83C735BFECB798ED62D36C09D3484710193D79B9B
3EACADA7F45D948C7EA4105A252E3AFCEB5397702C02918175CCBD4A7DAE54F3
BB8BC8902D5C251C026DA33DE7933B3351451DD607A8AA3732D725BC4B503AB4
CE4775C2952BE47D0063A1C01B4BDD1B9B310B5232FF2FFF8CEDE6AB45071B49
CC0E773E8F0F4E1CA200F809EC8C3F971809C46496BCD17274EFC3146B6A6CFB
72CA41ECC81727528710CE5CC7C8FC3E26F5F8E241A37F77D5075DEB94D625A1
053DEEA2134FDA0443A5976A12E384FDD59E1982CEA0684169412B72CC02E498
E76699F4629D921B3F8C61BAA39B0F3AC95D83EA886A3E3EA999EFD5190040C7
162D20FB51428690C8FA3565ABFFB6F13A1AE9F9BDF5278C5BCAA1D4260F481F
20BB01F04A530EBD603F279C5927D41E5C1A359550CBDB7BF3876A3459C6D27D
C1FFFC20490DC4B16D88915CF529869B58CE598FFC4F0B70BFF3FCE9D36E9770
BADAF2CBF6B36A9557CC97CD188F9332C0C0109861075B47AD7BF70890C6612B
F7608DD8EA2571C9B69A22B3AA08B065E3444FC2C65B633802D056E2577FE988
887B638FD046DE70ECC5DC1042219AA07500AA5DE6D5E073D10ECBE758FBA257
8E432EFDD81D819FAA8BA46BF60B9603D8548D437216C95C66E4B7C858A0E5F3
ABE36D414842097027C3C771B5526B49C234D919C7F7BA623F3ECE53E795BC80
158840254EDDDF4833B5B48F8A92F37F5530E36EA1F0D4BF4B07A65E0EF0CFB3
42478E6637F2CFDE6259FEF86B9163FEB5AC1BECB7D7FA8E2371457A43FE9C29
19E4AE0F8951F45A7F35BB6AA673F84DB78BEB115978A0595955300D7006BAE1
A86611C57C639E1C52BA70AEF080929BC7064D39ED40024278F5D3F969346C4B
15ECD39E1A3561F05663AC64E7C6CBAA4F9F10AD8C11FEBF018BF3B7C582985C
5AF067EE324383EF00F38E668665C04306AA59A268FC8EA33DA8CAD17A276C40
6CFFC6CEC411E6C73E3DFEC3678F1DF7416A7FE7063A503CDCF91DF1D19CFAA7
95A6341E63F8E3BC936787F84F0A1B67AFDA538D33BC26432566580E7DA0DE2E
D6DAB069B5CF46A726A0D8E934C5A0B4C1B7ABA10B23A5861F3B824FAA8267E0
E5D0770BBECFF3914AC1D6CE4AC30019BBB822EB185F9E8F8C3B499956D9E031
D3124A2145FD4C54A10B092B01AC47F846AF8B5CD33EBCE86705E3B9B78A830B
2745029828665AAE05982D52C4F27C1A3A51EC41D51483E63859D6580924CF6E
F39E2B34144C53A1C86A1A3A68549A5AB72CA1CE5A0DC4F7C83D152C9556B511
D29E30DCFAA597438879F0904A7218063DA3448E373909895EDE823845D05308
42EDACD15C03241954E954B88BFF73A257EF1DE98EB14476812F7B9B78E37E8A
21C7589E8583735FBAEC9ACBEF2DC7F5DFF9C0B95D3FC8CEA71098A6823BD2E8
0D1D3C1C62CEDC711F08D91E45F47FB53604F32E108EB7387A92C00FEA708626
979722B22BF305B9211C2A3AFEEEF59ED6F0CD245FF8235BE92B7515DD8DCE67
5255C61CE85E4E22B9FE88D7EA6237862A85BF6AF732E1252F7D025ACFB8EEA6
E1F881B8725D81014C25C52D06C3B2051D50EE93E8633C045DFB88160B5EA05B
1A181A95677AC8EDC5FAB3F9AF0BE932C4F9A3967179D3BCA1AB4FC1C3BB1CFE
1DE2D7D473EFA759A2EB2D6F77BC72FE55E9A0429A706F2866DD09BAFC7DD8A6
FBDC66A4CC6B9EF494EB537EA64EC2261E6953FCA4BB7B6C3C4CFF66B4D84DF0
991BD498B036428EE579B5B17372CE581CF175C6401D8785E63969C959643AC1
DF4F0BF77D4E4522AB9929A633A4C82016F1C99AB13179758F9296D0CDB447F8
C6ACAAD5B83BEAEC1B09A1DBD3EC5A4B467EE2C3A135BC0F960F4418F0B6B700
C10087F63A4B8892123BCF6F83DFF34AEA8554BDF122597C2DE11E74B0628FE6
84DDEB91F99E6848A444BB3E0646A7F9D3AF2308C2D125572569EA98143CFF95
7F07313F6EE993F2B0F9635C333E008A5A5EDAFE34A1A1903E72466C66CDBD48
E8681B6872F466D636654DD32C447993E594FA587BD5CADC350EFC5E9EF3849B
AD0E4DAC8B3F40E5676F1629063EE766F36F92B5F8D36B7ABEF93E3D86279638
318769B96C42FF07BE93E1A13F87BAC02DC4FA4FCF96B332BD962BF62CB09DCE
79B41B274A5E3C8AE62197F9A21611132CA5B08D3FAD12705D704D60A60A5EA8
5E22B139AAEBA5C68AFB01AAC01370C00EE6B2FF9FF1D53219672A95DE27FC05
01292D4CD1574E5465D79C8F25661B107BA114433ED82BE0DEA59E574124AFBC
E8DB1EE76D18925936E1B05E272FC69A8EF64A47CF650A3DD81B7842FCDC7774
54DD7138944F55A2DF6E669E072385B00C1714E4DA86E6243C3CA01412036B17
AA65E6216F2E73FAF9372F54EF6F6896AD2BFBF6431EA499C575E256F0F23366
4CA95FE618E0CD76825D8A89537615A5B7739F43ED47DD5FC2CFDBF1D3064AE9
067E4C6776D5C7B463A4870FBB88A5D4E07BA7B03BE742D023A845CB1C935F56
60F38B2B44DD014E2D0E664B8665E45B512E8FFB7D09D31FB624654617A09D24
B00FC353FE0FB59780CF8A62F85262DA7E2C9BD008C32A2CA104439A26135F59
6AB2B8D58DFFB708B1B99F6059ECDDAE7DFD17887AD4B1E31634AC7236720876
86F99F73F428D22804D2284A006F34194C7DB275D55FD6666122C1E6EA6D4843
097CCE3C64B5CAB37FBBAFD27181179AE4D34D1F7F476C4D5CDC85EDC7AD63A9
6FFDC0B48136D8F865B8DF82E9AF6BFB5EA267DF89A27EFB1BC2B6D752BEE81E
DBFB7DD54F1152E5860EF5A51C3C70E584BEA03CE41CDC6EBCA0396CCFE02611
2F9B48832DE0D490A39C941FF9D0AAC5004559C011D3D6EB874408E133270E9A
4401E9CAFB3082010FC68F8D4699C5F706155F964FA0B8FC2849A2315A350F10
45FBA8E7D40CB19ADD3D4B68C971AC6CE4A20862698A8D4233EE52569822E091
4BB01B4AB4C7F46F2AB428759138B7B11DDCA9AB619606AF51F343EE08FB652F
6DCFE4F332451652BEA01BBBAB04E81B37B058D4628FB399F155C47E854B50A5
4AE13CF8B9A0813F359727CD8EF0733F08717A0887ABE2AE76E088A8EF1F134D
35E9A362F7094E52254091E46E7CB189484ED99D2C1483CBCFB29589E0F139A9
01A46A3A23CD5BA30095BEE7ADDB65DFBB6544F9CEC87FF31212281E625600CE
975950835533008572C1D073D384CE2A87B294965D375B890AAC57F4ADBB392D
C4F132ECE3E3B2AD76A33D712061527BEB783B34CF9E533CB6276319BA380381
275A2DF21890507A9E74C161B06E306D16781E8A7F7E49A5746295488250149F
3D8D7AE9F063AAFA5BAF32AD15414795DBE6A697F3C20226BBFE5020FF27CFC4
88F136569A8A7C4D906FDAE4E848876E9B09565F80BE7C97874E8ED7470E789C
288C7444517D600944F81242F27D1EF40EFBCC8D47F9E147441EEFC950F9F022
CC9CF6E5A3B860B9A097D888CC807DE9228689A2B9178D69D8268EEF46F5FF09
F6DAE34DB75B854E621C3F01DE97FD88F90241BDC9CB1189921F676A72131FDA
592095D321FC75004BDB08C83C7DFB027C46BA5986D256E697F109A2F7F985F6
3DDF62F9D048242672B512A3D9B26E4BBA183D518EF3451081F75F4ED184213E
DA54CFC3BF891BE8CE31FE4AD617C0AFC02E479FA8BBC8E07F18923192325FB0
675F3A83426244DDDAC3F958F79EE30C7188AC9858E318D34F7F53CA62EDCF1B
B65DF29E1FC1C8F09F0E78201454B9CF34DAC4AEC27087B48FB058A327E3E254
DA79CA53943B2D5F219C38370002F8E5E1208FB0520C915EC93168888C897357
4C06871F7B1E2C4531E58D01F7E44F7DBCE6543A930894A0D0F2B63EADA9F295
B99DC0BAE16D609919702C3DA7AAD05855F5E4F13AB17832891E710BB70BBA9E
4EAA1FA2CA81196A538CACFA61DEB24FF285BFCA7C15CED4050EFCBB1021726A
0C6BE623494AF51D7943EA8FEB778E308F362180D4EEDDCA75D1A4BB34766961
7432B09BB8203C115C01DD5F0ADFBD0EE5DC53F568945674E4D0F4A708C20B91
196DEA68C85055DDF435DCC027873C04E183E24372764F4D644351C51B48516A
A52839C890C663D7E37E5613273AE1C4EF93CE01CF5227E5C69BCAFB66495654
CB6AA06C67D9B191B831EA2F27AC7D51C51DEA42C56450B64441C9EDE8D52A47
8E87648237168F37A12882F5A348A1C0A0063D96FD2C918D3E86DC95C2127427
A19BFB225F28D5BD85085E77E516494F09257181CCB5B4F484E2F94EC1165FBE
2A6009CF1851563DFFE140CB99C145B6135754899841A30E81E7F7BC0D375E67
11BF148EAC49A7326E734A42C1B6012FEBF17E6729569FCE5494156A443A4127
F3D737118AAE5640D06FDABD7AC9DD2BC27F6850994C118DC1AAAAEBE1461616
C58202CE201A15260D2FA3ED2408E1FF9ED76A2A82B2EE8E6EA35F5EFD0DE211
FE1EA1937B1C23DBBB3ACD15472E6F926A8339C035F33D5F41C5D7EF37301F07
7EF7A4B8FF42F4F754BA56B866707C3F68FD1D45DED9789FD69FD8280D166F8B
1AB34427CC5D8DC32889991CB5E73E5096262561E190A0C47240CC29D7FEDACF
A6B424AEC36DD3064AE2468E9BA0D3B862C84B97B79A4D879A6078DF121F8986
5BD0C429FAA2972571B288A6ACA1CAA4811BDF22DB505491318DF4BC1FF59EC4
C58D12CC17746C1B43DCF8C948DA95F1EC1CEDB3944FDA40ADA7DE044DAB4330
2819E10B508DD03A0964997C21B63396290803EADB371FDE9461726129027E41
CEFF2F2C000C59DEBDA1E25D79EE40695087E104FC481C6ED876538215001F59
74A8C4EB5A53524DCDCAD29119A3F7D9A1DAAAD8032C88BBD33CEB391C4DAB83
51372821EBD1BB19E99A4C19FF9AFC012D7922632F0DAA19F4823FB36CCCF06B
C1DA574348D7A10DE3F7992F8E4F5377BFB568750F1FE77A22BF6807D5BF52E6
5EBA700A9BC36C35D6EA7A34678581EB9A29ECD4AA6CEEA9A174A780946C6310
80F10ED4C88D3CAD18C19B02CC1E3C02255B3C47D141CCF5509DA66387F72134
EBEF0F147CB989D4C4AE8695959242D4029E0288C34CEF360A7C41A610B22768
877A4447237DAC5DB53EB941EA9C3622362D69FB96C379867B6360AEF5E6EE23
CF6B6D4967BC80E31373579000A03FB041F10521AA3C4FBD64CE878D685E4BE4
8D80736BF36DD39C6E56DFA0DE7B52F3711FB1038DA37EB496301B762DF1D85B
704640F18AD4E9DFB5CF45312E0511569F8FCC2A1BC53258CD6BD3A413D4B599
2BA2A3B633EEE4EC8AAF4D2B9856F7EEF75009018414A21331DDA1CB70100E87
F216ECA4ED37FB2BB3082CB6BA9009605EB9436081376DF5557E6091F9FB6069
591EB028A5760902AC639B7B0F4656845170D21A6D5398C9A9F55D7C9A40C894
ACE087DAAA15BF59C66A5AFA96337C3F46FD62A84D9A357BB76BD89854BAFB17
62AF359D0E36CA838C0A0C78EDF5B903CB3E4BE791B61AA55C7BCE3117551557
3472C0894A6C32AF1BBA87B3F725078B3A433B47D7A6DDC61621A49006DFDE91
A8478C84E19C2DEA75548A5DA8E5C03D90E09CC2D261BB60B895FC5B676D94AC
D972CC740E7DEFF09F7F16662F661A3C76A940B81F37F25ABD0AFF98673E8471
9489CC90F0C50BAC54BAE974DAB650AD06AD81D5662275FA8AB3657412C89A9F
C7EB36DF68C1736BD5A1978A5907AC2B6E9E35742912EE62639BD65D5D785C24
15257662D9232B614456E0A6DD89324A954C1AC329C43BBA02518A939F0D3725
BB7B89836949A840D0794524D398C8FC594046BF23D6B4FFE2749954C254D18F
903C86D317EFEADEAD8E1C6A68E97EA34CF71E354A3BF14E871452C936FD6245
14D4E6F30ED00CB6CB08CB7BC9ED1CBB44D10DB76610A1B604E836E963A471EF
DA3CFD51670318AE39EEEEEC8CF0097D6055B15D7262FE001F2F303A6EBFE8CD
E83B62FAA36F0958444978910FBAC1F19D4DAFDD0C9CF19E7286BD239251219C
8668581163AC12980A42D648AFF95BB160A1BC007ACB9DB67A98CF22A90245C5
B448FF529826E4118E4729232D7535233F0DDD874FF4D862322E347E9ECA68BB
3EF1460E18EA63E53D8A13A6FA3994BFDE0ACE5E46FEF21A62F36030910D6F09
C67B2E9D693A3E0CD44EFD0E2B31069B82F5163117636323E658222EAEEC41AE
323F048A84448BC5FE6E278C0FFA4DE2F2CA90C4CA7D8F471A184E109EBF4BFB
017AF84EC798DE7BFC93B9B8E5E561CC87085ED2DE1FC2C4C5541F08C53EFAF1
643F4311574F6EE8A84AC058A339255FB6A8B6A8677DAF680A606AAC3AD9B9F6
7A76321D72EB6F33B26808DF9BA718C1BA69872760E9628A4D957BC65012AF92
C044C77086489E65DFE48ECABE6C536DC902CE2D052B0FC0D3247B7E7B4A56FF
D1C33836A0500DAAC8C33E00FE942CD1DB31B2E8036833DB3AA2ECAB6C4CC63F
281C1F6C44EA0865CF960890FD387DE049F278EAADE0D2A72DFEE714676D2F0E
5BC2684DD498549EB725AE3EAA4C53BB7FACA7C2B104EAB2AFFAC9E7D4F06D7C
34D7BE293DEAF90570C74CD6F978ED84C49D75DCD37A54C7BD3782FADF1528A9
813CB89A552E337C200E22C9144553B7F26B617E934C77D3E935FCE41958210D
E0AE22DD58E0241C6D7A3D035EEE76F9B3EB0BA255F95F10496E98062F53E28F
82DD6B00176473F62AF39DD56206ECAFD217216E22BB7033DC781F87B988F07F
AB300DCA3394CEE9B1B26FD9DEBA1289CE91C94605A5DC519DA11A7C8AFA7201
EE1DF209CD38A5C4EA5764E090D35158F842C8B96593B29CABC22B6060A6BDD3
F6744E456F640FB99C23B57A275F7C40BED551CCACDA09552BCBD0AEC3F3AEEF
5C4A12BEECD041F642C64FBC3D63DE844C591D34B923A9819111DFA3D695E809
855B7CC9E627AC6253A5B754F13145FD18CE435B6D303587A31A32E50AFF7E09
687E226D944D61952612F89F5D0DF53B9CB59A3B8CD965E565DD23B322F271FC
1571896E8CA4F8E578C6BEC6E27BCC6395457940AAFF95F230AF19B21E9BC055
027145D592F4CA26CBB5AE4BE22A548DF436FB59F1E55676C1A858E837E5CAF1
FE737C06CC44A82D9A104500ADAC20176D6B1D728A0C91480D8D4B9AD79F0B31
1333E460794ECE573DD65958B6A1EB09F54F42A0FDA22ECB5BF531AFDE64DC89
34DFC0683C1CF95D39C6EEB75BAD314F00DA4A07D7ED2A7AE4897BAE856862FA
C1458651EB4DACF02F864EB8E2E079F4ECB3AD2A48186F7C91B7D6601639E529
2A791D302F86F09D14367C70EDE5C0918F9A43984FAC6F341A9C9CD32306BD67
9153D49A512DDD00F17882EDFC845A5D98718CC8335A97AF9C0A74F3BD07AB15
DAC86B6A38278AB7782C92661D854E06106E254406E5BA20303DBD3D231526CD
A038161C6F54400B7AA1C36E962CB4F5E424C0B789122B3716DFFB3835746D9D
1DC8C511A9BE09E953CCF073B3C5DCFC09FCD355E83F75434C6BE49F6D99484B
E4242D2E703E2E7B76520E5CEC1816A605BC19A6E28E268D5DA89CE1C46E38D7
C39EE7B70590CA58D1D3D81775790F462581A9F285312FDDC7772FE75378A28E
441FA4589BF9F34A46EA122B29C57301EE14A71045E4F6C1588BAFD179F6E933
6A154FE7208B9DFF1C434F6DA048BA86DF937E463FC61F2DCCAC40B42E10BE71
5C30DE7035626BD636AC5B8E7D482307CF6C936AB663AF9C467DCEA05BE51C60
D169398D3ABA8BEE68CFC5098021DADFCD068BD67440585D6B0E22824CDE79F0
FEBB4771DF161AA8A0AD8FB65BA3745B740765E0311F5395121A6424992E2F73
4D411B3670F46DB71F062957F4DED67B6EAD7BF9168D28C3BE2320ACD6293B66
1E55231F8B07F54F5F97295A59BF918DC34FC7319B22C4EBB7174901BBC74EE5
E8C2438ED658C88E30D90B1DBCF90D4D091B077AE7CFB4C70776F205851221CD
098C3A358F1EE34AD86E7D56F0ED022FB1CD38CAD285193B2FC979DCB6445A01
A78B771254412980B6EF2CFFD12EF21AFE60F0C6DA7771C67690623A80FFE497
181DF3BA7613FA69E8896ACD5530D52DC114F93228A67BD8B082958F11A546D2
75279F81E5288CC5315E7B89565D3D502E309340A0623C054004D02F888B48B6
B32D65924E7231EF840C46B5EAD60D1D4663E14590F1FF8C6C9070A8B68DD3B4
461CB38F84C2660015162D06A4307A935192BA9824F4B5332AE6696B1F92BC2A
E70B18793208570090955893D310824EE8B35413D7F0C77FD2F1A83FA28003E2
CF40ED82E8B826869E337A920AA7A44C204830C7131105BA79C64637D9837227
798F7B41F27A64C02D989FD12B8CE0E15C13E2707B6F3277DA11030B6EF7D1A1
0D4CB90D2F4BFDAD672DED1AF3C5F86EEDC4CA8AD9672D8BE14D8FFE670CEA54
736AE3F07F7AA3AD57307C793101199C9460A2FD175FB1C72BBA99AA2900DD7A
FC444A661066D6526A7D0D110856F2FC6C5AE2301BEB37FC2DD225D7C947E30B
A0BAA0F86D854AF0595D6C771CAF4799BC3BC58699A6DB90ABA2EE08F91E7D58
5FC65803CE14B671BFBA0BF2EB8DA79100A4F47D83A672281FEBAC2008F1FF48
CDEFD54F69480B2A7F8206A2C53DC6F79D885BC10E96689EBBD17230B1CFD6E8
6DC3024EEE21BF236F7E0017A3D7AC8C48965630D7B6C8A27842289FB63A1EF6
EF544F0E6C09E78911DECCC62916DFB5CDA465BDB816EB68042A06AF4BA338A2
2CB8F0C58EE0A42B3F595C921E65A7E8AE6C72E7BA485C0AEEC0B64E2CA601E4
88AF53CD57444DA4B43BC097811BB3C1B98D023FFA3C7FC8A84B49F63232D4CE
0B379AD80470D03F6FACB9C3D4D17828ACA277BEE0CA78CD7BE0C5A7FAF92797
B0342C9FBF7F6BBA39B8B0402D4D558EEEF9BADA1D7D83F2F12AE6C77E798126
34CA8D17C43134B0052DCFD5587D06A1F71AFDEF164D213AA5FCECB439FFA7D4
174A060D1ED0F079824822BC8F014D8A34D86E139F1C2CA8D0A9588FE5C0700A
1EE389767C651C8F90F7E9EF8BDA9601611B4F42CAD26A6F3B00FCF89F8E8786
D465C503389AC83FF3591084C2E8B883794B254C2143E72DB373D95F97BBAB17
259EE1819C24215663F2E6EC6AFF15420644F4FE34645B70AF5A1D155DCBCE2A
AA3612519B778A6339F457D519C0F8F3AB7AA58D31793042DCE4EFAFB551EAD4
94EB4460C3696D58BF8732D363BB54D0BAE6BA4AEE9CD2EEE613D6A8C0018BBC
2C2571E2CCA14B99B38D1EEA86FED6820F7A54F656A4F76F3AB72E11A9AF899C
B5FA1FC09A7296E420146BFF47E44D8E64E25D7DE4121B2CA171AB3330D959DD
35700A6B3DEF7D80DFF892713F2679E15E7EDC89C863B4AA2AF2ACC0E5FAB06D
8C482D3E9673A6B7CBE981B322889137386CE26891975977329BFA002F6AEBDB
DBE143A26A5A146A3C926B93373A150115440CCC18F07BB3069D436432E0B6E3
CB9888F9879EF83961F99B7564FF30E4A85775092A05A0B50E65574BB17C4F45
F1985C83F97992B739ED4DA7A854EE53947B5603EB29465EB78C6F5DD2BEC15C
451E155FC9FB162EA20AF0E9B6121920EAC013A20B6A8AE9E7EF47D164DB03BB
A11A36E398EE37199FE587F6BD7DD48B351D513B1FFEDF2550B17E5170F462
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600 (interro_3_15_11_2017.dvi)
@start /Fa 154[25 31 100[{ T1Encoding ReEncodeFont }2
41.511 /SFRM0500 rf /Fb 22[27 31[41 79[32 2[32 34 24
4[30 34 50 18 2[18 1[30 1[27 1[27 34 30 10[45 9[38 24[30
30 5[18 44[{ T1Encoding ReEncodeFont }21 49.8132 /SFRM0600
rf /Fc 173[66 82[{}1 90.9091 /MSBM10 rf /Fd 205[61 49[71{}2
90.9091 /CMSY10 rf /Fe 205[35 50[{}1 66.4176 /CMR8 rf
/Ff 194[71 3[45 45 1[45 45 1[45 45 45 45 4[71 1[35 35
40[{}12 90.9091 /CMR10 rf /Fg 134[45 52 120[{}2 90.9091
/CMMI10 rf /Fh 22[47 112[55 5[43 2[52 58 87 3[29 3[47
1[46 18[71 78 81 98 7[68 10[29 6[52 52 52 2[29 4[40 40
40[{ T1Encoding ReEncodeFont }21 90.9091 /SFBX1095 rf
/Fi 79[30 176[{ TS1Encoding ReEncodeFont }1 90.9091 /SFRM1095
rf /Fj 22[40 112[48 1[48 50 35 36 35 48 50 45 50 75 25
2[25 1[45 28 40 50 40 50 45 13[50 67 12[61 1[65 8[25
2[45 1[45 1[45 45 45 45 1[25 1[25 2[35 41[{ T1Encoding ReEncodeFont }35
90.9091 /SFRM1095 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -112 -451
a
SDict begin H.S end
 -112 -451 a -112 -451 a
SDict begin H.R end
 -112 -451 a -112 -451 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -112
-451 a 0 TeXcolorgray -104 -336 a Fj(Expressions)30 b(alg\351briques,)i
(in)m(terro.)42 b(n)p Fi(\260)p Fj(3)1447 b(mercredi)31
b(15)g(no)m(v)m(em)m(bre)i(2017)p -104 -298 3969 4 v
Black 0 TeXcolorgray -104 -132 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -104 -132 a -104 -132
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -104 -132 a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104
-132 a -104 -132 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -104 -132 a -104 -132 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -104 -132
a -104 -132 a
SDict begin H.S end
 -104 -132 a -104 -132 a
SDict begin 13.6 H.A end
 -104 -132 a -104
-132 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -104 -132 a 91 x Fh(Pr\351nom)h(NOM)h(:)674 -41
y
SDict begin H.S end
 674 -41 a 674 -41 a
SDict begin 13.6 H.A end
 674 -41 a 674 -41 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 674 -41 a 0
TeXcolorgray -104 147 a Fh(Exercice)g(1.)p 0 TeXcolorgray
46 w Fj(Soit)30 b Fg(x)h Fj(et)f Fg(y)j Fj(des)d(nom)m(bres)i
(r\351els.)e(Compl\351ter)i(les)e(\351galit\351s)h(en)g(factorisan)m(t)
g(:)846 b Fh(\(3\))-14 472 y Ff(3)p Fg(x)21 b Ff(+)f(6)26
b(=)-14 798 y Fg(x)38 765 y Fe(2)98 798 y Ff(+)20 b(3)p
Fg(xy)28 b Ff(=)-14 1124 y Fg(x)p Ff(\()p Fg(x)21 b Ff(+)f(3\))h
Fd(\000)f Ff(\()p Fg(x)g Ff(+)g(3\))707 1091 y Fe(2)773
1124 y Ff(=)-14 1450 y Fg(x)38 1417 y Fe(2)98 1450 y
Ff(+)g(2)p Fg(x)h Ff(+)e(1)26 b(=)-14 1775 y(9)p Fg(x)83
1742 y Fe(2)144 1775 y Fd(\000)19 b Fg(y)282 1742 y Fe(2)347
1775 y Ff(=)-14 2101 y(\()p Fg(x)i Ff(+)f(1\))265 2068
y Fe(2)325 2101 y Fd(\000)g Ff(25)26 b(=)-104 2436 y
SDict begin H.S end

-104 2436 a -104 2436 a
SDict begin 13.6 H.A end
 -104 2436 a -104 2436 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.2) cvn /DEST pdfmark end
 -104
2436 a 0 TeXcolorgray 91 x Fh(Exercice)35 b(2.)p 0 TeXcolorgray
46 w Fj(R\351soudre,)30 b(p)s(our)h Fg(x)25 b Fd(2)g
Fc(R)k Fj(les)i(\351quations)f(suiv)-5 b(an)m(tes)31
b(:)1693 b Fh(\(2\))p 0 TeXcolorgray -2 2671 a Fj(a\))p
0 TeXcolorgray 45 w Ff(\()p Fg(x)21 b Ff(+)f(1\))402
2638 y Fe(2)462 2671 y Ff(+)g(3)p Fg(x)26 b Ff(=)f Fg(x)p
Ff(\()p Fg(x)20 b Ff(+)g(2\))h Fd(\000)f Ff(8)p 0 TeXcolorgray
-7 4092 a Fj(b\))p 0 TeXcolorgray 45 w Ff(\(3)p Fg(x)h
Ff(+)f(12\)\()p Fg(x)i Fd(\000)e Ff(5\))26 b(=)f(0)p
0 TeXcolorgray -104 5887 a Fb(vg)2955 b(Lyc\351e)21 b(\311mile)f(Loub)r
(et,)f(V)-5 b(alence,)20 b(2)3756 5871 y Fa(de)3834 5887
y Fb(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
