%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: exos_factorisation.dvi
%%CreationDate: Mon Nov  6 16:39:58 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFRM1095 SFBX1095 CMMI10 CMSY10 MSBM10 CMR10 CMR8
%%+ SFRM0600 SFRM0500
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o exos_factorisation.ps exos_factorisation.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.06:1639
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: SFRM0500
%!FontType1-1.0: SFRM0500 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0500, tcrm0500, larm0500, lbrm0500, lcrm0500, rxrm0500.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0500 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-211 -338 1855 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E586FAA5A6FAE6CB4E80BF6467C89E1A97B49A0DDC14A3C22BD6C9A3110530
C714F12B664F8DAF49E7EE5F26A1FB39FB391585B92BC143D8AF7A1DC5828C76
FB778196507F6ED7110C374F71354507E7B06D427EEF72F711D631F86C25A6E9
925C4A2DB93AE4A00FA4C9F8545D5FA4D703130E507323519A405812AA421062
F49FB854B4609D87682D0A4FD3B9BA33B2D25091F366D87C885FF732408D32E7
A8BA8B0AA51E0F13E4A5D7A70070334AE4261F477CA6C958111FAD37A7CCD04C
D8B0CF660CC25C087D9E1DBA8EE4869EA22FC33ED6FBC968D1118422FD213F9E
4DE09D8C881B27E43B46DCCE9E2B7ACCF0FDEC76071C638EFF82CE7140F47015
4989DF72FF5A863C785657413A01FE7D0DFF6DC80111DC022CF3C7527269AE6A
F593356351153315F1988814C6020B73672E573048FAE6EB62D784B055001E59
A19509258D7B194D57F0E5C4C0C66AA7D5D54CBC4EF9E83155978E48D01D7913
0B2216D451B4DD0F51D39287B08047EF0E9553C125E00405138078F533037280
E0EC61CC1EE3A221A96B274A72BDF0145BBD8B3D09DF401AD597FA7054E3D205
CB3483DA30F2E7621DF3F48D108A7B3BF2A4430768F7659478256AACA9317F9B
6FADB8E3E012D2C4CCD0F2BB85BA167779CFFEF70063544EEB85DCCE975CE375
60B7410ABF03C828D929A764F4C9A6211F58E74D0934426C78263A746DA754B0
D7D84FB32709CC53990D034E24DBE5F3D0989F144E288DC93DA5F1CB55110940
BBEB6C45FF676AECDF2D48D37FD91D19CE363D7B8B6DF54EAF37C38CDE8B686C
B7AE2864731E6C80876C4CE9D4702C219BD57C52489D7CF2D01895E1F8306324
952F73C5F19711C12E6B20A03922A685B15D0EE737DDD4C04049719B3AB0E8F5
2F3E2E0E713AA0B61CD8FE307275908B4DEEA3879399C6A1C93A5855A4478556
B5E9E1182618196DEA4A5025018D836D313D1590475A0AABA71A968EF811F0A1
E700F33E959679513B6385A96D40019DC86A602204F6D2F1E97343C7EBEF775C
E3821FE265D57F0EFB221735B2463A1A3A4769EB12679F2FB2129CC6F0497358
7C4A53DA1B791E68FE5CA8E1377EB7EDD9349A3E5A4DEEDA0E333C4DF52CDAAF
6C71665E77CA065B8E85C638298AE371C21384E28677CE52CE0F145AEE7D1EDF
5D8ADD48EE58D846FA5416272C32A04C1C3551D95C989D5063DE212A5154B2EF
45C39BC86AF9E234817D0FC5354DBDEFB17532F97280DFA6673DB00533415541
234238A94333B92421F236AA205936A7E9DF9C4F11C555CBD73D6B09B029E483
E9B39639AB5D85C6FD22FD07E8D4E41E58F8149E5A7890BF5C7C4E4E47FCD620
0534A47ABBB330BFBE165415E5356D4C55AAFC10238363C29BE958831122160D
7DBE17C5438783B8382E4415E051C097CBA0EC56491EB06E455320BDA1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM0600
%!FontType1-1.0: SFRM0600 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0600, tcrm0600, larm0600, lbrm0600, lcrm0600, rxrm0600.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0600 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-210 -320 1719 944}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF7C144CBECBB0B8AC425A
08F38901803917D730AA3A77964447A6FDD9D1D5D6CADAB899C866A153F41D19
22B1F8E853431D34A87708FD95EBAAE0636D632C6CE8C8A24746216DEA10FC2D
C907A32EA036B850F319450C5EEAE2F44F6816A6D06D366C75DD9E360D9B2A18
87A6A24EA1491639E588EE3DAF1357CEE96FDC53B9C5C4428602EC516A115B16
B137347E3ED03B4937869940192CDEF71C0F2AE65E9C3738407DB9F6064DB42D
E38A19BCC21F30DC69ACFC17FB5C81CD536C0E8FA6F05081FB5CD8F85031FA0D
119767F746B580E784CD0928454272AF2B8FB4F5D53F2F011685524517BB6B38
E8B42394EE37942132A010B6CE3CFE2E6CA24D320C12D62B1C9D401A74AFE7E1
D4B2B0968BCD3E63619574B096BD23B59496071FC1536DFE6937146ACDD7CE00
25FCE9918F9F3439D5F9BF4494CC501FBB4894E8C454BF46C615A2407776C621
762E39A14708EFB767E2EBB33C8ADD59B3A589F3220142F98A253A164ABC1AC4
C32C48557C507A9E3021229008ABA8BA85B43B193A537EFE14EE90DE56EDA1A1
CF40CE8C0C510EA30599B1381005621984F2BD4A8B15EC634B26CEFA8B03CF43
612FC97D3C94DBBFAD6F325B3E3C314F0B0AF5DD1BEF045D7E5A054D99EF3E21
91C1D5C91A760D90DE6D62BF425C79A481AB376FD2CA46F949C16FEA1B452840
4AA8B56B201E4E7DDEA75D821FE434B5676522496D357B621059C6E9007CB5D2
190161111309D2476139AFE57269C6361CB6F09E0F463AEBE2BA17C0DF2B676B
EF8AD942A3BD1FB35B44B11FCEFCE048E0A413CA2BBAEB9BC90A5D78E6B1EC67
E8D53B310731AACC60AD7BF22137C721B0B6AD0233FD1DD83AD47EAA9EC9E3E4
45BE2DB9EF5D34E7F747AEF16932B3F3C6D6D3C8C6A90BC4FA26BF967AD9B019
417A876EDE63682A24C06593AB2C0F1D1CE0A1C1B8976C7550F275C4190A3AF1
EC6DF13854712FDB81061A9F5C00FCD0A977AB4B7EDFE86FE9668BD550DBF3F7
DC47B85620B641E77FE5F73E9D14B1D8CB415F20F739EF1B49B6D65C7366A3EF
E4E0275CE8F0D3BF4A2151CD13C45EF003C1492E94840A2977DE53BE29CD7775
3162646B1D7AA69FE0830C05ACADE1E4039D242E7434E22EC93615FA8ECE2D4C
27342EF751F4FC23E314B5E22BF8000FD3DAF9A8B70334512ED37D33598B51D8
1420F45BB03781F64840D49C9FB69442DC88166575049E84F39641519C59CC09
CC78560917B2A7265C39784EC4B319959677CB943985B96CA9D8FA3A7F776916
70F5D42E29A509EFD1D8A9DE08F1FBEB0759F70A51E2136B6E937EAE13534405
28AA547B5EAF4EBEA0BC14C055FF8FA189A4BAACB0B978A58EDB6B8787C84C6A
212F067A28BF6C8D599A656CEB8AF1F0D2B736572A20B8CC7B4C8D58109179B1
5292027209A25CB68EBEE9E67D7AC8C5A90D47F7DA125579AC4CFF4CA716E425
C9109C1E32527227875588480241B347367B30AFDFD12CF23A050D6C1328C340
A6556729C317E60CD87639E1B4F3089932369CB542925FE084E208AE46D117F1
A0394D0BAD6A6D318033C85E12B77DB6B54C920160633B59C2D9285F7363165C
83F1DE2D6CB5FD306F441F1C09E1C5281C859EB777FDA513DFAC697F562AA3AA
092FAA20A211D4684B72AD8BB8A5D1B3144B7822C5431691AB86A1D989C6F6CA
DD3CF01D2D43AD2E836C43E520792075672344DCEE4F9F1687F5E18A1F7F2808
A4CD492A90B1AAE543C2D357586AD16D5DA61C12E13338F52F290C7D1A78D50E
363B81CF19262AF6A41B35C3CE298F8F6B866E05081E15818E964BA26343A1BB
05062BA3BBA2174F6F457B8CEE274AE7842BD8077F90731D9C031B08EF9229C0
4D4C6E222909211E8149E3D6E0956AA272BA4C49335A08E4F946E74BEAC062F8
FE26A02632ECDFD0BF97D135B0FD0EB25D48CE4F478E134BB12CC9AE3A5456E3
64D2117D60BA66CB7B4A5AE95FA40A28D7DEB27B069A47979A1CB7AED352BEF5
8C560E44F27B9FCC33D3F2076382F2E96F2F1C94F11476BD78B3F62DCE3FA965
B44AD9300CB1DBC3E3A03639C338E6A47CBA39AE6DA19468F81907C0F2E2A593
DB7AA7618487B1D3D924DD0CED0B372AF195EED1ADAA95369820F88AB02E7F52
2ACBA51836956E4FC7FA005F9847900918832730A558067D2FC40EB84445E85E
8D8315D0A0E3E26DB60F6F40D6B935E1CC0F1D31D3D04EB580E1EA68C289E7F1
94D9CA3F7B1DB6FF17B5BA27C4E2B5A23995C881B05A205779209177897802F8
08498A2A584787139457A97D7E6068500894304EEDA172A99BDFAD7204FC8E23
23C873222A626FBA2FB12BEE4E016B527EF236E5AF135276C81FCD2A8FA1639D
0D55F3644B802016095E6C99BA46C719578BC48E9065AA87E8BDD5575DA8BB21
01894B0C047DB7EF79B8ED91091CB575ECBB38CBDCF48A1E092152EF822F5380
F0E5CFF5154FD2BB8D1670F027599C8AA6FE85CD867387C82549B44DC9F1318E
794ED89C47409E478B53DBEFB94C0024CE2B31A24FF1964DD143473893F650F8
1E28D0CF231296F67B8634C080131D4DA2FD54B4CF7EB11374C471EFCF1206AA
29EAC385C9DEE25CBB81AFAF6027C908EEE802A295E4248C4A1BFB7A8CB00F44
6D25ECD21B236424453711EC6696146B9904A8B18B8920635C99049CF76B116F
0162BF431ACACED6CCF9124B91389A2FA3AC852DF8F0748C75C19B65D2F728DC
E0876AC20486F7D845BE697229F5F1DC7CFAA7895FE9B3144EC77E3DF61AB8F2
2FD1CFB4E40FF4068BE1111CBCE2EA64C3B05B1B3AC68A0B8A83D298C4D9F570
45BCEC024AFFEC50470EEA2501AA72D34045969BC0B18565C063BE0F3E9F9FB5
BB83FBD4E7B60DC1EC13D3A6E60A62E18CBEC95D4F9B797B26664F9A9BFC33F4
366C494E561534BD33798A933C315BCBD971C5D5627A380A78F81319D84C6274
B75247E7AE6939D00ECF677824D4823CFA87DE5DDA61E2B4C573977F19D9D9A0
B8D58006A2A7E81C50F1CF9F68DBAECE652A8E228796299F7BBC7ECEF86ED1E3
99242AFADB8A19C661F538857EEC8AA2D7010D493631FE0BBB09C8ACC305F5D4
DD4290C95FC176BC039EED99160E3E7290D32036155553AAB657D60E2C36D1BC
7ECBAAADFD0B21040E80F87A53D8F90EA0F63D004DB101D5CFF6CCDB24D778E5
7338E8A6DE3B431A32058344CD094018F9B4B8790F6F59291A879E9B8EA83B9D
69D43746B142E9AAD81311765583564A44AE56F46397C5E1009223C277E6B0E3
E71CBD4239EEA0D2DDECD7BB7D063C152982D388DB7A0B4ABACC60B3D708E521
1033D3425821DAAAB8FE4ABA27990D6B91B3822A520D6F9C1CB12188ABCC309F
EDD4FA497D23E9C78A275F71858BA4CBD359B870D40067F132C3D31CF06DE8CD
DFEAFB8A0CBC0119E6711BA65181B4EA0E9538A6DAF6921C5F3881436FF74C0D
1664229029635C383EBCE1CB7C2B074B5AA05C938E87FBD241FD064DBF03040D
46705A1F6ED7377C7126ACDCFC02B7C16E0A77DD6C9A899394FF19037D8A673A
A442E7311093FF3D0A3AC14F3A7E73E9B60B21C842F26EFC7F16D94F29668DD9
7D27867B2D2FCA8876DBCC1722A7C5127FD3D47DCBC817B3D5859FBE06922B23
2B0AC83BFAF220CD42CF45666E41F368E21319E382F750C4BA3EC3E8F6CDBA3D
110893CF1748613BECBF7549175718FE22328FC3356C5A1D6607986E151EE943
E301D9F0A0B58494405D4DA5606E89BAEDCD9E573A2B023352069DD1BEBD5199
146A70324E3CFF770C9A0815EAE958E6A17B3CBF9B54D5E17000CA4114259479
70F983C721DB246CC8CC072B11B3AFE65E5C942182AB71396E9417455C5DF4EB
DA48A165A439409570DDF9A03CCD80180CB25B803317EC7F3DE1F15EC45B64A1
F4E6C4956DF4F0118B300D1B6D20927C4E0ABC977DC8D49C6355B9CDA3F3A115
780B4AED8F5099AC2362EBC736403D067D95F379CF44F3F87740C01DCC3A870D
125837CA28B754F35C5874A9204432243E66A9837BBD9920A5FF22189B85782E
E6195EF6ED3B6830AAF55514AF1C63E8BE31F1F410B1B4BFC44C3E7405DA63B0
5F451A01A993B6641CE1F15CB85317CFD5AA48A8F8DD351882D808976A265030
337A8DC576F4A165DF6415A5893135ADB098022E7B84D9CE71BFFCE11A66AA20
BCE3049F990744F6BF1261BF5F17C6202574CBBF7165183946BF0855A675432D
0D3BA6137B672141302E0C9A9A82F0FA379DFE60338A73083C4108D9470B9A6A
2D88BEBCC30B850EDB381163192BB5742C3A1EE933CD7D3D2C7AC2D5BDDB2548
C6300FF4A5362BAAB8F50D5EAA8BFE9F953BF0CF63093E310562A68D662F0F8A
E1482310DCA6672C452F9D35CB11D347779A5523F607B504C7A0DF01F728F1A6
85854A512F7B0BB9F40C0A431D263F22D091D0F560ABF27CC28850C4CC8AC536
7B366EBC90C9E374558153AC833F4251F04D159DA667468781C34EBE11B77F7D
00AD989DF67305D3A25280EEB707DD2DF0792DC67F835A307680724ED3CA9815
2A36BF36D2F51784D216CF9950858BA54CA7CC4A17F54D043B5881BEAD0F3FA3
DDE2C62A9EAA7B5CAC4A2E427257D7C2AE685F7131B04C23ABCA88D3E224CC0D
4C47CDFD603270F3CE1806150C2BFFC46A5F71375D722DF6ADBEA3E9F50D35EC
6D1D463D49582982FDE4EBA45699E4BB7660CC8A938AEE2340AA12BB786CDD7F
AF7FDE25222EB7D1B85B203D71DC802866F884E753A2A0FEA464ED04E8C7CF76
43E89D5BE373C48E9327862E9C661AB681AEAA9A670586F9ADED6DE71B653E1B
5F49E9CCC94270E49529011A9EC366AD4A745A6BCBE22DA1E5D4695BD0ED514D
CEC1C0B3C7D589B1CA0D10DA32EA97C42CC132FE55FBECA07BE6F152F1DDAB70
0B6CC69B9A1B63AC5634E056C0F79EEE9D91071D0413F4FCAEE18AF239FA9A43
37A44F0D79447E9C5ED2573FD9DE75A1E4D7B0CF43B5B28255712F2E5C5D0F68
D1B18A4445F192668A0F4AB8C27EF1DED74EE602FA579323C5E59E09A4F10ABA
DCAB7204AE358E7DDFC645A619BC423F77E4C7DB510BDC32FCE3B34EB4DFC3D2
A1790D49EB6412C2618C640AA60E3E1C4057B07496F619A02E659CA508BFB769
7284F9D5F89E5798997FCB661211C72C553CFB252C7EFE330EEF63D68123F899
F1164FAB22A392B1E463EE135D9D9C902B17B51AAC0CB2528AECE9DED5CD7296
08CE8AAF3A48C72C78E9693F6829E3381EDCA87B9DD51F01AFAC344014375F62
BFD0CFBB4C097DE0CF3BF39C25138064E46C5E5A503C8F0D77EBB70150A2C54C
D77EE5F902FFDF896FB2B71F3F05B60DD151712ECD1C0A710040E77E88BCA0EE
694D1BC7F57292ABA161F72C87504E36306E6B4631CCE454AC5F434DFBD7B601
80DAE6860EBDF62FE4F7FE74ACA3475F26B881B3477407C51F4EF185AEFAAE39
BC6BB6BEFF9DECE02DF429857C99EDB3FADC61CDBE7134A84685C012D596CC56
7D03D641C190D9CF2039A003B0D1B9D4A5E9539858CCAF28AD7F03CA78B37667
40C47DFC68C7D18DF5EBBD067E65874AF23CDB0DD546C3D2F3FC1DA14062CF64
4CAEDBE0A0DB2CC5E8A65FBE05F8891932ACA1B50E852E5FD47142F762E107F6
91AF9E945ABFF26CDEA98112C2C8B5CFEBA48FA8766D132335B2A4940D4037B8
1258E54FA714BCEB9D1A3A2268162C687171D0935CE72073D73878ABF61030B5
A9733F6B21D48B4E59D982BF9E06969E6BC5E6D5DB6A310F723F5519F243C73C
44EC877FCA7389A25DC6E9007C357491BFBA0CAB5053A1A14064448BD3E8742F
6F04C3DBD06FA0669CF7775414D07B3F5927ACFA908B12495A477C1D326469AF
678848D0EA70E5E9B6E0D538FE9400C351D86CDB7C52B72879152C794199C3CD
0439A7BC2AA2A2C038FAF787628427381FD3DFAB68A367D1FC762962B0D5A0A7
6151A94704E28798B4BB88F6735E7BE7B26A2E25877E5EE22DF07A30F745BBD5
3201C75DFB142D13285E87CC401FB86062722874CE85E3AA78FC49D68F7F48CA
C29A9681715FA7A75C14B685E2004635A717A7911245A671875350CC81F20A83
DD496C36C24947A1EED27A40109D38DDA5BEF5075B4D37B7850C4B8FD2D3A67F
359E0963E59880303D59BE1D3FDB4BC86873D179D88A0A94D2B63DF18953A8C7
1289CEDA0A84C9DFC6A98895446D46E90D8C93231CCFF8B18526D4B876AD9E08
87E13D0D965AAD25730449352FCC07D4BC5A15613AE032CCE548FAB0C8D1C07B
A89A215C8FC1470D926D6E7D4C105DB43791E82077A55DF592632A3E6730387C
5E7CC9F09E0010533BC14E56C291413C501E0AB5C62A9DF4B29195EA4378CE94
2D14E1E9AC03B9A0085CB9CC1F693ABF03C400DE4379F746778AADA0979B620F
84259EED33AAB9D7B7BAE9CE7EDB09A1387E31A3179211295573B72AC403274C
694E5D0DA0864719499BF534828BD05FA84F2458380F0F83803B5353FBC52704
28C8F57AA1F8DA68D133F004338F3589A99DF60BCF37D594B9283EADA5947913
8F0A4EC6C6AE763CA422D6755320D01602B364C07010B5F178CB8C6F6AECF2B1
D346F644A8126EADC4813F842A5F5EAE1946E75E8AEC58A269D0B4B7D9F78D92
C884BC76BC592152756DB6D6B122B9875063C2DAD8F9A550781DF65AB43D7D05
C5E39FC4876E46195F82494D322DE3779FE9F8714B518561B17A9860DA936CC6
1223A77214FFCF55BA91FBED2B28C6D74015EE6CB698E393EE5B7F4D5357992F
6D8C8B9FDA94874E501104AD024DB575F3504749F70DB717EB72DD4F6B4CB9EB
614E23F7D32B7AAA7361EC25C282B6A0A49B5EDFA8FF2CD410CA5374D1C2D78F
E64DB80B78261A2AA913F4FC32095D22E0E2E8717F0CE7E9B0693C6CF02B469C
E9F2C4C82CE70C176517FE9668030CD7EA9F222E44FE2E6A8B1E5252A9D4BC7A
7CF1A9AE29408762EC9F22D923CA574511A78FD505E6CB052BFF9D02D00F4561
2764D8E27354230BD298EB33D9DD15F881DCD822178A446D8CEC5AC289BB9BEE
6488E3781B1FEC0FA77A4F9D4A077B51B5A149D85E5803C606BECCC8E16ECDAC
540523109C2D67621B6EF21D2DBDE76CEAF0B699C3032C28D3CC3A9DFB4194DD
4AB3AC91A12073495CA295BE6933B1441A825338B3E019174B8F1F6C9F49A088
1C778C74EF4E266DE64CD9FFE20059D241C6709E4871DCDE8EC3694BFBA8862A
330B515EB96D8CB78AD3E99033081FEE7F85E61AEB6C09620FC5F2BBCF76FAE1
ABFBCD46925290932DDE0D4AA0E3CC3C51F181D90992785B8D77F24BF59E3D1A
0EA3A059F6075A69EAD7D2EE94F53C3380BC1F17536E1902E82B66A4511E9E63
F2D7A853486251992EDA8A76508FBD4DC9F1318E794ED89C47409E478B59FA5C
3ED9C725B93755E8315784661CDD3CFC4D87F864F3D952C3C7D1A53A98C95127
837879FBC5344878436F05BE2C5BEF0839BF87DD18912FD7D3646552A788EE6E
DCEEA21BEBDB854D0657819F4A6D5799A8B95D1CAF5760DF13030605F7BED34B
F377544C4FE0D9E2CB94C90D217AF778A53161CB156A7F8DCCE5CB3C0197B92B
1E413DDEC857FD28ED582E646B346E4D93FE54694EEB77F329BC4A761605889F
AF87884BB606362C9871E1A4D4F3A0DD97C43EAC87B96A7173DAA892D93832BF
7DAA190CF4FCFB72DD0DCFC91E50358753C897AC2A47FB4AC5E9B50E73D9AE90
3E6613562221FA90085DDE5D7DA6EFF4CB716748BF93CCC7C6A83E5EA7CC8E1E
C71AD88E87889F47C668325DD037F853AC9428E88173DBEA327228CF763A6954
B432891B8F2DD3428DD96AB93E3A62FF73647DD1FC0623F8517213544E8CA05E
5E6111ED239F4E4499CED87A0501A4A39A2EFB470DFCA7C766EF8114F3027275
2554A64A69B0857BFC16F30531FFC2D3463B820335ED408C1F2374FEDCA87687
CC113B93086450749F59CC549FA14AC44E77FA872027C1041723FC113A457DB1
B4C0B5DDF3DD248B8BC462230A005D972B219739022860C06E72D4F82D7D8BED
7A557276FF2374E36EA9667E9C4D83910926C7B1AF5D9210483ED3DF45731C69
CC6EC9CD8DD59FD1C7F22A266FE7BCD92563CBCA6C2C6B50905C92286EC71D79
EB1292E6BD02BB5C388195E8035A55BA3C769132EE95EF6A8A8FE7596CF501FC
00C265873C923DA723401541055834F51807453C7253F0DA055DBF8A0A732BBA
A284751FBB466964587B2F57EB8D5467C1ED2932DDD7D974F59A929CEE826F64
08B56A3E970F0BA4F7A4C566C61F054D8C429F0A7AEC6F42E3C7976EDA674C57
434FCEE9AA048B59AD93EE9AAA8BE98438C6183E0B94ED8252991A78663B92C2
D4B4ED1204D2B50EB843420ADC081057601DAAD9BDC21AA65005CCD1220CBB38
6098BA3ED1AA95C72B7D9B52E1643116E662CAC5F8B14B952493BEDC9B67EA93
48596347A81D5448A78AE0722AE99AE00B384F2E8D9F9ACDC867171F0BF2934D
7D66CF8B3099B051B7D6BAF4F76C41856986C1341AB0F1FC68DCCF67E1AB4EE2
8F46D77A2E3C5970FF60F5A8EA6428A753A30883AD0E478802D0CC5BB2D00665
5BBA3AF2BF9C0EA3CCB2B7DC11D6579DA37AB425A5E3124AF58E8D7BD54BE090
8444365AF1CDBAD2238164B0F1D3366F83D997A4F7DC268533FF505FCF55D409
355C829CF9D4AC5B27073C16AA8B80A61DF255239C0BD691BC7D052022E889CB
DB888C84AC7DA666954D63F5634D4D446F83297FAA9A51C82D6FEEB1F8D584F4
345DFABAC4C2122EA43F24F738F371A77BB00E9A42DF896CEFEE3439663090AC
624D90ABE51EBC2D7D69260FA5632C0FFEF90A864DFC8050FA52A4328ECC575F
3DE18E174F6D518807D02D3EA7E77D79E47029E40C4B5B596817F2378876BF4D
2C305337055B9FCF4542133E0F21105715814EFCCE88F9BDB696284A5BD9C7B8
019222FE508BA4BAFE39A5A2B5ECB118586FB381AA8928962F64F44664D1AC53
7D31DA7E3F61477095D537A796741EFB75E1F6A834A508614C4541CE81A539F8
903A760C8780542A78C7156878591C85D37B4526321909E34176F3E042860C6A
FF44BB54E99F6CAD5255E12F68DF8FB77A6480E97748EC9E09B9CD239F61DB4F
FDD73F1821C85C6847C4C503F5AD6807F29A6109796D1854C1EB1A0510505B5B
72BF158E72300A2CA19B8BD40D61E46A153C3C25D0C7DC1256F76599ED41F71E
CFE3BF1A71DFECA66E04F30CC7FF04822E9AE3FFFBB92A8ECB72DF7B32D9007D
52EDC516EB48845ED9EC42BA3DC260B1E0CBECC7898D6AC135BFA75A9EF43251
1E003BD366409F00A683B123A0576FF34E102563C5798C446D447342C7736BA5
6BBA80EA8BB281F750744608EE366E30C5CB623702C787D6FC4EA8E472DF545D
24A3DF3E216F728D89D06EA5960EEAFFA4BC41DDB56D3D5FB07B3C626523F230
0BE6193B8B8B70BFADD6913C261A9054DC56953E9A8C9C7D8E3B9949E46F7FAC
4CA92840DBD9A852FCD1D06764E93EC2A6373F36A725F5D7D3DB29675C6C0221
4E81FFC726E6F7382AF4433EC880CEA71A4BA7830362372A0202BF126C35FB52
3B345EC97AB5684F3269A8FDEFB9466A4066E81C54781C05A71B623B6F8091FB
9D94210F34C1056BF638CF863B0B463D06B0D39916C2BFA9548D54E24C86F131
44CC616FA04BAF43DA1C74EFA205D43BF3207E2C3063E6500BE5FA0703E25105
A09E79B0AA18A1C345F153C67290B290324EB8365B1A4507D9F708B799C5966E
0BACFF824A275DDB6A89D89F5081F1FE0DCA40F04BB802417BBEF56E3EFDC21C
AA28C35982D81CE2A83171CF2BD29C23074544C9F4CE9F86205CB05F370A1F20
1B5741C02CA87E5862A9B1F1A1E4230C4A0A0099D280AFB05C2ED4A5F7BD5CAF
A9135CC1969E474F2C2E0CC3933A1F5C39BFC5CCB48C3928DF8EC5EEE1780A78
C587F31B62E3BE1991CA0BE1D908E4C512E1AAE11085D68EB9A7078FE42912D6
658BF3ACCF715E63468D6F77BF18AC181025AF9377005A6B6FCFBFF04C73D9D5
5F145963B6D0C6B27F94965C62BDDA15586DAB0F3D90947C94C9D4473D5A9C49
0EB3B6FEC5A91F1F266609281D84C24AFF9C656CE8765F7A44066BD4350EEB84
71691D2638935F2489E87EBB5D3F92FC7CB45520B129C5612B04ADA368E75CCC
7A54048E3F48D4314FD9EFABBB7D77A8828768D6F4822CF05153D3E5A4A71219
C38592C86237B17D6A6026A1F39941061598C84237011B4DCC72AC6BF31E280A
AD4A686AD314AE577FE9448CCCC17BFFEBB66F78E2C6F07B071AB9186B9BBF59
48C2C694137ADB9AFD39033A42F990426339FD6A95C3F46780518D34CBE784BF
7D6FA959014F0E9A6E8758CBD9F6CBE68F5CC53D80BF9FEF50C6C974CFC51ADB
D60B4CC365B29EA2F459498BB8DD44A5DD3F3FF43551384B8E746F870E68F4EA
8F994E54FB3169DA2D3A10A636DE6B8427381FD3DFAB68A367D1FC7629642E70
3FACFED58772BDD4978BC0A27D0FD32FCA51B070DAFC00C67B49D501CAA5B861
344413F1F255717EFDE079EDD6F3AFA7705CC40EF32CAB3866965D9BB5DA96D0
7E2CDDC0C6A9B7E683199CAD092D5611A19657FC7C982519BC3A09A9D795F030
7C776C25071D0B0354CD853222F53920BE2B47FA5F9B2204FA846CCB1904421D
A3242DF909297315D82F74BF79F47CFCCFDA431712371A143FFDC83A9D7A88A1
4159B3A436BDE5E19967A80B304325E3CF06E9B2468083435CEC83A6F629B801
453ED2F28B1B9EDBF53AF1626D75983A6C3B383A6FB3025DA828E12158E4A9C2
44845DAE8BEF77E829EB5FF3C2A88A4117E0DC93A95C4D46B4105E30246C55F3
4047D3E05B101DDC75509F64E99855336EA75E82BA9E34D4C3B896C593F85AEA
9FA0EACA669BDCD4F0E2AA3438FAC6FC62FFF85796B81569886EB1C9C20C6CE3
5264953AA806F512E976E351613F23E810E145B329EBD2EE9D8723A6E28DF047
68CC0AD74EFF6DA4523F8298CE381D567C22A1B58098554491340EEC6BEB2AB1
AB21AC051340F5C24A518AA4D57F35D454521E715BE967990071BCCD21A8206C
5C40608203A5C662F178E9F0671D80ADFE316D582C7A94DFE656954A7E9E5ABB
1154009E0C18A6CDDA3DDFDDD88F70564DCD8D03F8905BAA1B6C6A386B924491
D64E03185A78C61F7393E000AA41F04375839EF5540A30BECCA0318EECFED17F
D37779E82F47ECCAE0749E97B0D9E4573F7B6BE316D8AF143BD93111D717FEA0
C56A0C86CB2804718E1124A0C6E82A0FFA58FD013D9EAD2D88B01654F4C983F8
1A3F877C027FFB0F440498A023876736CEC917E68548A8CED2095BFA7DF83AA8
9AF9949188A90AB9C87E6AEA45F9C3D2D7DD49A5121D995CFC630B9E1360A784
AF0AFBC5982F003CFFF22CB3EE03841E657F3716353FC1A8564DBF7145BC5F59
B4395881CCB81211038A6D38763047D0180064377806909AE2A524884E52445A
E7F45857949472A9005CBB14F32F1C3D39BA8D1243BF046098D499D17920056C
56795EDCE10321CFA3B1CFA4BA5DCE1627CB5B3D175E88ADD1EDDFE83055D809
6D73F650F14CFEF80336C985DD66CD26DD6475231521FB620C2C1C392677CB07
502BD623E63F673C4922CC21BD97066F37B3B40C4C9DF8D4DB0AEBF35A2AE606
51A930E97F6E2FF49AAB53CEACC4610098E8E203760F07F84BC5DD2F2CD98801
4662E46950E002DD1EF770BA4778296D06C85FF4ECB3E8711A7D96A669411066
9CADA14CC5D48364F8273880ED40DACA3BC49CAA5BAFE5F553D5507EF1B5711C
32E17928D26633B242128B907F82CA9CA946E84E8396F18FB4D1C9F2D3A6D13B
C6B93AE8DD633ECD288DD69057F351AAB2D25E6D9A09EB37455E03454CF93DC2
E85BFD19567EA7C79A95C907872F5603C27A5F76D534722FF10FCB40EDB69502
8A8E84998F5E1689C4D585728A94E426B23B8103DAD5CAE80C6547ED846947C7
CB0D5BF28CFC6DCC07D024B7569AB27C1A79399593D71AEEEEABC20A0709B11F
311CE63E0D94A75D85AE1BEA97194A2B62D7F5A3AF54BCCC1ED05DDAB14D19C0
7C64F7E34AECAB27A1A571B1D127B4AE78A4E9D77BC70743C30BF59EDA5E6206
FB74DD581040F921CCAF47EA535BEBEEDC09E5F9CE40F7F845B1EBDC5B1136FA
BC9898C5721FA9A64D8959043EA55562933CBC859DEB55EF822F5380F0E5CFF5
154FD2BB8D15422F5AF9372D3AD61B2D6CB66CD6BF4C733FA0CF3832B8A12016
A5AF5A64DEE8D4BA6042FA195ECE203D69FD06AAF8C72659580928F44039EC6C
77923C16E69883362F840A947FB0D690D6005BFEAFCECEDDA1F3DB1A0C2DFFAA
11B149ED60FFD0C08B8C765679FF0FFA221A10977BBF4ABBEE79E19BFA83DA58
B7E0B86AE371F88916F7CE9C3787474FA99D22AD65B7BF32BD714A8F491E2808
B6A9369B642D5FB4378B048A811626E0C0CBF9A367930A8015C023B5538245F2
C015FCF5F235343A90F7EC9BDEC0E8B841FB5BF2DF389AF363A8D67761C0F2A1
DD706C88E65030E021D4DEFD6F871F7EF9D23EC242624851D8A184C40A73B179
2DA8AA5429637130FA6B1435B35CFFE1EADBC6A675A7CE095341582702DCE4EF
EF3A673DDC442F02A39B1C2274D5C4E09D5EF58E253DC0F8D3DDAF5AF7F4AAD4
51781E12C156A0C13989BD4CEDB7186444F1649D8A4E15591C09734249B37BEC
07959F1920EB0B6ADF80F97B2DEBBFDD58DA9D4689E5D207751DE0B86F7251D8
0BE818D61E6740F1523F30B48365C2A8588440F9DF56D327DA01637CEEE0B707
F36EFC28E1B3A46318DB4A058B98CB92367AFCC84723B22E05955082E1FB3C5D
A2997D960DBCE77385E78500879B375DFE6258B3610AC8145BFAEF69CF8C1849
94DEF49D77D9F3C98E953BFCCF3D7166BB4BEFF24F60924D537A4B2E5568C871
A39B3C32BDF8A354C9CEC1281F96770C9A13B0C2720DEBB9432F01A550980BF0
1404E87440A3E6197D5DFE27452051462E2F3A2E1728C6C32537B33DCE4EBE81
5CDEA4631EE275B83B62D4195BD05545B04A521EF4AD03B558F4AC437E82947F
58A30DC4C3823185A18F10F21A04C3CE364DD00222E3135715814EFCCE88F9BD
B696284A5BDFFB2108B29B09222E86FF1D890EE2689F27AC0DBB5659EB4FC9BE
78A90A8BC6988EC021106493CAA0667D6EA67095F7E64231E9D8A5F942BA9513
5C08ED14956234C19F7580C2B003661EF1F2729556E93802297CF25F0ACE1D65
44668A511FEE990DA3A112221FD4161E90B8C7D900193CED0B6E1698F966B4F1
C15961D374DE25A7B0EDE87EF9DE8BF75DC41C003B05ED038B66C6CE38A97957
AFB653B04F2614CD81E64F1C330C0EA23FFB44437311BC55643D5AB23257F948
4534F38C37D19152F9B99F98DD697B9DD91E41C8DFF89925CFC5D85A28B616B9
EDA1ADCC3616A5D11228209CEE30FA83953E0F95D11C201018FE91AFD0B44644
1E0D4C268B79B86A81A3041A6EA24E085EFD18962E446D65DF0F65EF55031CD3
8EFC48EBD2582C723C32D368C2080CA8069C6B0CDE19AC94E0BDF9F7704DCAA7
8FDB914A7DF0884F7E2BF3CAC51DBB388102E674C972E3A3DDEAA67148875B3F
A6DB4D7266AA1D574E595671D73A3499EBDC256E313A5A19233DAE151C63CF7E
54B43BD28AAC792C2E450B9BF1EE715F65BC146CF13E9FC00E316AD709E0CF9E
BBA3AC28F42EE409EBE71CA5DE4E232A37F459D0EF18D8272A518D7380386793
5EF9F82706631264A3631413D94E02A669BC69A711612F51064C1375A60F63CB
797D3F2267A66FC82706705826819B52AAAD0F72ECE9DC7CD4DE6CEA6D5E8BD5
EC5A3633B36E531A430598881E5E00F9762A049FB15DC548DD9B6C71BE4FC366
2B61C59F2CAF8ECF54E132FB78F6843DA0B2594EE9642FDF96DEA84CAA9A6FE0
F9EE7E854D53B85936B31C808693E66B33D3D4FC762880B589A038A5102ECCDB
8736CDCEC853DD25DE15C6F86294CF38E4AA678BA8A08F81174FFF1FA12D73E7
AA25EB57451DACFEE99AFB89850C6243CBBAD33F74A53E3F70FB08ACC8E0D151
442175A1B1EF865445EDBA2C9F4E71A972E63B498CD052FC87931B81EA6500C2
268DD643900B9DE5B6FD103D2DE1F3B7875616349EC7A6B72D81C1624D48749B
7F8796D2855C1D366F07CFF3950EE828851B409827688B0DC75E790B8C3BF5FA
A2C6D758DB6B0F7DF64C81DA33E9A68B9B834875D96749FD58506FFBC9507DDD
77014C2924CB223E405F48F339DE67B23AA4C8B47CA0DE5E713A988B0833D77D
22C6A4E93F0E0210F030C09354A99608ABBEC8F6ABDCB403F0E9B9F002E0E963
A85D37889376D26BE35ECEFC05C265F81067183ABF373060EEE77393A53270FD
8E621120116AB4C81C19328CD271B372032A0A3229790B7831A2EE223AA7588C
68111E3120000834F31E53D51A3D12A141F41BF0471E32989755B7D83FF58464
7B807D752C9F0598CE0B324996DD0DBA1D8074DC6D874CB2247B8358B43FB427
0DB6395806EBC72923899A0FB79F8113DF87DE9D4BAD3A8729BE2E79F4AC51BA
4EFA0965A11DE5D53C5A66EFC05539C901B03E68FCB40F57F3C85743260BDD24
1E10AD256DEED77B14571B11FB879018812A646471E9F0C1819320B766793F24
9827D7B0C791FB75399AEC03FDDCE6A420A6556B0473D8CE242D56D62EEF6079
504A5809102BA714C1D454282A55B106FCA0EA4DA15F0FE86B4060A052979EE7
9B616B0E85A05CB8C603B43394DF2A4E2C4B1EE23DDFE63DA3C7C8710FD5B93F
2775696BD36C6DE515EFCB9F1EE295C55CB1C2F4E43E67F00029F54AC2D89675
1FC8A196672FAF4F23F9D40B1956EF5BE0EA84B15E6A8F1FD76BC306585A1225
8CF5584E8048A95BDB54CDEC59A4699BD9568E2E9A1BF9D2E5842CDDBF74140C
3E06CF36C34709E5223CEEA0A86C9C89D9BD6F7434E9462CA6CE1CC41034FF9D
DD7C0B479B82352E0497AF024C1D02D39B4380965AE8EA3789FB48CC5E29C2A8
6767D2874B817EB8E064F4DFDEF28601CA4F43E13DB57C81054245EB54984558
81367B21D4B71CF5A14A3269EC5DB4A9580916DE799F5F09D3C6656B3F87A0CE
1D458591A88B2F51962CBD6085B3E530D4DEB4429D777D6C653BF3C326945F5E
C60809A9F78E45BE3409822E5A52593C997CF959E00469F192A288CEA5E41229
3FA1D62FCBA2BF778FE68559CDDADD31F2F3BE22AD097C23E3D43BC2A5698E1C
EB0B5AE3BF68F02A192428D4C5BDF2944DF4D3FA880DC7C73D37186DF6A9B62A
73482C427DC7C43DFEA873FA4F3241FE1CB13D5E4D777BA1B20B2DC5E7492FC4
475FA531D5F9AD0026521621F41AA3D7E7FF53A0F7161618E2AAB51A9609808E
57CB966FB9721A3FCCBF9B37AD7801A32386E6AA48764C909B0F3E3DBD53B7CA
9E411AD23929B0BE66C7C79F5131371E0D1C13D02F8FBD144D40AF22090580A4
CE7CE922E05D991CFFA63F89B994932C81844CE88B89FFD650F8BDFF365FBB1E
F36BE6029B707453F8EDFA049DBF73D907E4E856D60F007C12820CD75104A1FC
3B39B6F174FFEC15B2AD9D2B225CBA3B73337E0D1FF6E3B2E5004AA42EDC8E67
E316A893DCD1B52B1C14C88C1767D8F0A4AF967900FE599D419B3E98788FF157
F2DE91B7552C551A93A97E2F142D2EA8A5C2D3D467A8805ED5563F49920F9A07
3E9A0931B90650E6FF796DDCD038BFF2B745A8022BD9ADC9353BFA3BBF553C2D
E2CEDB734273DD9168D6D4F2D9077EBC356F8514797F918B34DB9422D197A64D
FE86C909ED4026200A9FEFF374224E08B2A88597E43EE109A13F97843B172F72
82FECE1279354D5923D7A9D25672C408D6BE0DD214F79A08B5FDA8613055B7C3
34001273112220F8300193966BB4C3A0DE35572BB63A7B90986A8C1CB456A012
97D4938358081189E3226F824BDCEC9D42FD75CE5F5B3D5A5F9D7CD2C87E175D
0435404EF38BDEAEF0BF8C67D2CC7455C4A914FBEEC22E21BBE2FA148D62DF34
40F95E97DD9B83EADFE0D19A48F5F0D556672AEE047F1A3924C079144821781D
DE65520F564E8FF997531EEDB0EBE6B76E576780C1621225A259A2C390F61DA9
BE399F69980BCA1870F9437DDF98B5C5E6795860F8EB626A6C452DDD53A655EB
94E2FDC07E0435438122A624D8D71978CF93536FD0274C5DA5A51605671FB420
12E8DDFE23EB148AD8E1E23412FD61F93B0224ED596C293A3F2DB8A1C8118C56
61DEA6D4EF824E4E8DE84D6B70B315658DDBE16D82BCB452E2F93BC5ECE2C1B1
98297D4CC32B1D6B7142F88FE20A5AB8A16663EC4ACF6F39971298918312250C
1BB477C45ADDB33BAFC6FE5A71F6077A28EA55B38F9D2E026F45A03766C13E3A
6E5ADF4234D75CCC07F748AEAC673B9A3CC07CEA9151BB3BB206A6AE130E3961
AECF0CEF5235E1EAD9EDDDA6B443B60D1B20A3D2F22F4D82468A31EE68C2D6AA
1703682A4671C30E226B3861D674E27F696B442C31F0BEC519652AFE9476447D
197D259E79B8A5BFB7A119CF9009266474A9B6A94BC1A3F7DFFEDB3327BEB4D6
B83004923DF88971112DE0551410F0175B06F454501B1025AE0F18E165117EE7
3470A453A058CC424CECCF0CBBBC526DB2A3F53F28CB84850C95BA42E77E089E
2C293B0DD12BB1CCC1BAE80992529539B990706A7E05D8E62B26B9CA13E18DBD
66830A3CC3202761617AF55B678B6F190B1966AA20AB390E42EC0B89A5A5BFB3
05B918CD2D0B6EDFD1CF9318640AFD502DF08D7496EE9341D32AB3441765E123
8AC2BC2F8A98D16F60B7201B996A7C66E0B2E15B66EF0E8B59A6A52B3C5BEC13
B783E6A870317DB2EFA129D784901004EB112AE678F1979B767AF62A5965A160
BB04EB45943BF7DBD6469E715E26AE66082B43864A50D37E8C350FB87CF551E3
DB68463C2C73438901B700BC0250093A7C7555C4FA0324852EFB3480CCFC3B95
34BF36603F3F77935F24EA6C597FF33D69D02627465E8326ACE6F0E9523EECAD
6B0AEAF364AE4C80E5607CEFC6E723505EAFDC5CF7DB813E365F3AC66020971A
09CBCB3004F5E43D8344D989BCAECFC0F1C4319DFCF7BE6724DA4A9A860C3B92
961EDD64636A1E9DE835560FEF4F937EE71C47A262C2D2385181E3F22BE45C2D
6F1E364A30E8C8E5BFB97F824479739F7E849AA97B2892DA03EF8251B1BE7AE0
4C0CA35E0639689602EBC13B14F637A353D5AE542D94719AAC9EE1D540B44022
77A83331201BA5A4AE0B9FEA6716F601BA31D8A0E1DB0A9DB08CAEB99C22B2F2
F8608CC44B46287016CE1B8E314D87507F1FE502A7D952D8E73461A05286DD0A
033DEFEDB32694A9D0B28B7B42929F29AE099FB7331038EA2BB3C53D1BB66A23
18F38D99F67408AF14C7EC19F3A13DDB6BC484C22ECFA2329BD21F8131B159C6
27333480202440A0CA36225772F61009240C6CF74A3AB02E841134E4A28CF798
C374B3DE9E17E223AE2FE9985F09DE8EC180522A90FBB1D640D2A6B38F279F98
0D57F5E18BBF484BC0F6FF8CE3720C7938161863B28AB406FB94F5F23C47EF3F
E333B16AF9706E0EE6A07FA53EE9D16881092BB98CF186D8241B5A21BA22E5D4
CCC029B3C232811CF0E4B1F2BB064C3DD0600A57C6044D9646BCBCDE44BE8FDD
4B53ED658D048C5B426A0A3FF2986C6CA295B8746F32ACFE1CA99C8B22018E76
2544A34F1B14E9EFA5B3AD0BA1F17438D27593D7A52ABB72752EC33390EAEC92
58D51AEC9CC2F790E8467F79548DBE174E29CDF1B5AEC7DEB95533ED3F634A35
92BF1214E74B029A7071753D8C57DE98149A3C1DACEE22411AB1C521297233C3
448A51C8E9877DF60CB6BA20A13C3A4C7E0504CE00414630C5CA174C5983CE8D
EC5933E783EE93CBDF7584C849F229D5383797B33623675290F3D98118E8CB14
2DD6D0EEE2B8BE6AB7028715272A329E5F5D845C20C8AF34B15CBBBB07036357
04AEB1AB98D6FAA29EC69EEC9AED9F240435345FA50E91A1707F9B7CFBDAFDC0
B34D10F241C4706B28E605AA5B29EF26A34102DC43A42B35B071221DB5552DFE
B2173E7955B1BDBFBF1418DF7832308EB60CED7D2F5841767258BD28F1C7923F
2B18E8D82BD808A0566AE3EA0E57D5B99D1128F8193F53E23DF2A805FB9721AB
4392D61BDC14FCAC3534C65C2EC005975DCB7D51F1D2048DF06164EDF58F5AE0
0F69DCAB5F4E9D01334F4DB23D0D8F61B0EB7C6E5944BBDD139326FC0699D55B
AA86AEAB1BF329FA98C4C94F23A4A6556E238089C7ADBCAF015F3B223C2E5CD6
9368F0BAC1D9896EFEB11C35A5C1612223307EBA37E7D67ABDE015C94A45362C
74BEF868651E4459E3A12252571F743AF61BD3463DA6ECF445C884413A47EB24
BD060BA3F1D884F26CF41089169426E44CE9FA0FE557779402C184A4941811E8
3649F87C126C46A8C8568FE34B94447EAFD66F6CE9055A3D9E42CDBA2647F86C
EE0790E1E4273BFF14BB6E61BAFB497EAAA77F8BB8FC39191954A6EEE713D22A
147E3E40AE93DA1F075E84FC2FE0B2A3698E3F716796AA10B77917D792EEFB66
790435D7FFF7A471DD9AE53236D4DD320B3EDD8FCDF7A816E0910C57F24FD107
EABE24DA14A90F125BDB7326E5FA61AE09FDB92A63A91D9F69C74D95B368D165
FB20200C8B457A28C771EC6A399BFA14A9C30A93F22CEC8DECE75B0C0F3970F4
444818AB259FFA594046A3FA5028B30EECE52915952C8513B77790F5618A1146
145D300EAA72C7441F142268ABF63F356DB1AE440806E2B3D9BA1091D0461B64
7A9FAD8D2C7353442F8F076619AE4DD0BA4E3326978EA7866559897CF0653AC7
8BF7FB2277C35C451BD6D13916C1B68AFC494F646964CCB875D7E3696C9A16C4
2B87DC2C2C505DF69355EC3E5C1F343AC2F6071317CC3035F9C88B306A2EC947
1EAC9F2C02709DE6FD026B6835D12D487FB29998A30FFA67263BD59BA2E1760F
73F58522EC6FD339BA613095EE3786AE2772D2FBC5D75A7FC59B03A3E675A407
692533DEB969AEE111E75168D70563A337127B6605ADD9A0BD1C7A2F76A50086
A54F076F34DE6A129E6F95C41DEBDAAE23A37D8C7CED1561D4CAE9E03728967F
7D0C65F6999FA3227269364CCA16643C9F1BD0653924281F254FC8A135610C3E
738883A56EE609C160DE8C752E2E45B8C169D7D58221067FF8FCA3050F9901D2
F91ED4F2948D5C3330A0985DE6150645266166FC9C29498F852DB592E10EC37A
E2049EA3D399E3F6BDF65E4CA34B00B0429087212E76A3DE3A67218CF24DEC9C
75381FAF2AC65ED9F9DDD31E75E530C5EB5E56720D6CE4B55F0D05D8411AF327
49D5F391CAF8D0B98716AD2C1777CD8841F8A17D3B8FBC8E3A578C8DF072F674
3A4A26260C362AF7068A8A8E859CAF55E46F84B2E3960DAB18D604C9E1285AFA
3AB3AF782E48D7CE22ABE468EE483C19A5CF2A51F61981D2A539A4556B9A4308
12D6195322A25CA5ECCF3FBFF392E9559945B50F4D7C40696774E35E6A9E4FA8
336D6E3FD78756177FA1A6CDDBDE5CD4F65951323731577C3B60CEEB3AD77C07
BA81527F97C89586F7CCA1EB12675CCAB12798624E84F8656A6FED73192BA9F8
17ADBD1FAE698D66DF174AB29E242F90407746B9D6D8F77B1A7A1DE94536A24A
A61A47B1A58C3DC14CCAF497CDC4B39155C33B65E0BD277B17FB4B643B69ED7D
8F45E68F2A60A84613979A3DAE4B8D2A0F63A77F07ABEA1BAA714F6CBC3DAF2B
9D536EC849A4630F4F173876694CE76949F58F31816635D2412028C1718129BE
2CE5BB23092A27A5AE85B3B56C6370A3542EC04E6803AF2582F5515AF13F6A0A
49F6367351904E1E2865C1F737A428EDEEF2473FFD63B302B915FF910E63CF73
6743B84BEE7156AA61FF86610BFE936F0A571CC81E82250FE4B2B99749E610D0
236C1AE01222D74FD830D63A4208E827A9C2CBF7F0C3DED280D6FDCFB195416F
BEEA9C6556FE0BF405D2A4882A8C71EAE1B8944873E8E67A74DE94C10E7EE856
F678CDC3008A08A2A16D9EB73F6EEB2ECAADF1C109B63B0B10874FCD812D449C
A5632EEF618E6FB9645B608F03B4897CE7461AD5BAB068DADF6F95FAF7D1E975
3CB3EE5241C75A3E4A2E69A8BA7556E7DC1FE4052517107A32A3990936511260
6804D0E68D704039DAFC5C05855C1F6DBCE36E6313C32A4C728BC84A30E133DF
5BFC5CF31EC0CE6F75B5CBB4E810DEF0921A02B0D1E6068418F41A007E62F059
69BE76B9B45B043A1FCF2CFDCA9AFF9FBD0A09487138C3176DA0C04E0FDC543D
B3B02ECE4C75851E7951E39295F87BFEF314993EC66F7B9ED637163BDB11717F
E7401CD0BC8D5DD424FFE364428BDCD23FACAD7C42490546598B1382AA53EFAE
26EA9694E9A5273105F11543F8133C32AA1444A5B3718C3E9F981E76E8FF657D
7CCFD8957FA914BD46DD9D5448E85D01F41E5142CC0A7FAFC02A20E3972BE90D
F409488F510E909C721E24D014879A246E321EF659D0D19E4B1EF02FE45A4D65
C13DB9F96ABC40B5D1670A21D840EC9383FDE56C1874390660C14E283BE960E5
869A967516CE23138B98E6CFFE8187EBF064D5A975F6121234B3D8EF25A3CED4
9CBDE58480FD0C9E9EE33528A11713AFD9520F86CABFE102F0047B3476CFBC69
9206E2DF3B85F29E5096844429BD3B52AC6F491A24F2CBE99DAF861394ED682B
D914974E5A0227C679528C9D5BA28781C1FAD7BFC6F91230E8CF1CC32D55B845
8C47BCB678ED15459D627A9E65A1323BA915C106CE08A081632544650F926F91
B7B84E228C4D5C918F2CA4FB1CB68EF960D01A54E1B71BDADAA74B4068077057
43A7238461042289D8B3E729DCE5D211CB05EB43C89247F1D581B8DCB886F94D
51A32B031775B8A30ABFFD3215A143AB621FC07C3319391C9C0F1501308E8F83
2434FA4DC081442B2266D1431C46F8AAA08B1B0BB86F9EFCCB15098FB08FFECF
AE27F49E6F0A52ACEFBCAC72D73E65169DAAAA9793D0DBD102AA25E4E52E43B3
7906E1C4AE758DC8D7971744DA02FCBAFD56A6415D83334B829C83B3C93EE951
5E9C5CB3943B9D00568942AB2D85E122417E23C75A6D6066D0E23D2D1460913E
0D24AF79501D4AAF1117D4ADA03CB2AFBE30987B1019DC080F678B7E5B378976
945E19A05B5F0D10B9A47787806F9F69D5E10CD7116FB2DED29C9DE80276197A
7689D0A96C89713212EB83AC5AF8C3254846AA18D71F3C765A794E87E45FE582
9CE4C2A656A6F430781CC5BF9739264A8EE1265DCF82C186862D7EEF9F827F1C
C5E65B515BB9489CD0A12E2586EE2B0E9DEB3BA8B06F7C69451728CF35A18622
F2C49FF5532684FB8D0F4A7136879F0FAB0930956AAD16BC525B3593073BCBBB
984CCFFF49945CB5D1BFC428DEE9963A4596FB29631B6F7391BCA4E76473F2C6
977BF5D17D8D207E603304077B139B56D46FB9A4B093EC160157567F48B332D4
210E053D217057104EB02036FA8CC986D7996F5D37EF78BEFE17C2D518B07469
F871F979B0CF6DB13144BEAC7E130204CBD6CA04405C9B2A8903B0D202AD890E
700B9A05BC2F952CB05DA5AF20B551159F13B93D9B5C2B043960AD99B695828E
511EA649164E976E6A2DE3580643C2EF4D6A55B5AFA1C37B10E3BE7615C82FC3
000FED17EA056D12DAC64379EE629C95B1BB7AD6469E23050DF6CA1D73E538EB
6D4F48B113C0CE23DD088D7E03E597EC53A2322930BC6BD6C485107FC37F18B4
6D7857FB335448C16C3980A769A82393EC5E3A2EAB2BD07F3F3D64DEFADC5012
622D1797A899AFC90120FD7ED73DB24C8042A5253510208B4B0D7DF6B36367AF
A422BAA634B6D413CBC814AF034D8886E146E74BEAC062F8FE26A02632ECDFD0
BF9A65FACC14BB93939B5B9E26AC8899CD0DD0341352CFE0239C788889DBE2CB
072755973D56FD5C1CC7E9B4F96AB94C3421F3E2F50D792A3EB9FB4E1533711C
07DD5A7B8E16DF4C14A43F3D6F9EB6965DE9588DBEB61C2463D9DC4791447D4F
0AA5585589CE492D8845A6B5B355E95EAFD6989386C7DF2A8EDD79C1FEDC28B0
BBC0CE198A3DC7471C53D6A0C8B0A6894A97EA26FE5F9C284C70B3887782B21F
6154B5B458D75D286477D04EBE5DB44B15C7AD6CD21FA920846A32154D39C713
1555AF7A866B15C8914139C28D5D074B934B26ED59DEE755D0ADA383BC3E3DC3
5425E1512AB06A575FE7FD3162CF242FCA1ABD971F397BC945DA45C49E7382ED
C9D924BB09843A5E0713DA04D41802D11CD481B279A1AE06EF7E4366C62D27D2
91FA4F8FEC19BFECF91D6547AE0EE608A8C37BE31B8BF811D4DF910AAD34C379
47EE4C5B2F917370A117E46EAA5238DD087C88E82F822FCDC58A3796B0EB3186
0E74F649329E0C00E98009AC80EE6177D9E09E418B68CFC3CF6B78D38684C8D7
DBD0E603260A2770FE9A3C115262786E8C2698F87056EDD8C2AFF2FC1228C0FF
3458DD2256B631C83835BB72CEE456DF62E587D918BDC79A29F5708FE4EF0321
C0A911B7A4E8041B1A13FD266EBCB354B51AE29FFC41FA65EF7C6391CFF3DEC0
CBF1361C05E59443622A96522575D8D86FCEAB44FE0209FBAFCC9140BA35FFB8
0AB48B6BF3DC2DF69EE874DF3C2D2533C418922CA15F914C576203DD8A41EE4E
56E83A8A0CE8DE1F408884FE98C1383EDD312FCBD763B0796B52B9CE34558558
65BCF312236EC000852A744AADC8BA2C0BDB7674A2CCC9D63F56A6398BE03DDD
1BDACB1A00B9E29FC47A0F57EC4E54E98B4ADD86BF5F81BA215107AF7F4880B5
39B756E12586737F89666B3EA353C166CD05D5AB7DC23CF5B04072FFD31EBB90
DF8B929E806E915065A8E9FB50C6CB420E62D9192A5B54C9093CC65A6BEF4AA6
44B698DB9E6748CBD7600BA4271A835770DB51CEEC9B5491969EB5069A147DA4
A0A66EB88EEA855072A39AAE37C11C32B06D9506BCB1058955B9A28E26D5534C
BBF2E5452BE224886AB603F5D2BC28692E499E4C747AF16C90083BB6498C9487
6F3D6CA88C01ADA276BC559B29CC1D1E472DAEFAAF1CDC157D38BC252DD95583
6D500449949A1BEC88F39F16184683DF42FF420578683EAF5A46316135476B45
A3385300581E9A53DB27E255CF50A21B05052E44F5FAA181DAC881136499BD48
665272E51BEC44D260EE0BDABB0B95FFA8917D4C03EE9FF98551BBE9A1C7D764
E1AE3356B5177ACB34697431303BCD422C867DCB59CEC6F0057724E5877D0D5F
26D7F722E53653DC9F6509B2DA2B0E6E8C5362593190A801E17C57BDC3F57A4D
75393F0FFACD524211AD714EFC5E2A81C650FE0F11156B214DEA1ACA0EE4BE7E
DC04ECBCC1A8989A149427959E245C5878B938FB2BDD29FB35AB6BDCBA75B0BA
1EA386DD7358DA57F5B4DADD4137DC07A40B59473CE3F788BB698DDD4A5EBE82
7B7F1DF5915A8E1E458475C5BAE6206F3666FD9117F33B7B8D8085AC32D294BB
94EB4B81995669955B8FBA239C82BFF9F8EA68A35441FE11FE02BD3682B4B8BB
F447917EBEA19734567D96E577D15DAA7F09F9AA322299351044D260AABFD8BF
208488BF33E2350CE6FDD0E66E06F048096810CE1E8B3882D5707E129C78868B
5680286A3790918A41BD9DDB692B805B933FA51FB1D149BF7186DB8E6971E724
230645AB79DE328522A26C4F1EF4E67E206E11C0126DE1CEA6799CD238FEEF56
37BDCD09552411048A5B0D022B82B7A16DC539B976C05B5B9A1C219D632017D1
ACD206A4D836A170426598A94849C298801277F89D3E87CF798CEAD8D9B243A5
E57DF0560D4E83572F551C7B04BAEB865998F356F4FE1D79BFA88BF4A4338A55
AF91D1015C042CD9ABCA84B5684C55351DABFB171643BF26B853F8F9452C06E6
A2A1AD5A6C64CD5AB47623CF20456E33D416DA1D47B4C78A3BA19BE4A269F1A9
D317D92AC26733FEFC08E384163D95219A80AE82B94AAF3A27CD8EC7A2FFA583
B96D3EDF419BEA000E9441F73915915DCC261EC48981C6269EC7B009B21771F4
BF37C82F6E76A2C0631A63D75CA355E896D348A55CB1748925E40C5D2CAD4DF4
B6A8E97E9842A1DE39B47575918A0B2E711192A3124C930364C14155177857A2
49DDFBE714542FA7431A16479A3DDB388883F0627C637787716A077792E8CC26
0D24DA3C67F37C2F4A045A38F882AAE41482313E88AC303C20366BE1A7D47EFD
2E884EAACF18F03A82618FFFFF95085F2DBAD869EA1278BCDB94B752205C0E79
B8893C8AA1969A140D1E1ED2374909D3F8628F1B291FC35B85400A3E7CC0022E
7B5FAEC22154BA4069028B79083592867F77914B91237E2C6ED461D5DF59EC46
E6CC1C8C11F2E5EA0575229960D7634A75A9A7E3D540BA20381C60153828CAB7
59303DC99A1B8CC90F02DAC754AA266C6C87917E5BDFB16CA84290E01C6BD41E
BE72DD3B8D22650BFBE0DA268A7663AE038D0D8E9FF6382D0BB84E6EB407EC9C
AC512B4D8B9BF0211F66CB1FDE75D1F16898A76C52B670599FE5BB0BE07AE4DC
9231F7CFB137BA4D607D6D95D6EE750116A064FF340AC1A25CA879EB2E61E47D
13173C30D95C56CC89F061837BD5928A53402BB822C2F34232608D80A6D4930C
CA713625621E1AF4004B8FEE36A7B20560EE2374D2A10B409C1D92832CE38BBB
EDBC7274D23170EDB4F435A68B11A32D98B3CF09ED00D9B4DB94B8F49861ADD4
BD5EFEB0680B29E0DD73B373934793299DF62ACFCE8136C8EDB1E350AFE044D8
F5C003FFF94325A682B4CA11B9CEFEE5E1196599A813D650928E20870C9A57A2
011F0F8052882FDE4F5AF4B7EECE1C4D6E45C7C6DF9D1EC6BDB38864E6D31B1E
BBE3ADB11383D30D8B2CFAC23E389F578791E73B005BDA819DED07A8118D0809
D7C85E6DA400EB92C1FFE0885B44F054B6E02AFA1A177563B6D9940C95D80959
4101C91FCFE3C7B1DEBDDCBFC864B113995D945A52DE9300110809803A5DFB01
1E575595FBFBB79B5DC065972DF125F97E5C071848C7328C412C8124CB1DCFC7
97F4F5A59D5E518C47D82764D59DA3A1F45DA9943ECCE1214935DD25AD19856A
131432FEB967885CB01FDEC6AD36CB4F789512473C649EC814E2F77C9FAA685A
184271C13AD34A6E9FF7BE9971CBA0815FA4383DCBE87D61276BD84C5D2F15DB
2D6D684B4A603B8B41A93DB68C2A2A15C62E6C28728E5D8F978E0629F0847EE6
E2D058DDD67C51597F9C40A5CBA3BDB8B4F5F4ED2E00609711F52A37F0EB16A8
15DC623C89D971C33930C4E777A30ED35CFEE41D6211CC894CBD79865524E752
676F8D459CB7B65F7F7833A54B03E04F7DE1907F587973C16E33947C9980D4FF
F7C575114E6DDBDC06E257131FB92EE4C2E9969F56432AABC2E8694ACF5FB9BE
C3E88334406B2AB3BE7D9DB1969AC89E3CD08828C27E81AF897217FF1DCC559A
71812ADDA4E342C2BBEE7187C6DF173F43ECF2451B74B914754814BA45FA48C0
DA4AB86775DCB6867A9EED1F59025F12BFA6BF26C82A7AC74A2DA373578CB822
73E8FEBDABFE0043236A43BE9B694324D7F3DF67839B5FF6AD6886BCEDBC7243
518E22B8A12F47EDC6578CC3B006963428F2F0BDF28305F4B885DF766BD7E757
6479277F1CF086AC3E99C9EFC93883317C5B9BB4EFC9AEDB51FB6DB904E58392
87927488797C05E6F7AE27D65DA9B8D1F05387E9695084C86D2B5B0E2B0BEA99
CA5A774C1D59924849BE60D87FFB7AF9EEE28CFD381F7F91CFCE86DC3C772F11
EB2D078CD6CF13D6A1F9C6A9ECCC6807C31476A77CBB3D49D46921D8C5384911
F05836F45939BD48B9AA4FAFB2B1AB82E984E6C40E7C6D18EF21279D5E8A2983
ED306C96FF91F7CFD7B7C2C74DF084F45A02B293B411D836EF46FA2E283612FB
33264E4E7A5E6C69920FE3A2B241A4C79ADF26FFFD9E32D8262D3EFD94F1F215
BBE8E8F323B87A9ED1ABB174BD51C09487E21D71344CB02C1A5B0B5C604C0DE5
A99C23986689A0F0111AE0A106E4D61DBE6EF7EE409FD9020CA0DDCF7508F4FD
79A91F530A0380607E859B9169B9471FFE9509B54D10DF700AE30D6C43DADB44
2C37F64C781651E0B93648B2324BA9FC9442807F800957FC7837F5DA2C1BF177
D44F2DB11E87066F7161A5CF5B57E888D31FB72E2F62010EF217C5F2E64A9787
E63614AE8D1B6EC1D557BEE96F3B674948B90946B3507A28F53E19E55098C512
83B65451F3B35EDA4B318FA8F4DEF096E1FBEDF983492DA1F491FE969F345F6B
98B0D70C07B14112C2454225794F211BBBD5A7B2C17344891256D721114BEFF7
74DCE192FEE8B67DEED9369E19B00B456223027E805879E7775B01E8B54EAA7E
4BCE1BAB18E96A485A29EC31C7B37D8B8F1F64DCF22A2E90991956D71D1B306F
85FCA5FE9A6FFB2A4490A038D20AA921C54C2419B38B4788FC95E17656F3E248
05795E8ADF9F45A8D2D9B54860E16ACFB0771DA2E982F03F56C9A2CAEFAD90C5
BD34C7904351A1C7FC0FE55777560949FCC9AFEE3532CD3875BA907B177ED2DD
ABCD88022FBE914949B114B9285AD88818C3E2D3A52919588BD1658294015EC7
6A0703F9EAD88C510E7D36BBAB0947152D874E08011042A4C5A1F142EF25A436
F2DDDCD02122B40A1A2DE0909762F8F93E57C51DCF8AB8E1B0EDB6CA4A080906
1DC2CBDBB5CAF9C7FE6BF513D9810F506354144F98E0FE67482E7E2542AA4240
BF7022169AF5E324F654985D80C118690C6A3C3B58219922B3EB2BA11A269B13
71FBD8EE07195066332C020BA89EA87E106145A16431C85A6BD3D683E67DF4DA
AA8A33DE2722490D54015FA7DCC3A679DF7D29AAEFEA49667C1E0E88A17198AD
2F2F3941DFB0B28B0F4458D09A15382967944C2BC8E108E7DED7BD2241E84160
5A326917AF95CB5AB18ACDB9596284002FC5AA613CE433E30739EDF895D3C004
6E05730C345B9B37ABE98302BABDDDBB501B7E42A1AF35A250324EEE2B5D5302
4BF206FF2CE077C34597C7FAE776656FE3A7D62A7FF58D562F3A92DD0BE110A2
F36F1E0150D4697A70FABDC299D33E29B5B94EB424C4DAB191E0E27195C8C808
A55DB41BE0C09AEE5B491DE6E74D3F0B1B53E988622AC63A0B88AD1513F4D419
FE6281BF45D300AD3C94AEC244845D6F80657A421D581F75A269E77D5EB93F3B
C8192101E7A97972C2FEEB422B0752D47DBDC0E02618D05AD6498E4DDE9C35D2
A979BE99A949984B942A373348741758E6CEBAC7A701A52499A7023B2DA17CEC
FEFF1AF8BA6ECEFD33FC872E17BBDAFA542036F1E372A4B05F93D4C0228E3EBD
618103E8C5FB59C15A7BC5B35DDDCECC13BAEBA1E9DB8B7934198A718062C641
0EF067782DC79FE28FB5C54EDF8A4CEC8FCE5C9D53322729B337DAFDD7031994
2124D8C7C624B0CEB0DDE7D5B94233461140ED2A2FC215502748360966F8AB7A
C8C8FAAC068B9988262188425D7806775A12F48AA55DD6ED989C5B9C3C619106
9875F602057B1E39C123A5225283FB0E2C9708FE81328417DF9E89709AD6DDD7
B1CB8CFCCE280B327F5CEB80B9760B5163A950AB3C3723CC1B78BFA3B1DE61AB
80465DA6A7266F31C952EA5D79F573B8C7D70C09370298E7C3B4AE694785E1ED
325AAA56EA7D37688DF654A2A28360375D2EEC970959489C3B1D21ED4A77C08E
39D9D2CB56EC8C0886023155FBCE60E4B443CED230130A2573236B0C28BD1E92
DB3D9473F02F30FD701682D3D962A0AEAA22CCC5B56402316D7659F779E658F4
339B20C1CAF45D21DF35C6248AA98C5FD164DB66F1B20A9B0BD175C8AEFC14EE
D6E31F62181DE6B711AB4281B752AB1AA011BF22B382D1FC5DACD69A9374458A
9A261D52BB791103CE813DAB4499FD0444751E20131AC5BA4FC65116DDA56C0E
F2CB4107B237881A84653AB9B338A59188FCFD97401D91BC6AA07FFC96CB1487
A9A23BECED2E1D1B347817A0BDD1E27AABF922D9D64CF2B77AEA5227267E1EE5
8A8B94C970342F7C7E3675721CDD45CD1D9D8312FE8055E6E4E3902A6C3B8DFF
7A65E6098E3C7495EF5D4BC2ACE1A5833BEE6EFB033E94C143076DA92D274AD5
F8F9C9C7519A5169EDA8DC1A88E982DD01587BFB23D1D68D9AB2B558A8128B5B
0BEED9D490A6355B87A3DD96219B3EF16C9F6A410BEF116A1CBB3CE8BD6F225D
C83CC5375C973A8AF6739D8A0079B486685ADB2BB7419CBD614114D950300C18
BDAFDE97BFB61973D79AD1E52F5042BE9DBA57E463EC6F0FDF95D23070AA3573
297D1B8ADEF70558C748EA188E8FCF2F0941BC6DE9371825C0E6DFFC4699CDE5
11EAC04F8483A28F0DC7CE855B38E731C5B3E4D5B852C9858E639D821CB6C8DA
597E2923D832198C4F33F8BA5FB0509564E315AC3F11C563A0B3C8B5EBB09DE5
1457C4994C8EBF6F33CD5BA1E7FBF38E4FB95BE558C71AF2ACE3884BC02A8E7C
7DDA886D1A87A890E62EC23B7520B617C3C493F6AC9FDA04D47C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DEB8CF0BE87C59313978F28295C0E3A01D2B5682DA86A38F390982A8FE
C3E81B8D3532C92C4A4A4BCB421D248F786EC50B3BBBF3BD829F18A73BA4F676
4C5EDA59C34FA85648E492C5794D0910F67F9B6ED89E5BD09B9DBFC65046D77A
2AB706D3312335A3486A067593EC0DF7D334F5D37B818D991D1666459120C75E
6D21A12D75234C22F4F92A4EC10C056298F89550F48605432133895D51B0AAA6
0A8E4020C84D14E4FBBB9E7C095468EFDECD7BC8444DED90ECDE07F2518CCA84
78935CBF8B620C324A87D6049942E772A1FD7BDD577A27869C88841C83D4BC18
6D2FEFADE998BC7D9189300F7C7DBC3F666FCA9D53EE447E310BD22EAD502BDF
33D33A50C61F575E1D3A1F70B8D72F34A9E9E8250627BDDCC62852DD37EB92DC
93D7CB4409D10AF291303362483134E434F682BCBA364206F55EC698416AB3B7
04C31B1D45882A3AFD4037A692272C4ACEFCF08389ACB43A6857C369CED4BBC0
2C487C9A30C787BB3E003017AE803E93C77E413CDEA8563EFC875A95706C980B
1DC2638914FCF6A9BC11CC2CEF0AF3544D2F74938FB2BDA52602D1693D93FF4B
F44DFFD5B2ED04F22D23804CB869CA04480363D6EF55C905D384CB11A28F8555
F2641801E97E84355979CB41EE876C9845
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E702C6D29A39C16F7C66E0B2E15DCD2FC36A606C0EC22D1790CFDE6DA7CD418D
D85039E733793041E83EF250DD499477E7AB494E1AA44CC705A5FD535F05B261
2654089FB093C25C18720E3E3C72B00FE7E88EB45B3939415E3709B1E7508787
8B5E21214B74B124B5FE36BC5D810EBE149520CC13156B025DF2E518AA39C1C7
EE84AB0158FB4208CCAA455C3CF06981708E619B5116A10310B9B180DC2074E4
4FFAE3CA1C359295C7D2967195AFD2D94BADCE1E930304DAE34AD74C4F6EE4D8
8F814913C32C56CEEA4630B71E25E517C60BC448891030BAE0D3B1DF3067DEA7
F016221CB34AA4EB20552294F3AEAF6C9C22A817DE43146AE4E04FA79AA91C81
4B18ABD2C5597A11EC057BAEA084D203E197CD50146460DE396AC95850D198A6
6AD2991F011A878BC86753A989AA0B5800E4BE6B9E623761D24C0B7CB02DD90D
C8A2CBBEBFA8F587E6BBC957E31B764127ECC5CD4D1718F1294B62960C845C5A
2B81ECB5A523CB2915A925B1655FC301C72BE097018749375D92AA335837AE28
6EC255135C878B06D9774D944B8F077BFD9BDC2EB03C158F0B4D165480511171
EF9A30D87414ABA2676B03B3060A57AFC433A6E5D42CAB2CD2AB08BA4AE24FEF
2B67CD6C3EBB1C0E4AA0EA12349BEC2C0217289E81B36EEC9DE76321F3DF1B8D
279AD66877E0B05E0220FB8FDE96E8F11832AC295BB1D4ECD9FE817B07AA754B
523AB4F643BFDF588DF93B6925100D074E11C6D288042023656B73B1A1EC29E2
AC3B8B7A0430AEF9BF9DFCBAD0ACFF0F2E068EA70ED2D5CCB9AF9913BBC020A4
106A166B1B624A52ADE7D5B869078828BDF7EF38AF941D66D70C0675919F26D6
96F2A5A3DB8176F9C326B13607C4D2AD083467DFCE3EF958899D7EF260262689
66CD70F84D4CBC3149C444D2BFC6FFFC568810EE75CC001A8D44DF11AC914012
F66C731225B9420BF545DCF033EADDB8887D3DB2F8F5FC91792B97B32ADF930A
9FF05FE9FD570C5289218D585E471C9C3EC14CC670EE8D563CC659E4FEEDA0BD
B6997BCC7ADB0EBA902B2DE3CC959848E590C2EF04663CF953FBDFF9AB4F899A
017252FF9FCD56D1D594EB3808A7B14898276C07D73A209D539A899B48A1D1CB
242260694BC641C156B1C24A28E6C7C8AF7CF499E0121C9A7BA34B7277EE5FA0
09A0EE3D603BEA4173B001B902BD9176D2E877C9D1425DFFDE0AC72699CD940F
9615117E9F357456B934B287967B59BAD929E3E3E5254E82C1AB4000C80CAB2A
D7ACDF2DFE8BB6FEA60D3DA8BBEAB72B6FADD3429C5277D6A0D6E7C35AF7BF31
F66800947CFF7B757C512C8213DC79F8C7F9BB77FEFB9900553A2D6FD8CDE188
3016A9BE748675E49087CE084C9F61D451D10743B05264B21C4EAFC20D922600
78CAFB6412F3EC8A1DEB9844FABE985F922A5773D351FA2E39A58EA63476B41A
D739D0507F13D6DF421D7AF93EE9C1F377CC7CFBCCE5B52441257B033124C9DD
FEC7033B87072A685EE22861B67588DE228EA69D91D022C7E0E5C88120C65424
A3212813EE5D8D68525F0078CB2365966C16C454394D33268483F51AB1189786
2DA2DCA69012CFC851AA7E5383D34705F4693E41027C4AB866F4C7596B3D38E7
E93F7851CE150BDEEC30DEE240CD29E5CDC84CDFC08637A5FCD09950C59DEEA9
9C7B98FDA6504D16EBCC97CD90570541AD56D41A9AB8603B53B84357D1582275
897BE3CC8748C5AF2AC923A70EB1AABC7C1E090C338C2E93FE06947D742BE143
1D93470224C73DA019E5945CEA71296281ABA5B41999D8EF54D0CCECAF7B4240
A4C65F333BFA7CA2EE5EE3ED67A8724B7F755BF80990B2482372B2C20ED8952D
A6BAC17BB9D838CFCECA65BA940589455AE703A048DAC190C2F68196E6AB307F
2E19B5C0E0F3C43E304F1CD73A2AEB4CB5CCCFB0F3258E5C0DA05AE63BE16A60
6DF0165909DE7004C077EE50857250098B9A6FEEC57659F786EBE3740FF0844B
034BA0C1246CF61B6A1AE516713B40B75273CDCE50516A57398BC77FF578DB10
C0540637A5604A1A189CB0029300F204ADFB10E8D47B2BAFA35D8E094C6790F9
CF1483ECB9B67DAC805E735FA68F9AF1727F673B2E6A72B2DBF20EF7D9F1F778
26A92BA3A241F3E408A4BABCA99CE7A42FD75D9A5F30CA7F692F2843ABC1EBE9
9B7D69B3610F258582EEA5167DA869E21CD2156D95E268408BB7BC27BC45FBA1
B2F9D527B447EFE149BB2CC772CBA36E2DF5AE798E08EFD428E0403443E8C54F
436F7D7DFE0EFE5C77F8220040953AE43B3FC4A9560610D8AF358C185F9DEB90
89B687AAE9AC6FFD682FC907DB1A1BFD000E4BBC337EBCCF34F46FF9A9EA691B
537E4D34D0A019F1EF535BAADAF32B32AA1F0140FD137B10144F492B652C8211
9EF250FC2A6B817918CCD7DC4F5AEB085423C8C1C9CAA23E8C8CBA61D865B659
4651A9659B5D40D5CBF32B9C9244426DC466AA6F4C220367D4741081034057EB
0C3A638BF1E591329A6ABF9475D1016C0EAEAD7AC7A5E440737B927911C8C190
DAA97D168249170E6DA73D9C83AFC689E408D5F017179232CBDF62D4A2AB485D
33F74C78614C3FBC75583A79435B44D75342E6017B58F2DC87B3BC5501565E80
E6A48D2B952ADF609925E29BA779BA7191F70242171907AB529D57B36A9560FA
9E6E7CAEF94F9157539577552D3818FF7F77849000154693F4B1C8A6A2371D2C
DAA522F369FA024EDE79BCE9316495B3E5C35517F93B4504B1C268A28E536942
C5430135BB683070C8348A8C5CF2FF24EFAADA5632EB66B5F7D38C87222E3117
7DF16BEADC4268AC7A3A525AC4E611EFBD85B950FC6E673BD873B5F980ACAC18
8B44E35ACA448686C476149D97093E9EDC5D84159A3109DD6619F186373AF0A2
EDD9165DF751F7155675AE47091A6AA5A930A317F6C1D0925088F996817DF701
C698B68F0EFC457F95D1448ACB0618745B3240FC88A4FFBEF26E497E5A2DAC1A
08A5B85A6D6878DA3F1811DEF6F0D858CC6949021068C48BDBB4B4F3DF6B6C1E
79369FAE64AB96C9FD4B00437533771FA74D3FA7FFE6F0091BC7918FB7C95ABD
A1DD88E43E3C772F512BDC58A3F2C3C8BA5ACCC9D9A3FAFBDA134046C158E4B1
2A0872E82A2794273DA9D231C6634FFAF312F86BF8464F49C0A32961704CFA1F
F5D0DFB1A0AD026C6FE8C1603964F10A9B6E93D5FEBA523A9FB23A00199312EC
81A44C6A058C3263C5262A7F64BD16D57348936C86CCE7D6832E5BEB7383E2FF
9D509CB04A74B153A373786B74915B899755296A85FAC47F90BFAC79470A37F8
A5C9EA34C11FBD2504C3A59EA791B4B729E29A31F94E8593DD90448045142F53
4EC8E122309953035AA9FB5F967F66FE45208FC61D1A5A6B4EDB42ED03930A4C
8936B5445A3865F4A136981AE9F868B692A29D3BCD1A3D5817CC3BB44D3BC6AF
7FA44B76961E8486FF9E36FA75A62006786EB323F2B175FE1CA61803347A9CFB
D09F04DC0120192B8FF2395539941F567871751712DD47267335BCDBCFA0E5A8
30E9148B0D99874FD9255DC3D4E2D0B7E3ECCA4F1366D9A3B9CE34092BD639E3
2C620802F0A54C385B71C62670A71F1EE1C4086B4DDD16A50B8292D1B0737861
ADF539B2E99CB3FA4D58498F6ADCBCA95CD1CF902164F8EB1FC818440E44AF89
A91270CB1EC20458B5C12DB6D5FEFED9E6FB6FA1D96448D3AB52F9191F9F65D3
35FC0BED79434312CB926659737A419F5ED04E248C314815BA4F66D7213A5CD0
5BA50120FCB79560B329B7EEA14BC295AF3545560FF0BB713FAB19B8366E0459
75E10284A6A768FD044C9AE1EED55589E777D1377BE237A2DB1035688B017E73
EC1DF331C035F649A4904261D4FC69342B29FA6C082A89A762FFA545E295FB6D
119B7B927874312B437B306296DF8095ED5F56068867A9977EAA10274C96DBE6
E695781FD4D236F1075A7FC724BEA6F27CAB188E37B1BE8F5F229C9BBA6A030D
11D67BA9F1425E10ADA6A7F7607D33D8E3BBE39822AA7F13ED7B2226C1876C4B
5242EBE5AF3DAD3441FF8009A3F996115001B562AAE510CDFD52D4D0279DCA77
426F168E1E1EE35C06C0D95C2137A0545DB2C37C67787122B0FE8A75D0125ABF
374965E6A2D389AE10B6240AAED1CD06F1F6523A6BDF4B306B531F8294436797
44098378A11846922E4F25CC44607478B88A6E8EBA2F0893A286C2E0787321A9
1BD61AB2B7ECE19100013B7F0A5CAFC87E0A3D5891BACD8E949DE7CB9A7619AB
B3A9E91ED20D49FE6F3CF26A0BA00965DA6FC7BF58DF3794B92DC935932530DB
4B1B7C66E90A903BF4DC4F6BB84FD7EB10693BB2E139B159E478C8BBC2EBF00A
1E8A0FA02C7339CEC3833C1850FA7C38E80C2EF3FDE12E051B1E2002E28AD3CB
93F70B892CB8024CE00812D644435758D5EE44DF047C1446064C537794568090
0996559A712D70458BFD1DF52B724B550911D00C7AC6087638B265CC741D8748
6E1D577C89E719821AB2AD2C4D9802F4090E46B36E0B220B53C65DA336190A95
6B01310FD2A53DB6C861B11D851023369C07275B52B64B091CC091ED9FFFB539
446B0729B5E2FF5EC6106C4559259CC3E10DA9D316ABF25482AA061BECB47B73
B1CBFC9BEEE686BC9442A82F6E5DBCD748A625FBFBF4984B3B1D9FD9E6FF3A43
8299B0BF7203D2FA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 50 /element put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D452804B3142DCDCAB22773DE75726823F1BB198
1C1CA8D89B59FF008B054F0322A543DBCCABA518AB9945020DF8C049A6E112C5
3F67BB74E95B7EB282BEF7147FACBCC86841F2CC8F4DF57A438014B5902A553B
4C8BB4E69641668E1D925BA751A81B2C857CA281C017575F3F890023FB3950FF
8417936D0441ED8EB9BFFC0117C54C3AE4F34BB54875B5A236C0419BE1C51F5B
B598A28934E054B75660306717CDAEF6D6F5AE490C9C6A40DFCC74ABDB648432
11C7D6132FBB944198899410FA84DA717F74F19F892AFA8E115869194DEDD58A
0756CB50BE31017C2E585E496643FE2741507D19E8BCE0327CDC2E574BCE51AB
8FE230B17F6F6959DDFF5E2FA14DE09B4822E904B520CB3268305DA9DD521690
9C0C1D94E1B8D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AEA288B48E6A0693F75308FF5FF6D4704AA8FE5B223358DD415BA8A
C5F3427A5C26A5E116ABE29F2FB420E659B6C973FC0C06639826AD42417C0853
B11AD8AC3B02DCDDF09F78A9FCA629741BF7D0C2D1AABA32751AE8BFFF7E19D1
298AF207936C341299F1F33237F51AF6517D70DA17A956E95A5E509A923AD9A8
CA6882E41B7B81720692C0C1E5535F449A4015E77D7E7874546E510FA855B462
DB619CEEFCFBBD9C58F95EC5B23D00606B9B54C1A9A701106EDA16F806EB145D
CDB8C719FD1F08BFE2574B6DDD849D1195780D0963268EE128713FCFE62A650E
7DE11691AC39E376C0584DDB6573D0A19583746C276CBE01A3BCE7DD008231A5
E2D7D8C0DBA1A21270D5371C778EF28B8AB7D527467018996A06DBA25E94206D
1CF02A4376F7B349464105259D974CC21621515ED7B877B18E569BFF97723E3F
C1DE3CD89AF13E7F5F4F40564813DA3F942771D8FBC6B7B2C0EA600B2FCE8374
9317270A2080FC1C58098A1047F680D7E3D6EBE03C4633F6D933BD4F7E0DA41E
B242F97EF626992941DBB0791CD812A0117840DB1DCF6E22BE6B2707A96E47E6
26C8CB89CF5F7A75B7BEAB55637550CA0156DA5D294306A3CB1940DC8999DB19
CAEF754CF4812B4923CC481154D1215F3AE56CF370A6BBA611EF6638ACEF9C96
56FDAB1038910907176F22AF939FCA42276CA50C1ADB32E9D9A181035647C30D
A324C97633BEA474B90CDC6074C78BB5AE37956E437C350BF9961B6A74551418
BC88FA0C5EF772
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BD38ACC
4F2B176F782DABE3FF8C270633416DB2A3FACC4D1D421713135FD84718A13369
0E6269475B5E4B670FABF83F454E745574255A02CD28BA9E87AD4906113E333C
0DA452A3DA5FF5956B7894282521184959AD0C62899B0F39A7FE182D41791D9F
8C15AA8B375B3C445C6EFF1AA44EECFBDB8B9ACF11B6ADE903BDBD785DF0512B
2EF428A2923A91B2F776C70FEC7B1820C42A1078409AD56FE7191150FA4EE319
9E1639DDEDF5009220307515D4202AF42CD3D3F98DE8CE8101FD697B9B981BFA
7BA525060E8E38C85848538CA9076CA03EAF9BFEE22C49F950A31A6912A8E62A
9B0A1D331A6DF16E8549CD1D757DA72837CA8E90CA93CBF9681425ED59AF6F19
CD6A6C9C19310EFC5E3BAE2B3838F886A23C87281744E40FB9C24D5B9612453E
5EF16C7733BF56AE6BA3F4D290FB8867810AAF4715E339375D60A1D1B7AFCB9D
F8A89FEE180D6275CA7F8ADA5E5973BCEB77DD72295C24BCB97A2A8755111464
61500471693B912992BC817E704A0E944FE4BC73F5CB8455B5EAB7423DAA5559
8A17A44F07BAC8A71E8F20774FC77035771407F6C61B9AA815F71BA9CDA2CC27
83ADE9766D90D8106BD2C089C0568476073FA36EF1BF8B03B7DC0DC3D0E9E5FC
8771BCFD404F15D439B59D094DB2E9523460F114D0D9E5BC68069C7DACD273B5
0BC27AF8E3877B5A18FAEC29D3124B969B854899BDB45C50E17B063DED4682B9
7E5C7DA98CCE8D724D14B879155BAE75A53F5B8CAA9F3EF14B096CE3C5EA03DA
61993C0742C0C991B2700E8E8DAACE7BF3E6015D0FF55BC9FDD3B63B0FD6A904
69F981B3728A590966A1F5668CD8CE3441AE0CCC52493F0D102D2B7A8FD57969
D2C61BDBC19750AFCE844147A34C17F8B7C2226896D515C595A962D99275B831
B6B117F602C9A6294A8BD979D0E1891573EED27D45D8FC743A5714FB582DDFDB
54972E891F3C1909ACC3F57E504A97373509044C5410E81DE9D9628412B17244
31EBDF1622CA25C441D2FFD4DAEE43CFD08C950DB75F8E5B5F42C1C211203ED6
EB5A3357154A0894C7C6C045C42EBFBF182F0D752E77B8EF24E11ECBAF10682F
0EE1A0A11302921F69446F53C950E0AF08006A4FCB9FDD4CD675AA474C42A773
3E97EE2065A7C30E8D9622E3ECCD12E57F97CE085C84C5938C3601AA6E55705C
785648C8F77B93A92502BE80997C0EA83D3AD039FE0720013D660B96ED1E6B51
89A938DE6896D72B0CD6A1747611D2BF413CB128327442D69D1B7FB6EDC903C5
AB3DCD4A3D172B4A8AC5DE573D52D00995249943EACE8608267FEFCD4B77DB19
44DFC2FCA9D28A6742AF910205C9B626B44734A2A35C990AB0C485C8FBCC63BC
FDE667BBF8B8DAE62999615F358E7F80EE2D8EBA389C249A86EA1764EAD2D65F
03B4F41A6FA44E9CBDE36F886A6D4CB723B35069C84B8D3F3B087C8454EBDCBE
9D7FE91345F3775F357A5368A23599557D1C23EE03044801F3211770CEAEE917
D81274FB0BFF9DF2D25FA03BD6C6DCA0844F3E2B8530004005E9F6DAEFA530A8
35479D3FC7623589A18544A63F960D6555EF804A6913C95B13962C80893D13DD
009CC4A4D8E80FA3A1C5F9D1F152BD242CC5B03E2614541891B78E0EC88E75BB
E78CB32E0133765517039417CA212D044907A66E3BCFBC6E22A8BAB77662B561
34033D3D98BF16427BF143B17D02D492F4024DC4CABF70786A7C03996D966AE6
5BC10785AB7CE2E6C544050618A4AD496060FB97FFE5F9C9C7E31FB75C3E973F
69E893ABC4AD81F1EE52D7A1D7C6B353DA579D9C83E6D9510BB613232CC88117
AD594831A1CF9E71594CE475C30E761254F64DEDFB54EB910F0F68AE5AAB53E3
9DE6AF787592277924D503B3FC8CBB424529DDEAD48EE971DBEF0AD790D5241C
CE157AA6DBD6AF81A9BC101962355B043F99B66F7E21D717BD703717CEA2FBB3
EE7D8E614A4F65BF1A72907BCEB28F129535655C5E9E97172263A7E42C94772D
55B7356261B866841B773E27B9BA709234D73C597A8FF5B855B941930507393B
148DBBBE4D1D60A3CA285454D782F68BD580AAA99B9A321DD9E9E16AC846CF23
6B292A528DF0167174D65AF973D985C5165342FA3127D068FA5C3EDC07749B45
C040B9D7E584163E3D70EBDA8BECB69AADD2C61B51D0941763DBDB27CC98610F
35EA14D23A22C2AE735247FA120EDE4E5300648671DC965C53AFB1F238200AB5
250B8DC675AE6B46B849A602F488F21A80EB7E38BE239A8E0469C562FD91DF8A
AFBF407D06A0FA21C524114991DB61CD6B9851361DC744F6635EA5765A068C5F
247BD87472592808C08B6EEF387C9FD4AACCC343705FC9CC206640C52D80B33A
D5E627D93D9F77230D85A548E238F61D1B21DFF10414695EED42E02CE4BF9C08
4609E63EE0E9DF5CCCD180DC4D09F70C1CA09F202C7CC91AEB7FED0BABD104FC
349DF5ED5A65A2E1BC41CB947DFB12314982701FC8CE428876383FA1A5B5F00E
5CC067EEC785EB34803DA30121ABE54423C8BCE3D416F2BBCB15D8B9B1FED23A
9542DE21C117D503987642EF747AFB35100BC08242BA57DBF6BD4E39413FE191
E96140B14E375E1C66A902060476B523E587A4AB657EBE85DCD6A6C892B97BB8
CBCA87983B8E63E7DDECB7CAD0B42D846C95F57BB3750B3814AE5FE829BA1517
34B6D3B9B6DF0D0F60C3817E8A751B5C02332508A0D0063177B9D76FCF2CDB36
B1D916560376C2E71624D90005AD2E75FB0BB9F48441D89700FA18C5CB514E90
70A1618C7C49D42EBDD432F0A24C1D4198557AC95FFABB31D8F27AE69D87A55C
167412BED78AA9195F3DB251C3392DF448D1A8728114AB77194F0EA9B4408425
B9F647ACD2FCEE4B184E4148C46F02C06AB82B6F3D0E47CCE988D25766F86840
1CEC3DFD9673D0416BAD3A3ABA18DF3377AA013DF3CAD255BFF140633F393060
892D5061403177A09448146BC96FA23F67673A87273B43413D509138D5784451
AEBB3A3A4A791405A1FBD67C6150CEF9DD8DA55B1E8D70925061A5137BB4EC00
2B9159F6EAE77BB7C3C8FB47ED25A9BD93D2038D94BB4C78C6543BAA89796323
03497214FDD8FB047612E861D744F4268D4C9B6DCE7D296F8B501EF67FD97344
0AFC47C1ED0C5A1B5B3D53FBA0EDBF8EACAE17BA93CD3C10CE46108180E65030
E021D4DEFD6F871F7EF9D23EC4295600148ADB54376BC35D43B1BE5C8B8D3F42
D6510EBF2F3DDED822A654C068E4B610392D8B56C1F89DB36C910DA86F7C5E1B
73F5CD7077CBBCDEBAD4403F7CCB4FE283D7DB7A27DFAF2E79627EC89466DEE8
87E0DFF2F16DFAFDB92A1B45361A68C4191BBF1C0DF33D687F455A999F9DA100
E0941B85F93A8E9D969D99B78EF5CB60A0B62AAFD4F39714DF11992B3A39BC54
A958BD37387035E6147F7EB2755A6B2434BCE500F78A25F66323E92CBD1B1B94
3C1AA99370C24B1422FAB8C78DAE2B9C375974F34D058E78A5E91283D62459AA
F538DE6C18FD77C17143C8A2C539C6DD19060CE59244062A4CDE2AECD22978A8
029EB2A4B1406BBFF2B1DB7C07CCDFF6148FDFD181CAED0AE0C9F80EC7A1527E
9B496C3B5D656CF7C2011D60A37E8D7DC102F97CC8D362AB9D91A7ABCDF16D3C
07624787478FAC3C7358FE9669F35AA8D0CB710AEF7DF561042F3057855BBEF5
F1747E946640C4CCFBAA342A28C7CBB47B48814BE94D02486106E74890AE46E8
806E0D8DC4E053D2676AD74CF36E3FD0DB3A43EC3721C728A6B725F764ACD772
DA0F5B5B73CAE1CCB597456453A6B0A9B5D572F1CAE51BE4B62E918E80A35A5E
970DAA2463EC7EE330FF05B3C2F06BD00AD864433417196581CEE2774A103455
48608A0360F9E92CE4FD6DE64355445714D8B0AD7DD06F73CBF9FD866D5949FB
BB1E4AA379732957AC35E11756EC2564692188660FCE71B68EE25C48824931C2
C915D433969BACB7D3FD49E1D5D9C1BCF633BC9D6A33D38AFB5B44EC192AA94F
FC3F5A418D2643A9DB38681252FCA55087A25B8E36D7DBEDE01CBBFBD9CB1C5D
CA64D414687687531E50B8C6BBE8A2AF2331629AC60FF0E8A338CBFDD4042E32
532D499E543BCE349D3F6487B5374F2A0C163DAAB3EE61D681403B2CD7713D34
08D17A98350DF93132CA58059432164A26B50F8BE1332960071A4F9F9DD7B96D
56DFE0D78343F4CEBD1F227556506CFD0B79E121066B478FF9CD702A0447BB0E
D5A87CF30D8477FD9549B9AFE0C62BFA3A43079B711F0F1596D78C406BF8B710
0496357726E9167045CFFF6FDE4E1340746F78B8A490C950FF7906BAEFA5F1B8
67DE401B09EBE71CA5DE4E24DAB81ED209BC977F81499A926FA86E48665722F5
1FE1163BEE8984AC6C9CAC0D5C42C5F222B95C3694B2A0F515BF6C809CF5481C
55E4DA55CD85E5F2C85F776BA42DACC537DBBBCF0388F71DDD5A78BB48F63072
221AEBAE6565E10260436699C2E85261C5066BC16F39971298918312250C1BB4
77C45E159122B22901C4F7B92E7B3F323E05A263FFE7444CEE8D8229B93E8A59
7F177401E22C612D14718D582B240DBC135672D70073E4902189C12EF50B4F47
3ACC165EF655F23C1213CDEFB8C361C47B4F11C845ECA7BEEA0464CCD5E7D86A
A3D18EFD237CDA518B7EA2E601EF88B9D63C0291AF8BF87CDACCEB18EBDB854D
0657819F4A6D5799A8B95D136076B962165CD0BC70D58EBDC2A98610269AEDDB
762A308F64FBDC573D00544F9E210577DB0A7638C43301FF297B398A16DB1F53
31DCE442BCA4F617D41E88195D83755BB6132B763483700498CDEF8BD9F3DBA0
A95A81FC237C6BE129DBB0EB5E07FF51832720958275F202B952383D90AE4EBF
BC50EBC99E0D74BAB0E1025C33C1A6A17F9584E2DF1B5400FBD250569E78C70C
5EAA1DBD129E0B69C05A59E308C8FA4E67D56C072B6600C72FDA7553F4D1117C
45BCF8734651163BEE47FEB933A6BCA1396F2043E9B574A680EB8DAF97354C69
D3BD7D3DBFF4EE7CEA13097AE35518FFB99B545037A4B6194872260274F5C284
25F0BF74543D00A6C8250BBD5F2DD2034F9A5AABA9C963B6B55420143710927E
3AE0A422BECA4833B16F5BD0C36815C1BACCA1374CF8E01CBC690B43DD784941
866B0093A78475FA18A11C8FE5D79983933B7BB83FD9F48F7008C85264A5B32D
A8C0EE36C09C820E83F03EA7786BF97AFF7A70BBEA6C15A31507C02811B93E04
BB25E7B47777BB827D74D36CBE13F628CBBCA58300DC0087A766A60F63978BE7
57E7FDB324894E4FFED1777C2187F5E1A2260C9D48EC2EF20252A869B5F73F6F
21273615D52CC6496BA5C760B3FDEE138C0213688E67A8A262A92B968DEE0004
05AAF9B80ECC6D4B5CA294899E426D213012DDF7277EE2934802770DA4E413A9
E5A69C89209BC7192C93E565C591DE2694A95B6995E959F4D0FB1D42E9FB91BD
8FD179876DB2285356FEFFBF70CAFB475E1810DDF08C00E06E0195EBA378E172
0D90CB3449BFA675969B80351FA5747195ECAD77DA5757F4802781AD3E5507AD
BEB97CF4D0172757515E552E41C99425EC1B36D3DF3B4787F5CE0C97AA3D34B0
F4E0AC41A03021D7695791168252F57DC5905D47AE0F453862CA30E1349DE4BD
FB856BAA44F1C3C575B4B2485ADAC7827316D7E1EAB95DCF7A42FB2FE1965F4A
E1D53FF0A257BFA3AAADE36133B41C5AE1EAE6E5FBFDD00BF43207DE7DE70802
B98B9C81A16D9E8C2906D96939D655E5D21C81292D7EC8E974994EEABB0773F2
4A6BC3614F7E4C86227C1FBED7AFD8C334877EB91D5A5F4C593AB8FF3720902A
7E5644848A57346228A00EF52677F4FEB7F5DF7EB0093FF36C008E426AA11A9F
46B4452676B2867990A56AFA5C2F20F89925CFC5D85A28B616B9EDA1AB50E283
E0D0BC501FC101C6688152F658525D5D03460298061C181F0B9FB0B28D20F0EE
E5825552418BA6FF077024B33DE798EF7F31FBF72141059A468B6257E5748001
F7E3F246987E3E2FD6B17631EB775597402E39BCDFCBA8347351C246C8F57914
8DC1136164CF7A259C5132533233A4B6C81B3DFD7BDDF09452F544143B86F62B
E70941CC751C5B4ADFD19E24E33905EC5F0911FFE7AD053945977CBCD11969C3
638F0B8FD51EDA35F4E43C4BCAE40A8FF65CDAC34AC084B4305C1A44D4051837
37CD197CAF8519881ABA73D449352DE81728D4C127BBB5DB53DCF99EF58E1EDC
25BAAA8889012BF840FD6F1582F6E98BD70CB0171A7CA46D17DA14AEB22FAA63
305BC482AA7552B02BB080926D3F2EB2FB846C79E0A6793B8CD1E4C04A6A5C4B
B7F28862B91276B4B5EEEAC43092470A5E6BF8A460A6997847DE1349C8E1D29A
4B352CC39BDD7F1560D58FC968EF269DA6D558A38CD30BDDB12C5140A1BC7597
8A091C62F74EA1CC5E93917B12E576DA9DF5499FCED9E6865D67E1F9055F3380
DDFF117068ACDF665862CF6D7C75BB6F0D03471081567F501B1385CC01436256
6C08D7004D0CC1FA7D50EB6A9486D0BDB1D3E99FF860370E0CC41A0D98A54E30
51EEAE04EB142AED25283E10CFA136E24679AB3D26672DD8BD468EBBDF22C174
56AF5EC80D6AFC0B10E370E2708CC47EEB701A6D026C56A4B495AE9EEB48D85F
BC1EF60AD643DE7E553889BD9E0B2E0D3D91F3FC7FE09C84100B7D9AEFC8A495
084BD1BBD0297AA25492F48B320BCD4EC86599F62A367CB549E3FE7207BCDED0
9D551707E8C84FFB41ABEE5C4D9620894B44DAFC5851E840BF250F85A7F49B1E
363F3D1E883C56A1D8AF76865138859A8196CBCF7EBD8B02EBBCB8F040C43259
B5641DC73A37597B2A8076795A99800C7B103AFC20E21ECAE26A40DB639AD665
9502F90DEB3DCFA5F9E2A8594D3CBC597C3A5B86E2A4ED94A7D997A5EDB1C786
5C7B751E3E9466F3CA64BF089C9D6EF808095EFC2423976B83CF5999CC5E46B9
8A382789DF8C7471D9E92E39CBB0BCC0D1B9351FC2667B316184CE0C0BB88C60
420E3118FC8746E18A70115E6F8676C28FF29983C0988726A31D7C134CFE26C2
AB2629796D755F41B5F4E5D10DC91D4B90B670A9903A20B8449BCC4612D86E4D
77661C628BEDB58E4B232A5C3E69EAA7AE5607DA830C584CDA6AE851536CDDCA
59F8C795DC9CB0E86E742979B4BC35B21D8EAE1F6ACFD1E222CDFE7FD1FD3799
6C6A89AF448FD5703A3AD3706E54611998B4C01C5EE552000881576971CB9E40
267EE1B648454B58CD0CD9FD9150E63FEDB24200F4767C68413642FB154AF6CA
0B62165B529E5A09630F90DCAA6B8C28157237FC958B966402A6607B9D0E8ED2
207D536993F0392F48915E3B6D06A1102534A6F09C7FEA6FD7E024A6DA9A0B9F
2012E84E750C163DCCCC223DDB5A86789194FE988F5FEA5AF6530FE2F9A3B5C7
CABD38A1FF6502F9EB5036944C0531EBCDB3BCB608F4BF4E16211A12CA453C71
D49922CD7C270A13F0B82B98CA9B6A885456358B9B0228CABDC0471ED87CBC2A
7085E48A006FE526E612B7F12E737718342369FD2FA841F2B931DB0C2C8029A4
FCDC61A14E2B9E1C74E667F1D7B9015E4C8B75BCC8CE993BECD9A30AE49FED4D
2F0FC845888659FD3677FB3E3EB2C7C334FDFB7A2B64253D79701A7D24D38397
5D99A4FDAF7A02DF04E86B1797B6F81CB076D4861E856FC6014295FBA2F4AE01
7B85915CA903C6005351639B4C7F93CF5D33774721D232F7EA3521E92D813934
CE4C8A6056BB18F8C34BAB46790F89CB79834F544845155F0FDED479534FC350
53A717FA7411F371B3895FAA113C7BBA783E043078D7635CB7271D8C8C5ED0F3
BE11A407B503EC5CF8ECA2B2867037272CD80C2CDF97C3A5C4830CF8E300B468
A2ACDF7B66BEA904D529E005007E330C9959B51A55A2430BDC4FA074B44B977B
78C11F2C97BA913F31FC39D288DAF8F0B6D57A79FBC5344878436F05BE2C5BEF
083F6C56F63E6A17337FA1675ED8953E25AD511CB865BD839560F0AFD26CBFF7
E94C4C210414C69D550B069A470D043B7C7B3BD0880B2A25ACF6E001048059FB
EBB4E08F06C3A3C9CD63C4A8A6E52A5AA8471D287F1C0128AA65D734493EA011
4E40A7F2697F3D6E1718E3524ED380D62F5AAE83494E800D9EF583C91C34E097
3C9089850F491152FEFA5D02E264A51770A7434178516DE898847298C46F66AE
52DE02D2EAD21921F975BFF76C7B9825CC6C6389300DC9562CCC20144323CF96
F4C3C84359790EEC08E7B08F182A8BE522D78A168DD57786281466A7C86EB4BA
469FE38EC682F4A2D600661D619087D8137C45535EC08197FB5B09C782649444
1C5D90903F398D641228656B1C6735F2E495216424C1A9FB01F1E8010953ED0E
EB16F25FBE26B8D927DF2F39D0DA3EAE1CDEBED7929C1D1E7F9A123422F371DB
D3954CF74E814CB7F4FFE8306418CD7E169510940A98E4C17DF2CA6FA4F62601
F29EA58CC3FCFF771C501758DC6BBE1A36DF67226E73CA9B8F47BD3AF0772C9E
AE378FCC3A8318A936DFB3218381CBA5EB69365C378B1A9116D57FC848DA2324
379935E66ED2BF759505E0CEF1C075CA3614956371CF4136782135A899BFB025
F5F359C1CA80FDCC858BC7B4D6BF26B24D42FE33605E3C8345BCAE8E0720841E
AD31DA8D1CDBC4D20F3F418BA4179440BD22F897FCF3C7880B3291273A1462E1
E4DE87A7D35907BE395232BF2BBDD15213BEE1237F6DB8E5EC3A26CB71AB92E0
198E77BC74504C570F2905F1B315231BA851FFF74465E3178CE78E30FD1C6344
DCBB7FD0BACBD21B2B161DD7384666F35239743788ABBE9114FEE0A12C240CD8
679CF2B600CC460544ACDA52139EA2CCB1ABAF71A35D36BBE9AC43246ADBE690
C52365BEBD55BE691EA260526A6060945E6A34D8325FC31ABE1EC2D15323AEB2
CD5A6D97FC546E899C8E527660ABB0434E78BD82D8936D2D0C1BD34E9BA70601
F2C027A961FE7B81A55DE3F4447396EFC7846A3BC9FD97207C15F18D8FEF5713
568968803100AF5793F52AEB5D76C88A14C67A0D8F5312B20DD102A8E3C00193
26593306DB2EF556B10F19B253DBB32F785C724722ED4642734B710BAD4BE963
8569D3463F2046491A78602DD867563247D9E675FC7A8BEEBBC4E4E67C38AAC6
952E467ED0BEC24D3A8B2ED7401F2429C9661A9FBC3EDE8B3A6ECAEE45A23BE3
C33D48197145B4857151C7BF6E309AEF2CA999760B4993EAA5F1B867DE401B09
EBE71CA5DE4E227928069EC53FD5E9C745E978091C4C8B2E0C6985ED76735DE0
D9B5D5AA9F42C1330E785F1F78B6B7C82D5E2C22B2729F2C58CBB49F019BDBDA
C7482826B8F71EC51A777EF4D8CE8723654616BF83BDA50EDE185006CC847BE0
F6A23A0A00B7DF4F412C71012BFCA0C53C4F78529A896CEA8CAE5A330D892533
9B7C0E156E754BE0A9DAB88E81AE9925C06C89DA157F70CB81E2846DD9FB0554
CEFDE5E6B879B9C2674E7A36A8AF511CBA44E43824FBFC3F493811090818078B
97D677321372D8AB907CE219F65EC6C7229DACDA99F13247524103082B4E3DD2
E25F1CDF9DB2DC9B67EA9348596347A81D5448A78D0ABED5617B9C8D02C484E5
2237B4D55F47166E95FDAF4FDBED8297BC94C9578F8AA4248C03DD7267FBA194
17F8DCE55956FA2468350F0944C08A6213957463391C91A7C1456FDFDB46767C
44FA15BA4CDFFFCBA641985D96779F5F278A1F90FC0F65DAE3EDBA9E51C8AB3A
A18648F59055C0255C80F2EC205FECF24964A4A4B22DE61EEBAA5C23F65B533B
AA8979632303497214FDD8FB0470747881588D9FC1E2C25A228E6AC46A6B355B
260F70E4CA71FC970E8EBE166ADD3B3619EE1601BB44A1CB7EC830F322EA5989
BECEA1E7AC3B74CD541C9A9C9873D4D6C551C92D7703A7262419E7545C6B473B
5F02AE7DC6ED817A28B9399D7862EF0B685A1A30D158DDF063382245754FB9E2
D79AC4B8D9D9E771EB7A37C96FF1195208055E5B92289539FFEF6A5B093D614D
905EA1F2C73A718571C5C42D49E82AF42A1E444FCCE71598BA8F63581C84A0CF
391A75A2CB73748EC8C976DFBC26151D66893E312892B18CC51CD2B41C9E1C3C
1B4144A157E5CCF00A362E6603A817A02E1AC882503F4DD682DCBC9B6936E270
D51977C31A5F9BB7A43566311633CEF844F24C7127D3D659E0459FCAFC4C48E4
5BFD3F59F355755D4C3AF1ADAD3762A5C11FFFBA068859528FFC0C8785024E6F
8B112657EAA3604E8DD05E04346C08317070B7B74446CDE1FF7AA1A0D38DBABD
6986F1C074EEB223B1770649C2CEC4D91D676C61F1AD1CCEE0FA1DD122449D00
4933ABE1ACF58AB4EABF4E9F025EFB9B17F2D3ABC3269B6E12A5076149A54242
8C3183CB829B644824962612D1050EE8F330F06E69DE516CEABBC24F63F407FD
21A937B3D1735027E598325E4B961D3D3A3B0130EC2ED6E91E5109D78DD0AAC1
40134D5E32AD8B11FBDC0509EB743118EC90AC989CEA4DC019180FB37EAA563F
78644792E432C3A1776396FA6954AEE77963016A1C77555FF8EC6F39CFFB4D4A
AD5762C8D5AA3BCE2872CF885EE445BD215107AF7F4880B539B756E125867E17
46017DEEA2E49527BFACBD40CFD211A88301D9A51582D1D03068750E08F405AF
AA95FAC073459899667210BF60478E29A0269C96055B1DE93C4CDE2E12D22B08
D256D613DEF46EFBC45BE43685B0144AFDC37E47EC560D4770613039407E813F
CE5339E177DA5EBEF9EAD14B1F2396FEE1CB05A36BD23A8C59BE95F1967CE198
82CF4CE6147FF3ADEB3E39854B8696DC04C8997BBFB6AB9F373B50F160EED718
43B9EA5A218FE065BC935DCBAA6A2152CED7D78C653E4D3E85B762C8C4F3D3FB
30BE148D4295C793C00FF7767D3C9DA3019F9066FD5AF41A8DB91E659D18F021
A6C150932CF933E538A01FC2334B8AB345CA00FCC15F0C28AC5A885463B1C0FF
932428BDCAC5DBDEDD27BC5081D0A029ED177F7D1B1C0B2544E0913D45547310
B36EE56A56E53AC9AA9D753BFD738991C5CE46E1329F2A60B9C23726113ACEAE
5A6EAC4EE772092C10D6A9C650BDF391F1168B9DED267FDE5F69D29B19233ED4
130D20DF94984970A10BA4F0500313465AFCAA8EACA5EE4681A944FF1D030767
ADFEE9ED0303CF29C11550E5EBEAF0C16FA757218D16DD1D9B0ADAB5213B4F0F
359C59A019B99960D86C0B7054DE539213422AF13AEB835A87F7EF22844AE255
F002DBF8AFA1055BD93FD6E9E687F69753F3DFD949CC125648595F08A3B55C63
F0BE9235DAFA21247C1F5D62E5B6C5A22F460E419B3E98788FF207E233AFCCEA
52A593DDBBA89A6045A97591BCAEEE22BDC60E1E74F651F4A3453C91E4193E4F
4B484AD47605D40D076763311021FC5FE65CCED6F2744E20A84BB201CF66DD1C
8F4BC3E0A6FFD4378703652A6AA45483A0552F5D4526C2E02C8B69D84C9E5723
FE07F72BC37090660C5B49E8882EB7FAD9CB84049B8C2E0701514C0E4FA3C5F0
785A799DD9F1E6BE7C500F34B97F68A42ED5D8B14B49D074FB13143651EC66B5
436D54BDB4AB65B61902630D514AAA7190D5DA7B6D52E5F87DF7E27E155122A1
E9FF2BCC9C58E503C17740F255096510F7607572C2CAB80D3E87A653658F0395
6D786382DE87EAA5E9E062649D14C6F448C41B70CA4851434B9BBD8E48303CC8
D8DB835C0C089098AAFCF365B4485E96A9C9C4E50BC74E43B4E6D836A7850832
78FC7FD658F3153D2A7BB39A6935D0ACFBAEEF071BE238E74784C22080DCD906
6B7C40E884AAA0F61F3B72121001B7DDE5671684AE9AF74B4F0070A883839EE4
45C59D2E6F1F88D8F5685C51A49D5496A6EE772ED594203FC37D2D549770FA9E
3FF391CE17B654019448036DC61318C2044E7DB8E23B9239EBF092F358DFDD1E
58AC7844D99FFBBFF39611F32DC7AD923099EB5E289653FBB12BCC3BB2684EF8
27C408A3EC4588AADFCA97AB917F145B7364A9BC79E95AB51E299D8D269904F0
72B85E8A7579B7827025E9211523C2F918602DD662A58ABAE1573C58F64E00B4
469BCF9EBD005AC84C68EB610AF67292F6754EDA86BB9EEA03D73E2030F8EE55
412B5FCB35CCF79528BF2B9C8623A4341CB7362A9F65CDC18694EB3CB230AABD
88851E40441D29E04736BC83E5FC97AC03B198B4AFA639A6DA91EF8EACE0DD10
B79E4076D45176FBEBA106D0268BF19E00C26DF2955F172225EE93EE47644666
AFDBB7A8231B97A3E146C23041CE5A60FBBA3A1CDB9D1444F6BCFB2984BE7984
46EEC5177B5BB232FABD659F532E4CFF40465DD06D4A683EE9CB42974B439990
BD274FFD6A8A2D337FCD128A128D39EBA872AE9F522296DDF10074B3B4F29005
9FCEF829B64C360D5AD3347DFA51936827B7904734E973FD42C00B0984C93FC7
7B955CAB886DCDF2F0DC64EF2447C529EE08285E200955AE86F639AA66E0125D
437EACF0163D80CE8981BEE284DD61B29D1A4485FC6A56F9468BD27FC5B43A2D
7B3F99DAA346901C85C242046F3455378DAA02A55E2980C0F75157BE45C6AFDC
7013982D6EB24911D27386829C25C06C88F964140AAB4C90211D5329AB926EFD
4C397ACFB134D0A2873916E1EE321C3B024D980D4A5965ABBF98A791636D778D
AF295A7357D6C4C114419BD04B174C9B5846B742A8F663E60F1E730BE87D9498
07B13AF4C860605D588BADEA312F7BC5C329D521B1D5A39DE4178D1BFA4F0162
ED13C095F7B73AD863852F6EC3B1A49E572610C7EA038CF4B904F504642CFD47
5B92A17894756F077749A8F80F0BDDAC3DD0A16050335EE3B76239128E786995
0B227A2BC112984C2ED0A310F71A138301219EF89E29EFDB2B70E64676F88660
178B7B0FD90D3C90EE2B8557D90E7C5A058192076D34EFB582BFD1AA89DFDDFF
65E9B853E9315D6F1A29ED495AF3AF836072ED471DF04A83FB88CCE8ABA657A6
ADFE822D40E023A045D98B645C2143FECFFF5C7774DB00EB9598FF3CE2801FFF
10D184F38C786F5189EAD948A35888F63501225E412E687FD5B99B3F2F5746C7
A6247F7C8E602E32841D44997A7E92E324471A9A4A7F1062066CF520A1EE99E1
50CB1193C353925E5EE1E8617FC91AD09563058F8653A375A7C5659B3C74C492
D7F6A5A0FD2C18FEAF1789725CFECED9BDE77FDE32A13181DDBA016BF0B8F391
43AD3B704CE3A592FF330458E8F6E1B541E63C52A72ABADBB16E911B3E602E39
2D96DE2CBC2A71B13808B25AF98791191B962D60832A35A1A0FE7B5821522B68
A0635F43121884186420ABE61F4165003FE0BF954411714A36FADABCA4CB731E
52BBB831670BE19D7B21C567CC64BE1A36DF67226E73CA99124473DFC80D55B6
F8AF17DBBF27066BF4D2F258FA3B94681F9FE0EA0855979B402CB7381E6C0644
1FAE318812B2DA414FCF75CAB94A96F7B81008E747ACF26571E3B2C14594DED9
10B188D69C01881047466A0368B350EC536F0873F011A3E1B18DBF7655DE569A
DC5089643986EB635B3386E362EC7B8A2010CF75DA4C7AC44373818286552042
7F047D4E7778ABA7522C72A67EC9C9403C57E9C5129523FE417DC1414E8ECC5B
15E9B5C3A0C295D1510ADD011D365BE2C51E72C229DD7CC621728C38BB70A3AD
0E78C5B130887A3405A668FF968B539014942319C94DCB2023EFC0B8D4EB2B01
D5A9F66C4F876E6619CD5D9EA197312B47E96708A6B5372C4868E315470BD761
9AD55960D1149901E8B11A4B4838BF91F9EA7FC5D7EC59DA350242D5C7007AE0
1EF43A784A146ADEA4A55961292BD44AF2DC41F97F21ED1DB3E9D2CF3E662C92
92B8B497348C22AECB0639880C3382F9E85A6037DE6979B1636092FD704AFFBE
DD5CC24A59AE8E9ABE71A47B686447F45D62C58D747E2C3534CE42EE5A34F99A
D86C6BEC994BF8FDCBB91857000109235289938AEE2340AA12BB786CDD7FAF7F
D93F368DD1D17BC1BD3FC40EB7229605912F5F2B5B04D1312714CE0388132587
6BF20CC2FBB3FEFE2564703CC45EBB55B8C0077C2107845147DF0967A2E0D894
C2668BB223022BA9D8A19DAB8D640AF00072C4655389FD8DD6F9ADCD7E5134FD
21839B036AAE26163CACB32F415F7459CB44876CE40626197C4CE3EA756E5A3D
AAEC56E15E6B525597DEF6FE6A5F23081191152C01A7DF2E63C2A22B58A284AF
A22FC46B3883938BB155480A4FF6FB2E46EDF9D9BD5C18C2E5F8ECF12A924BFD
574CE59ED5C3EE2A71EA684C572C03C96417EBB4ABB228BEE064F9EBB05B09BC
D1A2EFE8428746BFF9055B426B1CE9B7F79E4EE60AC3E2C38EE6FACB1880D07F
1308731CC4FFD460A1631B7B48633D0100E851E34CD11B385F1FBC0D30B9931E
01A93A2595512F9ADA081C82BB25ED6C99C9BAF35553E5EE3BE7FDC61D4336EE
AB8E04F77B3FD8F46FD5BAF75730B4AE0AE0E053DE8433B6B117F602C9A6294A
8BD979D0E18E1882C5202FC2CA2920522A4C94DE4D114BC7EC3DAA7BE47741F7
240D52145DF4603049B9088373851A0855F6C418B2525AB9B594F678ED1FE8C1
3B46EEE18C1D6E639E70226647795B6B29E97E12360A0ECAA2D7DBD9CA7BBDDA
09B7BDD68E477BAF861C673A90B6751A8B206143D0134BF52670BB3F4327676B
8C153F0EF062F7495F9D9DA1ADBB8347F29CC7B53873C7CB1A9889DAF8A3F33D
B03C8ABEA374243103C54F4A4CC84D6F57D3007C6DBB2E929ADF2C40726B1EC0
F9D4A34F198FE674525D8BBBD61B2BB33D7534E6119FE42F7817E41F05ACC7E1
6F498A3A00FA5ACF8980A23E89A62142CFD0DA19D3A85C15BE73F5BE65225C38
E0B9D9C7ACD23DC9743621119D843519D0FB7A9BE1E609057E776901598C36BD
8CA4056CF63C5DFE464138AFFF98C387DE4733894EF46C0C1B13860D6C0D3687
127310B61F15D3F92BF0CCEBE96CD3E818555EE9271FA89B438D1D4CDCCEE4E4
A7DD964335FCC634E08E495A4CDFC1F9CBE45876DDBC0DDDECA8A5244AF849C7
BCEA1A0C120A1C8B44C75D9E78062FCE44FC7042A9F6C69595485CE83DD6FC8E
59BD9213144AE9A4CCB1269CC8781929263CAA892AB93871BCEC8B55C960DACD
FB84CDD7BEDD81966C66E0E94227FF4DC1F3AAB930045F07CD60FAA8B62F0E5D
DFBC2E374EBD26AB34AF24964D036AF2A021FCBC9830080C857E92A2614CCA05
073141CD77459A9D33A6C611BEE0304DC92A25B84BF10C2234901FA2DAF0D345
5CBDD171190FAA2059CE1A8CE50A8FA91F9B68A2AE149BDF9C4BF7A3AD8D316B
1451E38907B58D12A11F1B10D5533D4CDFAF1B833AFDB4BBAC2F45E0D9E21685
A6F8C724D8D515C07A32E5A5A56437AE5B8506129E9AAEA996FA94076B301238
A2CEBEFAD20DF4F38BEE8DF7E2EE4C93BC2C94AB7B1D1934894DF0C0ECC6D6B4
73BBEE6293C1BD55B46A57525279C7A680F4AC3984985779B52CBFBF2CE280A6
F9CB3B3A26A43624AB5F523DB325960D3CD33BF15CA0E776EAD954C29319FCF5
3D9C911AEEAB9F744AD4BD0224306DDAEDAF57CAE03ED38DCED849B8B7121155
CC01828F84D0B64A8492B511E5EC3B449FCBD7D49B06AC0E6838711D84CF1A9A
C65724E0E44EADF1C79944E90393AEA15BAC9F35682635F388616499186FCC07
D3ABA2CF401E589A69D026CEB7B33592E1E93B65364DE0860842D433BB758232
B7EFE39642D297EC9C9F658767332937FFAAAC7F346475D2F4658FA4F44A0E1B
5061D7F5E3E363837F1459582B462E9CD2BE7FBBC3F8B93A7743F8782A10BE50
A8D8FCF57A79FF51B60C23CCE854E4B1227F6D473F9756C854866415A26516AD
20497FCFC013605ABA9F968481BE358D799DF62B56EE8D6FABCC3BDCEDF0C0D6
DE52905B69124245F4A2E9FE5CF2F2B1E344FEAF613BE209EEA61C60BD090420
0CDB0792CF315BAFACC1962B0D77BFEC9F62F716A0D8D07099C19D3F8FAC34BC
E17434973DFF998629C21041C567D2C0572BF62DCA04E6721FD2C2FFD56B0EFC
62A8CA860BD110DF5FA30F4144ACA40DB774F03B570D176879F7154DA32717A3
9741E1F826C338B80325E2C4030910BBCC5A6A80FC2809A6905631E179759453
656AC309C04587B5DC6C6BA31CC103B9AF42B5BE4E3F4C41BB69DCD67EB82900
4E4CF8AEAA0596846339DF5006D56BEBE3BA98C84F7AFE5215D2E23C497B78B7
EED0F84DD8F909807E51CDA9CC6338E19D26A746121376F6D871B9FC3FBF06EF
866BDC207E861566E4190E3DD8CE459454C7582A8C0CEB2B7F989092B9DD99C2
22A8853E8A160002B0424E74997091524E8A62509515B1FEF6920B6AB6D9E4F4
8245573C8854C4893827C86536BFEC998452E49EC8F17F0895E42AA15E9C03BC
9388ABF345AA5422721E3871295576F263D44A4542676EA145D5DF33A3EF5FD5
BB7C85B089CA9833124BA3A882BADA47472DA7F00C7544D2FE1385D456D6B2E6
D556CD5D4A727F1ABEF08B7149CBBC266AD3889676B49CECA4D18401DE1CFF67
128DEE3EBC3198DC0554FB3831472E387BB1D826994FAEE0722E995819A4CD8D
7656C60E8F17C5128A779AABF374DA038B947645964A811AA1CDA45F9AE7BD71
BA5EFFA23A9D019D124804D0066A9856C3B196F1273B69F68659A329119D416A
0B120AFAD7B2723B0973ED5734C4C3906250C3B0C3EC1E40CB2278FAE9624519
F692A2CC1E405651470D53134D0420A61F6AA0C1F7D36D1F06AB5AB9C19AFBF2
5B7A8E126D9690B071FAA81E91300D28195FA1DE8F7AF1318DFBFF6BE8A134F7
971F7503C2ECE36AF6F84F48ED60CE01A09DABDA27288924E4F3BEB89025A603
E62A21BEC8A5A9BA0159774FFFC79A8E1DEAED85EC0C7054E2711EFEBE674C18
918D5CE6E05E7A98A7F8E104CC29E7E95C0DFCAF0B813658BF7CED77BF35A0C7
C8D46958304EF1AC05D1D90B263F9CB022BBAB70FEB57A89B03E423059F8E4BC
40BA796ED91E3705A7E9F84C3D09A3FD47B8B31676C4901654FF8E209012033B
28968DED2308087C8E89791B7D4DF918A2F041B9D38F87E12356F7005A34368E
421C676F2110F8514236EF611338811B9137170B193707C8E81744C4554298A8
FF1FBBCE9F4E5AA868C59C175E5FE29088360BD53576CA61E94494007E15ED0D
E082228B27F7E02F7BF84FD14C004C0484DE690E5193E57B61AC698849C29994
D92C23F8986CB23A7EFAEBCE088832DC6CA542A677BBC32A5EEBC8BCFFFC4C94
D7512CD8728CCDC342BE3E04BBD6FD2370A2659A38D7F6BA8E97FF2079D82A66
1B5DDF2483896AF4EA3DD8999399A54A11236402E4F5C7A2FF356AB1CD3E78B9
783EEA0A19C3FB2F9688CEB9082B118EC9C442C77B0E491FD3E85C01D3087392
8EE3C5598FE4A401AE82575AFCE5B23D23F19A463C292EC98B9A2D769763C9D0
E3C1091895CC72D4A2E1CF8959243FB92EDADA5F8890B5580297365D40F2A01F
14BF1741AE013BF544D1BAA49EB3FF30ECB5F6868BBF38B69E3ABE260243DC83
CA58F4AF17A953CE23D271DDC189A3AA13C90AED8EBA1C35C5340C89C924866E
DF72C7699779CBB6CEF4C364AC9E4BD30CF61475EAA27B790EA8F1C8A49179C1
08E4782A59809B27345BC014A898ECCEC3289EF938919536ADA66A07882B2F26
CEEED3E292626AF60DC01B10F56E5AF63E34E2594CA3D57350A003A8C9531F0F
6E5EBBF79715AA7178E040D12EF4C7E5C71B9A0C7E287367BFDC82B389F51793
ED6405153815C306F25BFA8EFE02CF1930A22AB95D4FF7F6038FC5209F824CE2
15D84D37FB51F6F36694EC56D6ED760C9BAFD840C14184E48B4A3163B61BFA4D
1EC3132A381D5458E2CA6085B2C23226076434FA62EFA6747B339B37015DEEAD
E784302597F238A170B4B3644E9059490A910D0DA5D9A23E213A73614E00093A
D52473978A21FEF3C962BB3A169A42D479C7E2E6D86E51CF2571A4720716F971
A67E9889B5E248FEDB84E726C71A7B5A56BC6B6F61920962F6B15D4BCD8C69F1
EE609F791F3CE8B28C4FB68C11029CF0300760112DE687CB996DAF3B04B6893B
C30AC23104F03DEF42A20C323B6000930A5D1DB02B5097F9CFBD4EEC8EABBB67
331177232B4449193289DC36D850E353319ECBE8DAA19CFD3594F949034544C2
CCE98F9D58113BF618D5B16C21FABBF15CE56EC3CDF31057C52BABA5B2D713AC
3A9BCD4854D5051DD6F5ED700BF7F6995FBD23927903D87F887742DA89DC41F5
1560AC5951C43F465C212FF29D19E843FF921631E48164E57475BC86569C74B6
81AE4E131429B0D85F2DF761A1D9DADC1821555BDC2F409043DA3881B30BD03B
924106CA224765E4142BB16C48D7C54A0AE83AD07B4CCE3D882F92235A6A0618
92660357F48B52B5C26FA5157AF5112E2D4401B1F60AE854F7DA5981DB02A1B8
FC809B635CE528F9CFF9839684FE133DEB2FC4A7EC55D1974F0D7E98483C577B
07EE799B4AAA9EE86558E12BAA7481688CE4D8FBEBD806A3C85D79B53A1C435A
B8F4FA7062A3894508D33F800FBD85AC2C78354F76C7FA0C6BC8A94E2EACD77C
2CD342583D9806303B3038A7F554398C0822FFC09BB27C5B3D392B90F2736980
B6B882533278ACEBBF95472BA377187B51996A6AC7033F0A99B7C8BF6BAAFFF0
B021395B4F2DB044323583A3196EAFA8BCC1A8E3B85BDB176BDD6C581EE80413
B26F2D23BB16BCA504D17810AD53135E0B9CFAC8AD64E71172D3826EB4B3A3F7
AE4D5237F3B588BC611BD2F627655908E9E8F2B092CD20679D49864192C4439B
CE245D2B76FCA5F6B7C9DF14A259E7A05B2F9C3B5F7E54E7170BC5EC6D01DC91
92A83CFD2C905D9F1EB07651A379D4281B2B324744DDD297DBCC92F5455AD848
D51477DED4B6ADB2F2338D6F985FEE9BAD6E9BD4F6ACBA60680E38FA58F4A00E
9AC8D5061EFAC9C9D012C39D7F758032B3F57A82FED38BC6CFE6555B8522837D
A77F2C17B1CC23F699E6FA238E55CD8EA9A80E8D5081183D9BD7B0D743D6AF3F
2656837FD0424FCC96AE70C829E3DD7A815F47660D58A83976BCCB0E13911935
3AB6E89211BA6DE797B35D50D1278A3AC0556DB09C4C646E94468ADB823C6A29
82C4989650023E900D2837209DFE17236B7F438368D8D9C809163FF9F1970984
6992F2F8D48C48F4DF4DD02844EB6EFEBA3566D918AD068D40F16DECEA8CE5D3
745DBBEB5E3E7F88CC89173B34B2617DE7BDD82971A3470812A4136403B4DDC7
665BD6049318186E818BD5B039A2FAE6236C3A6F082AB063B9C1F9F85F000A09
F32A8E2AEC0719E4183A7D7C360DD583147467C75C3B66D97F2496FD6D3BF637
BFBA54FE0638337A34FEDF099B0D8B0897EB972A1E2F76FEE7F50B924B76646F
35A2E7234D27A82ADBD604B1BDA2D5FAB62317C60AE12AACFFFA1860BD4D782B
A2A6F63E69A4F5D41B9C7C7EB4C075B61072404B1C1F885B2F117D2ECB67A7F3
07248251923A1AA63DC634CA2B556C5AD087BAD62DFA92554030B91AE425C122
97A6D8E906D7432C808AE578D8EC0FEA66D43CF3185DE2F503AB5A1CB7839312
3687EDBBCF76F5AF5B10A80C9D5D61DE3DD358F2509F20CFC33B850807611359
729B3EBB56F6B680B314C5E6781749519E7A2823BFA45ACFADED4E52774FD142
672E974F3969EE20B73853FC938B23602C1AF36DA065EEF3BBBE5A283195C901
DE2460C84D078E968F673055BCB07265AB8A18E94FE113E720FEA4493725AD62
0E5A94D39874724E375BB2A5564FDEE98C41CBEB0C1D1B495A1F9D775003B7CE
65B84C323C54ED751879D9A2EA9A09CAD3577A3157E55922930FB61420A0377D
957A524CB7F764B495ADBBE8743598C17F8320BFE5C123AFE6D23E24B399F396
D619371E513B98CB09131E57C63C1D635F1B981B34090B8934242C9C87FCEF17
E3E1D892839D21EE8D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2E2A68EF8D1C1218D4CAD6021093125A73710FE
E11B6B3B23CD2AD46270F92FB292F30D852DDE60E6818C162254247893637369
C7729F5A4CBAD8D78B07309AEE44069BD87AA928122D1FFF56B8FD5782BA085B
A2213F8816F01183C3CA298E658EE9C13C6350F14A9209DE8A4E08DA6FE245BF
568355677A9DD49EB4DD3686B5BB030C72397BE2798DC546A5040B8F17C5128A
779AABF374DA038B94733191AAF942B6BA35E22B7DEEE932B202E981784A16F8
F33E50BB66F44593DF8DB37452837893CBA42634629F0D64BA7581CF5E966FB5
3D24198F715A9CCAFCF4AD13465DF0D603C48302D7E683BF122B339AEFC509BD
A8400A5A1F19EC6C599E20238CEDDCA78E8314EDC6B44B38419ACFED6D092481
50786DE3383AB03CD116D52E41851B0635A9BE9DFFC634AE239F24D487DF73D7
3878ABF61030B5A9733EBF14D79A07A2BA9D5D44CA6B490E990D75AD6B19805A
CDADD5D39ADFD18C0FEABF1C9D195E2EDD1C60A2AE1CC2C70CE3A293658B0EC2
89A0FF64E651A689822E4D5EC8D77C109EA7FC04160F972CEB790C818F445B4C
A2FCD347D13CF41A65E336A5156B8344F1CCDE84A46AB2CC7F0F052620E5123C
B6F6B133DFBA5A3E65297AC38C36ABDF19DD5DD945D5FC78AE82EBB17473F6F8
429B98AF55D76EA0130064A1B0D86C00A49816C19375BA41440B4CB97DD9B19A
7ADD12100D90F33ADFA4D661A5BDED1BB9E9B6AADDD481DA4789B52AA42E87FD
05AF4A75B3DDBACBD0BCB623D5515BA63C2AD07E13F93391F248FF72A9466572
485DDFEF4894DBCA3F2FB4684FA0EA1C7F0EA5B2946E56800422B5392B6F93AB
77D129E89DB36DF165EACFD249E9E128A3AD06A18B2C6BBB076410C7F4D4C2D2
E506C84E896E1FA498AC0922338CEB3ECFEFEB50F449C01794258F8ED287C7AD
CBA1EBC70CC4106C988676F66DA98957838DDEF0AD7C4F17AA596E81406F17E8
738C920704F7DDD57C53843BF964AE1095100AA96A3931F3CEEC2B8D426E23DC
9F62B2FEC9E24BCC3484413186B331054E404BFEDEC454988CF046E740601399
4978EF49DD1AA7D07B2CB60EAD23B7CC8CE43C92461012AA63FE94C5780669AF
D68B8E32E60C749802BF674E3EE0DB965DD45604DAD7759B5167DFBB7EFE5551
7EB9C4125203C8FF1D881F6C47B1EFCE882798084F6F41750699BC2902CB4423
EE5EE40FF2ABC81973DAB2832332F3FE98A99664195A920FC239F97E12B1F9FE
3897A1F7A36E19CF49A5475C5C9F352D8BE3694B7A96F6593E96A327B6C06EAC
7608BB90246A76F3B72F5895A6BD45AAF99F6432BF32A3DD099DA1BF5D653260
1FB08DEDBA6B9A81A2601C1CE1C1B5B7410BB799ADFDF25709A8696D992C74E1
75C64DE59E00E9253C9B160D22598E71E00A7ECF6A0F8F0EF6FCA9A6998497D0
4EF7C91F971BBF6F85FB8223624D36891695920917664559BD8C8B15B697674C
5F33FDF897730FD46C23FC4AFC9753AD8DF42D54E4C4120892EBC0F85F59AF7B
2B9A146914A24764CB10357090BBB3DCCA756B93B0FE723311D7C48435E4D123
9A550A850DBF632156B715159822D8220A26924054977E715CA1F39BCD7E4321
99E0677AF68600E900A7DEAD9636E7DECA274088C53479B8C9C81882544B89C0
A9C95AAEAA21ECCDFBB1207A9706AA8BBA9C1637E9A26AB810A0895DF7537B6A
C7C500AC1A8B08CC425FD9EB6668FF1E60613F6064EABFCB5706CEFE4F16580D
44B73A263B279ED61585B4ABAAA306C0F2E2A593DB7AA7618487B1D3D92BA51D
429BE452A34ABFA791A352BE0827C1E664A39B29B5C776D7607E7626AD88D31E
9656BFC60CD543C96380CC5FD12685D6FFA0A37F3407A02B06A2A333985C5B0B
AA2487A88B529F132058E88858E7307C3048B1CF36C21F68CD19BA8FC4879F0B
69C05A59E308C8FA4E67D56C072047B66BC6448A4CB761AFEFC0DF2AA7561CC6
9817A611C490CA4A7628C2257AA3102ECA8773758D8D9C2872A401DB454BCF22
7E0875252E8CED1A0852A271019D39DB5FBA39FB59CB0A9717CCEF3CD8AD326F
107E0458A8B7506B037B4D981B6C1C6DA423C383330706294BCD0A2060E1F47F
0B760AFCA2BEEB50839738CBC254B54E6E3A103D8B27BF5F0225FFEE54C0B739
BF010C6144924D03B0A7FEC9C75DF8F39FB84B824231A826CFBC8BCCF95A8353
EAE1DE8EF99678F27D86C1458CD28FBB7FFD50AC3F036BF5782EBB3EAD64425E
2101A2AAD9B6DCAD1956CF35B8755151715519336A7D4E95C2B17F44BA58DF6A
8B3FCDB6613D3A0124F41EBFE396555DA9410069FB3F1F51421F2478E892EF2E
50E6E7E3968593B908CC73E80439C9A0914FF8C156F23F50C9AEEB43F8072DBA
F53B3071B2A81EE764E92B5DBE073351EEF3DB25A35B7184671538FA1F7518FD
84ADF9426DD6B63D259A918CEA4AD8DA1B897DD9DF5377A28BED8B83892C68B6
248E63B4283E7B689AC4AD68F2F2F16D656472600C2641D8CAB22E00B1CC120A
64C8290BDBE55DCECBE0F46E75388867694AF2323D31657AA052C00DB46C3FA2
B996A140CBD9B836ABF466689F0A4FA065C0B2CD0DC3BABE3DACE2F7F3E24776
985E7B9D0110D1CE823314F6747B5DAFA83F169F62685AA392DA3CA61BAB9C80
1481CDF494C2B0FF8F88C0B591C78B5A0F8AA439F193E4F28963057EA1FD7E43
DFB4F0D262C4CA3DA712810542937FC7AEF744A9542DA6218503AD63494FA418
C33FD16A623156C97F8C129921F4F7732CFDC975D978800823824AF57E4596C1
52103F177732C9A8C04AC209B18456C5C8E8A59792B406531B0A607197A0BEE2
72C275B4F308AB8C838848058B25D86E792348D031D5556EAFE397ACC1B898DC
7C13CD35068ABD7F2C41325146F69160486C49213491638FA5036128F4BAE7BC
515F3CE5DFF259C641D160F82C924D3BAE8E7826B0C1C0801A35C2482E8EBA60
639A27F750E0C85969BE5AC5245A0270CD53E72372D31908EE11269EFE7AEFC9
3DE97B6341AB72CCD3A36E3776E077B8F96B908E8A014004F01AD490512F330D
CD272B15F19F8A04657A7C2A1809FB3D9D75B7A77C4347E35DAA90088BEB438C
BC036A498E3AFEB8276F2BB1E2FAA2EA239719CACC875032E159EA0865B753AF
6BD100261A6CDA280902D3F37BCD3E5EE9328797F9599395BF80FBAC67493F72
632469D8568F819DF9554C1930B19A2FA8FCDB819747325893AA7388CF2CB91C
417F414C09344DC0202727D9E1AA2D9A149F3C2C70FA4294B6FA99A6D30EDE8A
F8C17EF6895FAD881EA9216FBBB19D1B5F87B1884CDFD0BAD703C47620938B97
4207139789D28F580DD78AD06DC1E54CDD8A7B0BC8F4EA31965B8A365FCDC7B1
8A5B5B90D59EC08F8B7132FE9C9556F61A1CF019F96EBF95FB32ED91C40B3E06
8F081C6D2F67A96FB6E8C85F01A400260B6593274EC65AEC28F3B0C0A4CCD5E9
75FBD160DB55E52CF98AE443CAB8E995AB1DA216E4E5431DEBB9E3944E3D84F3
F528CDF6EC926CC04FB11C6A542916EACB67AC9A4CA4925F447DC5FCE4BA1608
9F47283B982205679C1C21134DFE6C89DC470EFFD7D7BAE25F69A02DBC99B3C2
484B071CA1862053693DC693E6A3105A8A41BE553D012754A290227B71782EC9
664CC92595CF6457CF0B180A95279F4D48E0D5C255D05460358BF68A4411BAB2
644771EC23C8D7EBA4461B4F12DCEC08E1CA7265AB91AA9A09552C199D0D97DD
48615BB5FF6E7E78A099D21B332EEDD6567DB2F14A00DF57CFBB012A4BB51316
F5C6B71F2C0A2B48518A10B1CCA391BB0E1E5939463E7D4552773B8D7A24AB2C
70387108D77CD09632C6DEDBA62DE9A66C31B9DCF0970A139DF235EEF68F5A3D
194C19C87AC27E3694641AB1E03446BD8D4DDB4941A733B53BB35CE37832290D
8E3ED64E59297E979A7D84ED67A459476943E00696C1F7C8E411DCF6BC72F24B
4F7CDFE9D0D569E514B7CC4DEE702DA0DF2727D9E1AA2D9A1985094F37CB28AA
098BC4BA22F029985ECE0CB2B0259377951E0857719AC4CFD53E39D2A58E0906
5562D1DF151237137B5A5F85C46312FA3F814B25F1F9154AF2F723074606854A
23A623DA0A8AE12A177C7B27F9D0D5C8F24F11BA62B2822936F140D86E1485E8
D169F4000924E3D8128ACAF3911F454A963B665F73F8A8842787A468FA39B096
04328071E29CBE07BFB4AA814CA0DD22B13D2037257D546D86FA80A08584A38E
5740CDB6EDD543214B6D978C379E33FFEBB1B8443F29CFD0DF347C7757429B3E
D5E276755CC0E50BEC9C1246FECFB2B19EA03D4885CE951F35CD2CD31BEE8EE3
5EC97CB96B0B98728CD357461D762FCBA050ED0F6CE27B1CB5D35A8A7219D37F
37A3569C59D057CE057BA5BD7CFB60A8D474B57D63DE3732612AE0AB34A3C319
5510AEC8A568FBBAAA0E701BEA411B160EA12CE91C54AA61D40A0E1FE3A496FF
EDF9E576E6B136A46E5DFCC7FB221FE22791FAC3314DAA7E2F61BEEE558A5895
1B6F4B4A868E118F8AE0E11915A8F7D1C07BFD3B385B5241D47C520180CB43EB
6E820C3B1B8960CA31C5E10BBE2AAAF302BC67231776925E69DF886F18E7DA65
71065FF0FAFD11396937DD289E60651AE834BC513597B4AAEB7EA25CA376EC61
4BEA4AB1FB11CEF3625AE8F2C5ACD84E0135EED3A186E7818C9F0C56C9BEEB62
A76900B8B15AE608F440989453B0DD077BE121B350978B95164361E5F9523AB3
EAABDAABB083F5C2E11916CA3BDD166F83D3C0AD445193B9D800BDAE1DFF61D3
52F9D4E4D0339BA19DB8B1E1312979EC47AE8198D8529212CD41E6E6F542BD26
CC63A0E0DFFC722D561C0C78A2E601EF88B9D63C0291AF8BF87CDACCEDFD87D0
E15CDCAE835ED2F1D6AA9194083742681378D38F50AC6B514AE2153E761A44D0
3B431A32058344CD094018F9B4B87A3C7A99B04AD778AAE62846C0FF19688AAA
C4A08C7836901C202A176E5C10CA412981CDEC693F6829E3381EDCA87B9DD51F
01AC18E8AAAB8978E2571A92C5CD6D1F52ACB5490374DD9004BB24A5B0A8AEA8
DEFA2A714BFCF0DEAFE7F9511E9E965D487A5315005A0444C311493B1132973E
4CF31305A8A3D7E88176134C53EFBE70D7B1F73E41AE286C3ADDAC0877BAD9DD
2FAA088867E9C17E1DD3BF39EBA8AE1455A1FF4C34ADB130C7E8427078836335
CB2809DAF91025514989D5C13E8FFADCFAD18E698874BA19F3AFC989FDACF35D
D8739E52EC71DC31CB8BEE484FC4AA913C5E305E8DB97FB5A04FD11C86825DFF
7E38DD0A435B694C2B6BD94955983BF3575530FC7806EFF807B594515E77BCFA
BEDB71151A5223DAA130D0F3EDD3C555F7DAE336598E41F762A6C0991A5CDC8C
33DBFCA301446DB0DE56D40B76DC8DF7A1BD7404C7FC4C657600781926DAD7ED
DAD3FF071AD1F0C533FE2962B6D72EBC0DDDFE610D620E040810A1ABAFA9659B
97166F2C9E9DB3356E68E695C6F0C85D4C8550EE32F7F6955E3B6D06A1102534
A6F09C7FEA6FD63EE445A81E1217296BA621CC1F7945FCC2C70F93A234B2DF61
C2740A8EAE4450B7603618C387857F22015FBA25DDECF28AD24B346CA383E6C4
B308062A0A611190E892DB366AEDB0E3153FA8282918191ECF16684BF184BEBC
C30B850EDB381163192BB5742F4E22EA4456AFB049EC9F206314F75C63031A49
001E79E93ACB2D392D67E486248EF60DFE4A2147F15E9630ABB764E8C6097B53
B0455554FD30B3CABB3DF2EEB5C5AF1855BF683C665E6F7651C783FC515522C4
49DCB20625981C4F9E74CD776412E849D6E542390ECCC3240D4C9EE434104597
8D34A9AE9A137EDE32F7306FD53780BBA8202D430AC12DA54CA41870F89F81FA
2307B2F042B0BAE3817897D5EAE110864E1D4133C6B3F5AD23227CB667D80457
08393453A4B134CC06D3BB633ECC7E500802E9B158A400A02FB82E2405676017
4503AB0D27A3D2DB4B4A262B74D2136DC7A277FDB0D72E6375527A9ED07B005F
D42A3B241B57DE6BE19ECA65A92D538D3AD9C10DF31A371D49C8AE59C0E67764
66C2D0C37F234C195A50ADCBBD40C5F248D1A8728114AB77194F0EA9B4408423
DCFA63F8C18E68E6BCBE16E000486D0C954BEEC5177B5BB232FABD659F532E4C
F8E2E1A61CD3880558ACD9168E082F5211F627820F45EA1AD07B6AEBDE328BB5
C8627E65C3F750D62AA041C1F7242082F65438E97C7B7F8F669A1995616F5206
077A4096B51C6B0F7C8913C7A3CECAE07AB541E85B3F3CDFB9F93B9630B8D4DD
9D6C616C1058CE31D705E71DBC3884A143D6A69E0C91C2B05F36BDBE3C35BF41
C9666C27C158296377C2D7C2B27200E233FA4EA43D258292F85CF55B44333CB8
F58B2A52D533DDDC891E9D28DAC51010844CB1A1776DFA4D65A0A885DA4A04DB
3A7996A8A54686BC0FB71731D949809419398A1F69FF4B4AA9FC1283C097007D
2C3BF076B385414429C43AD6E3025FC22022631D967DD0B8B58E8E24D022400B
673DC693E6A3105A8A41BE553D012754A1E0CB8588CDC4486629F1546E473988
91C395CCB0A008822C1589E39C3400B20F87FB97FAE3616AD9FD1E2DC0BFA864
07A133C3F793E079CFDDB8D39C51780903DF9B8196975E65147DFEDC4222CA13
87AC2CACF436A6AB6EF66A325D2580E1741962C9DE36EED6F77A3E0156A5DD95
C2C1DE2684115E9362AF98E852CBB461976F46EF112861D3ADDC70646743A436
E48F97BF351E69279150E470C33DD14726C189DEF3F084D1C0E481DBAD0130D9
1B3CC919DAE3147E4C100FC9734718D9CE49F33AFA3CA306FEC9AFB59DAC39A9
BF6443145BE70D29CB5478EB9743F5382CC451FC0FED90B4FD11A69CAEAD0A6F
4062EE184AD04DE7A33D11323133199750D66C6A6B9621F5E3C55757BAC2F85E
61F80325981C4F9E74CD776412E849D6E543EB6C72F9933B9D4EC316FDFD18B0
21DBB08DF1D25C105ED983DBB22B6FFA59AF34852977D993F2EF232795AEF0D6
A65B67F36B8AF5B34211A60D0DCB1A3E610136D6E15520DEB28A38936BAF3536
7849ED049CDF2CD54F63CD0A98548B142A65608248E964FE1E7DE1A3D16D332E
5A70F6A0B678076B475DEF3798681C7BCA4427F286079D9FEB4E0DD9191E418D
0368998E586DBD8B79045F6F0EC8D64EAA991441C6CB7D9ECDCAEB880855A961
ACB4E0891DDCA82E589B79E97E17F0AE7DBB42219D5F588ACDA125975270F8E2
E1F7DACF7A98B23C5CE6879DB85A37CB0DAF00AE370BC2AFDF1C14C93CC3D1C6
65208B87B99789377B2FCB2343AD613C0D50227890AA04689D319AE8C4AF100F
18764D73C4E7F061598FD69BF67347D16B9C431FD6ADA30F2718324EFDBE82D2
DE0F8088EA426E260020E4FC0A85BA18562CDB8260C9CF6640C30D069E0320B6
C4E8A0BD65C425E96C9EB7F9DEC5AE5B6FD125F6E86381428761B01E1B20C30E
7C216E5571D4EF13C5B431C34AE9DC268AC5272C6B2E0B3D1A37B51D2AA1EC9C
6062832309BF16B8D17EE5A8A9213E5B68F4D83FBBAFEEDB9891A5877602969D
7174D41606DD9B1E97754346C6E6408C1F2374FEDCA87687CC113B930866380E
5F851542043568C61E21FECFAF8B876B18A114CE3FE3D0767F5F8D8C67E5DDFB
1EC384BFD6ED2D8AB31DB34BA5E4BE1A191C3BEAEB09C564CB630DCCE324DBD5
3710E3C82A9C9097E1CB4B57EF7E58F7B02741DB929CC4D58B29EF3FA42BFDDE
098D68E2108840254EDDDF4833B5B48F8A92F37A57AF10E5439CE2C968B9E0A3
99DDE7FB9BC40F0E1F1738CFAF41795A2D0D7D90DB36ADCAB3B2A925DDAC7BAA
0CCFC12980C2ED9F5D643D34E72035E1BDA33B522DADD16AC489F3025C7ABE93
7312871A27BCB2A25BF2FA1131A7D775CDE5878D7C349F6A296F020AC1ECB1D9
95DCD57156C8D4E9842A21EB5D1F74FAEBDEA9A4C42E70F0A05D53FB3296C839
C5AA220EFB8829E12BA3BA84BC1900CFA6AC99B7F112965F67442C2269B94B7A
F4B309429CE77E14FDF25C31FB754865803A740751B1038FFAA04742058FE11A
A567EB796E992106725A9C2F67E9CBC18738B0A26A7908C75BD90C00263C3C9F
1B514A2ABF2A8232EA05174B94508297F560363DE623CFD483BD7A7B0C2679A9
C3DFF0D44F1B655B60D215EBB389CD803DA3064F40D4DFF092CDF2D1217F53A9
B0E9932908C3EF1732AD951419AD1627B4FD8122998475FDBA636388FF90546C
FB8EE78F2BE1A10876E90FE544E0CF55CF3032EB76701C814E122E37F61E7CA9
2473663C9B3C1DC388C75A1409C9935843DB6DC3B373E90FBC968082E1A00B42
452F9B081A87B77DD815A2C531B16FEDB23CA26549903507E1F7457613FA7074
763CD3FF4EAFA35BAF9F935651D12B44A99D22AD65B7BF32BD714A8F491E2FE0
D8C5FE95D333A2CF3B3EC5C4F4CE6A053136B3D4DD342F6BD1F58A4065B242F6
46AD3151CB70B704AEEAAE7788298FAA70DF55B9B5EEDE9A17A288A0D3524AC8
72EE357214BFB75A8CD86D005EA0771D90280E31E94815ACB9D9C47F800907EF
65D74FEA03DE75B6681AB690C1CE37D41380862958A44CA4AEDA47170461B090
1AE1FC50BA0470BFA639350D7745647FB63811D11C9E45AEB565F3D87684D7A2
3752762CA022ED0D7B978FDE27F039A3DA6DD531736D4FD4012A4EFF710C929D
197207ACF5190AB0E7770C65F6999FA3227269364CCA16643846C9BDEFFFE0A1
9F4FB9E46B2A9DE768B9B7855DAAEB9A473EC301C7C1EBB02C33459CED971AED
5C83E61A5ABF89EF17F259FF8A47477C48996BC28B9240C3DDA8287F545A364C
33E97C259D5DE3B4D0A48CC3094CCE4630E690328F06818BF0E80636D9349B8E
BCBFA6E4869A234277DEB45DD711488CED9707AF64E711723807BB0C9B27AD62
334640CF62417979395B0F38890044719DE27FB5328DD7CEFAB5F7338B1B05F2
E629B7611AB091EAB5F7C09C38D34FE661FD5B51D4FEF0DC770C081E9771C3DD
C3986FFE2E0965A6666D6F8514A8F42F8253421DEDEF6E001977B6C4C1EF33E9
7872E4EAE945185291972A8B9FC2FEB59CDED7502E91FD75EB7D9371EEC9CA7D
4E88AC6EC9100A418A19F44699C0123B5EFCD5BC53C58C8DE2A026BC9C084609
E63EE0E9DF5CCCD180DC4FF7D1AE61A9D47EE6E562C9B9CAE03A7B31EB730299
56BC7E8811F2EE19E84AD9437C6BF3AF5770DCC8A33C8645359114E9D71DE04C
E776B80D1D1D7F10BA9D83194164CE7CA3DD40E930BF7ED6D4E13297D788550D
EF8F75EAF532D90B411986A9B8EEB3F9B6FFC663E0A012AB1059A4B94AD15D9D
20867B4EBA59A0422AB6EC3FAA5702779FF2EC56AA55FD03B84B01C485C9DFD4
800606450550488E52F2FF97AE49DC99A22855EF728E5DF7B8C6E56D4EF1D1C9
E670014BCD3AFCB08A56F5880834F31179B83ED766137BF088FB6DA629262F12
0411CCB229C446797BCD75790114482E20028468C4FFC45840EB6D199D1BD512
A070197B92A583F9279733E1910A1F1B271B2A877D9DC09411034D9F41A68D53
6793AD8918E1A8FFCE3D416C3C6877C4AA8C1D35EC66BEAFBEA0E6F257E30CB1
576E945833ACFA38B4710841BE3D6258C4BF981D7BCAB7498E7BD58490D24670
1C04E3EF1FE936CFCCA8C3FE2474E6C9509BA0ED83ADD40D8BEB25ED13E78B4C
9D24681C7DA8CD2EEA99F35A95FE9B0A14B870DDF54C6B5DD4F26BE7E5D75EB7
26F41BE406A081632544650F926F91B7B84E2280E148DD2BB541D686147B390A
099993B56B842E3727C158E3B60B2B48F1EC9818FC86974B5F559DDF4577F778
41B402505768388EFA186DD987553B308BBC4B45150CC897792EB9E9CF0911E6
D632AB16BF1E306AAD0DE5D4785D51ED13DDEDE1D9529393C609FE00C4FF06CB
CCFC01943AD7A65BBA3AAAEDBB3C2936818F8AFE79D6477269474F8DDAA04D94
71EA325AC240BC23B08C7CE8D6A8368CF64E3374A62429731C315EF0A2C8BC94
3EC7A3BF6B0D4789E6F972D2039D7AEE962AC758F24EF6A9C3F0AB7508430352
F5BDE463A1AC0DA123F40BCC511B0EE9FCA4BA44571BF1BC71D6B7F08375014D
057E80ADB1B9DFD302705C5444197C235D6C432916DEF25915569A8F2A93D999
7F399B53F658DBBB7205AA2A41A3CE4A3F375E7C512FBCCF6DFF8AD9925D383F
D83D481291F42BC77324B83D71AE7EE303F69264FC8EB60334FBF4692817DE30
85B18DC2C879989306C751E53DB065BD8CEEDB908D61DC74211FACCAD24320C9
D33067DC210CE8292EDA457C2D48BCC68DFF3DBADD0648832847705E6FAE1C81
3D74FC94D8E13FE274EFE7CDFF783A495B7A6CA74E7871A23B2FB4A86DBF7936
8ACF41632CB7F12E6405D970EBE3EF86FB9CB4AE7D11DB364AD42DD988F4897B
71EAE920708EE64D64CC0B3C926798375319A45F49A8CDF6C2A56D09A1B5D369
64BFA89FD69DE4513ADB9FE0041E7E81C90EA94D0610CBAF3AED6C6F537FBF95
D2C4783E900B69C05A59E308C8FA4E67D56C072DCF2EED54725BAAF413C85467
7867DA3E90814AE4C23FF48DA62DDA1D80BB4741A6963BB314B775E6EFA0CBDF
19C5B1D5CCDA02FC81B29C5B48A3053D9654A0D5DABB7B1CF7A4FBC738565016
E126795B4815AA6C84D85C43D13E2CB2897E46B55F12E7DD4A24CC44E125B088
9A3531652705160BC3251BE71BE45DA12AF3125EDF7694F9E9DC11859245AA8E
7FE8479240A7FDA091783423DF1429A3816A3611A5046934974C07328182077B
891D00F99B5BFCD1A22686DAFB9FC45D2E0CED40A3C8073F14CCED8FF73FA3BB
3BCF6A010D9C2F9CB9F513EE814AF1559CECFC443320FA066094F341FBA21306
B964E9F4CF351DAF8F88418C32671862B1B8DFD2FFA3CCA84BC022EE2F88B276
E5A743D97C786E996CDAE034C0C21206BB80B13666B1104C2314787C93884718
FC3859F6A6F1B1DF76957A76DADA4ED62A6472020E6AB8D1A06A4DC6EF6C6D84
7C2F677A6BC06127EC7CA8CD79BEBCAAA4FA7A54B4EACB7FB7B1B073BAB1FDF5
0B08E08E3030C5722079F0F4BD32E5729F38823FCD7FF41BA0AE1EA03280BFAC
2DE4FD8272E092082162C74A365D45E70C5E51FE4EDC6CDFB7D0D11CF9C9B942
00525EB1B725E616CBB4B1148E03171462FFA195CD5D0917BB65CDC3CD41A1A1
4078F8FA688759AAB4B03CCCA077A61534F0F2105DC1CBCF567DE6CFF4BC84A4
6FC5DCA7B74E64CF75F70F6BA131AE369885F99C25B80FCB8C28AB4966F1917A
6B092648DBD1C3E83B7AF86F4EA09FFC0FFBA31D3A9964A7A8FD26D379426319
26202DEBF0BC70A92D3B64D1FDF723DCAEDC917730E10C106A9720B6B7F6BBDA
A57A168CEBED8473862BD76E964D3E11D27F892E3112E978282A2EBF5D26F236
C7905D29189D048A7C2955ABE3EB11A8503601BCD41EB79FC3F1817D7460801E
9AAA8811278C160BB3CD04493CBFC95E6BB0CD25794290CA8949DD41071E9CA9
7A49EC7DE7DE0A06451EEA5F19EDEC6FA671B0FDF9B94F0C040B5BAB6E56913A
1E690ED747B1608852A5657462A2B111D2ED33DFB65E79B96937A3CB22797B7D
71DAE6A6EF1D23B50C2B362A4A5F559DDF4577F77841B4025057683884831B93
1DFD9A48F990B60F7E4498F6D206793717952000562A4443AA485D6A574C329B
84BA7CA4E06E62DF937E37F9117E98A186F6E6D2E8D99706ACF610621ED249A7
699FC168D8F3F0D18AAD5DD896139920838773ED470C49370C4B7D4AF358F928
6B89F0EF9EB9329198F992D364F27F9AA276CAC679340582F7B243AE844B777E
28EEF2F02F76B2012D42A64E31D2F75EC6106C4A13E58250C9EEE4FB88FBF201
D9E55B2E3AE51C3E7C31DB3914FA2B1FCFA204456A3A5047F9AD7063D25DDFFB
546134190EE31C78849D80433AAAE3EBB09128E556D157BD9EB5EF964EE05454
A320CEE50E97470E9D7D74C7A2BBC20EFBB2867D2B00E75E83E17B88AB50F1B5
4B2DAF1BBDDFFFE449F7AD9BBD14E39724066EC1A3D5D629905383321E13819C
F6A3FBDB078967099F225B070317E6C5678B80969407DFA77E597DC8355A0104
05CD72DED5815FFEA5484217A6F398E8414211B976338B406A84EEB75A1A8F1A
297E9DA5DB6CB7316F8091FB9D94210F34C1056BF638C9EA2396FEB29E48A59F
0878E00FA4F26519FFBF8D54BCBEE211F7D2615602761EF93AF0AFF7D86AF876
83FB03DC7276434B5F91C3AE3A0FDF1E58AB078CFC02DFA5BB313F3757B45B28
25073E5FC89F98A3B2D0773F13A875E4B52F8E72E2AD8DB6600190E9DC161762
2C954DF4A195980113ACAB1D2ABE56296AD2F449A97E3C61CC5AFDC82F982B9F
80F916E648D68BFC76756BAF902B8D63CBC701114F82164C3389F7319B1509B6
9E1CC39E73DEEAF47231CB01D1754FC84C0BBEF595AA5207B89101842A5F38A0
BE31DA6C89E780F6BD8099C8F1E7427632088DA85A7799752C2CDEC332285810
CF0CC457E2096E579752FEF3A6D47F5D6F289D0AC044AB6EB9326D5FC58CADC5
7BDEA55B8CBBBFA96EC8DBA971B1C33AA002BB69771FB9C362E00FA60BDE73DF
B8C5C63F39C040E4C728D45B67153BA19E77E6A58F6EB0BB53FC8829D329094B
9F67493A714FEDB81A05FD6DBFD96D75D6C3850D92D1ED7FC1DDBA2AD9E035A4
7F01853AEF990201CB1AFB0520A73B3E622CC4BB97B92D19E6A3EC3FE2B22593
F7EDADA3A7DD72A51B31E2720D5D8D96016F77E35C9DFC6B4B76D0F480A7C9E7
ECC8B3B01B9B88C659BB9C53EC232D476FA1085CDD0D66BC78DB5C68512586F9
05229E448684E14E5A17FF66BE5F8CA9FAA0C3B48BBC89550CD9DE28449C5898
2C0FA2742314A086019A4616E1CF675BB8E89C2967D350F75F28F0675312EB10
877E5EA28CCF3322F45574FBE8689B6362844991390DFB4C36C3CAA12B1CF5E8
381BD32114D3DA727300DADBA506F4B9E48E5653C6547AC035E885D4F7599B1C
004243E27DA0899B1EC7F8A710F47A1C83530D8F808073976F6C3CB4AD1351E0
ABC6418B89ABBF5F5F598150B8093D186E6BFEC001A99DBD53F82EE8EA663BC2
327DDB2DAD4B53EF5D8334D3451676CCD188EDB2968DCE7654F94F0F21BD0DED
14DA73DD33BFA1F05676F11FEF7293CD5937FB915F2621FCCE48AF904C2B7577
E912647E74A243864EA8B57729907F05C2BB8F451FE65A47D13E179DB4030043
B4AC92DCF088C4C28594EEEAE3CA6A025B0EC8953AD6C2F443F276F4D1390DE9
222572D0F819171FF7A740F76364A2DB1E2B045F0F5011D46D01E050A3994585
D6237427829751C8A05112A3BEA2BEDC27F48BC3B578923B32352962F28E16D7
E5CB5433F2BF517AC68E952438EB542DDFB987ED8264302922C8FB0E2DE58623
B2BF89D0F0944B13EE32EA6D8E259AB89A6FE186A949AF3F2578088AA4320815
B0EFE711C4947085E9BAF5E74EA6B309291292BFF6EB52472F3E299DD0A7F38E
89B02770BBF2106F6700F9D0C917686DDA6620138BEB2D0886D22B10C375592C
B3356EAB836DAC4803520D8CB7A1A2B2B8BCAEE867F9CB65F0335D5A86626840
1CCB260BF6FD12A7960E52450AF292CCEE4FCBC73A846D1C8E6E3F0ECFD30844
BA9A56C19BFF277DEC624F175AA19321544180AAC084EA30FE32E4FD82A9996E
04071442F00544E574CE08B25D363134F7212F22D0BF8728E0B3CFAC13492DFA
F8F53FF6CB233E29161110020767B5AABAE107F08C2A7F0236D0498B8D3264DF
633DA5C4C140E306763B3CF62F8D188F20809C621AB2140687F6F186034A31EC
DD6CF5B9DC3305BB96D6E7F5A88F2C3F14B42E6CE099FE0DA2ABC5EF1970F19A
62E87168ACEF671DED40985ABD6D0A50131FF37D834FAE9F4F1AFFCB91036ED9
EB1502D64929BFBC2304057B6789C3CA5FF9D0E0CD879B9C6BF5C3BB9CFB2DAA
866AC440D058A0C86C7D958C76965F0812C1F0CBBEEF983C0CFF9E7F139E92C1
86902F273371341CED9DECACAEDD962AD9A6CE80D1507A361BF7F774549D01C8
B9E2E6686C75473131F54E6002A3DB180B1E24F17CA92A9D9E1E921D3428960C
4DD107511038FFF70BBE951E4A202AB0393AAB22003D9EFBDAF03D385EF294FE
5566A70AA1BF9E5FD5CC9AE8E2432A7D58EF4FA64758835B001346EF208122DF
A758D75E56C3EEFAB1D948BFDD51DD5B4D997ADB4F51120184118BCE62A09EEE
34208E61EF75666F56015192B79E52DFD95CD54A2A75EB3DEA28A2E8285D001F
C2AB3E640EFDD3B35D8BD6C09F29CC8F104C3F8FE9C020BFC2685F20AE69B184
6F9745E608E64FC61ECC9959A404DCE7633819922ADCF3F6C0930357C13FB323
5F550545D2C5CA7E3A4EE26608FA2F48C9A643B33FC45A6FA8D641D195E58869
3C547BA82ADA06ACAC9DFE1DD7E082785A49E09115E4B3554157C37407DB4A1B
DCADA997D6E9DA435EC7D3C8E690789A2E6F8AC2417B713FA6D5C8038529CB89
7DDD5B686826B5ED9D52371C541C67748FCB30A352F141B907EF9EB4B2A8C020
E908B6A6D8ED8670C6C30D9C7142E651D6217E1FE4E74E5B98F82B27E9149DAB
DD8DFC9DBB510DE3C875DDD9D7DFB7A3AF751CC15ACF3E0F2312900036B3EECD
DC307A88FB00A1BDF0C7786819B9C3D7C3DDC5ACEEDFB123E19F5D4A94575CE1
3829654F905EDF37C4AE52F67A3160AA6C723231F1E74276D6661C8C6F43FE6C
AFEAC2FC0971D780D99C00F7BFD88AF285A68DE3910F0F68AE5AAB53E39DE6AF
7875954D8EB5CB99345C1B68409271EBC504A63B1E7E660B8504678696CDA81C
2EA065FA83405668F8F36C6A6A2E2B9B480CD24AC1EDF47C77A5862B34481FB2
BE7A539492EE440FF4161B56479F4B2C9F6A2FA7C43F18058A9F0E9DAF81164D
8A968B940908D65F137CC590B5674F3C6A82B28FE58CC805DEE17FD56015C1FF
D658DC96CB6C94149A3F1A0A04A78D055CBE9AD845F1E805528C27294769D9C8
0078643A737177E2784E937EB2FAEDD1663C74CC798759FACCF4D19716EBB5BC
546399F194F71A0163F989A4D77F1939012876725CA929E9427C185ABE396DAE
8CACCC26DE48CAA33E88C275884EF4B9C111779D0C01F608F4FD1AE5538A2F89
5742F4F2810E723C0D953E9900BAEE2FA914CB4C725AEDD4D4AD6737DEC1D3E4
B4C9307EF292B68DA17D0F8777B07288ECB71CC87E68CEC84A00033A28BA8013
7E48616690BB11E62A6889B6A5936B3052952C56DBC242A6489E26CB0E568FD1
5EC216B78669BA72256B0560CBCC8DA0596BCF456AD60EAA430953CC36FD8148
AA473B91FD2E68B4ECB5811CF2A6A6ECA065480F2C5612D010DD55AB6BEC5473
BC31BEDA429343A0786A9DEFF5846C7A57A5AB697BF22ABCBA5E76C692A1A4B9
CED0DCEC6592E2B72479B4E7C3B3896BB51A37437B857D6B65DC64461585BD4D
4F0C2058CB0A24ECCCF40FCB0D3A837B62399256F0E0FDF97CF83806DEC4D2A4
DE3AE2E126BC50BBE9FA74AA1592B2C3EB3BAC8603BDCEDCED8E64FB925D4E88
69D9BB0FA0B8060E038C0F3452D77B2DAA62C679385F4E9D69D0A219983F71E3
5248DE1C246E4C1AFD467B4557357A5191BE5CA1D9126FC7F677E280D70EB2B7
A4909E6A44ED287909440EC4067167F2E0CAFDEFE5BF3212220EEA4D01640D54
80606C74806495A0A13097A62D80B71C6C9D472AE283F5507F6D25745B79A6D4
78AA51A853EF73133F01DED81523F79349637E5BB9F1A93F1701EF688FF792CC
55C02D2CA7D3A64EAD2E627D4CDEA303B65AB50B2AF1F0D8F36C2AB8D496C690
CCF380085F19F63F56B8A5C5A2BB730499A87F0340D1A5B433479BCC14F25ADE
54E0817D872A6F4065B45F0FEBF610B5BE824FB69C0C09A047D681917454D7C4
A1944160240E5413D153F57BA02C839AB44CDF16878ED58DF141B5C8F475827A
252CB81C53C7CB5CA1AA42CCBFAAA67E2CB48A43206253AA41A1AB0E6CFB8D50
F3F41289F48AE6B27D776A6A6C0C89365FD7697FD45E3DB32AF085E729BAA328
2C78EE28FD1B2F52B1EBBC8F94FE6942AF06A3B25F02D3C22206D8AFFBD3AE0E
BBCED3530B1BB0722BBC4B5281FEA89AADFBAF707BAB5F1B0A2DBE0651AB09F7
E448AF2897DDCFD26F72EFA7B10779110E082589F2C168A987BAA117D9913A10
636FE7659090FB37AC278FE141F4DDA4784B4DC1AB49B9615B30A01122D44296
2898852CF1D24C8A2482D73FA6DCC882851566E4190E3DD8CE459454C7582A8C
0D99AEE854753B0C69945872732C0572661771822B8EDF26AD818632BAD5821F
1DFC99F478CEB2DCD67FB3C5821F4684CD70084D711CCCA6FB8546796B6E1ABE
8BE912F59E51F62A6EBCC9D94E0787D5F083F990F219B07790A876DE9B192B57
FD692652886BAF10E00CE94FB9AC2BDCC8C7B4EA8B81AC1E85EA86116590BC6D
09CF9E2FD073701F4F3C62A50FEECB91C83BAEC39919B5F966C07A510D45388E
67F0AE516B72E82AEFCCF08F995670FEFF8548F5DD9A7653F9D831609764D725
86F2EE505C0B4A3C2EFE1FE929814522F3D880C5EABB468958650D61D9E9F127
8E97E2E2D57EDDC2B5A69AB490C07D2C28B5F1863703E0FC40165C8E612E3343
F9C735B8755151715519336A7D4E95C2B66FA39D35E73400003638F46DC88F11
FD5B6F0B204E127C55862C5C7B089968DD4A6D57A02DA1F24AA584F00F03C061
4C2512D99042814BA6245DDC964419A8B9C3288D90E82019A09216E29C8F9BB0
7FDEF4FB30036C435A0C827E4292F7595085B6C216AA8A713251D8615C40D0CE
9C3E73DCE36B79AD87D4775BAEF8FAB5A2FC9A2F0BF224D8A8AAF53754EBBE30
C4AF0DA11CA3485E5DAE41A740FDFC9EA90D7D4D3CA2AA08C74D7CA3E72720E3
299C87F540F99918A77B975029DACB67B2119C3DC4318213DC8D2561870EB459
B9E084FEC7618D839A457840582A7D27B9461EECEDAB918A32E196ABA66AE843
F4681541845C6386AA4479D6C09654AEC60D8C11512DDBD9E9B2A23B15A291C5
B5C6B0D7AC92104E00058B53F3A96B1E410B249A4A0D3EDBD96FAFAFC9272E6F
4D726461DAF4249F64D535A5803878C5B52D5510AD667B846AB759E33D877653
14A24CEFAF0CE02660D0E744F8985C587E57E0635C4706BF3C40C9458703643A
85A6E2913C3818AF9E339C111CF2AB2D65DE9DBE2C3458515A94E868CA86FCDD
4CFF76F351F22438CDFB922A265634612BCF42A2DC76A19DC6B5395BE02AC0D8
6DFDC5C065147A09D12FDC8073AFEDD995B3A4EFE976D3081B50EB9F24E32084
25BF417644338DE845720DB5372C07A3D1D57AE085B1963BD239EA51304F84A4
85C17F433282E2614FC5F0A89CAB266F1E38D3535C8CBBF24137DAAD492F332C
9B9BEEDB50CD44D71DC866F6928BC55F8021BFA41076E67BBA8BC4E618EE777E
4928B64177C162D2C1200D6A7E39C46E5C91C80C156F512CFF0B7E908894B7F0
ACA03038E7DF373A218488D32CD2DBE94EF69515EBA1BED19E7BA7720832BC08
E75A070AA665617264361D8889B1B216CC84DB7EDDA89B14DA65E7D4F4470D18
D3EAD84DF870D10BF43F17C950A47C3CC825BEE3E3EE501C3CD88BB5FD2C2CE4
893587D8190C06948715290A469C8C5F8DE92C502E8F25FDC52EAF6840E98BEC
4ED28C430A3FC5E80D8D0C3CC7BAC679F012809B56B435604E1551F2CF7B57C4
5849E224023A157C312D18C00C9CEACB288153205A9C21D0AEBD27BED2D47099
D1574F83B36D4D0C696E6E8652554E858DF0B817D7877158239F0A6E99F0EE56
4839C7924D9C2CE317BAE741E6A06E326413496CC3A8CC44C4F3C9A7BB2ADF2A
DCD63F8C0621FA34179E033089CA671FC7BCD866E2CBAB2F4740688E6B26D457
303CF2BC2781CE033DE2F6AD1B1ACCC6A25562CB7A27174CAE2980013F3B7ACB
7D39EDCB8D631451896A535E063D50853F077EC78E70B71ACFF1C93CF27E2C1A
CC2EB4DD592B5104C051D73C07A91B3D98D51A6F7EA0E9F4361CF2BE6CC5A55D
2FC84F878B1C025C8C57D1D079834ED23264B4440A6E339FA87558702C13CC1D
355E95E5C375D5F72370DD0FAF08254F217068F1AE8A46A3E781ACDA8BC0C9D0
E96C9B7ABA40634BDB4EEE045E90B83FC2194261B4EBA7409E688F23061B55E8
39D713AD33E44354A71CF1DBC8E4C88651B735212782B3C97A71C938C588639D
83E7B2CDF3625B548FDC27067E2E8DA734630ED16788556EF03BA51C2E84F142
DBDACB954483D5D0C7FCDDA0AD7E29817721015EB31B794DBEF9773C5CA6062D
C8E585785C0CEA2BA7D3FC82CDCC2E721C6099248E93A3513C7265C1A2263203
2606239C24D90A394B078FD8E66ECA0482B10C11A958C71FE6FE37FCDCFD64F0
1B5CB634B372AA35790BAF1FBBF654F35F1493A3B930E7F20AD6423E4BB67FBD
BBCEAAAB09D882AA418C18A3CF34E4EDB356160A16525B5E1491FF0BA9C12AB2
76C179789EEB658A02E7C11DC2788F68B460794FC2B1121042099B71159AA97E
6F7947B640D72401E99A8B5F32474B4B7137D26CAB505C364C4E591AE23E79A1
75D6E9A0CBE9B9E77F3056A23E817F7305EABD1FD70E6BC3F1D94DF0A1E1552A
73210678E69649ACDA365F4BD7D13F2B44A0A9BF97F8F8593B78E8411B28B33B
985C59813CB4BC6E6576ADFA3085938EE433DBB3D439A5494C90EF35D1E08ACE
8960BEA8EA387CD4D86EE483896C9EA04BF22C257F550FA9AD8EC5715FD4EBFD
C22A9310B9996B040935C40A151A91E0DC04222AE551C32D8D57ABB1A34C5874
D2E94A247F121F8415517950B7735974DF600E65F7030E4F43830729650A44FB
ADFE1DF40789C06A7C1157333D6FF00E21D9B67E46B444E049AA41439DE72722
AB86A3682D5F0AAF9F4342140FF55059A542777B3E7E7025F078BBD75C76142B
71582C8AA9C1E99B748A897F1BA1D4B7EC5A4AF3FD58103A460E36521186BC00
7C080351C1879B939A93C7F81853A656FD68E253E50A159F1BA215C3FC835AEB
305C5E48E8E3331A6DC149A1952DC1B9659A1FC2B02094463D46BDD03C06B94C
F71DFA6B3576DD639FBAD584304D2AC8603C84B64F6092FAD18D7AF5D2847FDC
C49F75BB5B8107030EF78ABE2982B7833D6EA8FD6322C7B83179F384DC200E6F
72E21D24ACC74B852B669D86AA641792B863E6B082D7C4626772B44FBFE096FA
55F2C6A9A9944252DD89AA4A0E1B051BA001C38FCE7DCA6BAB778E676D86B32F
DAE524434BF68257739A2FFB9A3BCAA50D28568A55BEB03FFDD954F0AD400186
8ACE76E581193A33642E7B0F9EDA8A5F8BF5833313D126442A2F997C895A91EA
37DE78841653DBB4A16C81C316D3D900FC7CE8D3EF2084025409A4E424F9FE5E
AEA52C155E95A24156D47498E50F013B8CD1C1B41B164B7904BE10299FEB7E09
6A67CD5B2919DEE922372330F264C0BDC38F1B1CEFFC1F1E51CCBC95BB8AE31B
F7089F383E72232C65E672FAD9EFBB5374846EAF8AAF71B0D34F16BE325C308A
7DF0CB18C862EE426AFFB2E82D1A5D3147882CB8E0A84BC5FD843924A41F02A0
F531F6A88D432DC863815E16584E7BDD116EABFDDC8782AA199316337AE8C6DF
5FC43FF2E5A04F4A53DB921C0514BAE3AABB10A3056534FB4CD41D83C5AF9ECB
E1858F8E84D1B9C7DF1127C2359D0489F210FB0C4C74BDF159E6CF5A01BFA0F6
3A4BB20DF6BC9B2BB1AF24E9D6A079B3BBE0D336683247CED02288A07ADA8C50
35E6049F0F66F84B9AC20B053DEA0D5B692999A9FF581276AC38EB7B1E154E4D
4E2AF0F4A5F07430349F9BB2907FD90E268B70C9D4D01ABC8EB65D728EC8DBFA
872B545689F06EA6C853684247F33AD1FA8C0515A24EF8A77FDDB976E1D22E0E
4816CED360ACE5A15A563A8044EC01188C2FC4DAC7023AE3036ADEE663696174
EC04F86B9F4FFEC980BA94D775C439D3ACCC26CB8FC18DB5AFD6C2ECA2DB23E3
878BF3458608B494ECABF8C8B4A47EBD7F5BA25BDA868B4B091025EF8E1D2B56
2E453924E85C930CADFA157F8A733B699494DEE8EB00F92C0F9A2BFA0F68AD51
51CE6786572A751847C98AB7A86D23071CDB36572FD641CD3FD1AC6788A7782B
D16EDAB54CDEFAB973F4BFEF47174C0CBD27C9B5A158BF1DFAFBF751BE211701
2327B52502A689D29F0C3EA1D5B2875373EF2496F6A3A814D33798FB5178A826
B2B7973D462BF7FFA014A9F65406FB9DEC833E5F3D2064EAB78066C30DF4F0A9
A760CE355AC6E890972116731F3535744FD9564FC6942E836AEFA4DCC442076E
4F1C89D888C5BDFE7C5C93017C9F17B12D231250EA9341FB91035D85F5FC5500
B446784BA940A1ED668EA3151CC605F2E334E554207D93A52C677FE9EF409AF8
C1D252832EFC1D4DD47612E8756640727FB6D2B6A2FBE625762DA12A5A030C3F
30C353B9800A074A7C6EE125DBB5804FDBDB9D8586D5F2C3113A8C73AE0218E7
4938D7B900006DD12E7EFB61910A412564BAD0746187F4036A047B03CBE48349
4633E126D1CC93BCA00CB41FE9790506B6FFF8CE1E48E1B8353847C017CE765C
B2130ADD5A6757D7978567DFDDE0184CAB8012657CDBE9CE5D9ED28000821085
FDBC4F86F15974D1AE25F767A6CACEB08EAFFFEB7DB3423FFFFD6CFE63A12DF5
123EAEE5AF3BF30D9FD144E2DA2CB4D3314B2177D09622BA3C0CA204727DFD43
01E5855B156596D29776960F3078902CE74D95916113C37695CA63A14CDEC153
C7618EEEA0F4B48C3CBA29F2FE5CEB189CA32AABE7001F817955042E513ECBF6
689AB8E031926FBF327632370C6479FB01D99F9113973186773C5BB0B0CE45A5
48460FF58216163D717200C29EEB1767E12D4B6ACD3BCDB8B52FC78E8D3CB602
6A1D9C2F491C1C0FBCE24F197F55149A0E525B6390D7A6CF2937FEF75A709738
BF1EC764D28985F11FE27C3FBC76531A99E180B2A545E6DE45A0EAA437D554F9
2C7696B0DC486704C1C81775B2AAD02C90E4C2034C55810AA263E6F6D3F6DB65
9E5037A0A7A374F4C67A2DA5C853C4505BDE5CC2E8FC0D017A4445496536C232
77592E213D8848652EB20627BCE6D2329D36C45F1AF45E308A33DFA709A5B604
1AA393624D10C74E8F0F2A1D96C50280913D05278F6B0B7751CA734C668EB676
DEA6812EA7C5456E5D4269D3D4795B06E5336E3D4BAB4FFB0A7CC372EEDFB131
F836016520C2CE08D00E58F1E2245B5211B8D4C053B3FAB0F4B465881257F2BE
D75D8CA7651988B651665BA2AE2892FAEF47CAE24C126BEF5773A5D3C4EA5CDF
37B62415D633E23B86E7627622781641CF495FE182447CF3380A9C2E64A0781A
1FE4529D70F01F8EC165AEE3EB414E1D0148446E5FF167904A676D153BFB7446
A406FDCCCCC438FF1E03910FE1C6D0F860893A57B5D66AAF97042FDD9A083DC9
F3EE6DC0B0A6801058AAA574A6C45240CE9A161447B611C4A9D458C58BA9E982
7D6510D35963A7F7BA9D953158696001D943DD4F33CC5DDE56C9AEE1A42F4D06
F2112C73B72037EBD605DCB0E5C405D63E48310F0EB5025C970EA4F88FF135BB
E7A5636A2F600F1B4848BE95CE382C1B2D28A05D02E06886535059D53139DEE1
C3E49E237701B63CCED12F45ABE30266A61BDB80DAA350C21499A0BE3D89384D
8FA80C1A798DBF8A4403AED203C7C06288CC9C51545645DEB24F80053879F26D
697051D2939EF475CAAB1F542F92B3C5457D61F29A7C9766DCC0B435F633149D
190A6AA1C83B82D64441ED986B6DD96D05ABF1CA8986A50E3402E9C2235E57AB
670921E827B7631C9B425764BE198D8BA8277E334E31DCD48AD13BCF178C4172
E4E7C5B95D0E11718282EC75491758607ED86FA44F869CEC438D6474A1384DC6
C654E04D9E5797AF848122AD2FCDFEB78139275B0995835310C26A9FA73CE7F1
05856A8958731220266F5536DFEC1BD25EE8D32CBA4E6553CBF47712ED8D1410
79897881BA0D94F5FC11CD5B84A192D31D279C1DB660E7BCB5C5A2FDDD260597
0ED21885641696A52F86BFE1842DA2B1C3A68B644DAC466EE8186D7062E1C667
3A33FFFADCD860DDAECF241410698C739558B18D66A3C213146E6161D6DE5C37
E23ACC6423EC558DB4FF3B978790E3BCDCCFF08EB97E7BBD5DA549273738EF23
3B4650BE66AA8DDD32CFC02C78F164B7326765CD0330AE049702AB4906ED1003
86F88315A70D529091BA229E41B86B6499DE0623420309E41648E4126FB39DA9
47408FF79FF3DFD12CEECCA0CFCC880FF24FD29A6CE47BBBC1EC403F1D3182A2
1B47228860BFD2712D01913A69DA7CDAE04276DF961CC0FE176CE8FBCE010E5E
85C1380957B8B7C1C90943AB4812B75523455B9A769CDE719498502BC804F325
091DFD5B64CAE79E244B5B79D5183823D19629982BFB41AF894304D32D296E79
EC6E767DEFA5899B740C7AF08AC7460E9D34862A26C01E73AB39C6E4415274D4
33275C944F1FF126E37AF718434193D1D8A4EA1BE2D588474FA78CB06A44D87C
F464F219E5D5C2EC27E53558DD641723344EA042C85950FB500A06792DF4B56B
8CA6FF7A67FDB0E38A8B25760290AE3C40157A8A30308A4E0160CF0312D143F8
4A0981C4D9D2CF581D9AEFB5A2E462670AD2C664FEAC1DC0685B51A6F5566043
E2611CA4B34BF7AAA22A116037272CDD02194D4F1A495C0D1F063331AC8BDD1B
18CAA22DC3861C1E82EE6356FD758643E14A71A207046634EDBEECD171800F05
FFA18D486053697778A74964FE3C069DC685827B99E9448FE96FAD5C9E96A54A
9CE9E7D75D7BCD0E45ADFB8E928E89C60F710EBD6BA290FF492DC1E7047FECBC
786ED2569CAFDB13FA4A70646443D6C16B7A0F2217A25AD3B9B89A56025A70FA
15ABD46EB82538E7DC6FB7A866275BB6E9002F62FB15329B5EC475C4342AC52D
5C5A4FB4A1BF65D1AD278C300F2F0E4932B687770C7CF639EA79F8A668451F40
22F109D488B3D7DF79858FBD6F60E00BDB47F67410B01D02C6ABE52E84DE614D
A216089C9E19699EB1C107487D9FBCE53186FF31893379EBE889E2FBBDA38073
37DED0041CDC474C36C2F6F2C810ECBBA087D3EBB9076A77129BBAA2AA17D93A
0F1BD6DEA50880B7032E63B473F1615880396FE68F14B24FFA7AFBD3013C968D
3065592E488A7750BA928FDE40CA4D6963B1FCB816DAC31572D59856ADBD04DF
ADD854F2B0D1C6E15EA3D6B5D40AA2D5FAD59620E7E87D77D027A9F24279AF77
9A0EDFD26FBFB20D0DE701BCEEB6B7B66018B728AAAB44916E54C51026BB72A6
0F864B08F7DADDC1A63095FEC5E63DF205A2DA7A160FD0F37DBB623761BA798A
A094AFE05C9DE29EEA7018B4FA762B0F9609002DF7137621C7E58B271F946944
94242207E0FF3CABAA28ABA55290AD50C43521DD4C4B4AC7C60B82B91E9E19DE
B83BEBC9DC6B7956A14C928BD96A96FE113C45871718A96C454B95FB3C74495F
AD9E0CC1248611E6820868A908EF7CC5D50B871E0C174ADA3A4ABA41510C30C6
9ABC4155D2C7AB2DBC3A5BBFA764AD463BA9E9356723A8DD455421F671FDDD45
6073DE69831C1468AF0F2B5FE26EEEA7D00260E789CBD4F51C432BE51D5D0288
41C1B1A2E966EE8627B6D94EDCFB808A796B9B6C736C1A23045851B0B7FFA8F4
6A343C1000CB7196E9062D11B37F35C67FF34B5B3ACF1B98171F951B1274F9D7
8B93644E7039169355A44C583392CC80BE0DD3EDC1D8A18A903CF0E17B0133B5
A30AEEC1DDC3B1A3317FCE8D4C30415EBFFB59AAFBA4F4B0888E623EF48119A2
1871D3425A191599D213FAD106E3FA37A9EBD3C748B37E4263931752D0E50460
1A7983EE4160F3A7FE6882ACE491AD6A3BA308CE941A739AC6E08165E515CB4A
8C3C5598F6AC29C2362DB32A41B2C0F8E4F73CD7A2630B9C99C4B592DEE9F461
4D63F64F31DD3CA5FE6F11AEBEDDB5E7570934AB677BF7ABB03598A57F2F48D5
5007625B95D09929DD05EE4F552A58A538FFF75A942DB0C8D2C11212F8AA5D69
3A88C7F13B60B8759F5F278AB89FDE0DF68ABAA3E84E4649A5C45D2DBBCE3DC8
EF19ADA8F19BC450BBF6537362F4D8214EB44C1E84BC2EB97643723C52EA7340
2BAF83E5167800007FF5547233F46973BFF9A5453AED0084BC22C5A5A0207049
1CF590BC847A8481AB7972E1FD8553B2E08EC25FFB746807AE03BDAA5553F63A
0258661002C3D4AF38CEAAD6B778206EA27D747BB96E860038F940C6F65FAA35
61872463C2D23851147850AF521E72480FB4A74B7BFC071E2E36ED00D3254774
77114BD5A8C9F1D86B4A22532F1BFEFF1472981D3778C3A13D6674A5EDDC8F5C
A674B8348713293585B9C5BF7A69DEDE99563BEA00D2DF5A32909CC0A79282B7
B8A571FE50E42BC608261E5C88C81963018FE629F720EF8DDB891B7A5272417D
850D050B563641D51F2A88B5E47694A2F8ECBFBFC5E2D6442A7DCCBF63A43AED
34E546C57AE9A715C5D63240D91249958A8DCE9252718378C7B7D1E3F13B33A3
4B01FBCA614BC6393711A90C883730FB021B67CF655BC1D0EDD03F95E099403B
657CA7B28FF97DA994817D9CDDB1F127A2312B08F3BE7525ED9788C05D5F51E5
6DC5A1F5F5AFD58362B55FD751CD480F655F8F3DB9EE7A0688F83921D8672557
A6A2DF379155BA685442A88FDAC745F73E8561CEA00842D397B639495F5C9C14
B3A0B417C8B027FB4383997DE0A2CC5E0ADC338F2E5FDFCC3C71FAEF791CC580
C2694869EF4D800B92F5C9E2A90D6AD74127B8FC9507C7E5E0F70E5754CF7A42
FB97253A82EE89C4225AEFEE4CD5226741AC50EC1900C1D8C10CC51528CA48E0
E9F03FC7DE8C47982345113B6E12A2C6C5EAA25025B4A460840D416F39EBF33D
8424F3DBF33D222783D7AA9E459E2EFBB3B28C7C6DF291B95279E10E76BAC64E
70F3C6474B2C444102A83DC745B1D6A253A8182B5DFD3CF6715BE716D02FF377
3D9201C589D28D6CC8D7F0602CE2C33319E4DBECBAF086F671B5B80471B2456B
DAC26C83BEE092BEC819B29D3D4CBF64DE98082C8D2F2DA9E0F7A512860838E9
7AAF12B40E70974E8D28E29390638A8E037FBEC61990D0D7BF1731DE46A15FED
DB75D0D85A9FE06AA04F9D581BFB7132940CC3A13F10A862C5E5D1491351DA06
5E30FF8EEF58B03908D071D19606ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600 (exos_factorisation.dvi)
@start /Fa 154[25 31 100[{ T1Encoding ReEncodeFont }2
41.511 /SFRM0500 rf /Fb 22[27 31[41 79[32 2[32 34 24
4[30 34 50 18 2[18 1[30 1[27 1[27 34 30 10[45 9[38 24[30
30 5[18 44[{ T1Encoding ReEncodeFont }21 49.8132 /SFRM0600
rf /Fc 204[35 35 50[{}2 66.4176 /CMR8 rf /Fd 194[71 3[45
45 45 45 45 45 45 45 45 45 4[71 1[35 35 40[{}14 90.9091
/CMR10 rf /Fe 173[66 82[{}1 90.9091 /MSBM10 rf /Ff 205[61
49[71{}2 90.9091 /CMSY10 rf /Fg 134[45 52 120[{}2 90.9091
/CMMI10 rf /Fh 135[55 5[43 8[29 3[47 1[46 29[68 15[52
52 52 52 52 2[29 46[{ T1Encoding ReEncodeFont }12 90.9091
/SFBX1095 rf /Fi 22[40 112[48 1[48 50 35 36 35 48 50
45 50 75 25 2[25 50 45 28 40 50 40 50 45 13[50 67 3[68
7[59 61 10[25 2[45 4[45 45 45 1[25 1[25 2[35 1[25 39[{
 T1Encoding ReEncodeFont }36 90.9091 /SFRM1095 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -112 -451
a
SDict begin H.S end
 -112 -451 a -112 -451 a
SDict begin H.R end
 -112 -451 a -112 -451 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -112
-451 a 0 TeXcolorgray -104 -336 a Fi(Expressions)30 b(alg\351briques,)i
(factorisation)1886 b(No)m(v)m(em)m(bre)33 b(2017)p -104
-298 3969 4 v Black 0 TeXcolorgray -104 -132 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -104 -132
a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -104 -132 a -104
-132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -104 -132 a -104 -132
a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -104 -132 a -104 -132 a
SDict begin H.S end
 -104 -132 a -104 -132 a
SDict begin 13.6 H.A end
 -104
-132 a -104 -132 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -104 -132 a -104 -132 a
SDict begin H.S end
 -104 -132
a -104 -132 a
SDict begin 13.6 H.A end
 -104 -132 a -104 -132 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 -104 -132 a 0 TeXcolorgray
91 x Fh(Exercice)i(1.)p 0 TeXcolorgray 46 w Fi(Soit)30
b Fg(x)c Ff(2)e Fe(R)30 b Fi(et)h Fg(y)d Ff(2)d Fe(R)p
Fi(.)30 b(F)-8 b(actoriser)31 b(les)f(expressions)g(suiv)-5
b(an)m(tes)31 b(:)92 234 y(a\))f Fd(2)p Fg(x)21 b Ff(\000)f
Fd(5)p Fg(x)300 b Fi(b\))31 b Fd(5)p Fg(xy)23 b Ff(\000)d
Fd(2)p Fg(x)284 b Fi(c\))31 b Fd(2)p Fg(x)1764 201 y
Fc(2)1824 234 y Fd(+)20 b(3)p Fg(x)918 b Fi(d\))30 b
Fg(x)3097 201 y Fc(2)3157 234 y Ff(\000)20 b Fg(x)92
460 y Fi(e\))30 b Fd(12)p Fg(x)21 b Ff(\000)f Fd(3)p
Fg(y)267 b Fi(f)7 b(\))30 b Fg(xy)1008 427 y Fc(2)1067
460 y Ff(\000)20 b Fg(x)1210 427 y Fc(2)1249 460 y Fg(y)267
b Fi(g\))31 b Fd(2\()p Fg(x)21 b Fd(+)e(1\))i Ff(\000)f
Fd(\()p Fg(x)h Fd(+)f(1\)\()p Fg(x)h Fd(+)f(2\))265 b
Fi(h\))30 b Fg(xy)23 b Fd(+)d Fg(x)g Fd(+)g(3)p Fg(y)k
Fd(+)c(3)-104 628 y
SDict begin H.S end
 -104 628 a -104 628 a
SDict begin 13.6 H.A end
 -104 628 a
-104 628 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.2) cvn /DEST pdfmark end
 -104 628 a 0 TeXcolorgray 71 x Fh(Exercice)35
b(2.)p 0 TeXcolorgray 46 w Fi(Soit)30 b Fg(x)c Ff(2)e
Fe(R)p Fi(.)30 b(F)-8 b(actoriser)32 b(les)e(expressions)g(suiv)-5
b(an)m(tes)31 b(:)-62 974 y(a\))f Fg(x)100 941 y Fc(2)160
974 y Fd(+)20 b(6)p Fg(x)g Fd(+)g(9)264 b Fi(b\))31 b
Fg(x)936 941 y Fc(2)995 974 y Ff(\000)20 b Fd(2)p Fg(x)h
Fd(+)f(1)358 b Fi(c\))30 b Fd(3)p Fg(x)1900 941 y Fc(2)1960
974 y Ff(\000)20 b Fd(30)p Fg(x)h Fd(+)f(75)671 b Fi(d\))31
b Fg(x)3234 941 y Fc(2)3293 974 y Ff(\000)20 b Fd(9)-62
1200 y Fi(e\))30 b Fd(4)p Fg(x)140 1167 y Fc(2)200 1200
y Ff(\000)20 b Fd(25)387 b Fi(f)7 b(\))30 b Fd(\(2)p
Fg(x)21 b Fd(+)f(3\))1192 1167 y Fc(2)1252 1200 y Ff(\000)g
Fd(49)265 b Fi(g\))30 b Fd(2\()p Fg(x)21 b Fd(+)f(1\))h
Ff(\000)f Fd(\()p Fg(x)h Fd(+)e(1\)\()p Fg(x)j Fd(+)e(2\))264
b Fi(h\))31 b Fd(\(2)p Fg(x)21 b Ff(\000)f Fd(3\))3506
1167 y Fc(2)3566 1200 y Ff(\000)g Fd(\(3)p Fg(x)h Ff(\000)f
Fd(5\))3981 1167 y Fc(2)-104 1367 y
SDict begin H.S end
 -104 1367 a -104
1367 a
SDict begin 13.6 H.A end
 -104 1367 a -104 1367 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.3) cvn /DEST pdfmark end
 -104 1367 a 0 TeXcolorgray
71 x Fh(Exercice)35 b(3.)p 0 TeXcolorgray 46 w Fi(Soit)30
b Fg(x)c Ff(2)e Fe(R)30 b Fi(et)h Fg(y)d Ff(2)d Fe(R)p
Fi(.)30 b(F)-8 b(actoriser)31 b(les)f(expressions)g(suiv)-5
b(an)m(tes)31 b(:)-62 1714 y(a\))f Fd(\(2)p Fg(x)21 b
Fd(+)f(3\))372 1681 y Fc(2)432 1714 y Ff(\000)g Fd(4\(2)p
Fg(x)i Fd(+)e(3\))264 b Fi(b\))31 b Fd(12)p Fg(x)1415
1681 y Fc(2)1455 1714 y Fg(y)23 b Ff(\000)d Fd(3)p Fg(y)1707
1681 y Fc(3)2011 1714 y Fi(c\))30 b Fg(x)2168 1681 y
Fc(2)2228 1714 y Ff(\000)20 b Fd(10)p Fg(x)h Fd(+)f(21)264
b Fi(d\))31 b Fd(\()p Fg(xy)23 b Fd(+)d(1\))3369 1681
y Fc(2)3429 1714 y Ff(\000)g Fd(\()p Fg(x)h Fd(+)f Fg(y)s
Fd(\))3802 1681 y Fc(2)-104 1881 y
SDict begin H.S end
 -104 1881 a -104 1881
a
SDict begin 13.6 H.A end
 -104 1881 a -104 1881 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.4) cvn /DEST pdfmark end
 -104 1881 a 0 TeXcolorgray
71 x Fh(Exercice)35 b(4.)p 0 TeXcolorgray 46 w Fi(R\351soudre)30
b(les)g(\351quations)h(suiv)-5 b(an)m(tes,)31 b(d'inconn)m(ue)h
Fg(x)25 b Ff(2)g Fe(R)30 b Fi(:)28 2227 y(a\))g Fd(\()p
Fg(x)21 b Ff(\000)f Fd(1\))417 2194 y Fc(2)477 2227 y
Fd(+)g(\()p Fg(x)h Fd(+)f(3\))847 2194 y Fc(2)912 2227
y Fd(=)25 b(2\()p Fg(x)c Ff(\000)f Fd(2\)\()p Fg(x)h
Fd(+)f(1\))h(+)f(38)265 b Fi(b\))30 b Fd(5\()p Fg(x)2325
2194 y Fc(2)2386 2227 y Ff(\000)20 b Fd(2)p Fg(x)g Ff(\000)g
Fd(1\))h(+)f(2\(3)p Fg(x)i Ff(\000)d Fd(2\))27 b(=)e(5\()p
Fg(x)20 b Fd(+)g(1\))3692 2194 y Fc(2)28 2453 y Fi(c\))30
b Fd(\()p Fg(x)21 b Ff(\000)f Fd(1\)\()p Fg(x)h Fd(+)f(2\)\()p
Fg(x)h Ff(\000)f Fd(3\))26 b(=)f(0)941 b Fi(d\))30 b
Fd(5)p Fg(x)p Fd(\(3)p Fg(x)22 b Ff(\000)e Fd(7\))26
b(=)f(0)28 2679 y Fi(e\))30 b Fg(x)185 2646 y Fc(2)245
2679 y Ff(\000)20 b Fd(3)p Fg(x)26 b Fd(=)f(0)1478 b
Fi(f)7 b(\))2187 2618 y Fg(x)2239 2585 y Fc(2)p 2187
2658 92 4 v 2210 2741 a Fd(5)2309 2679 y(+)20 b Fg(x)25
b Fd(=)g(0)28 2905 y Fi(g\))30 b Fg(x)190 2872 y Fc(2)250
2905 y Ff(\000)20 b Fd(3)p Fg(x)26 b Fd(=)f(0)1473 b
Fi(h\))30 b Fg(x)p Fd(\()p Fg(x)21 b Fd(+)f(1\))26 b(=)f
Fg(x)20 b Fd(+)g(1)-104 3072 y
SDict begin H.S end
 -104 3072 a -104 3072
a
SDict begin 13.6 H.A end
 -104 3072 a -104 3072 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.5) cvn /DEST pdfmark end
 -104 3072 a 0 TeXcolorgray
71 x Fh(Exercice)35 b(5.)p 0 TeXcolorgray 46 w Fi(R\351soudre)30
b(les)g(\351quations)h(suiv)-5 b(an)m(tes,)31 b(d'inconn)m(ue)h
Fg(x)25 b Ff(2)g Fe(R)30 b Fi(:)251 3419 y(a\))g Fd(\(4)p
Fg(x)21 b Ff(\000)f Fd(1\)\()p Fg(x)i Ff(\000)d Fd(3\))26
b(=)f(\()p Fg(x)c Ff(\000)f Fd(3\)\(5)p Fg(x)i Fd(+)e(2\))264
b Fi(b\))31 b Fd(\()p Fg(x)20 b Fd(+)g(3\)\()p Fg(x)h
Ff(\000)f Fd(5\))h(+)f(\()p Fg(x)h Fd(+)f(3\)\(3)p Fg(x)h
Ff(\000)f Fd(4\))26 b(=)f(0)251 3644 y Fi(c\))30 b Fd(\()p
Fg(x)21 b Fd(+)f(5\)\(4)p Fg(x)h Ff(\000)f Fd(1\))h(+)f
Fg(x)1123 3611 y Fc(2)1183 3644 y Ff(\000)g Fd(25)26
b(=)f(0)423 b Fi(d\))31 b Fg(x)2122 3611 y Fc(2)2181
3644 y Ff(\000)20 b Fd(9)26 b(=)f(0)251 3870 y Fi(e\))30
b Fd(4)p Fg(x)453 3837 y Fc(2)513 3870 y Ff(\000)20 b
Fd(49)26 b(=)f(0)1093 b Fi(f)7 b(\))30 b Fd(\()p Fg(x)20
b Fd(+)g(5\))2332 3837 y Fc(2)2392 3870 y Ff(\000)g Fd(9)26
b(=)f(0)251 4096 y Fi(g\))30 b Fg(x)413 4063 y Fc(2)473
4096 y Ff(\000)20 b Fd(2)p Fg(x)g Ff(\000)g Fd(24)26
b(=)f(0)925 b Fi(h\))31 b Fd(5)p Fg(x)2167 4063 y Fc(3)2227
4096 y Ff(\000)20 b Fd(5)p Fg(x)25 b Fd(=)g(0)p 0 TeXcolorgray
-104 5887 a Fb(vg)2955 b(Lyc\351e)21 b(\311mile)f(Loub)r(et,)f(V)-5
b(alence,)20 b(2)3756 5871 y Fa(de)3834 5887 y Fb(3)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
