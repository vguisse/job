%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: controle_equations_de_droites_24_05_2017.dvi
%%CreationDate: Mon May 22 12:38:00 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFRM1095 SFRM0700 CMR10 CMMI10 CMSY10 SFBX1095 SFRM0600
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o controle_equations_de_droites_24_05_2017.ps
%+ controle_equations_de_droites_24_05_2017.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.05.22:1237
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: SFRM0600
%!FontType1-1.0: SFRM0600 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0600, tcrm0600, larm0600, lbrm0600, lcrm0600, rxrm0600.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0600 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-210 -320 1719 944}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF7C144CBECBB0B8AC425A
08F38901803917D730AA3A77964447A6FDD9D1D5D6CADAB899C866A153F41D19
22B1F8E853431D34A87708FD95EBAAE0636D632C6CE8C8A24746216DEA10FC2D
C907A32EA036B850F319450C5EEAE2F44F6816A6D06D366C75DD9E360D9B2A18
87A6A24EA1491639E588EE3DAF1357CEE96FDC53B9C5C4428602EC516A115B16
B137347E3ED03B4937869940192CDEF71C0F2AE65E9C3738407DB9F6064DB42D
E38A19BCC21F30DC69ACFC17FB5C81CD536C0E8FA6F05081FB5CD8F85031FA0D
119767F746B580E784CD0928454272AF2B8FB4F5D53F2F011685524517BB6B38
E8B42394EE37942132A010B6CE3CFE2E6CA24D320C12D62B1C9D401A74AFE7E1
D4B2B0968BCD3E63619574B096BD23B59496071FC1536DFE6937146ACDD7CE00
25FCE9918F9F3439D5F9BF4494CC501FBB4894E8C454BF46C615A2407776C621
762E39A14708EFB767E2EBB33C8ADD59B3A589F3220142F98A253A164ABC1AC4
C32C48557C507A9E3021229008ABA8BA85B43B193A537EFE14EE90DE56EDA1A1
CF40CE8C0C510EA30599B1381005621984F2BD4A8B15EC634B26CEFA8B03CF43
612FC97D3C94DBBFAD6F325B3E3C314F0B0AF5DD1BEF045D7E5A054D99EF3E21
91C1D5C91A760D90DE6D62BF425C79A481AB376FD2CA46F949C16FEA1B452840
4AA8B56B201E4E7DDEA75D821FE434B5676522496D357B621059C6E9007CB5D2
190161111309D2476139AFE57269C6361CB6F09E0F463AEBE2BA17C0DF2B676B
EF8AD942A3BD1FB35B44B11FCEFCE048E0A413CA2BBAEB9BC90A5D78E6B1EC67
E8D53B310731AACC60AD7BF22137C721B0B6AD0233FD1DD83AD47EAA9EC9E3E4
45BE2DB9EF5D34E7F747AEF16932B3F3C6D6D3C8C6A90BC4FA26BF967AD9B019
417A876EDE63682A24C06593AB2C0F1D1CE0A1C1B8976C7550F275C4190A3AF1
EC6DF13854712FDB81061A9F5C00FCD0A977AB4B7EDFE86FE9668BD550DBF3F7
DC47B85620B641E77FE5F73E9D14B1D8CB415F20F739EF1B49B6D65C7366A3EF
E4E0275CE8F0D3BF4A2151CD13C45EF003C1492E94840A2977DE53BE29CD7775
3162646B1D7AA69FE0830C05ACADE1E4039D242E7434E22EC93615FA8ECE2D4C
27342EF751F4FC23E314B5E22BF8000FD3DAF9A8B70334512ED37D33598B51D8
1420F45BB03781F64840D49C9FB69442DC88166575049E84F39641519C59CC09
CC78560917B2A7265C39784EC4B319959677CB943985B96CA9D8FA3A7F776916
70F5D42E29A509EFD1D8A9DE08F1FBEB0759F70A51E2136B6E937EAE13534405
28AA547B5EAF4EBEA0BC14C055FF8FA189A4BAACB0B978A58EDB6B8787C84C6A
212F067A28BF6C8D599A656CEB8AF1F0D2B736572A20B8CC7B4C8D58109179B1
5292027209A25CB68EBEE9E67D7AC8C5A90D47F7DA125579AC4CFF4CA716E425
C9109C1E32527227875588480241B347367B30AFDFD12CF23A050D6C1328C340
A6556729C317E60CD87639E1B4F3089932369CB542925FE084E208AE46D117F1
A0394D0BAD6A6D318033C85E12B77DB6B54C920160633B59C2D9285F7363165C
83F1DE2D6CB5FD306F441F1C09E1C5281C859EB777FDA513DFAC697F562AA3AA
092FAA20A211D4684B72AD8BB8A5D1B3144B7822C5431691AB86A1D989C6F6CA
DD3CF01D2D43AD2E836C43E520792075672344DCEE4F9F1687F5E18A1F7F2808
A4CD492A90B1AAE543C2D357586AD16D5DA61C12E13338F52F290C7D1A78D50E
363B81CF19262AF6A41B35C3CE298F8F6B866E05081E15818E964BA26343A1BB
05062BA3BBA2174F6F457B8CEE274AE7842BD8077F90731D9C031B08EF9229C0
4D4C6E222909211E8149E3D6E0956AA272BA4C49335A08E4F946E74BEAC062F8
FE26A02632ECDFD0BF97D135B0FD0EB25D48CE4F478E134BB12CC9AE3A5456E3
64D2117D60BA66CB7B4A5AE95FA40A28D7DEB27B069A47979A1CB7AED352BEF5
8C560E44F27B9FCC33D3F2076382F2E96F2F1C94F11476BD78B3F62DCE3FA965
B44AD9300CB1DBC3E3A03639C338E6A47CBA39AE6DA19468F81907C0F2E2A593
DB7AA7618487B1D3D924DD0CED0B372AF195EED1ADAA95369820F88AB02E7F52
2ACBA51836956E4FC7FA005F9847900918832730A558067D2FC40EB84445E85E
8D8315D0A0E3E26DB60F6F40D6B935E1CC0F1D31D3D04EB580E1EA68C289E7F1
94D9CA3F7B1DB6FF17B5BA27C4E2B5A23995C881B05A205779209177897802F8
08498A2A584787139457A97D7E6068500894304EEDA172A99BDFAD7204FC8E23
23C873222A626FBA2FB12BEE4E016B527EF236E5AF135276C81FCD2A8FA1639D
0D55F3644B802016095E6C99BA46C719578BC48E9065AA87E8BDD5575DA8BB21
01894B0C047DB7EF79B8ED91091CB575ECBB38CBDCF48A1E092152EF822F5380
F0E5CFF5154FD2BB8D1670F027599C8AA6FE85CD867387C82549B44DC9F1318E
794ED89C47409E478B53DBEFB94C0024CE2B31A24FF1964DD143473893F650F8
1E28D0CF231296F67B8634C080131D4DA2FD54B4CF7EB11374C471EFCF1206AA
29EAC385C9DEE25CBB81AFAF6027C908EEE802A295E4248C4A1BFB7A8CB00F44
6D25ECD21B236424453711EC6696146B9904A8B18B8920635C99049CF76B116F
0162BF431ACACED6CCF9124B91389A2FA3AC852DF8F0748C75C19B65D2F728DC
E0876AC20486F7D845BE697229F5F1DC7CFAA7895FE9B3144EC77E3DF61AB8F2
2FD1CFB4E40FF4068BE1111CBCE2EA64C3B05B1B3AC68A0B8A83D298C4D9F570
45BCEC024AFFEC50470EEA2501AA72D34045969BC0B18565C063BE0F3E9F9FB5
BB83FBD4E7B60DC1EC13D3A6E60A62E18CBEC95D4F9B797B26664F9A9BFC33F4
366C494E561534BD33798A933C315BCBD971C5D5627A380A78F81319D84C6274
B75247E7AE6939D00ECF677824D4823CFA87DE5DDA61E2B4C573977F19D9D9A0
B8D58006A2A7E81C50F1CF9F68DBAECE652A8E228796299F7BBC7ECEF86ED1E3
99242AFADB8A19C661F538857EEC8AA2D7010D493631FE0BBB09C8ACC305F5D4
DD4290C95FC176BC039EED99160E3E7290D32036155553AAB657D60E2C36D1BC
7ECBAAADFD0B21040E80F87A53D8F90EA0F63D004DB101D5CFF6CCDB24D778E5
7338E8A6DE3B431A32058344CD094018F9B4B8790F6F59291A879E9B8EA83B9D
69D43746B142E9AAD81311765583564A44AE56F46397C5E1009223C277E6B0E3
E71CBD4239EEA0D2DDECD7BB7D063C152982D388DB7A0B4ABACC60B3D708E521
1033D3425821DAAAB8FE4ABA27990D6B91B3822A520D6F9C1CB12188ABCC309F
EDD4FA497D23E9C78A275F71858BA4CBD359B870D40067F132C3D31CF06DE8CD
DFEAFB8A0CBC0119E6711BA65181B4EA0E9538A6DAF6921C5F3881436FF74C0D
1664229029635C383EBCE1CB7C2B074B5AA05C938E87FBD241FD064DBF03040D
46705A1F6ED7377C7126ACDCFC02B7C16E0A77DD6C9A899394FF19037D8A673A
A442E7311093FF3D0A3AC14F3A7E73E9B60B21C842F26EFC7F16D94F29668DD9
7D27867B2D2FCA8876DBCC1722A7C5127FD3D47DCBC817B3D5859FBE06922B23
2B0AC83BFAF220CD42CF45666E41F368E21319E382F750C4BA3EC3E8F6CDBA3D
110893CF1748613BECBF7549175718FE22328FC3356C5A1D6607986E151EE943
E301D9F0A0B58494405D4DA5606E89BAEDCD9E573A2B023352069DD1BEBD5199
146A70324E3CFF770C9A0815EAE958E6A17B3CBF9B54D5E17000CA4114259479
70F983C721DB246CC8CC072B11B3AFE65E5C942182AB71396E9417455C5DF4EB
DA48A165A439409570DDF9A03CCD80180CB25B803317EC7F3DE1F15EC45B64A1
F4E6C4956DF4F0118B300D1B6D20927C4E0ABC977DC8D49C6355B9CDA3F3A115
780B4AED8F5099AC2362EBC736403D067D95F379CF44F3F87740C01DCC3A870D
125837CA28B754F35C5874A9204432243E66A9837BBD9920A5FF22189B85782E
E6195EF6ED3B6830AAF55514AF1C63E8BE31F1F410B1B4BFC44C3E7405DA63B0
5F451A01A993B6641CE1F15CB85317CFD5AA48A8F8DD351882D808976A265030
337A8DC576F4A165DF6415A5893135ADB098022E7B84D9CE71BFFCE11A66AA20
BCE3049F990744F6BF1261BF5F17C6202574CBBF7165183946BF0855A675432D
0D3BA6137B672141302E0C9A9A82F0FA379DFE60338A73083C4108D9470B9A6A
2D88BEBCC30B850EDB381163192BB5742C3A1EE933CD7D3D2C7AC2D5BDDB2548
C6300FF4A5362BAAB8F50D5EAA8BFE9F953BF0CF63093E310562A68D662F0F8A
E1482310DCA6672C452F9D35CB11D347779A5523F607B504C7A0DF01F728F1A6
85854A512F7B0BB9F40C0A431D263F22D091D0F560ABF27CC28850C4CC8AC536
7B366EBC90C9E374558153AC833F4251F04D159DA667468781C34EBE11B77F7D
00AD989DF67305D3A25280EEB707DD2DF0792DC67F835A307680724ED3CA9815
2A36BF36D2F51784D216CF9950858BA54CA7CC4A17F54D043B5881BEAD0F3FA3
DDE2C62A9EAA7B5CAC4A2E427257D7C2AE685F7131B04C23ABCA88D3E224CC0D
4C47CDFD603270F3CE1806150C2BFFC46A5F71375D722DF6ADBEA3E9F50D35EC
6D1D463D49582982FDE4EBA45699E4BB7660CC8A938AEE2340AA12BB786CDD7F
AF7FDE25222EB7D1B85B203D71DC802866F884E753A2A0FEA464ED04E8C7CF76
43E89D5BE373C48E9327862E9C661AB681AEAA9A670586F9ADED6DE71B653E1B
5F49E9CCC94270E49529011A9EC366AD4A745A6BCBE22DA1E5D4695BD0ED514D
CEC1C0B3C7D589B1CA0D10DA32EA97C42CC132FE55FBECA07BE6F152F1DDAB70
0B6CC69B9A1B63AC5634E056C0F79EEE9D91071D0413F4FCAEE18AF239FA9A43
37A44F0D79447E9C5ED2573FD9DE75A1E4D7B0CF43B5B28255712F2E5C5D0F68
D1B18A4445F192668A0F4AB8C27EF1DED74EE602FA579323C5E59E09A4F10ABA
DCAB7204AE358E7DDFC645A619BC423F77E4C7DB510BDC32FCE3B34EB4DFC3D2
A1790D49EB6412C2618C640AA60E3E1C4057B07496F619A02E659CA508BFB769
7284F9D5F89E5798997FCB661211C72C553CFB252C7EFE330EEF63D68123F899
F1164FAB22A392B1E463EE135D9D9C902B17B51AAC0CB2528AECE9DED5CD7296
08CE8AAF3A48C72C78E9693F6829E3381EDCA87B9DD51F01AFAC344014375F62
BFD0CFBB4C097DE0CF3BF39C25138064E46C5E5A503C8F0D77EBB70150A2C54C
D77EE5F902FFDF896FB2B71F3F05B60DD151712ECD1C0A710040E77E88BCA0EE
694D1BC7F57292ABA161F72C87504E36306E6B4631CCE454AC5F434DFBD7B601
80DAE6860EBDF62FE4F7FE74ACA3475F26B881B3477407C51F4EF185AEFAAE39
BC6BB6BEFF9DECE02DF429857C99EDB3FADC61CDBE7134A84685C012D596CC56
7D03D641C190D9CF2039A003B0D1B9D4A5E9539858CCAF28AD7F03CA78B37667
40C47DFC68C7D18DF5EBBD067E65874AF23CDB0DD546C3D2F3FC1DA14062CF64
4CAEDBE0A0DB2CC5E8A65FBE05F8891932ACA1B50E852E5FD47142F762E107F6
91AF9E945ABFF26CDEA98112C2C8B5CFEBA48FA8766D132335B2A4940D4037B8
1258E54FA714BCEB9D1A3A2268162C687171D0935CE72073D73878ABF61030B5
A9733F6B21D48B4E59D982BF9E06969E6BC5E6D5DB6A310F723F5519F243C73C
44EC877FCA7389A25DC6E9007C357491BFBA0CAB5053A1A14064448BD3E8742F
6F04C3DBD06FA0669CF7775414D07B3F5927ACFA908B12495A477C1D326469AF
678848D0EA70E5E9B6E0D538FE9400C351D86CDB7C52B72879152C794199C3CD
0439A7BC2AA2A2C038FAF787628427381FD3DFAB68A367D1FC762962B0D5A0A7
6151A94704E28798B4BB88F6735E7BE7B26A2E25877E5EE22DF07A30F745BBD5
3201C75DFB142D13285E87CC401FB86062722874CE85E3AA78FC49D68F7F48CA
C29A9681715FA7A75C14B685E2004635A717A7911245A671875350CC81F20A83
DD496C36C24947A1EED27A40109D38DDA5BEF5075B4D37B7850C4B8FD2D3A67F
359E0963E59880303D59BE1D3FDB4BC86873D179D88A0A94D2B63DF18953A8C7
1289CEDA0A84C9DFC6A98895446D46E90D8C93231CCFF8B18526D4B876AD9E08
87E13D0D965AAD25730449352FCC07D4BC5A15613AE032CCE548FAB0C8D1C07B
A89A215C8FC1470D926D6E7D4C105DB43791E82077A55DF592632A3E6730387C
5E7CC9F09E0010533BC14E56C291413C501E0AB5C62A9DF4B29195EA4378CE94
2D14E1E9AC03B9A0085CB9CC1F693ABF03C400DE4379F746778AADA0979B620F
84259EED33AAB9D7B7BAE9CE7EDB09A1387E31A3179211295573B72AC403274C
694E5D0DA0864719499BF534828BD05FA84F2458380F0F83803B5353FBC52704
28C8F57AA1F8DA68D133F004338F3589A99DF60BCF37D594B9283EADA5947913
8F0A4EC6C6AE763CA422D6755320D01602B364C07010B5F178CB8C6F6AECF2B1
D346F644A8126EADC4813F842A5F5EAE1946E75E8AEC58A269D0B4B7D9F78D92
C884BC76BC592152756DB6D6B122B9875063C2DAD8F9A550781DF65AB43D7D05
C5E39FC4876E46195F82494D322DE3779FE9F8714B518561B17A9860DA936CC6
1223A77214FFCF55BA91FBED2B28C6D74015EE6CB698E393EE5B7F4D5357992F
6D8C8B9FDA94874E501104AD024DB575F3504749F70DB717EB72DD4F6B4CB9EB
614E23F7D32B7AAA7361EC25C282B6A0A49B5EDFA8FF2CD410CA5374D1C2D78F
E64DB80B78261A2AA913F4FC32095D22E0E2E8717F0CE7E9B0693C6CF02B469C
E9F2C4C82CE70C176517FE9668030CD7EA9F222E44FE2E6A8B1E5252A9D4BC7A
7CF1A9AE29408762EC9F22D923CA574511A78FD505E6CB052BFF9D02D00F4561
2764D8E27354230BD298EB33D9DD15F881DCD822178A446D8CEC5AC289BB9BEE
6488E3781B1FEC0FA77A4F9D4A077B51B5A149D85E5803C606BECCC8E16ECDAC
540523109C2D67621B6EF21D2DBDE76CEAF0B699C3032C28D3CC3A9DFB4194DD
4AB3AC91A12073495CA295BE6933B1441A825338B3E019174B8F1F6C9F49A088
1C778C74EF4E266DE64CD9FFE20059D241C6709E4871DCDE8EC3694BFBA8862A
330B515EB96D8CB78AD3E99033081FEE7F85E61AEB6C09620FC5F2BBCF76FAE1
ABFBCD46925290932DDE0D4AA0E3CC3C51F181D90992785B8D77F24BF59E3D1A
0EA3A059F6075A69EAD7D2EE94F53C3380BC1F17536E1902E82B66A4511E9E63
F2D7A853486251992EDA8A76508FBD4DC9F1318E794ED89C47409E478B59FA5C
3ED9C725B93755E8315784661CDD3CFC4D87F864F3D952C3C7D1A53A98C95127
837879FBC5344878436F05BE2C5BEF0839BF87DD18912FD7D3646552A788EE6E
DCEEA21BEBDB854D0657819F4A6D5799A8B95D1CAF5760DF13030605F7BED34B
F377544C4FE0D9E2CB94C90D217AF778A53161CB156A7F8DCCE5CB3C0197B92B
1E413DDEC857FD28ED582E646B346E4D93FE54694EEB77F329BC4A761605889F
AF87884BB606362C9871E1A4D4F3A0DD97C43EAC87B96A7173DAA892D93832BF
7DAA190CF4FCFB72DD0DCFC91E50358753C897AC2A47FB4AC5E9B50E73D9AE90
3E6613562221FA90085DDE5D7DA6EFF4CB716748BF93CCC7C6A83E5EA7CC8E1E
C71AD88E87889F47C668325DD037F853AC9428E88173DBEA327228CF763A6954
B432891B8F2DD3428DD96AB93E3A62FF73647DD1FC0623F8517213544E8CA05E
5E6111ED239F4E4499CED87A0501A4A39A2EFB470DFCA7C766EF8114F3027275
2554A64A69B0857BFC16F30531FFC2D3463B820335ED408C1F2374FEDCA87687
CC113B93086450749F59CC549FA14AC44E77FA872027C1041723FC113A457DB1
B4C0B5DDF3DD248B8BC462230A005D972B219739022860C06E72D4F82D7D8BED
7A557276FF2374E36EA9667E9C4D83910926C7B1AF5D9210483ED3DF45731C69
CC6EC9CD8DD59FD1C7F22A266FE7BCD92563CBCA6C2C6B50905C92286EC71D79
EB1292E6BD02BB5C388195E8035A55BA3C769132EE95EF6A8A8FE7596CF501FC
00C265873C923DA723401541055834F51807453C7253F0DA055DBF8A0A732BBA
A284751FBB466964587B2F57EB8D5467C1ED2932DDD7D974F59A929CEE826F64
08B56A3E970F0BA4F7A4C566C61F054D8C429F0A7AEC6F42E3C7976EDA674C57
434FCEE9AA048B59AD93EE9AAA8BE98438C6183E0B94ED8252991A78663B92C2
D4B4ED1204D2B50EB843420ADC081057601DAAD9BDC21AA65005CCD1220CBB38
6098BA3ED1AA95C72B7D9B52E1643116E662CAC5F8B14B952493BEDC9B67EA93
48596347A81D5448A78AE0722AE99AE00B384F2E8D9F9ACDC867171F0BF2934D
7D66CF8B3099B051B7D6BAF4F76C41856986C1341AB0F1FC68DCCF67E1AB4EE2
8F46D77A2E3C5970FF60F5A8EA6428A753A30883AD0E478802D0CC5BB2D00665
5BBA3AF2BF9C0EA3CCB2B7DC11D6579DA37AB425A5E3124AF58E8D7BD54BE090
8444365AF1CDBAD2238164B0F1D3366F83D997A4F7DC268533FF505FCF55D409
355C829CF9D4AC5B27073C16AA8B80A61DF255239C0BD691BC7D052022E889CB
DB888C84AC7DA666954D63F5634D4D446F83297FAA9A51C82D6FEEB1F8D584F4
345DFABAC4C2122EA43F24F738F371A77BB00E9A42DF896CEFEE3439663090AC
624D90ABE51EBC2D7D69260FA5632C0FFEF90A864DFC8050FA52A4328ECC575F
3DE18E174F6D518807D02D3EA7E77D79E47029E40C4B5B596817F2378876BF4D
2C305337055B9FCF4542133E0F21105715814EFCCE88F9BDB696284A5BD9C7B8
019222FE508BA4BAFE39A5A2B5ECB118586FB381AA8928962F64F44664D1AC53
7D31DA7E3F61477095D537A796741EFB75E1F6A834A508614C4541CE81A539F8
903A760C8780542A78C7156878591C85D37B4526321909E34176F3E042860C6A
FF44BB54E99F6CAD5255E12F68DF8FB77A6480E97748EC9E09B9CD239F61DB4F
FDD73F1821C85C6847C4C503F5AD6807F29A6109796D1854C1EB1A0510505B5B
72BF158E72300A2CA19B8BD40D61E46A153C3C25D0C7DC1256F76599ED41F71E
CFE3BF1A71DFECA66E04F30CC7FF04822E9AE3FFFBB92A8ECB72DF7B32D9007D
52EDC516EB48845ED9EC42BA3DC260B1E0CBECC7898D6AC135BFA75A9EF43251
1E003BD366409F00A683B123A0576FF34E102563C5798C446D447342C7736BA5
6BBA80EA8BB281F750744608EE366E30C5CB623702C787D6FC4EA8E472DF545D
24A3DF3E216F728D89D06EA5960EEAFFA4BC41DDB56D3D5FB07B3C626523F230
0BE6193B8B8B70BFADD6913C261A9054DC56953E9A8C9C7D8E3B9949E46F7FAC
4CA92840DBD9A852FCD1D06764E93EC2A6373F36A725F5D7D3DB29675C6C0221
4E81FFC726E6F7382AF4433EC880CEA71A4BA7830362372A0202BF126C35FB52
3B345EC97AB5684F3269A8FDEFB9466A4066E81C54781C05A71B623B6F8091FB
9D94210F34C1056BF638CF863B0B463D06B0D39916C2BFA9548D54E24C86F131
44CC616FA04BAF43DA1C74EFA205D43BF3207E2C3063E6500BE5FA0703E25105
A09E79B0AA18A1C345F153C67290B290324EB8365B1A4507D9F708B799C5966E
0BACFF824A275DDB6A89D89F5081F1FE0DCA40F04BB802417BBEF56E3EFDC21C
AA28C35982D81CE2A83171CF2BD29C23074544C9F4CE9F86205CB05F370A1F20
1B5741C02CA87E5862A9B1F1A1E4230C4A0A0099D280AFB05C2ED4A5F7BD5CAF
A9135CC1969E474F2C2E0CC3933A1F5C39BFC5CCB48C3928DF8EC5EEE1780A78
C587F31B62E3BE1991CA0BE1D908E4C512E1AAE11085D68EB9A7078FE42912D6
658BF3ACCF715E63468D6F77BF18AC181025AF9377005A6B6FCFBFF04C73D9D5
5F145963B6D0C6B27F94965C62BDDA15586DAB0F3D90947C94C9D4473D5A9C49
0EB3B6FEC5A91F1F266609281D84C24AFF9C656CE8765F7A44066BD4350EEB84
71691D2638935F2489E87EBB5D3F92FC7CB45520B129C5612B04ADA368E75CCC
7A54048E3F48D4314FD9EFABBB7D77A8828768D6F4822CF05153D3E5A4A71219
C38592C86237B17D6A6026A1F39941061598C84237011B4DCC72AC6BF31E280A
AD4A686AD314AE577FE9448CCCC17BFFEBB66F78E2C6F07B071AB9186B9BBF59
48C2C694137ADB9AFD39033A42F990426339FD6A95C3F46780518D34CBE784BF
7D6FA959014F0E9A6E8758CBD9F6CBE68F5CC53D80BF9FEF50C6C974CFC51ADB
D60B4CC365B29EA2F459498BB8DD44A5DD3F3FF43551384B8E746F870E68F4EA
8F994E54FB3169DA2D3A10A636DE6B8427381FD3DFAB68A367D1FC7629642E70
3FACFED58772BDD4978BC0A27D0FD32FCA51B070DAFC00C67B49D501CAA5B861
344413F1F255717EFDE079EDD6F3AFA7705CC40EF32CAB3866965D9BB5DA96D0
7E2CDDC0C6A9B7E683199CAD092D5611A19657FC7C982519BC3A09A9D795F030
7C776C25071D0B0354CD853222F53920BE2B47FA5F9B2204FA846CCB1904421D
A3242DF909297315D82F74BF79F47CFCCFDA431712371A143FFDC83A9D7A88A1
4159B3A436BDE5E19967A80B304325E3CF06E9B2468083435CEC83A6F629B801
453ED2F28B1B9EDBF53AF1626D75983A6C3B383A6FB3025DA828E12158E4A9C2
44845DAE8BEF77E829EB5FF3C2A88A4117E0DC93A95C4D46B4105E30246C55F3
4047D3E05B101DDC75509F64E99855336EA75E82BA9E34D4C3B896C593F85AEA
9FA0EACA669BDCD4F0E2AA3438FAC6FC62FFF85796B81569886EB1C9C20C6CE3
5264953AA806F512E976E351613F23E810E145B329EBD2EE9D8723A6E28DF047
68CC0AD74EFF6DA4523F8298CE381D567C22A1B58098554491340EEC6BEB2AB1
AB21AC051340F5C24A518AA4D57F35D454521E715BE967990071BCCD21A8206C
5C40608203A5C662F178E9F0671D80ADFE316D582C7A94DFE656954A7E9E5ABB
1154009E0C18A6CDDA3DDFDDD88F70564DCD8D03F8905BAA1B6C6A386B924491
D64E03185A78C61F7393E000AA41F04375839EF5540A30BECCA0318EECFED17F
D37779E82F47ECCAE0749E97B0D9E4573F7B6BE316D8AF143BD93111D717FEA0
C56A0C86CB2804718E1124A0C6E82A0FFA58FD013D9EAD2D88B01654F4C983F8
1A3F877C027FFB0F440498A023876736CEC917E68548A8CED2095BFA7DF83AA8
9AF9949188A90AB9C87E6AEA45F9C3D2D7DD49A5121D995CFC630B9E1360A784
AF0AFBC5982F003CFFF22CB3EE03841E657F3716353FC1A8564DBF7145BC5F59
B4395881CCB81211038A6D38763047D0180064377806909AE2A524884E52445A
E7F45857949472A9005CBB14F32F1C3D39BA8D1243BF046098D499D17920056C
56795EDCE10321CFA3B1CFA4BA5DCE1627CB5B3D175E88ADD1EDDFE83055D809
6D73F650F14CFEF80336C985DD66CD26DD6475231521FB620C2C1C392677CB07
502BD623E63F673C4922CC21BD97066F37B3B40C4C9DF8D4DB0AEBF35A2AE606
51A930E97F6E2FF49AAB53CEACC4610098E8E203760F07F84BC5DD2F2CD98801
4662E46950E002DD1EF770BA4778296D06C85FF4ECB3E8711A7D96A669411066
9CADA14CC5D48364F8273880ED40DACA3BC49CAA5BAFE5F553D5507EF1B5711C
32E17928D26633B242128B907F82CA9CA946E84E8396F18FB4D1C9F2D3A6D13B
C6B93AE8DD633ECD288DD69057F351AAB2D25E6D9A09EB37455E03454CF93DC2
E85BFD19567EA7C79A95C907872F5603C27A5F76D534722FF10FCB40EDB69502
8A8E84998F5E1689C4D585728A94E426B23B8103DAD5CAE80C6547ED846947C7
CB0D5BF28CFC6DCC07D024B7569AB27C1A79399593D71AEEEEABC20A0709B11F
311CE63E0D94A75D85AE1BEA97194A2B62D7F5A3AF54BCCC1ED05DDAB14D19C0
7C64F7E34AECAB27A1A571B1D127B4AE78A4E9D77BC70743C30BF59EDA5E6206
FB74DD581040F921CCAF47EA535BEBEEDC09E5F9CE40F7F845B1EBDC5B1136FA
BC9898C5721FA9A64D8959043EA55562933CBC859DEB55EF822F5380F0E5CFF5
154FD2BB8D15422F5AF9372D3AD61B2D6CB66CD6BF4C733FA0CF3832B8A12016
A5AF5A64DEE8D4BA6042FA195ECE203D69FD06AAF8C72659580928F44039EC6C
77923C16E69883362F840A947FB0D690D6005BFEAFCECEDDA1F3DB1A0C2DFFAA
11B149ED60FFD0C08B8C765679FF0FFA221A10977BBF4ABBEE79E19BFA83DA58
B7E0B86AE371F88916F7CE9C3787474FA99D22AD65B7BF32BD714A8F491E2808
B6A9369B642D5FB4378B048A811626E0C0CBF9A367930A8015C023B5538245F2
C015FCF5F235343A90F7EC9BDEC0E8B841FB5BF2DF389AF363A8D67761C0F2A1
DD706C88E65030E021D4DEFD6F871F7EF9D23EC242624851D8A184C40A73B179
2DA8AA5429637130FA6B1435B35CFFE1EADBC6A675A7CE095341582702DCE4EF
EF3A673DDC442F02A39B1C2274D5C4E09D5EF58E253DC0F8D3DDAF5AF7F4AAD4
51781E12C156A0C13989BD4CEDB7186444F1649D8A4E15591C09734249B37BEC
07959F1920EB0B6ADF80F97B2DEBBFDD58DA9D4689E5D207751DE0B86F7251D8
0BE818D61E6740F1523F30B48365C2A8588440F9DF56D327DA01637CEEE0B707
F36EFC28E1B3A46318DB4A058B98CB92367AFCC84723B22E05955082E1FB3C5D
A2997D960DBCE77385E78500879B375DFE6258B3610AC8145BFAEF69CF8C1849
94DEF49D77D9F3C98E953BFCCF3D7166BB4BEFF24F60924D537A4B2E5568C871
A39B3C32BDF8A354C9CEC1281F96770C9A13B0C2720DEBB9432F01A550980BF0
1404E87440A3E6197D5DFE27452051462E2F3A2E1728C6C32537B33DCE4EBE81
5CDEA4631EE275B83B62D4195BD05545B04A521EF4AD03B558F4AC437E82947F
58A30DC4C3823185A18F10F21A04C3CE364DD00222E3135715814EFCCE88F9BD
B696284A5BDFFB2108B29B09222E86FF1D890EE2689F27AC0DBB5659EB4FC9BE
78A90A8BC6988EC021106493CAA0667D6EA67095F7E64231E9D8A5F942BA9513
5C08ED14956234C19F7580C2B003661EF1F2729556E93802297CF25F0ACE1D65
44668A511FEE990DA3A112221FD4161E90B8C7D900193CED0B6E1698F966B4F1
C15961D374DE25A7B0EDE87EF9DE8BF75DC41C003B05ED038B66C6CE38A97957
AFB653B04F2614CD81E64F1C330C0EA23FFB44437311BC55643D5AB23257F948
4534F38C37D19152F9B99F98DD697B9DD91E41C8DFF89925CFC5D85A28B616B9
EDA1ADCC3616A5D11228209CEE30FA83953E0F95D11C201018FE91AFD0B44644
1E0D4C268B79B86A81A3041A6EA24E085EFD18962E446D65DF0F65EF55031CD3
8EFC48EBD2582C723C32D368C2080CA8069C6B0CDE19AC94E0BDF9F7704DCAA7
8FDB914A7DF0884F7E2BF3CAC51DBB388102E674C972E3A3DDEAA67148875B3F
A6DB4D7266AA1D574E595671D73A3499EBDC256E313A5A19233DAE151C63CF7E
54B43BD28AAC792C2E450B9BF1EE715F65BC146CF13E9FC00E316AD709E0CF9E
BBA3AC28F42EE409EBE71CA5DE4E232A37F459D0EF18D8272A518D7380386793
5EF9F82706631264A3631413D94E02A669BC69A711612F51064C1375A60F63CB
797D3F2267A66FC82706705826819B52AAAD0F72ECE9DC7CD4DE6CEA6D5E8BD5
EC5A3633B36E531A430598881E5E00F9762A049FB15DC548DD9B6C71BE4FC366
2B61C59F2CAF8ECF54E132FB78F6843DA0B2594EE9642FDF96DEA84CAA9A6FE0
F9EE7E854D53B85936B31C808693E66B33D3D4FC762880B589A038A5102ECCDB
8736CDCEC853DD25DE15C6F86294CF38E4AA678BA8A08F81174FFF1FA12D73E7
AA25EB57451DACFEE99AFB89850C6243CBBAD33F74A53E3F70FB08ACC8E0D151
442175A1B1EF865445EDBA2C9F4E71A972E63B498CD052FC87931B81EA6500C2
268DD643900B9DE5B6FD103D2DE1F3B7875616349EC7A6B72D81C1624D48749B
7F8796D2855C1D366F07CFF3950EE828851B409827688B0DC75E790B8C3BF5FA
A2C6D758DB6B0F7DF64C81DA33E9A68B9B834875D96749FD58506FFBC9507DDD
77014C2924CB223E405F48F339DE67B23AA4C8B47CA0DE5E713A988B0833D77D
22C6A4E93F0E0210F030C09354A99608ABBEC8F6ABDCB403F0E9B9F002E0E963
A85D37889376D26BE35ECEFC05C265F81067183ABF373060EEE77393A53270FD
8E621120116AB4C81C19328CD271B372032A0A3229790B7831A2EE223AA7588C
68111E3120000834F31E53D51A3D12A141F41BF0471E32989755B7D83FF58464
7B807D752C9F0598CE0B324996DD0DBA1D8074DC6D874CB2247B8358B43FB427
0DB6395806EBC72923899A0FB79F8113DF87DE9D4BAD3A8729BE2E79F4AC51BA
4EFA0965A11DE5D53C5A66EFC05539C901B03E68FCB40F57F3C85743260BDD24
1E10AD256DEED77B14571B11FB879018812A646471E9F0C1819320B766793F24
9827D7B0C791FB75399AEC03FDDCE6A420A6556B0473D8CE242D56D62EEF6079
504A5809102BA714C1D454282A55B106FCA0EA4DA15F0FE86B4060A052979EE7
9B616B0E85A05CB8C603B43394DF2A4E2C4B1EE23DDFE63DA3C7C8710FD5B93F
2775696BD36C6DE515EFCB9F1EE295C55CB1C2F4E43E67F00029F54AC2D89675
1FC8A196672FAF4F23F9D40B1956EF5BE0EA84B15E6A8F1FD76BC306585A1225
8CF5584E8048A95BDB54CDEC59A4699BD9568E2E9A1BF9D2E5842CDDBF74140C
3E06CF36C34709E5223CEEA0A86C9C89D9BD6F7434E9462CA6CE1CC41034FF9D
DD7C0B479B82352E0497AF024C1D02D39B4380965AE8EA3789FB48CC5E29C2A8
6767D2874B817EB8E064F4DFDEF28601CA4F43E13DB57C81054245EB54984558
81367B21D4B71CF5A14A3269EC5DB4A9580916DE799F5F09D3C6656B3F87A0CE
1D458591A88B2F51962CBD6085B3E530D4DEB4429D777D6C653BF3C326945F5E
C60809A9F78E45BE3409822E5A52593C997CF959E00469F192A288CEA5E41229
3FA1D62FCBA2BF778FE68559CDDADD31F2F3BE22AD097C23E3D43BC2A5698E1C
EB0B5AE3BF68F02A192428D4C5BDF2944DF4D3FA880DC7C73D37186DF6A9B62A
73482C427DC7C43DFEA873FA4F3241FE1CB13D5E4D777BA1B20B2DC5E7492FC4
475FA531D5F9AD0026521621F41AA3D7E7FF53A0F7161618E2AAB51A9609808E
57CB966FB9721A3FCCBF9B37AD7801A32386E6AA48764C909B0F3E3DBD53B7CA
9E411AD23929B0BE66C7C79F5131371E0D1C13D02F8FBD144D40AF22090580A4
CE7CE922E05D991CFFA63F89B994932C81844CE88B89FFD650F8BDFF365FBB1E
F36BE6029B707453F8EDFA049DBF73D907E4E856D60F007C12820CD75104A1FC
3B39B6F174FFEC15B2AD9D2B225CBA3B73337E0D1FF6E3B2E5004AA42EDC8E67
E316A893DCD1B52B1C14C88C1767D8F0A4AF967900FE599D419B3E98788FF157
F2DE91B7552C551A93A97E2F142D2EA8A5C2D3D467A8805ED5563F49920F9A07
3E9A0931B90650E6FF796DDCD038BFF2B745A8022BD9ADC9353BFA3BBF553C2D
E2CEDB734273DD9168D6D4F2D9077EBC356F8514797F918B34DB9422D197A64D
FE86C909ED4026200A9FEFF374224E08B2A88597E43EE109A13F97843B172F72
82FECE1279354D5923D7A9D25672C408D6BE0DD214F79A08B5FDA8613055B7C3
34001273112220F8300193966BB4C3A0DE35572BB63A7B90986A8C1CB456A012
97D4938358081189E3226F824BDCEC9D42FD75CE5F5B3D5A5F9D7CD2C87E175D
0435404EF38BDEAEF0BF8C67D2CC7455C4A914FBEEC22E21BBE2FA148D62DF34
40F95E97DD9B83EADFE0D19A48F5F0D556672AEE047F1A3924C079144821781D
DE65520F564E8FF997531EEDB0EBE6B76E576780C1621225A259A2C390F61DA9
BE399F69980BCA1870F9437DDF98B5C5E6795860F8EB626A6C452DDD53A655EB
94E2FDC07E0435438122A624D8D71978CF93536FD0274C5DA5A51605671FB420
12E8DDFE23EB148AD8E1E23412FD61F93B0224ED596C293A3F2DB8A1C8118C56
61DEA6D4EF824E4E8DE84D6B70B315658DDBE16D82BCB452E2F93BC5ECE2C1B1
98297D4CC32B1D6B7142F88FE20A5AB8A16663EC4ACF6F39971298918312250C
1BB477C45ADDB33BAFC6FE5A71F6077A28EA55B38F9D2E026F45A03766C13E3A
6E5ADF4234D75CCC07F748AEAC673B9A3CC07CEA9151BB3BB206A6AE130E3961
AECF0CEF5235E1EAD9EDDDA6B443B60D1B20A3D2F22F4D82468A31EE68C2D6AA
1703682A4671C30E226B3861D674E27F696B442C31F0BEC519652AFE9476447D
197D259E79B8A5BFB7A119CF9009266474A9B6A94BC1A3F7DFFEDB3327BEB4D6
B83004923DF88971112DE0551410F0175B06F454501B1025AE0F18E165117EE7
3470A453A058CC424CECCF0CBBBC526DB2A3F53F28CB84850C95BA42E77E089E
2C293B0DD12BB1CCC1BAE80992529539B990706A7E05D8E62B26B9CA13E18DBD
66830A3CC3202761617AF55B678B6F190B1966AA20AB390E42EC0B89A5A5BFB3
05B918CD2D0B6EDFD1CF9318640AFD502DF08D7496EE9341D32AB3441765E123
8AC2BC2F8A98D16F60B7201B996A7C66E0B2E15B66EF0E8B59A6A52B3C5BEC13
B783E6A870317DB2EFA129D784901004EB112AE678F1979B767AF62A5965A160
BB04EB45943BF7DBD6469E715E26AE66082B43864A50D37E8C350FB87CF551E3
DB68463C2C73438901B700BC0250093A7C7555C4FA0324852EFB3480CCFC3B95
34BF36603F3F77935F24EA6C597FF33D69D02627465E8326ACE6F0E9523EECAD
6B0AEAF364AE4C80E5607CEFC6E723505EAFDC5CF7DB813E365F3AC66020971A
09CBCB3004F5E43D8344D989BCAECFC0F1C4319DFCF7BE6724DA4A9A860C3B92
961EDD64636A1E9DE835560FEF4F937EE71C47A262C2D2385181E3F22BE45C2D
6F1E364A30E8C8E5BFB97F824479739F7E849AA97B2892DA03EF8251B1BE7AE0
4C0CA35E0639689602EBC13B14F637A353D5AE542D94719AAC9EE1D540B44022
77A83331201BA5A4AE0B9FEA6716F601BA31D8A0E1DB0A9DB08CAEB99C22B2F2
F8608CC44B46287016CE1B8E314D87507F1FE502A7D952D8E73461A05286DD0A
033DEFEDB32694A9D0B28B7B42929F29AE099FB7331038EA2BB3C53D1BB66A23
18F38D99F67408AF14C7EC19F3A13DDB6BC484C22ECFA2329BD21F8131B159C6
27333480202440A0CA36225772F61009240C6CF74A3AB02E841134E4A28CF798
C374B3DE9E17E223AE2FE9985F09DE8EC180522A90FBB1D640D2A6B38F279F98
0D57F5E18BBF484BC0F6FF8CE3720C7938161863B28AB406FB94F5F23C47EF3F
E333B16AF9706E0EE6A07FA53EE9D16881092BB98CF186D8241B5A21BA22E5D4
CCC029B3C232811CF0E4B1F2BB064C3DD0600A57C6044D9646BCBCDE44BE8FDD
4B53ED658D048C5B426A0A3FF2986C6CA295B8746F32ACFE1CA99C8B22018E76
2544A34F1B14E9EFA5B3AD0BA1F17438D27593D7A52ABB72752EC33390EAEC92
58D51AEC9CC2F790E8467F79548DBE174E29CDF1B5AEC7DEB95533ED3F634A35
92BF1214E74B029A7071753D8C57DE98149A3C1DACEE22411AB1C521297233C3
448A51C8E9877DF60CB6BA20A13C3A4C7E0504CE00414630C5CA174C5983CE8D
EC5933E783EE93CBDF7584C849F229D5383797B33623675290F3D98118E8CB14
2DD6D0EEE2B8BE6AB7028715272A329E5F5D845C20C8AF34B15CBBBB07036357
04AEB1AB98D6FAA29EC69EEC9AED9F240435345FA50E91A1707F9B7CFBDAFDC0
B34D10F241C4706B28E605AA5B29EF26A34102DC43A42B35B071221DB5552DFE
B2173E7955B1BDBFBF1418DF7832308EB60CED7D2F5841767258BD28F1C7923F
2B18E8D82BD808A0566AE3EA0E57D5B99D1128F8193F53E23DF2A805FB9721AB
4392D61BDC14FCAC3534C65C2EC005975DCB7D51F1D2048DF06164EDF58F5AE0
0F69DCAB5F4E9D01334F4DB23D0D8F61B0EB7C6E5944BBDD139326FC0699D55B
AA86AEAB1BF329FA98C4C94F23A4A6556E238089C7ADBCAF015F3B223C2E5CD6
9368F0BAC1D9896EFEB11C35A5C1612223307EBA37E7D67ABDE015C94A45362C
74BEF868651E4459E3A12252571F743AF61BD3463DA6ECF445C884413A47EB24
BD060BA3F1D884F26CF41089169426E44CE9FA0FE557779402C184A4941811E8
3649F87C126C46A8C8568FE34B94447EAFD66F6CE9055A3D9E42CDBA2647F86C
EE0790E1E4273BFF14BB6E61BAFB497EAAA77F8BB8FC39191954A6EEE713D22A
147E3E40AE93DA1F075E84FC2FE0B2A3698E3F716796AA10B77917D792EEFB66
790435D7FFF7A471DD9AE53236D4DD320B3EDD8FCDF7A816E0910C57F24FD107
EABE24DA14A90F125BDB7326E5FA61AE09FDB92A63A91D9F69C74D95B368D165
FB20200C8B457A28C771EC6A399BFA14A9C30A93F22CEC8DECE75B0C0F3970F4
444818AB259FFA594046A3FA5028B30EECE52915952C8513B77790F5618A1146
145D300EAA72C7441F142268ABF63F356DB1AE440806E2B3D9BA1091D0461B64
7A9FAD8D2C7353442F8F076619AE4DD0BA4E3326978EA7866559897CF0653AC7
8BF7FB2277C35C451BD6D13916C1B68AFC494F646964CCB875D7E3696C9A16C4
2B87DC2C2C505DF69355EC3E5C1F343AC2F6071317CC3035F9C88B306A2EC947
1EAC9F2C02709DE6FD026B6835D12D487FB29998A30FFA67263BD59BA2E1760F
73F58522EC6FD339BA613095EE3786AE2772D2FBC5D75A7FC59B03A3E675A407
692533DEB969AEE111E75168D70563A337127B6605ADD9A0BD1C7A2F76A50086
A54F076F34DE6A129E6F95C41DEBDAAE23A37D8C7CED1561D4CAE9E03728967F
7D0C65F6999FA3227269364CCA16643C9F1BD0653924281F254FC8A135610C3E
738883A56EE609C160DE8C752E2E45B8C169D7D58221067FF8FCA3050F9901D2
F91ED4F2948D5C3330A0985DE6150645266166FC9C29498F852DB592E10EC37A
E2049EA3D399E3F6BDF65E4CA34B00B0429087212E76A3DE3A67218CF24DEC9C
75381FAF2AC65ED9F9DDD31E75E530C5EB5E56720D6CE4B55F0D05D8411AF327
49D5F391CAF8D0B98716AD2C1777CD8841F8A17D3B8FBC8E3A578C8DF072F674
3A4A26260C362AF7068A8A8E859CAF55E46F84B2E3960DAB18D604C9E1285AFA
3AB3AF782E48D7CE22ABE468EE483C19A5CF2A51F61981D2A539A4556B9A4308
12D6195322A25CA5ECCF3FBFF392E9559945B50F4D7C40696774E35E6A9E4FA8
336D6E3FD78756177FA1A6CDDBDE5CD4F65951323731577C3B60CEEB3AD77C07
BA81527F97C89586F7CCA1EB12675CCAB12798624E84F8656A6FED73192BA9F8
17ADBD1FAE698D66DF174AB29E242F90407746B9D6D8F77B1A7A1DE94536A24A
A61A47B1A58C3DC14CCAF497CDC4B39155C33B65E0BD277B17FB4B643B69ED7D
8F45E68F2A60A84613979A3DAE4B8D2A0F63A77F07ABEA1BAA714F6CBC3DAF2B
9D536EC849A4630F4F173876694CE76949F58F31816635D2412028C1718129BE
2CE5BB23092A27A5AE85B3B56C6370A3542EC04E6803AF2582F5515AF13F6A0A
49F6367351904E1E2865C1F737A428EDEEF2473FFD63B302B915FF910E63CF73
6743B84BEE7156AA61FF86610BFE936F0A571CC81E82250FE4B2B99749E610D0
236C1AE01222D74FD830D63A4208E827A9C2CBF7F0C3DED280D6FDCFB195416F
BEEA9C6556FE0BF405D2A4882A8C71EAE1B8944873E8E67A74DE94C10E7EE856
F678CDC3008A08A2A16D9EB73F6EEB2ECAADF1C109B63B0B10874FCD812D449C
A5632EEF618E6FB9645B608F03B4897CE7461AD5BAB068DADF6F95FAF7D1E975
3CB3EE5241C75A3E4A2E69A8BA7556E7DC1FE4052517107A32A3990936511260
6804D0E68D704039DAFC5C05855C1F6DBCE36E6313C32A4C728BC84A30E133DF
5BFC5CF31EC0CE6F75B5CBB4E810DEF0921A02B0D1E6068418F41A007E62F059
69BE76B9B45B043A1FCF2CFDCA9AFF9FBD0A09487138C3176DA0C04E0FDC543D
B3B02ECE4C75851E7951E39295F87BFEF314993EC66F7B9ED637163BDB11717F
E7401CD0BC8D5DD424FFE364428BDCD23FACAD7C42490546598B1382AA53EFAE
26EA9694E9A5273105F11543F8133C32AA1444A5B3718C3E9F981E76E8FF657D
7CCFD8957FA914BD46DD9D5448E85D01F41E5142CC0A7FAFC02A20E3972BE90D
F409488F510E909C721E24D014879A246E321EF659D0D19E4B1EF02FE45A4D65
C13DB9F96ABC40B5D1670A21D840EC9383FDE56C1874390660C14E283BE960E5
869A967516CE23138B98E6CFFE8187EBF064D5A975F6121234B3D8EF25A3CED4
9CBDE58480FD0C9E9EE33528A11713AFD9520F86CABFE102F0047B3476CFBC69
9206E2DF3B85F29E5096844429BD3B52AC6F491A24F2CBE99DAF861394ED682B
D914974E5A0227C679528C9D5BA28781C1FAD7BFC6F91230E8CF1CC32D55B845
8C47BCB678ED15459D627A9E65A1323BA915C106CE08A081632544650F926F91
B7B84E228C4D5C918F2CA4FB1CB68EF960D01A54E1B71BDADAA74B4068077057
43A7238461042289D8B3E729DCE5D211CB05EB43C89247F1D581B8DCB886F94D
51A32B031775B8A30ABFFD3215A143AB621FC07C3319391C9C0F1501308E8F83
2434FA4DC081442B2266D1431C46F8AAA08B1B0BB86F9EFCCB15098FB08FFECF
AE27F49E6F0A52ACEFBCAC72D73E65169DAAAA9793D0DBD102AA25E4E52E43B3
7906E1C4AE758DC8D7971744DA02FCBAFD56A6415D83334B829C83B3C93EE951
5E9C5CB3943B9D00568942AB2D85E122417E23C75A6D6066D0E23D2D1460913E
0D24AF79501D4AAF1117D4ADA03CB2AFBE30987B1019DC080F678B7E5B378976
945E19A05B5F0D10B9A47787806F9F69D5E10CD7116FB2DED29C9DE80276197A
7689D0A96C89713212EB83AC5AF8C3254846AA18D71F3C765A794E87E45FE582
9CE4C2A656A6F430781CC5BF9739264A8EE1265DCF82C186862D7EEF9F827F1C
C5E65B515BB9489CD0A12E2586EE2B0E9DEB3BA8B06F7C69451728CF35A18622
F2C49FF5532684FB8D0F4A7136879F0FAB0930956AAD16BC525B3593073BCBBB
984CCFFF49945CB5D1BFC428DEE9963A4596FB29631B6F7391BCA4E76473F2C6
977BF5D17D8D207E603304077B139B56D46FB9A4B093EC160157567F48B332D4
210E053D217057104EB02036FA8CC986D7996F5D37EF78BEFE17C2D518B07469
F871F979B0CF6DB13144BEAC7E130204CBD6CA04405C9B2A8903B0D202AD890E
700B9A05BC2F952CB05DA5AF20B551159F13B93D9B5C2B043960AD99B695828E
511EA649164E976E6A2DE3580643C2EF4D6A55B5AFA1C37B10E3BE7615C82FC3
000FED17EA056D12DAC64379EE629C95B1BB7AD6469E23050DF6CA1D73E538EB
6D4F48B113C0CE23DD088D7E03E597EC53A2322930BC6BD6C485107FC37F18B4
6D7857FB335448C16C3980A769A82393EC5E3A2EAB2BD07F3F3D64DEFADC5012
622D1797A899AFC90120FD7ED73DB24C8042A5253510208B4B0D7DF6B36367AF
A422BAA634B6D413CBC814AF034D8886E146E74BEAC062F8FE26A02632ECDFD0
BF9A65FACC14BB93939B5B9E26AC8899CD0DD0341352CFE0239C788889DBE2CB
072755973D56FD5C1CC7E9B4F96AB94C3421F3E2F50D792A3EB9FB4E1533711C
07DD5A7B8E16DF4C14A43F3D6F9EB6965DE9588DBEB61C2463D9DC4791447D4F
0AA5585589CE492D8845A6B5B355E95EAFD6989386C7DF2A8EDD79C1FEDC28B0
BBC0CE198A3DC7471C53D6A0C8B0A6894A97EA26FE5F9C284C70B3887782B21F
6154B5B458D75D286477D04EBE5DB44B15C7AD6CD21FA920846A32154D39C713
1555AF7A866B15C8914139C28D5D074B934B26ED59DEE755D0ADA383BC3E3DC3
5425E1512AB06A575FE7FD3162CF242FCA1ABD971F397BC945DA45C49E7382ED
C9D924BB09843A5E0713DA04D41802D11CD481B279A1AE06EF7E4366C62D27D2
91FA4F8FEC19BFECF90ADEF9F45BE6115E8F45272A0B482E7BDFB527FFEC0C70
548158CA027DD38502E71A08BD11B4D2661E017884DF6050FDECF5E1A185047A
5D824F896D3B578B284F96B99CFC312D3E34443C43EFD019FD22AA7057EB9EA5
8D2C8386CAFA0D8EB2C07FD5C17657FF7E9B89058E7FC0EADF3FAA5B923EA3AE
165B61A169DDC1D006E0430BE6166EA9972F0DA7E16E876198E253937381B6B6
746C5DF8665763B685F31B1198C6D496ABDC3B55B5BBF0EB78928BC794C0125A
2C2AF1E39B17B14B36115E71FAF6CC611675637490AD5190DDFC3CA7C9670F37
2259A2360E5D00FF194EE62150B4689FC0FF8219224951D75D9EDE4CA2E5795D
A24E8E81CDD9727B7ACBC328D6109FA661F4D48AF7A88E736427B97C02205BE0
AF4CA8A7F43F2EE8935CE23C401A45712337397279F2AA0601453BB25C3D2F1B
42D5D4A04B99BC516034FD98AAFA87BCDF729B56C22E2E5B68ED1EA9A7CEB07A
BC3954F9A7CB777899FBA61E1369BBD92AA5A1BD7BC94A7C7A5158147AD3A297
D327135215E436CFC9069656A3120408D14B9EC363E891B6969CBB8E7D546DDF
609A3AAD25E74670D42308E70F40CED873167B0DB32D0EEE88B8FB6D41157A7C
72BCB8CA07519A3B8FF79BFFD1BB06F6E8AED12160AD12B818476296A3190C1F
43851CC34898DB56561DE9A4BFBC67BCD617840C4C198326C6BDE97EF2528AC6
5A9E8EF0EE3F66275395DB90E2B2F086698F9586C95269BD3BCD65A4F12B4E18
47B0ADB93CDA9247DB1F45EA541D19F0246CAB56436F4871D0CCE25F9827E295
D2B641D7B3F4AD0904E0FC8B5F31FF4FD84841D911267C46BDF4F71F72CB614C
FB9B64949A5FFDEB0DB2C349130AA624CD44F3AC758E64CFAED6F18663082028
6B835A597EBDA1A2E87B683B186004911C84E05BA2909292E91731596056E063
22DE5E93B69C4025B00FB746A54DE0E9D0A57A5F9B865FC0819C5129ECEF8870
18B28E4DC8F95ABE19A99AC23365D55CFEF37606FBF084FDEBCDCA66BBA5E91E
2BCBAEF834CFFC2DB6D447ED8551D5CCB7310A15746AEB7DE051113EC9A11F1B
C0DB9B65AF8976BB1C02807297C8E76EF7C821BDFB86EBE80CC0A900AFE4AE05
A5A5C8AA112004E0DEB325AC49810857EC5578418447E0F4120396A8596A7380
24CBD119DAF9A70BEB327D56DC2CE0478CB5B674D89A5062852141FAE5E69CDA
CBFEB4F8D50E02D6067DBEE4D81611FA9E291EA07E699827754ACBA824BE6E8F
AD10A80E431E50D3FD6B11001741024A7C2C6E30D7708EF154ADF7C1720EC779
6C34418AC7FF4BB7A3F33C4D2716A87183138BFFF9A5780819CE9D538F0BF513
12284D3A55EE0BCDE44FEF1439F0D4259CB481565CA91E4D2CFD22E83C1BEFEA
483D4805FAEF0896B050BA6B19A93EDEA2B55A071C081052ED369CB7131333AE
B71EF28CAA6ED1D9D4F174C36F675DD9D26B2D5EF3D99A1C9006588C72862D93
FD217882111B2A43583105919F99F504F07A5E6C0BAE11FC1B4F07D146EB426A
5A2BBABD31B3A6935F9F3200C10164296ABD0C9361D8D9FDB705B02F33C5AC98
2DE659D24FE8AA793A2DEFEB6A5597CA1F51AAF09720F659427D08B0BFC85EDD
F1F3A957741B347E8AD087095DF9ED7C0398AE23F9318EE56C458E87049E567A
5FFAB6F761D8A0458790C35FB0C4FE7A2B560E7B7D2A15AEF908279EF24EE46E
35CC82C4A633B5E81FA978C0C4282D5CA10FD3A263CF6E91CD9BCAF25A84B9D8
D78F0A79C84DE682C4565D852D1B3049A57686152B46FEB4CC06CAA52FE03109
A390CA9FC266FC6C50CD873C156773AFE059E228DF551344E80F78D871C6B0F6
C0516A7C02078DEF131FF999FAA28C6BDBC6CF05C98C7A5042184751E9702143
F00490E1AC40B42E879D27FA333D8B563D523EAEC0B737C9E7E29DF210C790D7
FBE2FA0A3F36133CFD7DFB94AF486ABBC4067FA67AEB211CABAF12074E5DA593
51DA0E5F46C5FD273AC71E7748FB474C6C50ABEDD3844544A2611294DF9E9F6E
8323819ACF7AD8BABCEF10BA207A8EE6784821C567CF89B04A6BDBD06C0D801F
8CE9A4C6E66CD45595590A0ADB5AA244FEFCEB9EA044B8798B8635AD90AF55F3
71AE418BB15AC4BD1D8652B3763DC83F255B32C1826A9C1B366DAB7AC61A9E57
828ECA18DA6DB6D4DD1439EA40D9652C2AC1CD5FB39164410B8CD9736980D57F
6E04F8BD98F43071EC9CD31CE42504DB95EF611F93FE9E4DDAD9D69E5B66F6A9
7DFDD98C1098700D9FD34AC6949A820D6650EB8EBA9A588DC96AC36C76661289
9B21098D0F4F92F309C6656DC8B07A9F0C8F7E8C7BABFD20061C4FCBBF01A2F1
86255AAF47C250ABB00C2E6880DA1DA56F6CB67C04A9CCEBBF5F1A69BAAFE752
E208700BA3EA33E57F6F2D3C748410BF645DC4D40EE81FEE0383709807DEFD83
2D3716ECD7B7A93CD1442842C553E39675E029B5980C2EF2870A033AF13ACA33
81B9D4631E2D2ED258B5E027E08D298DE7E29EEACE3B8FBBC7A059F8B51F3705
17B036F476448CE28CF177F6DD26BCD95780EA632DAFB280663FDFB84BC0146F
2F23B6803178FA887C1C794A47927A10F5A6A4C39194812F52AFC219D10A84C4
57E2F8C1FF0C317C80AEA13E0E4F9FB7EA297D55A19BB93975B420D75BECFA1C
E77104B6E4E2F13FDE128534E6F9F401AA73BC6CFFC0DC969276FC2BEF836E91
7EDB1DE0C3229B3DC759220AB4E0FBC5273700087F5CD9EA438BD7EEC26C71E5
C1A3DB1B4D2C85009CE3453175D44CED4A3FDEEA47FD729A9CF73F3E5D3D9CCB
B85A3AB15CED792469EF6B5E83674AD4C03F26374FCDEA6843D09C3290A65598
482C4CBBC313E750141D424D0472DB4D7981D22565D56E8E6C86C09331EBA337
1BCDA285C62345A338BCDEE8E864D72980AF1596C9C265A4BDAA4BD0E97F91D5
502FDCB083891FEC405570D9D989EE06424F6D93670337D47BDAE2056937095F
E2981121BD5BEC023D6F6AF889134EA89E09E21B2AA8A4BD925664BAD4AF4330
048DAF787854940F693D7A1257687B1453C47A160D93525D8D0EB132C689005C
BEEF51189E9CDCEA39EE881D463A7792196AA1690D32FE8FF0C17A3C278D54DB
1226FF68A9FA0571755A8DB296D8CBD676EB4EB2763F249A679AAC87CD9985C1
159410CC943AD1F1A13EBB2B15A6084EE01F0BA0378EB872D67E6EA3D5E35107
DF681165651F86104E053655EDA089BC6D84A71A4B33A2D34735779E78DF0F0D
88C7567412BAC3F136A96C71F7C4D5C75CD9A28600914D8FC9C146E7539E5515
AAEC0E6F7BF8E0E71B60C0CDDF467605AA6A30C224A8D4891DDA4F21570A903C
8C85B14357D64445EEDA0979D5996DC0CDE7ED5F00575A1232A1102E670B7782
F7F4F2F2C4BFC48A0BA696CCD3F104D44CFA88627AB57E73F1CA2F2A20BA8EB6
9037CF540620FD1D4370B4C3CA2F16C5727198B2AB0BD60F34BD1879E0A556FA
C0D7C109CEBCDBAD90D1B892EE896D7660E9166F39F9298705CE67859E9B126D
1A8BCBB4419B5E48DD163FC52699EBA34E51668A11CB5796730D2D9BB38AAF1F
F675879AC712CDFC5C7102922CB12910786B29F8CC61EE1F4AAF66E4D32EC7DC
E8D45E1F61D0B01916DFA9F653AC6A341F821D2E4CF6B7E3B2BD52A3B55E2BD8
4C0FAE91A0CA8E9D7B30A9D6F6FA853C02C853E2090F2E37B826524FE22F32FF
418E66EC13586495CF7E752C0F9370336032B0D94AFB0A9A5FBFA23C93B4B1AA
059E802BCB4D0D01A03A02AE01F25BAA47F09EEF80001A6CECDF06D4099CC18C
DEE421A835494B6F08EC48A2DA086080AD2C0DBACCD53C6C67C66BE7FAE60265
C1E4071A53E98025EC00EFF84F376B98D9260F729C5B03365924B20EFA1481DA
0F2B43510AFF717EA7D691332992F5FDC171AAB5E331BBEA249F0D10AA0DD4E4
15802144150DD892B003B3CEAF2ACE2F74A9F6518A426944554DC03ED4D7E06C
8825E039334AA8370246AEDB24AB8D22562C4C121CCE4695666EAE52A99A4D79
C93562934F153D4723D8DB65C5EB9D998D7443B3F6DBF6A55261062E0F1EF218
F27A216E222D4A220BA8236790887082A03823D15A09C9C3B547609D49D63B33
C8A6BB2904B0B6FA15D3ADCA7CC8A3BA863A59FDBB35CD2A3857302433401F6E
8CCFDB1D5BB9B4B94DA95556FACD1A74241E777402DD1A9FB04B1660F657EB1C
46A1CA7DB67103D3B096F386E6951DB50E42A7AD3CC556300DB675325F0E3A63
AE87FBE7E2866F4213BC24E4D2DA4AA16BDE36A06FBEB0728490D61D12DEC799
58D19F9C56DAADF18A81462D15B80F221F5BFA4170DFF279DB429389373FA593
9343E219800B2A2983485854C3F85C23226C8485F76F03F74F43ACD3D39D9A48
89A9EB3FD61BA8230420605CF710F3F8F9CA349ADCEC32B189ABD4E27A5F934C
3B6F1562411763167564544AAE8A38E222F72B4C3407D5E9E2353E3649C830E3
64FAC6F4F34363EFD48D511103FC8937F5A06746316EA3BA5D32EAFC7A4C6DD8
5C0C7B4CCEC88C3F4CE75BC2C017DFC61C811AA1AA6CC2487CC5A7399A89C8C9
A42D2990C4CFAE88168E31D07C8D70329A866748AF397F2F54977C98F90BE294
5E60B696D3BD92F0022A68022CC475E6FD44F38AC7300C3855F93A32690E7C09
7CC2BCEEAE5D6E504E1147930B19171DCCCD46DE3D034491DFF81A65187B5209
636946F8CCB554F7588FEDE856924025E0DEF52E71B25226F34A7A00DBC47CE2
26A5AC19304F3D8A79BA00DB3C9F9BFB3007AECD9AFAA6BEDD5BBD343B60F8D8
34837A77BB8BD35B26412ADE41B1484D26D874981DC807A402F7C8BCC2909334
50C4BEE891161FFC2D72F4F7EB1D043E0B8007F6838A24EB8D50BDF56CE83EB6
197E55ABAEF25CD3B00850DC35FB04DF31DFCF62979D79DC11C77A970AC8F6C3
68F2BB41AF2AFB02F710345CF8B9538565C20A91BA8AC26FF35F229B36E182B9
1A94331CB81189747DEB54C6F31A53500103E6FAA520A0836AFCA4ABEAA3C4B5
83958040109438694C7523DBB563F1740F8AD42BDA37E6AA7C2A6386D82ADF30
2984B1B3BF2DC5018BF7C9D0A2354C8DB5857C649203976660B86ADBC742C894
4758723D7C73169C4ED286BC069732F9B6B023EF305EE64C39B848371ADD66E7
E492B66E25B73EB645BFBDE5EF61C34246F6A99D013E99741EC328E67BC6BE3B
A7729EB4B1F67B19643DA806F6B51F9AEE640C464011E5311604F96830D26038
BBA7E5CC7A6E2B1761EB700EAD5505D98785927CB88E1C2DAA2CDB7E4259D7CE
C79E9D8A72373F576EEFC5D0710154F55FDB82B037639320B0D7CEEA164520E5
13BB62A97FEE9817D37DEDA5B0941CEF140003BF2C1E50191627082F9E93D907
FDCF886E0405582FDABF80E171CFDBBC72D1BDCE8B58EDB26724CC073A1D9095
66BEC298CC17394320769E7EF263FB499A38B964A9D761D536B7AB538ED110CA
44939BD98B4BD86E8DCD2E130D9352AF4A09F9F33E0C1480D36C2DA366453353
C2138C9583F578506C707A5B337E8193EEA5D8F8A6D844747A6AA7CC770AAD68
30D92CE9A9673B6959F2008A0B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF7232E92EFECB8A31FCC7298239D720
88501EADF4174BCA75597DEE340F0501D04F41481153D908F570A45B4F01B414
88F1A77C83E9A00F23BB46D9A3CBA9161F85012D4F0C075378E78D21995ED64E
84A11757CBA9B9B3CAC171B77F0A929DEB70C77C1FB488832E3AFCEB539773A5
A0EAC23087A1423D6C1224EE53A4D702C39F013D33C01A3E3AB6F8FC5FE225C5
1FE22F69A067169DA93627BEBAF57FC54EA31A7C2DD22D88A00E64788A7B529C
F5CB576DAD8A569A91A52BE5DA54E9306418CD7E169510940A9DEE27566854C6
F8A68F80EA54B605DA2A24067F2222B7655D6A3B20EFD4515E054206F37E3698
DD216819E3C86A6D4BC4D6DB32EA41C57E7553FD6F64C3CF84D27DB099D52B22
29DD4B026146AA109B8F5D75F4543F5038928EAE408AC4144430545AD5BEDCB6
04A9DAF5C11B71CBDF3C4E1EBB9E5FD5CC69EC0C3A2B353C3C9F83FF28F80357
579EDD6AEA8EEC99E2094E752FE7FE13167E2181C9DC6678342B6366D83798B3
39299E81AFFC6D632D5BD47C7B26378CF68FE3EE6075C8A819E7C8275CA8BB73
BA8C3D531D43BE82C54F26432ECFA1E496BE684860C4F0BC346F1AFBE987A697
915D392374C91902C565950ECD3FAB2C3F50192D2E01AEBF58488FC30A222E43
11671757DC3E7CC6F7C367CEEF86323A8C2B85B6508639FC3EAD7ED5D22FA279
F7A15337DCA7EE79961089C467D3250CCDCB5FAA8A1AA52DAC77F08BC1343DF8
511D1D8DAC78A54A649A74D67CCAE5BD42F4A038400F81FE0DBB4F73AA48E75D
611AD1706772A7B3B87B1C96EB0CA9B8F7552E3E030D71140AE06A820D6F5E20
72D2FBC5D75A7FC59B07FC212DEAEFCDB2B5D13A46BE14E2BC95FBB7BCC8D0C7
369D870BB9976CC897448FB8AFE12AB1890CBCB6A699D04482E9BDF0B45C30D0
812C5FDBD9F110CEE189C6B3055B16A3E3B166D0BDD96C88817B0EAC0E683871
1D84CF1A9AC65724E0E7D567B251791CC3DD9840CF87F65670B0FCC5F91247BA
7407CC920ACE6D50AFEF7AC105B195BE02D61871F84D7A0176E8B0805B46187B
C717DDE20B991E85351DF40B511C640B61DE8B924C7B753F6E84A961183B06B1
2F9E0DA766F8D6703E2E8F05F37F1AEC8F80DD5C3E2745BD99327F68F2B30986
B8135929D306960B844F41E197EE2E537D9B9B0814DDD6C9781B6E7073115714
060E5A676716C27881683CC8E7EDD5916124CDC3BDAD503879F903489FF232D4
2B0D6046832F1921A693E35692E7841C88354C17174E3596DB81DABD05081056
97EF2C358A9E10E11012356AEC41F4D52AE253C4FBB485151A410BBFE1538F6C
80F41B1E6A41155CFC76564E6C18A2C9EAB8C268A8A35776182CBE611105BFDA
E3F0134626FACE3A2E739E6FDE971BA80F6E5353D19FD21D6BFE3C49528E323D
68089E3A80EE80B36DF4ED62CF8E61C1D09DD449071E7946D81F95706CA03D2E
FCB2A22391F96B32977C7CC1096E74BC5A4D0DB6EB5FAE6FA51B103B1C528119
2A8B373D444D40AAC906BD6BFDE0D3BF7A096CC1FA00C510884A36D5F9AD0026
521621F41AA3D7E7FF53A9288BE6C9745AA59C36D914EA4E82B0442F8C580C56
911A4F84265709195AD7887D37FCBCA876AB2C506097C7690E4149CEA9B2DEDF
98939FA168FD62E9FE702AD843A5DE853E772A42CE1DA35C764421DC007B6A16
6E717D41646D83D4055FE8B2206A14EB68CC5854E593A5F8193A7F58955E2685
077F066B5579A4C94BE235A3DEE5A4105D2A404AFDD6947B83E8B41D29EBCD13
C0D5B8DB87B06C71940AEF733F876173A10E1BB40C2FE0ACB1C2930602D6D974
031F0A1F2B7B3B428824F6CDA2F1671CA4665B28B641A6EE6B1D7C6AC40CA6BE
E292CAF9D031C906482F5BB381BDEA1930CB142C067CDDEEC94B040BEA532D7A
9D9B0B899F9846C53E3A6CBBFC74E769957F893B47274D3532691419DE40E68E
B2735C64C633E2CEF194ECBBC3D06AE71A9AF35BB0C43821F04EB582C1470BAC
AD9544188DB3C86BE4BAF81F8FB0F98823AD20D45E3E44D28B015EEBC79D08A0
398B53952E236864F8463D3EF494ACFDE206CACB7FCB36CF08FBE087A1937AB3
87C40CFD404204BBCE6791CF52A33FF44BDF6284C1280A05B1EECE57438D4DA7
0EA09670BA6F90B8E9AAEA58E722CE4F82C0E2ED453D6CA88C5AB901959BF7AA
D4E6F7706C03BEDD76752A0A88E368CAED5942699D993861B7CF58AEB9219C00
6F378B712A5BE446EE01B9F472A735385A36AD7D9AE659559E9968A8EC3C03EA
A1F169C484747D6E5D2ADE6B884E4F0D82C3BFFDF7F6C4CD3674C7A12473F85E
934A48B1F3F68807FC3021A6D63E508E3FE77B38CE49DF3913DEB54B4E31D868
7E16835141BA351F1CA9E4C9DEC2ED8D94E79F8B5F328731D744205899626C14
FEFD0D2BBB9BE708C54FAAE519616F219E76074EB7EE129FCD06E8977851FF7A
7EBF1663B79159BE99419C569A573A79CCD3D3BC8E130961947612AC03E509E4
E648FC75E7D77B14571B11FB879018812A6464753A3E9EA65B23B88AC8FE79E6
B8C1A4F0AB2075DB178FE0B0A2DC35B5B7DF7107BE156242B03DFEE967A567DC
7C4A16D1935B17E70FDA6C9CF628FFE1AF092F50035966E233AE606FFD42B435
D380A8F5B79B9C0736ABE7155BB8AA34608347CDDB20718EAA7F1330E7FB92D4
190038370FE36D559E4FAEEC1101B464EC0DCDD454C386100AA9C79D45CA1155
D4E048ADB453916692A8644BA44FAEA234F6B3CA6255FD68AFC52B5A86076B18
F75F0E16B4265901F76DCE431B69A3F44CD0FCECCE0E9E710836AB97CBA97418
153F658072A0443B9CF527C109AB896DE19F67B9A9EE74E5308AB284EA563D7B
55A650E2D0BF420106480EC54E8EC96EA4CF456EB1DBA3DC7A94213A35415EE8
DE6DCE431488B5C8203FCC1E530623D16885A589F40B49BB4E32225A2FE1817C
C70EC57F21B7747A0A2F452FE8C9DC13FB7233A407AEB2BE15DD65E46C11ECDB
D527C46914D29D51438C6E01844C8626496206B55A70BE52B97BB14E870AB407
717FA84A5099AA896C850E231E5AE467787123E363C508079D3A3435FA248CEC
F853DC2CD24A20558C0F4ACDBD452552FAE615284D90850B15BBA561D82995AA
1BCD9991F8D63F5ABD8CC4C5663BBDF89DF0F6197AECF46F2749288C480352A1
07C4E1B0036DAD5C10714EEFDD6ABE83B3E20A31FA7384F171144D38BBC8B837
7C93C487C0C3D40B0C7FF6BED0754E475345008CFECD298979C10010D1C3524F
6F89EFBFE5F798FC33A9624992FDD95412A61ECB77C6A13EA6C0D7BA6C1F8E04
957D175AD09AC73D90EDC6C9D0C2AD47B679838CD6D77F547E9DCE8A7DB780D4
F11D2F853285E757B64437AAD1B718404261224F728990E5BE3AE4164E6FD387
3345D2F945E28E9C868BF9CA911F25F42C60B292811A5BDDE4330AD6BC284DE4
19E1536A3ACBE3D401AAFA41330D8323668C153A04095DD542E77E5AF2F95B2E
8B4EA35401C4BA75FE9EC168A03B19AD60293611390A4195C396729D6BDF0F5B
DA416DD0F3DB2525284851E2269FFC8EF1D3E70CAA06FC17BF0D32BB19F36141
521F2D43FDE56BCE6DA677FC50638BB19D85EA5EF8B30DCEF2066571440300F0
BB4F73F059D8F91531FCE23245071CF2D0CABCCEF445BC0573225EEA3028E769
109A3CE8A7B96755DE5115610081CA4A3DC88377E16C1D7DE5E44A535DD90A38
D9A6F44932C2DF98C835096A265A2C3BF4126EEE53265978F922B765F110B015
A5AE3E482FC5A3E852F44A528D29C32EA49B9DA7471032F2AEC81C27011CC6FD
FE256D90E11AEB19C10A66F848BFAF8AA179E6D77DA6D918EA5073D1EF5693DB
67B83AB959FE7755796CD5FEC99FC4797601B3B3D420CCEEB0FA4D0BBB52CA2E
4B7428B5428706AA068952F0A57E929747885F523AEFE784E3AD152C694D4DCB
A15B3C80DC07348D5C04F3C3D62F90C54880E3A6584356E881191BCF9C3FF4D5
AE852D947427AABA7A146350238B1116F234A98AAEDF853C4B6AF02851DF4D7C
827324AFFD520AA51E86D4AA3CB2C5C1CE36719224F1CB3E757FEA15B6216BA7
870E7F619643935E3AECB2F52A58BE695E4CBD4CEED62E6AF65063DF739FA9F9
046142524FB20372A411705575254CD6BE941653699D7688E05CF71AA37E0949
2872199FA302572EECC5C113A98F648FF65FA074AD2500BD037634B3A3274299
14C49507E9B2B1E2965119961288F1DF272E0D026B7E87234F09C3FF1F6E4DD6
D7D57FC3482DAA0E393C9CBBCE9A40D05FC94F6744FC1BC8E03247DA0247C927
67A66FC82706705826819B52AAAD0B35746822959E95B02C05E78C1E42A8910B
4BC916D798DFF53D9EA9740DB0311AF7EBD92413AE4E40B9175F83E287BEF506
8B17DF269883A7C93144E33BB1BE692FC1E762C5952AC98F943AAD126C6C238D
E24F302F6785C5F01ACA463431115887CB390BE163E9E1A479134DCD0395B5E6
E235A58C64DFB58B7087525295A1AABF37E3C1B6D3DA1F1ECCAA7FF5B103B7D8
919E60BD887421EBAB58A66EE5256C9FAA7A79C2F4209D4105814879EB274718
A3098FBD5050F10F1BD509718D7A6C56474150841431FD101E6845E86669BB3C
44CAA1BB6D721284DF66C11915E52424EFC6CF0C3B8B1ED7AC1BC024846CA58C
97E42AB0603AA3DB89E1DA1A785415A4E887BDEE616AFF4A66FCF41D02C7E90A
36D3711A2324176C3FCC91D61A550A2A710986750D42A296DBCC071D5B917C50
8D60FF2D3080BEE08DD91C16E50698C63E3355043808F960E2E92A0AB8699E2A
1BD9610F6D0560CBCC8DA0596BCF456AD60EAA47445286C4728797476D9165A2
6F9E5F210EBE9B42D5B573A0F74C3DBE48651F043D4950BB9B407E2AD14684BF
8DC253D15626554AC29D13A506E0FDC6CF5DFE97F03509813252AF777A1B1E43
FC1CAC9C13BE788C47ED744B9778F949763B2D68BDEA255789EA575B7B370A4C
ACDCDDE033EDAF188610CB7D59247D369761CAADD79BE3E0C73D943BF15B18D8
4D47FF1DD0EE15B0DB3AFD189215318CF5981022360E3FF3BA875E736537B7C0
DC4955489F4ECC0B169F12C5C922EF830D2F63C7FA12EA92B713CCB186BBE6C3
346D12DE9169A2743EB77E52C052698A788383FCF72132C6912EFD701E3E022A
E56ABDD4FA95BF8D915F9527DC7B8E6F61A811476754A57FFAE518E5E07299F7
92A4C0934EE8239E11D73AD9BB58142DB0321D08C9DB5A43D2AE7D61EE2B7B87
79CD0D3E7F890880FCFB9DE9652129951610FA663E1F705E7218B46D7857FB33
5448C16C3980A763F719FD21C3D30B09DFF732DFBB3E8B7294D6FAF18B279989
4825F3C1727C5D7E7F33E05A8440755E2B8EDA9D6A7ED3C9E8221A8380F7C108
FEEEE50C825EF2714E97474A53C00DC68BD3C456F77C85E4186D7E961212BAA4
EF0427C4011E8958B23CB8650C7021D9503818E76C24C34761DD7DC1FFFC248A
345E1C66A902060476B523E587A4AB662600B9D33D6AD3777D15E08308220151
C986A7EDBE0DA5C2E9FC2E5F3A5C7123CD251C39970B4F9B36F73F82034D0B4A
D4AC6CBA6FFA11269542DDB5E0850489ADD09149A1017F526FFA422183DAB388
A92A7B5F74A7D04C7EBCA4747493BFE69E08C0A5CB8A6CB143DA2684675FBAED
97C539FDB597E633596DAD51718CAFD2697FA09AB668003F7E9885C50159F279
2FC8F45FDB5AE790578C5E2F240EEAE5FDC59B99FFC4C87D54488EC8BB6BB5F4
16EE5D3D1B0645D5A389213DFB80B2C63790AEE5169BAE41BF058990ABB775FF
D1D1E0EA8096DF40EAF1D60DA3470C01ECDE8A2041AF07876F4FB6094903A001
7D1D31004EBF3FC375EE2D2E9CD5422AFFC075CA3614956371CF4136782135AE
B4DBF906BAD15A22B013FDF3307FB09872AC2065535B6399552A92B7D92D3BE4
E77F760B7940CF7E3E521FD1777DA4A263813AAC365D2257519F57701F342C67
EE05B6C95DE8B2206A14EB68CC5854E593A5F8193F6717D0970DF3E73DC48746
50CAA1C636B894E2E3CFA7D6F4410E1726DBAB2BFB7CE4EB53643D34E72035E1
BDA33B522DADD16B8AB70C5D4FEBA843AAC818578EB4A5B62CF2C6B07147C088
2B362EF0098AE31F54AE93A4CF8B9EFCF6A2B3AFD37B226C0F001E122F964A30
F7E73F7F0B938357D4DC0527C7352BB651292CDA73BA70FD2B460B990DECFDFD
DC952D0E56C971A6BCD0F27FBE661796CE79224DDCC6C93CFF2DEABA293EEF5D
391FE6E3D1F6B82646A84B1EB8BAD70D7EE4237F6DB8E5EC3A26CB71AB92E019
885AB09D68B214CD9E3FC7B84C0B4A8233C659668E41156536787959B5D7FD35
C2FB82B3C145AD5AC2F89B38D7C875E95DF937A07D81F0D7B8D0DAB12F8782BD
E021B4AC27F5907A6D8E5C341707C76BF8B20547A2A7C46F5928262434469B48
BF7C58C1343F922B8EE065759675A0507B7DC70DE1120706FDFB5FE7900D16CA
9BACD6568DD26363EE3457B78C6CD5B4BB830821A84B0C80BAD3B547D7FA628B
86507E9E71732DF9726C260D06CE4F2C309D3C37BCA9179DAE71D90483721A8A
768518D0095CDE29B2BB843A335F11AE5C2F4FFD2BAA53E271A305ACFE81A47F
E959B2B87FE13DC290C53819DBDC208B3882F4AB8654DFC013A368FCDB34504C
FEB041571D399F87F18F73A87CFE2F881D676E5928262434469B48BF7C58C134
3F92242CA1F27153C874D9E7D1F2FD32C072BC2159FC8196837AD7B53179A5B0
BB8672986BBE6CDB5E597C4C4388FC52AF9EB2A588BC7CF3561811C56D78B988
4CAACB562DF0006C068D23DA154AEA2540D77225DF91E5496027A37B3104F600
A41D5788F094FF49CB9D4D9FA1DE350AD6C69A793520439F2A48753EB466D4E4
A427AEB9E60BBFAC729010F849C648C2579CD0888144686AFE62D85FB75E6449
50CBD5B5325C879B537E40FD39EDB5827212B89BC6A7396BEC782E446137B448
F3377DD8F3C7E469B37CE1EB1D13660424BF4E4D11A3A4C872FD2A6DDEA95934
B3F0B45C30D0812C5FDBD9F110CEE18FF52FA90AAEEBF7D3D24A68201F5886E3
81DA2EE4E37E04CFC879DABD78E652C2F30BBE9FA4778FAE7554660050C8CA84
5F90A6077DF80FB3B1BBA0FB4E5A756E1995D3B93897BD2AD13EAFA579F91F53
4B15A83434C1E7B34FC63000F1EF33D98A09B085A9B500A01AE277348214AB2A
D40AEA1F8849381514F8ED45B88C207D9F5400276E7502D8CE2B5C7CE0FAC02D
BDAB88E34AB383241336A816F2A6F8BB1E84CE36E93B62AC496141289B9984F4
688753639624B083E54D96DED9F125D4941EA7078E7984BFEEB4D4C3FB25C03C
52DB154B167360BA02BDDA2511321E80C24BF2A9A783EFBE2179B7EDF5572F10
AA33A0B045FF5B51964A0C807F4BAB696C35C97B1654A105DD84A54DD0385F31
0930C9A2017FFB5C007D08F39309DDAE70B0080BBB449E5E733CB5B5E95D205A
D9D4EFCE83B7F46D35AF2517C19292843AEEA330414546AD4A13953D17C8E671
E52588E38C32E5A1973EB48242C6CBCFDB8FC93B6C6BE0ADB96E43BB4ECA0500
74D7A7D21A03DA3F52C5314377CE0331A9929BF1028022A2AF331F5D5B4432EF
5F400D86A6F09F1CABDBDAA79807511D4E1F41BCB2C690161C21EC1C120CB307
20225AB3562BD4C26A26BA90F16646F6A148F3D78B0056DED9C4C8515515DC58
1FAD7344F83686226A3B6AC4F58E0B851B8B30AD1E575C6ADE5FA46BD5140E2D
FE296E2060B87D8778243E1B814D94C1493B6302056B691D0D1DF7CA971E3466
07B73B758EF603327B307F8542871DA6881C949111B356F9BF5E7743AE01A5A0
0FB72AC9AD7137C7F05E70F42C45D26F55C390663ED14F6FD2ACA6B8303BD371
0A1EBBE5F3DC5BF93C3A23668320BAB75084B1CDE9C27EED1B247645EDB0EFCE
94A6AC6C9C9EE4A9E381B10D1A048E7EA4DE356AEE02D52951053372FE550B75
2D2053B3D07815B6A7025EE6E12A9AED270D031F0260B137636B3327C4E56F85
DF6DBD32C2800D15C0338FF180F7D92EF581C3FF620FD9DDBF7E25051E2F9E88
17FB8E1EF293D5D7FCC28E35EEEC0DDE35C1C2D5B7F7EBE4C9A81AC300D74CAF
8DEDBEEF3F6183BE793D708ABC1DDFCBF0C9F61B80A9020E2132EA46587FD562
1A29ED495AF3AF836072ED471DF04F8E9886F16E00DC0454841956E4938C6DFD
9246AFC12EFDA830553A09A1F34CF876D6678A6689DED9CA268054CC6A5FC0B4
8EBCED2FC67D30E55B2FE202F05680292E5A076965CB71AD779ACF9A9A2BC316
5FCA696907F097157BB0FB68345A5FBA715467566EFAD2895FEE699F98EEAADD
BB3C6B565D26A2376C22465F9A65E4C9E9432B3DB333A7EF838232281A66C703
43B23DF1F3A9B580806082A123CE4EA6B9DA529EFAFE44BA7896AB1315179B42
DE0C400031C01B3AD72A4B03011FF98F9DD26ADBFA97A44844F2C665A37C0760
104E67800C6B04C02E2FB6C21028D07D9CE00A8F8EFE3682EE830C395E04598C
DB8188CFE38D941375408E2913883DC329C6D8432C36A3C34738E8830BDD590D
73074C40600FD67B79A8EE5E0528B365B9CB4F7B4013DE961F7C7EE246723C7D
0B2294E437DA62F7E7BB4805034C886967759281E7329B66AA51011331277094
5D3D6C6E9C1C24AF51972709F3D504BC54D97E20142EEC78EC20F9FCAC3955ED
011928C2CF92AB6B1663182F8B6AC1E711AE61D7EA754CD9D0DDAF35424D340D
19E97D15F17FF840B02304E6EC354780B61D6065BB27BBFD47F28988BD59CBDB
B954D765955F91EC0F7907B6BFCEC27CB57E04EED09B48D1CD1E990CE65FF41A
77C1D1AE34368E79712A5C16BE782B9C5CD8F660F1880F19FE0EEEAC872A12D3
DFED47EB8F441C345A584BA500FEAA37AD92B47E760BBE2F70F0F2D6FDBA0503
2A4EB1FDD7B49FA36947816955434B066C0FCCBDF36529476389E14FEDA66F60
0206E406AF1FA6DF09F8FC63B1BB8516099A25B24C0EBA662A6C2B2E26917D67
4ED5E27808A433AC8E0C96E39FD5FAD68FA210CF70961EA9690651B3157BEDD4
3A41ABF4239D4A6BA4E313A646C97BC507260CAC9DA304AF0366ACC825D5DE37
506CF77D970869B0EE7F1F6FE16F8F1C76C89D1266566D764AE1616B224DEC1F
466ABBE25F62DE85F95CCAB169C4DB747D16796899F819A7F9908A29075AFDDE
C81361853FC84298A55EC7D3601440F557920730CBD0D7304344C3AE88ADE6F9
F3A9F56AD61EFCCECD82AC1B3D67645031C3956D6E0B353DDB0209BF0C8E3B79
20ACF2F7DB5B5884D394ABA1B3FDFB6E6CE78160EE1D6F71CA2116ECCD472535
BD5F2C5118CF6526BFB304EE0B1474C817346256259A858F706B6AA311D5E944
3C099CF853DBF0AE890FF326F4E925AB2CBDF58132FCEE4AA0A4BD2474756157
053F82B3F14412B0D81470F4532578D6798584C2B8D2DDD88F70564DCD8D03F8
905BAA1B6BB36B169DAAAA9793D0DBD102AA25E4E522F5E50F16AAD2FDCA92BC
85A23037BD3210F6AB451BA806E6393849101E18BEC7A474175434BAF939BD5A
4E8EBF98755417A2C054592DD135FC7DD99F76951457552073B3104682A41E6C
9AC6209DF384C9B2E9E9B52AAB4032CA82E80393FC1442B0C5AEEFEAD7A607A5
B5BBC5E1DB6A0DCB8D0CF788A692051D344D5CA01024B33261751AE621398D70
90AC32EB1EC4FBAF12BA4ACF3EEAB1254E19838D34098B3C2A5E1D19EDED5243
FD1232DBE09824E2A2C906F7063F245225AD871DEAED85EC0C7054E2711EFEBE
674FA8A7DC391E906EFE68CE9547B5F5B9E5E31C89FDD31AB0AD01161A830C6F
28320573AE4DF86001CA4EA354E74DBBE94CAC3E80E4333A6A1B1C21705F8B6A
C6C253E91AB7E158AEE72CBFE212137A07EEA25168B07C7B99D62F76E7BBC058
1A708D05C1DADAEF5B1BA062C336C693A19F91898A1A9271B63B73ED164863A5
BC150F486B1F993002C16F47DB0438C4EA453615A2F2CFF05B066D58D1A7C781
2EB3108FA5DB8BE3410F070E6B14953C3020418659DEBBA8D577CAC5449F0210
879CB10B2751443B3B63FAEA0588C92F3D374F8563E820260D5D650011286F05
C471EF35FFC55D5CF592A3A04583F3C62849C4D78465B5EC2805979811E2B3FB
3E189E58246B7F96A93C8201C812B1A690143DAD6D8114B7EF03927ADD585F2D
A9A245682C995F09493002485AAADBCE70EB2900DDA4285BA404191251E6650A
6823BF82336BF80E509A7906EC70234C0F5E53BBF5F0207308D6FA8F9D85AFB0
092E7CC538FD5171AC0DD2EFA01D9DEF28F17A119778233BC07ACAF609F5629E
BED60DA4E33DF29F19A0DAB9F7B6EF8C41FE60543A50546B12D7E7DFD1323DD0
0115E861927DDEF5CFC3028CF28626B543530B36E4A0FCB1710F359B2C257C3B
C5ABEEDC11B734E3C38FC1840D55054C2480C19A4FEA949E6D09C83B0872B573
AFBE9FA688C92CC67E670E35238A3CD6641BB36852FA54BEFDF6EBE5ADF45856
C2D4B3E89F899799A6D881690F8976A6741223C7887803799512DD91FBF55788
BCF145F12FE69116E3F8183E657CD0B8F74C19B415EC985DC1037FD755A0241C
486AEFAE49460C8426C440F76124893A413B5E9942FF452EC708E2077FD4D180
46A5AA4DD334B03F6E7953E369454F04F9928D160218AE7A4CE00B3C8CE8E62A
59C4AA33409D7E045F12D1F3BD0D223039D025918AB0BDCA95F33B94DAED2909
813121F0ACCB72A0FB53FD7690AEB6705EFC8C1B91A7E4D8F38D8E8B4C0ABDCA
18A2D8A844B5D92E1CA5018952C15978263612A2B969E2120540E9B655EA8095
7324C4422EFC571B8AD6C04DB0C80DB8F898FB2EF1532358378FB54AB6996CB4
B6EF5A64974CCB30B949907BB3E7B2C08A84829FAF7008D91B2AC18F29F582ED
86C802B60F08C7D6A1ED696AF20EB1094821B3FA58FA3B94681F9FE0EA085597
9B402E14F74A528D29C32EA49B9DA7471032F2ABA46A5F6CB21ADCA3D5069A27
2613C152B6F69156D2C859B38DCAFF5EBEB5EB9167E0843A303CA49A5C39E2EE
B55E743FAA61D238B701C999456A8F6AB15A39F8910D086347D5847B01149AA7
BE160E8E7E7F3F8DCCC3A0442017714F3A75778650252B780CD0FABBA939E1FB
405D3B523314368C4447A48729D515E92A073F7B9D88F0D6954F57E960DD8EC3
694BFBA8862A330B515EB96D8AD4DDC5B0EBD0CA452A29CFEEE1A4F981B6E5BD
7B5AE87EEC9595E8C6E7BB26824CC8B2C79AE5C9191C0D6DD4A64E1F4023DE16
6B663BBFE5374AFCB99E070F61820249B6243AECAD6B0AEAF364AE4C80E5607C
EFC404E48C56F4A4BB540AF59DBE0128C6BD42F2ED51FBCE81F238B12B680C71
900542119D707648968C095F790AA88F335B39010DB81CBC162A0F1F53CEFDE7
14796C6BA45500D5ED65925229F55181B42F9ED1C700A86FA8C17D4175328E0E
6E8E605095672AF261AB6B19690AEB1C1326D3E1A6AD802B49D63A8F25ACF07A
282E73FC996B5D111D507246247674D8853C2E8CF493676DE5025883F4316FEB
64D096AB0FBE450EFD0039F6554F44683D59EC4B6A07A18A48074357B4D3504B
3FDDB19F5A119FC9D641FCF55E60DA617229F5F1DC7CFAA7895FE9B3144ECA82
1F9619375DE53969FF8398AAA049AB13ABB4549725090BFC15BC61EFD959E669
C7C714D51ED6693B0E9226FB6FCBEEC037C3D0BF473571C726278AC571215229
55F0565237BE99BF7D04B70E643F385D6B52E2CD2568CB71AD779ACF9A9A2BC3
165FCA696E03BFDA1464B3FFDE2815A6BACAEDDDB401E521BB50A62CECCEF5A5
6712EE5E31D9C4ACF0AE7B3624DF3026FF8C6CCA0A3916CB5CB089CB3131235C
701CDB627AEFC03826A84D7F107C96C42BA51ED8CDD5C08077E7FABF6A51608D
00882E10C83467D1142617E9211390F8981D4EE46C1FDF53752834D4F9B07FFB
B4169B73AC66750C0E1A7B078B300EFCAF0B813658BF7CED77BF35A0C7CAB0B1
69A926CE4C6EE2AF0A4B6DE0CEF2F2D70C95285622E8664EBFA44D54979C5CDA
A07AC107FC933855CAFC4A8D6F8ACF04AFF5E0FD2089530EAB32D5463F7F58F4
0787330C9C58906F319EDED580C4B25CFCE2056BCCEE9307D176230EE136763F
C08181F7DEC393D332A2D7AD0C72BE82F8C2038D8D82B878E485206155FD5CE5
3554E020E54C300F30BF572FF87F5807CA8FEA7DF04E7A24E312046CA3F462ED
BC718FBC25D1459F04EA286BDE84468F432525DEBDAC0B2020E5DD644D9E442B
AF38A914730C78BF3D588AD14BAC378CE11E82B60C3EE1A85AA98C564B60FA5C
65BF5E5DE97EE4627F41E21B6B86F75FE172D9B6A53E08ED0E975AB71A48E093
6AC92B6A67A10C0685ABB3E2B00586F0EF584652EDF6DE096070F045637BF6F4
6DC6CD4FEA8E19AF7895F7BDFCF4DFE521571C6A90094CB66DC886E838EE3B75
0A3E09A2196D7DBB8079482AD9FB90DEFD901C21F18FCE12ABEDFE208214A2A4
7DFF9A7F01AF160394A46628924C04B66F6F3D43B24645877CF940CD9F8CA7A3
A1C0D2E74F6694ADEFBD2DFF922A5C331132C66237D8F81688CAF0598155C2FC
C481443420FE970DABDC232178A0798A4C8CC0B245CD3D2D0A0F485DB3EECE7F
F2910DBEBE0014309A50469078502B3AE76E9ECEC98954552A3B63FAB21D5E44
574A165BAA2D71DE4BB29FA530DD4F4AF7C95F8AFC2CD53E4C58BE4551DDA39E
0E690276E4111D98DB68BE8603D775FA4BE52C24C5F0B314B9AD592071B5182A
DC0AD0C2DB90A927A457D101D3704CB68AC68B84EB9057E2E6E1F6E66C10438F
67C2052F37A3183C8006EC35503C0A39A5BAAC0D7009159F1C03B9D936A776CA
F7EAF2F56DCF2767A736BB21502CE810C56D0D8BCA957857BBF8228A3E61CBD4
9CAE688FAD63CB46D727A660BBA63CF79C87C6157A650B49370F2CDA26ECE396
536669217B479CA0430F807D13C5E1388526C3819E9A62EDFB53F14E7E4BAC40
A3AE0CE22DB236881EEC579AD9AF1ADE1E4EE61B8A881C8AA86EFF3D193BD3EC
F81FEA8864EBB1FA0DC067A4D8BC112D2C5289E61305795931B9F172372AC98E
AF2399C7286D07B7877B352D5C29DDEFAFC5893B058684D52025B188E06E96D3
F725A7708ED2BF92BE531B16D37AF9CD910099477D1896D697B81054CD0B1DF4
1BAE286EC2551790CE6F8753B6B05175EDA7F1A25BB7E768466CA2765C4F3288
CF3F5E2BD715DF2C18BA57954BFF814EE60B3C43338F5F95A83ACF290FBEBCD8
6F2616A16BD905BE8EEBEDB39DEF2C180E8839FEF863D3C64E1B66C4CF53B78D
A019EC901F8CB882D13780ADA75CBCCEC396345E5255CEFF1954A1FF65BCD88E
893F4BB49BE4DB689100E2EAE5896DC1E98BA886982D6D5DD8F8620EE569599A
47680DF96D92D8BFBB2426C8A6526EA144ECEFBB938D93346EAF3AE8FB789C75
31FCC9C83C056FE864C5F9F9F51F34BDD076DB9A8568BFF884C6166714F6AFAA
5A8301F7DFA3524AD3969B5AA16E026C807D7ABFF5BA54446107F7D886081083
50947148EF67500A54BD22E4EA8E353AC31DCD70EC04AABDFDB23545D7299178
994B8DA7A60C446DBCAC2DBEC7BECAC3928066BD5949AE733F128FA4701A2377
5E316D9D27F68F2914E39B4CBBB092CD1B70EB5F4350CEAD45ED2837629C4DE4
DF9B1965C21E973E3F84D6B2E84C651E2C2A9A5657CEF8B652A8F1A7E66D0D3C
60AB50103F49DD7BD01F6292FCE86C28178B06F65F0070E913833E87535CC999
183D51C008EC7531CA6808C32592BAB1816BF10D8E9602137532C88DFA94C3F3
02C89C41F8FB9426D76FC8897D0CC0A7508496EE2A6B412F9FBA2D7218262B37
A194EA4C644F2C3684553C5C46FCE745EE5D9558B0392F702D51BA8E96BAC334
05EEEAF0E94641040F8C180C6D51ED5B06D03E96799FCB68BFB97B90B56765AC
D02A788EDB101BC3F17F0650F94223D4EC9D5F50FD125C5CB9D064D47C6619BA
475606886D3AD63FF7D283391B505A255092043A56ADC48EE39B325C247D2417
21AA25F66AE6686AC16EC4621A938B203424FF349C15B07762109045FAE9CF08
288F88001B32DF39D271BE27B62AB03992BDE2C2DAC4378396837AD7311AE2C1
F9A97BD2AA5FC4C8113A54704A4035AC88C8962B1E30EE9B07B4938FE412A7D2
EA13DCCEFFC9C784A53FB40DA37BF07F069DBC611A41B5A5BDB53A9752A512C4
08E1DAA30785F8BE8E3840473DFBA5C2265295A24E0019B4DB886DA310F17C1F
2D19F663FA5CD5CD95A74CD62B0F2F6DC5E5CF7A2F5621EC6DA8FCB73FFEA7EA
B05BB427AC1D03953F8E722186EEC417AA6A4C7C88B984A65408202616DE0247
AFE827CA0EF779C62D4E7D5BC63B6F613759B68D114C65AE4A8CDC5A76DF1739
464D43E2A6241CFBF3A23713F4ECDC0DE8412AAB326B539CFD5D62C58D747E2C
3534CE42EE5A34F99FC1E45C3C9D78500A0466873434BA54F4742585F3A52A22
28B190C227F5E7C56279023F77E9F14B72007B9CA516E9209FB94E9A96549A1F
99C8357406BEE5B3AFBDD4AB9D9D14DD8DA76050011415D3DFC8649585438170
34E68251409D5341725B73F6E22FF480B57A63C505C2A9AE8EDD0D34A23DDA08
E590FF37D17E5774DA104D070B704B0B0F77B6A7B8C58C33EEDDE833059E8397
02F5707A0BDDD302BEC9229954C056A1DDD7ECA01F9C49DFBEB24C94C93ADC95
4B9B3CE6336AEF3A87A3AF742352FEFADB83DB682DDC2A532BD79C6B8A212253
1BF23E9A7ECA5AAD5C3053870865F5D27B234163E66FD21A90A4BA405AA01889
59D96F399FCB89714F23EB633092316912DBB68E47AC50569F13E401F02347B5
CE65D99A38C4418DC22715F03EBB9E9D6CB0B83C00284F0663CB1640102F3409
AF0E16C54BE328F1F84E5524704E788808F85C056DF8D51FB2F9D5787E9EB7E5
A259CC404617084D75CE65F2087210D2EF84B7221BF971498AC6B29DFE3B964D
760B2052103EF27D6B15CBF564DA9DB2690658A3230D245348785C7C06D6F288
2E1B83761268FFAA3FF8A637E2DA191CC0D176C7FAC76203A0DDB7A210A8538F
7BDC9AB20E75216AD5F879BF4942757D6D417091A1748D3546436F6BCF2F8568
AD276734D678F059602D8B97296FBA91DF3AAC55B22C8A6FABCC3BDCEDF0C0D6
DE52905B69130CBC5309A154B9B497E7DC0EF8A7E879A56B7F57B61F2D844063
AE49E45DC671B52100CE182F2F619C3357EE3E45F533F4D8C402780106222BC7
E44475669445A71FC40B8BD836781372450465F74E2251E57BAFE61372CC6312
DD01F854ACE6313F30CE2B5B598DA56BABF07B0475963E9ECE3C73DDC7CD7280
9D79C1B7FD27227E7933A131150136629D749485F4BB3756154F7EEB8B381D6F
AEA409FBAB9A700C0715766A71803F1EDBD6EE5E20A00EDA06D6961CC682212B
96C99D933F3745F40F0B1A818B28132D2BC8C912F69400BDC3B12718A5980CCE
FA92BA31FEACF595B034B71892C454F5D7A6DB6F91B8782B9C5CD8F660F1880F
19FE0EEEA971A4B7FEFB986E110066561D4FD8CFD7A2FF1DD676D745F8C7FC33
86347A4DE13D058016EAFEBDE6D1D60558389731756044BF3BF1F5F6F20A1793
E9BD4E608BF6F493CF68B36A32B2EE0DCCA899821B38A2837E1A909A706B5DFA
E2BB2EF36CBBB31824F931FD13C369582C494BE5F0D320CC36B4125B29229ABD
3EB22CFA68D012D86D63E9FF55A6B251345CDAE8AA65D67017DDD676314C14A9
F7DB2216CF619AA1EF1065CC453687D0D9FE3A1B4411106895AA84AC2CFF3C2E
2BE6D19CBF609C322A6481244A961CCBDEEA05C44BD11A6DCDB73AE5A9DD0D86
FB2FF8CC57F58AFE1596883AA307D2F736B37F84E72D9D076014E6CABAA1A514
9E3FD6CC9F047178821F48402FB7D7DC57CD092B32452885432DA0B395523EFE
B6E118FD1D41590611E187F3B9949ADD65CA6F816E51029EE3545DA9D2B311E6
B39E6F4739DBD892DD1FB6D2BEDFFE88F8BCC7AD4E66F5712651DB4C7DC620F1
0021DD822449B2B06CC008C4C782451FB95A1E4C7445B7C08389FC4A8E0CE057
3DDABD73074CB37A148CE5D0A3E06A4BE3F582E89E31DE5FA37E776AEC1BAD2A
7E5BD9A38721A46473C309956ED6E1CD7C65156F8D83C3D7E0C7F398B49BA623
D94FDC155DE25D5AEF833DC280BA7B1E9B70A6CDB4660D53291246268801A724
2F06DE10AA94330D7F6BDDC249097FB80FFD5A1B97C01E99C910C1E63155BAC0
21806D4B3379503BC730D70C926D1D46120964215B4D43DE2F14A5B209788C9B
F4E38DCE8DC1B35DD6BF261DC5518E19B14F4F03D05873E8D2270E55FD357B31
9388E0E16B8E3324097864961761E49A78130679CB4C01EA2C75D9DF5377A28B
ED8B83892C68B6248971F83F441A31BE630F2149B2D60169538A9667B84D7E9F
DBB5B983BEC15AC45C83A356B587F9579D049AB0381FCD22FA7701FB64AFF0ED
970751AAB6E47EB2C7D408B807D858C953753548796F2A456AA6732DBA98048F
0825982BDED79513B57E8A6666919E389EC19B609406CC7B8D79D689BD0F79BA
A8A7804330004ECC5E7607EC75EC3DD978C552B3330D7C06EEB941600716E17F
6835C67CB7827025E9211523C2F918602DD661FA9DD5855AD554E8F34620FE9A
AEC1BF7D62EABD1B678C8A58C43BB929EF8743BE8CFFF402FFC204F6D911B9FC
A599D118553C57FED6E45137C2DC704204F89D0C92DE61488779ADF0A36405FF
97A45A994617FC362EFD37CF6DAD983DE25F90A4D4E4C32BF7AB5C9CB8C0A588
CB7456AFFE4EA9276499ADA9EDA14553BCC08E1B92C2E2464A45304EA30163D3
75FC63B281459A2519D59B10DA7BA97B47B7DE08125A0C60391D13C26C29E24D
530C74C2498135C9AA3D95BB4CA0EE512D034F24646F17EEA9700F705F9B9AC4
34A30F3C7C6372166BD935A6E8BD186CA0F84FD80DD12634FBCECA001D875718
B5D72B535C290F183BF30D80036436F7BAF473CDAF449858407BBD7465892B70
588D71B90B86A7D4BD22AE6049537634939B3091F0B92C2A5036423ECDB745E9
61348F41B8B84FA7E5079C9E4A07D6973812E50702828C35E728EFB64264BCE9
A220DFF0F6C95D58DF85237C72E0CBE24E9DEEF3318B83B3317E1449A2639C31
0E4F2DEE07DF4B8D9768ED769D60475F75B0D8D85732DA28DF0D175F5539494B
42176BBAC6D0078BFFD5CA735D0C8963984CCED78919017F8EDC6CA9E24FC9F0
17BEB0E3856599C2BD542B3D446506E8C371BDAC7BCCF2FEF8C0210A261BCF9C
D89933A0B74C8C9D7DE44D6777D90532652F6878263A74ED15611FE6765657E2
9CD7C487841B07100697EB7A46FBA5A77CB6C417643305F658E82B488A648AEE
9F8700D8928A10A07FADC306D7C66CD5DD0CEEC848B6DD7DF9909EF5A69D23F7
940EBE996F448DD51F32FDB84E225B685547442F2E3ADBBB66A33375EFAF9566
9CE0DC02BBBC852FD9499CFA0A89C77512D28C5B5CE839BBC995EFEF51596257
BE6A9E8BA89A795F2D184661DAA8EB5A1266934D61872BCAB05287C3764AE70E
4AEDB5DF63C0A66F4AE09DE0EB684D4AEDE26D28855E6327CF6312EC02FC8131
471F6CE8CDDFEAFB8A0CBC0119E6711BA657B52A6DB77D6EAFC562C2CE69C4FC
8B2C739CCEDB8D805A175BE0CDDDD8AE32B1AF80BB33154D1E1490B39C6E136A
AB5B0440D988DD3B5F6CCE30DCF48EDF96CE83F0549EA17863D6C13840CB92BB
A1F67D1D889706FBDD7CCD1201150BF7D6A5D35DDCA32976D4700A2A55DF63C1
CE7C8C4871200746A55B582B69FD5EA29376999F39808C173E0E6C29E9CBE741
C7B60C63A6068F6391E1132EA2C70F1CB9BC178F130B3D7BD0EC94292033819C
F769EC2C322580AFFD41A9EE259CB438CCB3023CA8994808ACC2B41BED1C475B
258481C92987AFAF70467828ECBA2CA4A99B4A2D17E88826E1EB175929A360F8
7642BFBCC3F57E30B539002A6F111DC0E78276298E215C72EC540F2EEBA65E3D
0C3619C93B4A1030E92B11D38D878975828771B9812A9591068153AD5E1ACF22
A8AC8BC0C91D1784443BB7612683DFFB1CBBF3906E3F575D0196AA31847CEAA6
EA1FB37AA15129808232281A66C70343B23DF1F3A9B584DB2E06C9D86BDD441D
5C062C096295CD872F84AF9BCFD380372F99AE77377E2A0AACA385C4258686FD
013F848088BF8F4A5847E2ABA13CD3144DDCEB562E8958FA0C05A1B4105C8DDE
321B1FF19B802C461EA11D2B1CA07E73245891D2AB8DDD89D2FD25042D3BC37A
3ED535D62B5369A3A0BBDD0A9425EF294D4FAAA055F3839555E3976B7048B36D
C04E8D704734C6C3EB060E2F8971CEEDD737B034651CE4C22E0376E9E6AA49D1
6BC771BAE9F0A07813CCC3D84B0EFA30FF0B90C42AF7F0B29A394B1C9CF47E4B
F8E6B9832829FA283C2BB0C51856F1B6BB08AD5980EB3F6507C8836B2EB13256
337164663AEC52CDB4F4A08494FC0C867AF1F4641FC098CD0791756A8B891BA9
B7810B066F6C60275E29BCF4E59043F5C41417B5FC662FBDE1E83656EA7441EB
D1A7FA42838A965C60A20AFC872956FE57D45FD09B61F1353A027D09BF3769B4
D3344C04D20353F7D9E834E6F40AAE3020005C4B1AF5BFF9702FAC13609000D4
E921121989F459590A4B239917F5ADE02D05C7706C702673E569A32D5829429A
0D27F64676E41D02C863BB1A70CCBFDB76A30CEE9AA3E4788088ADC5413C1B48
3E4BFD9FF7522B16ABA124FE9E9DA66F864CACDCEFF69BBC2C517A838961F2C9
D32542168FCC3B456184B8C28F8F08C694AE3DC5B109B2C59BB157D6FDDB3947
11F1B4FDB350D7BD8FF6CC541E50EFE276FEF681B18FB7FA68A21E9866E62693
DD3A0DEF5A8EF9A63A6923724DE0AFCDEAE25939B8B79F0B4AC970FF5F8A5E19
9DF40D27F0AC99A7B787F5C947A5E0758A10D7849860838EEF84E179477B5AB7
6069709977921799C8B5D598ADC5B8803E18B179EBF2ECB71C6168DC4224D3D3
621D2506508C159C1A00D31FFF9D98F2E8662E4664687BD83EBCBE047A4ED8CF
F981066611B43B913F0F7AA979902226114AC377208EB15D350BBC278E5D0A3E
2414B8C283FCD27077FB5A40FEFB0A2920EDACC4A679D8F8A4F6117ADA0B643B
E591429F21A37DBBAD9A691FAE26AC8E8A0FB7D2A408FAFF8A66B0C379654B02
CD63CEE68693828C3B40ABBC2B4A5E03FAA6943540C214D5C957BBC52FB70F28
08CF66424ED1BF2101612C8955BF68AB6244F26929AC312F2C3B7CC0CFABE254
54BBF583C04B7463D2EFE5D59C25F2D9F0CD93D7D71C65C4B4E13B1BE502B59A
B89804D5D744CEE33CA23988C38DF7C2C63E86081466A553D559A0DDB86E60EF
8AD116CDF082359285CDFF8AAAC750E08C5BB907582658556C82075B624B533F
80AB2735A70B74ED6E593985A415DA28FC184581BC4F5707C972DA549A6CE2D9
7D2B62639DE47F6F821AF60FDBA54F4576388397B25008F9AA1057C45C73D634
E938664EDD32B632EEECF9A3D7070353B24E98C1ED32861FCAE1AE44F3193F95
3AE67048E1C663F105DFC1F15E48C08F90F9A5C24E84041BDE590A5C985F4221
61D7DF0C96F4343A15348F198D53728CD50338B85D9E5D147BEED0C362721BA3
FE5EA48B79235C292F97AF751068FFFD80554B7D13315A49A88F136501371668
6341083E8A0117B5B92D31100EE3323098F517B78182524EE1F3CD1547258CA1
838A537652C9FD0C73B33F28605615EA8C4BCF913826678776CEC434AE2CE427
3075AC0F558D4C8965A1A644DB57C4E9E1975EC08BFC3916DB32F1325AC4F4EE
4F7E50EB83051C9287F75F6E3998C0C285289967A1562A14832D28711AA8FC47
F4EB5AEA30C59E934A437BAA2DDEF09A42C6AD12F43FE714D3F087A9C6AC9F7E
2334F28FD560A00BE05489352305BA4ADFCBF4E0F22511BBA56490000546580B
516BE59F69D2A3D78F5AAE1153D1BDB7FA8BAC45B2F85A840265B2393427A61D
A9F57E165924800AD7A73909CC1B17615C7ED4ABBE1C8A8586D051A698827045
77A320C8BE891E77C77F142FF159CC9AEADA55CF288896740144D64D45C8ABC5
A4CEB0C54F2DB062F8FDFDD2CA7946B402E527533C4C363423470C4FE6142C49
ED2AD8ECF5B5FD4FCE96896DDA75568051EBDF54D4C7AAF6BB93E1159AA0FFAE
BD8EC21DB4FBB7CF88C880B76360B3E10446450037FAB424BC62721FA489E1B6
D4DD9E37CCC1972CD63F05CCF7CD940E7CEE90919E813A99B129587246B299FB
F727530E28826AC39E77AF870CBBDD9E7981E61E91E4E4131687DD4B00FECC91
12694750D37987AD402E3165596A1A2195F69DFB5FCC6CDB63E68F6882253A7E
2F8086AFFE6C0564D21FFE8AAC44484D28D4ED2FC94669012443C1A609E20179
75B732CDEDE571EAE4F87FCE5E1DB6847169D70F664670D2EA9EF6A55CAC9F90
2D2B2C9A3001455114E83C2790FB276298B754CDA2F22CF383E4D9EE63306E45
83D9571D18F5B7C56F38836CE9C834507A208B8ECA8733148BBA7306D65B2A21
9DEFB936768A2DD7F197F060BC4A6852BC9BE0A4F0E82B0B99B1C1227FBD332E
BBA8AE12CB190A61EA48CA005A09B6AFB6191108BA9A9D51112AA389EE44C473
91FB68AB2DF11DA0B9202A86646AFDAC7B1BF012DC00DD95F2816D46A93B303E
19E3CB39F9D103DABEECDCB1FAB310F0A700EFD5642AD0483AD87218DFC25177
31C870EFFAB0AB78F4829581306E0C6B3CEEEA2DAC381CC19DD953600F0FD619
A7FFD95AC14F1C7A324ECF845BC6F3E0CE8DCCDF6753BB0F5DDFCF99D3BD54A8
8B73AE5276A4C7E14655901887441B362F1474220135F300EF8FB41E4C35D919
EA20BAB5BD9EF216D9BA64C85BE8290F41FC78377161FAA9662DDA62CFC40E05
A0ACA00F090E39BE00457D6CA78FD8CB8DCED7ADC34C94777D480C4D6EAA7672
3825526FC7F6E85B204E9D31A9B03EC98735ED4D3FC677F33C03F7633785A472
ADA4AE922B972C9775D4CBC9E697E4AACFCB6C786C608AE8844250087FDA3AC2
36966683DD0157772277936C80DA066915CA615BE9EA0162A522734798EC3A4B
413F77B6581A7B01D500EBDA4177E5BCA3381F64604EA2D0D21FB5C77CE815A7
A1EA801CDCF040714722C22D298DDEEFE19FD6EBEA2BBD39B992103F76825419
E9E65AE3EFCB67D90725B63C92D1C5700363AB0E6FE20BD8FC7927D65D531185
8C95E31E54E355729A905D9DA7ED8E37FE7ED90543AC3D205EE3BF0760DB08EB
3ED1F6A411FC6717
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D452804B3142DCDCAB22773DE75726823F1BB198
1C1CA8D89B59FF008B054F0322A543DBCCABA518AB9945020DF8C049A6E112C5
3F67BB74E95B7EB282BEF7147BF40C5A3FD4BA839B17CD431691921679ADB9E1
D6EAD8E8C273099E6E5746323C92B16886E33009706CDBC81FF7B5D5BB611934
7A047DB498E7ACFA77102D761F64D98C3135AC26A5ACCEDE71455F41425652A2
826AA82257415492A460656D594FBACA8287CE1A05D465E3E56A04812DA0F2F9
4F98E3144143B33514889C255204901EEA0A8F480070082F18DA981E95E09E12
DC0073FCD7E6242C22B24827EF073C7957B719561D5B040B3840EE3404BC0F42
78313EE13A9F086DC6D26670F347DBEAC0517DA350EB73A1C5D869E144A15D7F
EB8D39EDD1190AF018AAA72EC88E86CE63B5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 79 /O put
dup 100 /d put
dup 105 /i put
dup 106 /j put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9042537872831BF5F1F340A
8D3E6DEA1D9675E87B3425FAA0172DBEFD7C28E30906B9FBA65517C9B58FB6BD
E0D474E69BB90B0D130A32C4130974A1C961CF064A5BE8EC1056858553FFCF7C
0D78627BDE04E5D0B9F6F72F92B61A915DFF7AFE7DC3807891D039AECEAC3F50
0A09579E661D3DC3022206061E0250B09A05CF198DF82D4F28FCD3671E815A6D
94820D0C87AB1DCEC251605D9490BC465D8A62C95B7352250D76D9FF1D3D5A32
9690780A5B56F9BA2083B29AAEA996FA95246D55AE88B0D3F6F307959251AFD9
82650287B5A98758C8FF3A60C40CBE3445ECB497F3E04C98DD52DCDB2F632D5E
FB5654C417A12EEEF2DB5F0CC54A379DA75BB9DEAB9FD9F256C1B832D55382E1
22A7DFDC37044BF0CC2CBCC4405D8A3495F4886001D615E1737FD9877EA3EB51
823C2FA1940BD8BD802C34BD648B41E268B825129BB13543961334C69DDD8407
97E868B79C83752682CB506FC1C801F63AE7B3B8D7EFD23C54232AA97FA8B2ED
EF2AE0382B4ECC8B24CFC62F698F8BBC90215BEAA8446BE6D261E30DCBEE8CE7
6BF8D0E51BE2597E8086F27D4C58573A2264BA64AD413FA28A0530679AE03C9B
2D91CAEC230AF41EE2DED3136A10254698BE7BE3D7C6D9AACBCBABCE91D05CC6
7CA2B73151B5E7A25F06EE17DFDD1944F899B3EEF578B4494A334015C5A7EBD6
B7172479857B3EFAD1549C196E9D48DA724ADEE8DA5E2609AD1FEA31E69DD983
2FA4652F636CA07C0983B418579EC560FD8F72D2B50A199E646D29FBD95B036B
DA7F641D95C60DE78B943B79CBA4AE9424C7B838D7FC8A4B20662A49413B4E85
960B47910F907C219CB32FF544C28039D58D72EC7EA2FCEA1A711DD548CB55BA
B37A2BBFF159E4D81FB4332E373E7E99358C01596E4F969490C69D802EBCE402
78FCFDE473974BD565273775C589F777C5184FC918C5FF975B996682B140E554
CF5B20EBA74197CD993983B158B64C1CF75B5488B6D6285EA502475C475D04A0
5CE40BFA54A1DCD44D6A45A51511E8EEB05948A0CAC05E26486DCA34541FC395
9091CE6764E67FD557038DDEA4E7EEC31DED94BD109FC288C74C8353FD222F86
966978546B05A5DC5045F595510BFC29C5BBBBDC829E06A753D5623A226D93AF
32D6B04D84EC272A8547F09F6EA0791D125ECA990D1EE8DC38A41BABE5D0A672
935F4C94941480509009A16A804106301548763709921C45C5B4A712B249C527
98ADCD657CA3CF024C8BA8616729B3B0F8C3D52BBD8BBA7D802F0680697665DD
F9CFBC7C8775C9060E0F5DC09CDEA381D7CB1E481AC748E33CE76427AE026899
3DB0D5BFC8713D30410D26A28BB9AB3AA92F194C92E967C9AFFAB5B9D2920E34
9DC98C63D380911942E1425B1C713DC8931C3265CC30AF52DEBF88EDD5D11CE7
4DC4AE29B99317D7E84F17AAEF29B1E846A735C6E45521B7FE846FDAB5091DB5
3B2BB765D68BF059F60AC20CAB99ABD0F7262AC80987993800E8BBB703D69E8F
126058B391BD269359CE7165D83EF3C36A9B83D01555A6F8464C938BF25D0CD0
71E64433B5AAC5DB9695A76295888C3E3CA5359F38AEF1C2C2F5B6F0AA3A95D1
948EA69E628C8A4FE517DBD2B230607F22CF3AD278ECFF6173D77AA89DC18118
6DC459A39F86D61CDA581293D3E5767540B21745BD882F49859AD43B94E43EA6
02F997D1D2B7400936BD4EBA4B6C6570FD17C2D2D2442AE5ABD1ABC4BD25F26A
2925BDFDA15ACFF66C239CE64795F74F18B596C0E9B7274EF0560127B0CBF049
FFE2C6333A76423CC8A22145A160E36E1FCC24D0143480F9E7DD1D9717C8DB2B
647FF2AB29D2A92CB7F08D2FE343E233C344BC2BB2148DD32AFDD88EA9F520E9
6F30982F4CBB984C085B8C30C01672329D0521A14430114A3FE5BCE3AF4C23DF
5412983201A11955E78BDD14AAAC92EF8FB1E740737D27628509D41A8F5076B5
CC6D4E8CE9FD16AD406D1EB09A8DF813CAA38873BFF88293AB6099172DBA15C2
2661A9F0E6F976078ADFA8B3646915344BB5EDE175FC7E48BDCBD4F9DA2954BA
3FCFEE18813CD61DE6EB60ECEB216C4995BE4BFA8A1B0DB615510470FE2CBB3C
7D6C5C7CC9BFA217C2842E7ACBF8CD7FD84B06835AF9626ECF265048A748D61C
4B091313B22FD278FDD77D3A6B16BF9D0145291CDF7A85B112AE6869FBC7311B
508CC531DC6809A579DF3AC00B1F1352CD052B335DFFE68B7C62273A74C555ED
28FD39B873F1B6A954015DF1406F0460276290B2A03314AA30740E07EEF9712E
B3F8CCBF9466D7D55503E0ACBEE2DACEB2B08DB3FF688F9B20D0FCB750221E10
017EC04C850F4503120C6E371723BE761284B40FE5616A7DC42F2DF03675330E
D2B436BF1BC9574DC1B358CE61FA4B39BB68ACF701FEAEB65A7405ABE09FD61F
E7F16418C87A8D29B0EF6C3A051B3C1AAFA87BE2CA8DA553813802F1BDB6E1E5
7E507C8626A2E861C2707CBB8B72E29D9B78E2C9671AAC78C014FB14D8CC1108
9B52BC17066C3FA97EB566AC42990C5C1AAE1D083925D59DFA578DCC4D7746F9
871DFBFDC28A6497273D4C67946B8C31250102678810EB95B22EA5CC3F6523C3
8AC6AE5D8A1178492D22845088ADDBD1AD235CAECF638599195AC8BC153F18F1
0A8730F70FD07003ECB16A994DDB4E5C451FAC6F0374EC387EFBA5DCE810DF57
30DBA61ED808418099FFF087C75ED7835D83BF360F9FB928512377FED65B8494
D4E7BCF26AA57300B2AFB1A6FB5A73ED4895C07E7DE6785EDC6BCF31018AD2A5
17661EC8EB20E32BD96366B5E0F73DEF00C655A5258F26F57AF158101F3C1EE4
D12F584DEE60AAC3D0FD9407F4E6F2BD151CC9795150E25FACA800F1F433C9DF
C2D21185866D955F9493B023E6B7DA5334AE294378914E175A9559ADA0A6385F
9B78D4ABE8CF00943D25ECF0154CDC96FC7235006F6B606E3DEBD26F5EE64132
57F49D833B0BB2A87E1A9F251245086FA288565DB12AF28B84D530B47355D407
002B19B3C9D0F4726C3F0A4BF1135860CADAD10FAF3074238F88DCF9BE64AFD2
6C93A814B2A4EE63B984E3540D4CE7B80CE558D8EB74692DE38710E35BA1DDA7
FCD648606C1E2F09D5A2A75009486FBE4BBA4E7B2F9E7EF28AE366FF4AC330EC
234F6392
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 59 /semicolon put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
ED277A492B42D88D0E068D61F2BEAF96BFE7F399175DE7D08981736F7DA253EE
331F97DCBB941B1832E3FDBFA7650E0905E062516F27090476AD2FF0CA78B14E
13CD9482201FEA5AFD00A134F3C357412CEE5E264C20C39E157567538D94E69B
6B7F3EC896D42594593A016CB5FD306F440F6739C7EE88132663A1B1D635E362
5667C0843D4E8E1C205588BDD46FCA71692EDD0042913BDAED8DA7D7C8016D0F
B9B44B7EE36B8356A8740617776F18D167F6AD72D8B006DE3E4BD74C1CA8891A
8E08C09A601506D57B5EDC2FD998E405A987C4205CAD91AB441DD76337F8E54B
79142482B2FE7853B7960061A6C420A696A0C47538C692108055EAC99DA91CD3
B0A2B7AA4D3E1CE749165D28DA7E2AFEAD936AE066ABFFCEEAA68E1B41C74CAE
CABF8616AD95FD9ED3B11C918BB38D165644346F51053A08C551220E93385C29
C2E8B76655CB57458FB78C6ECB6460A281A80F502523BC02292E1B8125409C3F
A734449C3B34DADF947075BE99F21B31B00EE34F824317E8766999D17EAC8B28
132D2BCF954CD29EB760C8F0114D19D4BA0161537A4B2E556C0B64CE8AC122B1
6BF9132830C8F4EA9DED9CA2889A38D1393498ECCDCB076A6A7E850ECD3A062F
050B7B9907A9F37C84D143DEDCFB27AD763C746E1814DAF381905B63CF391ADA
2DF440658BC5CBC9F250F58B0661DD335E29F1931A004EB68BF10930ADD30B07
362F8C9C7F438CDF8944DD5A06583A75079194054F8C06AB22E36F01DF05AB58
428703B5F8FCF7156859F1497DE012A4ED81A8493B153CEC0FAFAAED622EF190
69ABECE38D053D6CBC34EC86D24A93624C7942CB3D9219D488F9FB992F7B7A7B
D6B0C8950170438A606B36244408FA18CCB93DDF370452380862FE3E7A56C8ED
2CCE3405EE642ABE81E3472653B118594A55413D85A2598C9422463D8B630AE0
02BCE4FC0163C20233B983D6A9B7902D0576B1AC15546F60329C64DA64F101A4
EA8A0FF3435977B74378CDA96CFDE41A5A9C4DDE601FD58BB5D3765E2387F197
12D109458CE00577D739A647E01CA61439570BD78FEDE4447480B542B229808B
A6F9636F8B94F996A9AA078DA71BCDC8C90AA36570A762470D545CE6B8DB9F8A
FB687987D1B6A10A4D671B25ACA342D6FBC1E488F81FBB6DD079B76D52CAA033
5D7A1972441590EB25F5FADD0126DD1FACDDFAD852DE686EFA03B2CE79CF2B15
6C144EAC81925E2ECAC5ED93F2D8249FEAAB72F6E1CDD8B7717DBB23BC73D4E4
E6B9BC5E023D2A3D947AC6CCE00E1D5247CA9F5CFDC5E6C4D9364A7B1630CA0B
D0282E98301B5F1E1C12B0E61751804A6FCBC03543F005AB57168229FD3DB119
73BBA3031C1634BCD70D985DAF5E7591419E8DD0EDE5E21B6655769E33F3BB25
4F206D8229804C61503E7E0D25DE6C8A067B69225FE24670C9B44536F724F83C
7A7563D090FA948F6380F5E9943682A51642BA27C943B460063E42F3B8ABBEF8
1714551C2356DB2D9D5716CA9837196ECF636DD5F474CC697AEAC8555DB97022
F072A717C1636D6B4D6D280BBB46AE4D0F88621FF8D3D81DA36CED0908573069
5ADEFF8FDA0E519C84DC7C2404ABCAED0FAC8C87F13F130AE09CB96F3D215F6C
0CF80185A1DA5B2DB352AAC8D9282608B39E90FD6AD32DFBD4E8C89A9FA5772B
D7C4CF660ED0396E44A5667B7AD3375595524D22C358B734261AC96380F50E48
4A18749B4B10F526DE12D88C3050F957C636987F2ED81971E9FC729AFC1E778A
3C00717E911DD383BE2942320C8F54044AA6A13F05A359CE067C5A78D48AD4A1
03B90599289C9AA58E4726F5C074EA78B269EB284A42234038F12E5795683F27
D268D1E19C06F9E6851A64BEC3F7869EE3181CE8AA1ADE93FD7C17D135A9B8DF
A02B8B05136C106FE7784C906039FCDFCEF8BB4382003153E604C23D313121A3
1F2705E323EDB4957F9A271F30E71EA8E2F40D990A11E1EB79AEC531B4E05831
4D4A47F2CD64A2F09D9F20A733242BC98C5AC006030B0E5C758F7A279110DB72
30FEA535971EECC6EA4C239D51CC54EEE1BA194D5D19616751A5A80154B18B99
19E7E1A053EAF0914DA0A95446DA7D8F3577FD992B46486E8482D66A81824706
2B5BB10DAE3331C3E3C1B56AB328435C9964D7AB48FAB07CE7C933BD984EB713
405D2B3F4812443536B9FA80D08E4430665EDCEC71DC39584BC7A67699DF7BBA
57F79554AD8BDA842AB063B025F5E50D42E439E2C57780F981545E85525FE962
D2E1CB05A36BD10A453D676BFB63735B05E0FA606348288CB8E60588D7774161
952D462620AFCD9D1A3BE3D924CFD804CB16D8E5027B7D1E0C22A83AA19F30AB
25F328B5826C697B6F424CC20A98FBB384FA3452AAAE1AF13B49281AA6C73F8B
D7A245A6DD826398954FBD5E7ABCC779867CAC385BEBD60D212645715D797FEC
9C8A4F0EEA48A74D1489DFD974588112D4CB630389A4F601F2866FD63D5B8B42
C34172C5F5B536F44B4F3452249DA094939A0EF5F13443A9150F35AAC5623BCB
AF6CC5D7B5603192E5E9D8452B79FF383823BC168252F57DC15B62B0E0C454C8
C57735031B7A58D1CC858BC7B4D589D92C3919755C48B4F711372AE3B7BB1090
E9EE6F71FC790A98BB8F77D161F6228107C92BBA3269401AC77D24E2CDE66BC6
BA989EBB3EC8E44363ED00547843C32B303AEA6B90706004ECB3764B6430F0C5
C49215728249CD697F159D058E656E34657DB15E29B20EE3FDAD04F0767BE960
612179D325BE5FBB515128D79AEFFA417DE903CEA643F8ECBE4C52A10C03486C
1A9C9088EDA3A1565DAD1C08E402BD6CF4EC99EC3CFA96448ED2EDD5640F536A
5888CD81D75B60865AF755B70C3B28B0F44DBB92FD793EA37DC67D93D0487E70
B8B9624D65F00D2B087C0D01C72AB279C5755890DF965E39B8301155A05B7A29
B1D9D09D60ABF82633FFF9C4989BD5ECA24FAA6161B1FFD22A31C1FF1492E361
4F8841713DE784371B9FCE178F9A75F3504749FD360FD3F19057BCDC87EDF81D
BBD12746885EC0B9331483A1A4DEE85A5AD027261EAF5273A61604934BBD610A
4F67E4873740CBBD72B5D16B2125A1577850FBDA572D551087BC152E862D2BC1
4548B0937A1115D48522EA6503B560C49D125450C406CB538A784024E5354621
19C3AF991B3613B485BA2B63E25767C311CEFBB3FA846C8B8B8A7C02A5ED1742
EF3CB42EB0ECBF9EA6FF5E6AAE6208F189D8CBAD47E725AC5CCD328EF7A27A75
7BDA4D2F6A685B709268EB94D9D5AA4F0F34B29B3548D572BF5C72EA4F9953E8
D1BF39A0F3DFF5CF7F9CEF5823A69469613196BDB99E4B1CDA28A94D0C22DF83
F5E30388380927E5F28FB4BFC9A36ADD9390D487AF8F2FF476C4D83545874D55
523E9DC08E80BEDA5BD08F90564DF32B7F6065D236E486BF407505B0B435C1A8
91CB94C0A065076D08E21AC6526DB9B0F58AF66748793949879CD9E8045017E4
9C244AD7013C102B01923BDF0C8CD51A67A3FF7D7D9FE58D7650734C9137400A
FFBA3BDAA63E24E62662AFAD427188FCFA0F92D24E4036F1581C3FA6AABAB744
8B37019825227FD74DD8E8AFFC711F204E614769CA198DA5AD6E82888902742F
CD0E4F2080B7EC54BD6743070E5B276F3B080DFEB9565CEBCF8EA6FD6EB0AFB5
3EE63B873ED1DC4E68DF48BD9FED33C2A73BA513BDFE628704392EACAB134489
5D1F7F475AE91A909F551A082D4B4EB3A5D3C98C21F3CC079F50121ECA94D195
3CFBA4EC0312C410A234D35F045294E092ED5ACCEA0EA4EE8C895F9251903F3E
D789E77E1BBD520FD669479787991088015FEC04CF6EC9B21FCC60D0D47AA0A7
20CEF9F209ADF1613B4A2AB4822461B346C996C4735CE7F0156BBFE61BC579D5
A5B97C93C74BB6AF48AAE86AF266A91047C1DEA14CEE3FCC9C31805D2F940F53
C5423A5129FF038CAC61BD66CB229CE54C4826754C292583C4D41DA6CA0D1BF2
C5524FBCF39741C6D9D9E0C9CE957A3382AF78D5F965AE87AA81B6FD80424B46
68FA681CBCF7D63FA8FD6429F88CA3224C0B8281CCFAF07865F70407198F231F
9BBD907FE115E75782E5DD9456242F84FAD25A2C1C7506F22851B1CBA3F0A98C
364051730B5B40D068726406D5557C3749380853F5240DFB994465661E17035C
BF5F3B0F2EBB23024D6C4C85CF1F7E6AC96E2D3342D58E94559F3459A35B8881
AE4CC69105EEE309BB94601B3D3B02320C0FA68E94795C01E4783EA9198FAB86
5DC41934A9EF4D8DB97DDF48FCCE2D56E7BD891A5444B277862AEDD0E1663DA1
50CFF96A79646CEF83A059A9C3A4908B699A14BC349FF603275194339EB3C04D
91D09F8D94AFD9C5AF9D8B97A357586F19061B909700FB35B20CA32FA3B0764B
02BD28D764CF674E5717603D14ACC1617446AE9F0271463BDBC51599CA4F3B63
9FD0668D86339329DBBE45683B4FAC9543FBAE986A43476EACF14F05C5001491
31B321CD03C28C3FAFD528EEDAD4730F333CBF6CFD277DF3A4298620E5154BD4
3797740AC3EDBD531186290F537917C3167CE0FE0E6AA8BC9C9371F3D9506DBF
C2538043AE5DBC0719CED48B5CF0E6053F83569916C5AADDF854562587793B80
C17FF1375B40CF78839BC1CAC7907325741417870F803465A4B6F636B720F9E7
A8FDFD3FF78CB2B327A7F6B8D0805D538697804E572E23A3CE2E309FEAB6D40B
CA3E07AD9DA652BA05FFAEDFDA9E365A57569094A71A9425FEDFE2157FD93A48
E254BA668BB9CCB41CE908A51A3A0EE764C4F6D0ADA24DAFEDC515AC45D756C0
05F6D15CC225ABC37446C7A78785A66A7DC7CD779850C8FA580B9D1A3EFD3A77
97ED8F9654CBD4DD53A9655783BE877EEFB3DEAB603B33CE67FA02FB2282C1BF
25B8BD41F3F4B5D61F4802F7E9F69F0890389AD9A1F0F2580508798EE8509427
8E5D73ED149AEB94CC10832A16DCC9BFA6A9DFBAEB4310A0397CE0288667757E
36BAEF109DAA78B7E899E2B7850F80FC1028A58FAE3EF2CF9E0C2C64A26623C6
80BA8E3B3ED3F187FE12FDB50B8E7B54695A4C00758EE36F9CE8A4C21A12D589
555EC9272FB729D55C4F8DA43DF45E2D448A6AFBDCC1F34F2A14D1AB6E7C0314
16168CAF4E07A8A4BCE30B71529E1AE536EB0EB04E51A9DBCDECE9B6441EC515
F0DAB1DFEFDDA18FF616B615F0D1DD811086530CBA2648ED52E41FD2BEDB0CCD
F62EB38130DD641E159D536A65D770A11471FADE49E3B5E2D38107AE7C34CE1D
BC4260F0A385073E5072EB599CAEE5FBCE5B5700B76D60F7565B29F5824912A2
B4C0C1F4CC426AB7B21D1C46A584C037A617C5ECD0F8F7C09B38AA2727A0B59B
32BB5CCE8320A154A4CAB035C77B327319DF16A9217E0EA0019460EA982DDD93
1D259B16CFB4535E901A0AECFD75EF13F930F42FFAC8AF60BC88F6AB2465E3E2
3793D6994577D91160496741CDB079CDF2C9D7CA3A9DB24696137E91E5EA3399
1B1A04F72B7A955B46BE8CE933C2A63FC132434C428EBCF38ADE2C680EEE4641
784FD0073FC84972A94E828092499914582B79DD7E8F60E6684748FE5818A383
809CD6127F5FA7A0400419EAC700EA66FBEF1013741CF47D7A9E927F8EE7FCF9
41B449CE766B4D04DB6FB2572F675D79ED6E91A86A78432E081D7459A2E7B5CF
F1B781D8C5279AA2336DE124A992F0DC843ABD7206CF0C64BA70385F70EBB68B
C97E89ED5CD37A5DFEE1E63B8C505D3E00CA231640A6A9299E2DB2C01421BB6B
A5D867861CCCCCD4C6F5A581A4188A4789D6662B0070C42EC3C86CC14C02984F
36305D20F4301E9B8D22B142821ACB10CED3B14BA151A42F2C6C287B65FCA5C0
73539FB78027C7FCD0379EFA3D0E621A816F57A9DB23083E740A11D3FD03DD21
98BFA4C592152D8E614BE5A80EB86CA7EFE6DD4E6C21C3289A03530AD59500C7
B4CC0BB59C135A18C5108508A145A7698FF9CA0D32BA86BDA2308156283B2C00
8B29008B4C488F60DD3881AEBDA0666519D0D9B6A979FC16F179BC3E2B79AF67
5D71F84E8FAE5F4E04A7EF6FF2480C107C3CE1795B503FCBB25A117CB12D644E
42A3050DC5CC9778FDC4A63E3146CBB2AF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM0700
%!FontType1-1.0: SFRM0700 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0700, tcrm0700, larm0700, lbrm0700, lcrm0700, rxrm0700.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0700 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-203 -320 1628 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852C44DC635E3E
0E29551E072F9AF208EDBDE681F2A25022B9758023CEE66E71B499EC03B0DCB8
776788D7C9EEA9C8A55C4051AFB58C8580ACF5C1E76AA745AC43137D7FADDCC2
ECC373F673B9F896016BAF3DCAAD7A1E982A9A9D5F459EBF287B057484AC0344
010753C274C38A6704F869833E51F45F91D8FD54CF7F4EA910EBA59783AA6CBE
A5963B4E5E41841A8CC0734ACB9679EA0341518770ADD726DFA8DD26AC8BE0C8
93478DEE80AA4676F6E5451772348BE3F3242DBF7F727B6CE01BBCBB0F6B6CD1
097F6065C56A9DB11299EFEA04204672740C1EAF81CFEA33A414C8A3FBC097A2
789BD70B825861F9977FE1F2C556C2470E710BB50DCB709DC41C337F18B9BA95
983DE7ADF0218165DFB1FAC6389F1FC446413E660AF4601F1935AE3801C1ACC4
9A2A696F645918A8546D5C090D0F9AABBC99667D458EEDCCD0CFC60FA74C97AB
D5D3C05A769932A1905F17170A86E307F730F17B7CBB77E583D20DEA14D76F02
FF9CE7599E0DC09CAB37336C3D6DC6A91510BD76E458F2F009E24983EEBC220C
572E997C37FCDA62DA400A703999BB3862B0F2C8BF611DE181A1F6814CCED57B
FEC1F3573C3625283CD37815AB5F9C0C6FE819A83091CE1D5DE3923B1BB8BF28
A2C22E7865E86FB42E506501C1DCCD2CBCD84F41D73D39DE97AD5EC136764B9B
F525B6F416A11486CC79EAF6C7198F22A69A5B115E46DCD4D49384F63786048E
54159C71D7605F9D205A01C5E9DAD766303F39A07BF5E57DC8F688D3FF4F9086
F239DDBACD02A7FBF89F3AD087CA7BF1E471FA5149EF633F3E4FD1504C60D93E
F3911D24CCB008CA1FD50BB9E6760FC70C10A7595A3FDEF5A78A41E4BB0DE649
784E2369F52CEDAE2413F87FA2C1916EE599ECF4C17DCD009BB3ECE428F10D63
61548940602AE0AA7A2B3807F10788F4CA9E5901A682DDFDD936B653B8E6ABA7
C0541A16FBDEDFC1AE715AAD8F780647BAE28788A949376BC802BB0AB6082ED8
2935AE602BD3DC8A877144F32B121C810226CCD80AF416C079AD28CFBF436521
79CCF397C1C5B6821795240A3CAB3EC818497344540F756B0FA031342A3E0F12
1195D1EC4FAFAA990BF42A97DDA42CA372BBCD52E389508C28B941F4A7261F28
82C65F4EB9EE7E3C2D1A6CEF37786849F462A75961C9675B8A966DE643E2EC30
674D4BCF59D4689386FC7FD115EBA6E3BFEAE5F4AA217A5B8C1B66612124F5C4
308E6DCCA490B18E3D327F3BA21271F81B8FC3A863FF8967E35BF82A9C870466
1DE752E74561656CD378FD54F09D3BF2C8B414E6731B4BF18A5A9E13FE9B11ED
5A5F2EEAC14E0C831B20568A3EC9DC9EF6F1E1AD8276E4A5A5219AECB0E3ABA1
8480724A915E221170722608B78B19D91669C52BD49B98E5E0C20B0D21D8E9A9
EE0E24A9317CCF8666F0769371EEC9CA7D4E88AC6EC9100A418A13CE124273B0
234965B238DA2ADF2D7AE1ECECA6F1A5F29A22622BD1043E43EFB20553327B08
DEC34AC1A2F3FDF20CF27612A6D71D08B987C5C58316C88BEEFB4FAAF71ACE43
5A656EBE596869FAF56B80355CC4A6DB102BEAB1E67972EDD1DFE7A211B172D6
DB5F13D346CE5AFDA109CA084EB68AF71C46F140C46D6C604DFB3FF03AC04C15
1A69B59E69D6C55924D412F1B1615CBB4B65D22DB17B0EBC48EFDAC4853F414D
D105E8402AFA7A9CFCE22E6F8FBD5C914D7336BD217AAB40D20E7FF96B70BEFA
EDF86F81D389BFC649D8844426575465C9858B4063082606B806680AE7190E88
EC8EC3FA9F4B68CE7A56060578AF13C8BB5B28D9280FE5690CC6E458E6A17B3C
BF9B54D5E17000CA4110EC8EA600CB7D7122AF9FDA5D89D8FDB215DCBAF16254
AC2E574D97989455792D8C521CC8A0156D87ED472286FC177240F07692E3C3AE
247164C738014D8AFD7B9AE153845C9504AD953D2121E1DEDF859123DF00845E
D40E4A50D12D8ECED2880F9E9D312B1842D19530E3C0D286CD90C71C4C4A673E
E67074D53EAD75FC26B384C4659C035AE67EA289522265A58C51DD2727A6C59F
B2A533EBEE1A84A1CC15FE3215A143AB621FC07C3319391C9C01EB72C1BF9563
03402A4DC5A26F2DD380696CE7CE24430DDB38C7DAB1EA2DE9F31237F3238BF1
6E069C121BBFCA3FB51BFA183CC8FA118FF332A36A296F42C6331D3AF2A0CFA0
8D674032A3503922CBD7B59EF5325A49C4D76A600914C44CE56580383FC9128F
0A138DEC23A633E5159825FE2EEBF18891E84BEEFFBDF432F8A70D1D3216BBEA
BE33982235CC383CE5CB54371DD507E715B1E395E1E542F60190D94D5A030887
933D1997E0072CCCFF20F82FB7D05438BCC522EDB68527550412389AEC0CAFCE
607D0B9158617B4FAA8DBDC92D54FB0E40F4EE60D0E107D7CF24E848D92095F3
FFACEADE336F1994F817E840413F2F04EFA42029A4E4D84599E020F089F0B98E
A502E0B4D61A3611651ED78C5D6858C24F96C0FA9C3A91607ED371C290301225
439C1CD17E83707ACF0D9F2FFCF0B37B972447475CB38C7A6344697A727DA6AF
DF0DC109E63E154A595DFDDDD0A59398F83BC6D09EA229D6E9E6CC50247168FB
F2A1E338BEE383BCB28E01B15B2AA0AD598E3D4C07194CF1DBACECD8860E7808
6CC4991C09E938354A0581B0170EFEF25CD19CD4E3736333057E07EC630E1834
E79873EA3E0B47C3BA1D2EC39DE49BBD28D09F3BAEF126FCEDAB6457D348C869
9CDBBAB318BB7291381A0926F151EEC021DB975868D0B7F0451A339005A1E40C
5F7DB98E88E6F7F5EF507E9798061EABF299A1EEF50C4E8BD60D6E370043FB64
1F9AF0FB5D6F5145C5D180355E49A94E42A1D87C48D9EBA6DDE4166131C2AA1C
D2823D9C0B0D233256F954E01F96FBECAC1EE5E8260450089DC49A406E40BBD7
04E1D9F468464493DF4804DCA5135A97782558861A20074C2A43DA799DD16AE7
CD2AFE564CEAA6CAF2FB2039B61CBB95130F4D425C5F8B0DC79FDE050A374D19
4F984558314A256C554C63BDC198101E947C7D0018194BA4AD5F0D63C8DC5DBC
71E41804FE8920886F18E7DA657235DEEF0AD790D5241CCE157AA6DBD6AF81AF
50982B0CDC31E1E9679D75C4E5A961D754F6BE0FF670F34BA4FF6AD19614EB0F
5BD97B04E629DD665E9D57390C4220A12DCF90F183169956C71F141D2C0CB6F4
3790AFFAB818C7AB2462EF5004F76FC83D45B9D0546D8725FFA0C0D33C519DEB
202AF53BAFA8CDCE5E9770A4FC654F5DC709A9B2FC1774E0EBF54F16FD86B7DF
CE164D50C910BAA2831ABD65A6B6728E9857F654BF51B483E2E4CD0E4AA20472
D4B4971A8C06E45AC58EC04D24BF466E377DE82A00329C607B75258B86587C0F
55B4B785DAC525ACE7CC298784D1C4971FF04991D44FF6BAE1E0064866C92F08
FF6C08D4C75A204729B4D91C24BEAC784B4DC1AB49B9615B30A01122D4453EC4
042527582EDC852427219B706394A9B517A12E878AE5F96B54E744F89EC0FF5C
E40BAB449BE5CCF75860E73572CA7C2A2A40FCAC42A39660A1DBFDEC30F706A0
89246E27E99D9CDD7E39590DC25FA98B2F04D5E8149F8EC7DFE75503C6822FDE
CFF5AFCB383CCDCC113D4177F248EF181479A7C6A39664133A21A5D67FFB2636
E621530773DACAFE8C3887B0E2FEEC19A54EAE02A83E8750E360FBFD10B89D0E
8AE7041F52C6FCF9B65BD9622EDF7D8F7DD7639AE3E5A1EA6D1F9EB404DA4CC2
37483CD57F37FE6C3D89A95E2A0F842621CA38297540CA0CBA1309261DFFA48C
D544CA6BEF224211442CC1A0DCB1E83C494E0889B80D9C56CEFF1063C2C97550
B0713E8AD5075B9983E2B3C570374DF3766519D340C1C00E74EBCD3125FEEF78
3902D487C5E6404815ECBAF1C49F2B4F2162EDE1A6ADDE01B507306C45665596
192427B88CDEDC905828412D825D973C8A6B0A810522211B91DDFDBDA80A8B74
1F645B750A54BCA110E3A914752E4C964575599504B4CD16F1512AD2F69615F4
8D40506773B0419A9FB8DCB24D7F62FB2BB51E911857EEFBFB56134985BCDE3F
05A9601946489B21C53D959D72C245C56283B9A309EB159B32DC1186CD1524BA
AAD5CEB7D651B09FADDB22FBE08F2ABDEF3EE00F2F52D81A8692EC3ED7CD3136
66C011B1740898746A333BF875B54D406350F5FC988D179B2EA3602D02293CDD
84DA84200884D5F63C4253C69BC57E534C0AF65DBB169134FA8DADD216454D1B
66E222C9B943134B97A7AB8DE0B44CEA8F17A6D4A237AE3AB9F551BA702DBBFB
648599317C280BF79FCE3F6461B27E1D61F64C9DCD81D2F792244BD6ADAB3C18
6FE52F5A8A2101572777F582C289EB2816F6F0EB6E3EBE62C485528620DCC921
B6F044366356E7D950263320CC7E590223115919D859F3EB27E9876B16F44C81
D5C2470207BED92B197184911869F859DD5D76F54578660DD84B027F9895AF00
4AA7D07DC68D87C0D54F33486B5F50A95E167E3C5FD5ABF3D87A90E798A1DB6E
C9F474FC4F1469DBC64F68C091C2E68FA939FA3C50CF5FA0C948B0C68C1F2173
E025C6ACE5B61A8115CF0DD73D63F1BE0A18373B881B8C86B62029875496460E
DDDE2E3D623B2280ADF21897575625EFD0BC8AEB38935B3145043EBD3CCF91D8
63C7E332F9B05D4FC0B4986A7843846E4B33511F813DC70321DB05369F62CB78
1D55219ABCBD3FF373EFCB1335D1033E400DD427176B554D602E293239EC675B
F3F3177C51FAFD62883ECCBABAB7C0AB88D400A11C31888A02320CD6ABBBF32C
79B3E9EAAC2E760A2C8CE1E04B07D5B38FC3526705D5107B5BC41DBB8BC8D65A
CFA569DF0709204D95B5C2E04FC4B67D829695BA57603A8B169DE9EEE027E4FF
7F9E729F60656D2F7CC47A913884D1AF5CFCD784B9A821AE7CAC7485AB61AB53
5883FC887EF5576EDAEB51213D92546C1BC5710497E93304BA3758C5F88E9261
D094CE20E3DA8EAEB5805C2D401D8017DB5455E0D424F620CA11DF380F955C21
A734A66C7C7C4999A09D5AD428839822BBAC369ACD699F7AEB86DC98EA7FD3DC
876327A5FF9E3762647B6C8F778E8EFDCE35E6B611CA4A9E712E9A3CB5E47200
60CD13A9B72C0CDDFDAEFAB79879360490EC0DC687420F47C2504459B337869C
F99D01F752137957AF6E4DADE5A4270E576D84C6A9AEB8594B03AC3163821277
3848DC05D38ECFE13E36CD2D9FBB84407FBEA91A5C184F4A7E90AB2E77C3A4F5
966723F07B048A3DDC2537568328A3228B4946E68E31049847ED759D0FFA34F4
471C7D6005D9FA435C6698C969F2FFE8E5FD37C1FCC3B184E4743D56CC4F7908
B848A0B6381D85D22CF2EC2939CBF15C5ABD4F09429C57A6446656F2A9B5CC2B
1CEAE22BF309E4A9C453279987D4FAAB4394D299968B4F6089E7F8BDC7A645F2
662A021D293D611E7FDE61ECCF041294D1A37A7E62502FE5B1653FEF4751FBBE
4EEB3B045C60D04D51957D8D57443EC42BF33B31D2E991175CD1D80563FBC631
2A96D8D223B91BB6CE188E04FDC99E42FFFA74525ED1CE55A97F2BD9E1B6AD2F
C3C2B9A4A8BFDBA3D7A2E30D6AB1EECF7EF22863574E1AFB3D728137ACC1176E
39A99013EA30A2AF588A830AC48CE592C87CED6667D2D409BF4BE850BA727609
5874395B824051900A3A8136EA3B39075B4D0CD23FF0191A1BBE2392513D5456
2E8B6940DE61ECCF041294D0F185CCEA937D81B4EC575E1BFF8F5A239DE3046D
802A64715898196D21257EE38E8135C84B810A2656D261F7600746F71F323140
B7279AA4BCAC0CC4BBE2016A73BA08CF363A6F58D08C3EA4364BF079C4B3C2F8
7CEE65954E4749A8CCC50A0F32987C3D98A3D1CF4EF71CF5AA3B3CE67AB71E90
3C1FBDFFDCF7970D19A58EE814E500C4AFCAC91C8AD8CE3441AE0CCC52493F0D
102D2B79C2409A9FB8DCB24D7F62FB2BB51E9118545D279DECFDBBAF8A34BBCB
A6C09E2E8FBE73675E75E990354A20B5A96530F14650103154B1FA507FE17C2A
7C1F3A96AD20CBD04ABCDC9B67EA9348596347A81D5448A78B92CBDF4B8BFB4E
0890742331FA6239387317F2C2499BEBE2613232E4866B0F82F15CF50BE621F9
C79CD021CBF681747FD266CCC07099B350C1A912D379D9E37C8646D080E86F9D
725DE075AC640662DED658C6AB7DE1747AD8021CDE783FE897152A0901F7BA05
846D540C271AB7A0A57095840BAB3FE25A6F7914487D1736A4484C2FAE78B968
D5F161EDE5627EC01667C7461E08A9B3D7A38231378B50865E862763F01BF681
826878A3EA0DAFD30F258B3BF2959E51650B25F0B84E3893F650F81E28D0CF23
1296F67B8CEE40370676FF5A7212AFAE99B2399045A14869D41365900E7934F4
B6615D5C324302FEDC89FC91A31D29DF003BCDE937FC52E2D67A53FF893B49E2
49F8907AFD01B4632103098CB4E904FE48D9F3EF243AB2A1A92DB2C15EE36342
942AAF901661AD78BA44129CD7932FCBFF2A9621C0BC450FD1452BD53290B35D
60D396E46AC96F5101EEE86C7797478D9FCDA67B7E2C421533291D78AB56DDEF
60FD42B78EA146CCD4F08C6EAF9952BAE0BC3F2D975F4ACE103FD05388059847
B237AB5548905B436CA0B7C8E8021AB9C2BD9833BC3246F3E8A2B8E0A0BB9CE6
0BCC0FF69D2447F42408EABAEF29491CA0DDD3C4BFE88AF827DC4FCEFF5C3A5E
FD2EAD6D910865F5BA5230097AC8E07B5E8140DC04515F10F32B3053445B6868
7E62AB58DB12BE47D297FF23EBC75ABE184E2B3EB75F1BC1898019E05CDD8918
9F7B677D93ADE146FE9D24384AE314BED285D78A786B1A04BD17959E1958DDE5
D24C044A315F256524E70F2308B657DA9992A8DB8E5CDA66C7BFC89A53B9736B
48B2C8711D6DE38347AED4C52882D1C9876F11EBBF01D058FDC990C3DE85B3F9
59CD0F21D4C95804432E91C7ADB46989F52A90A41D2D28B2A8A83E3233166387
601FC167CEE0E23885631DA852BBA7DE76D409EE10C210BC5925783C5E421C44
9DE4E382871932BB7891C79F987169479C47B227928F2B40D8F9D5CADCB3F8CF
BD1E7F8B5DCC39C219CD2F65ED4ACEA814469DA0E103DCD659B2BF1631C624D9
A9538E1F48CD7E3F7DEF8639E8BAC6AD317F78E19A802D28C36C936559914ADF
426FF193765CC4BDC058D09053A4B27B18F18BE4396C900945B937BEB34F2B74
4B2E3DAA4FF54DEF7DD954A6858E19DE76F6F7CD966237C791B7D41858DD36BA
22A9B8569EA662E847B43B3D58C7EC6056EC396C478608FB060A2ADA6BACDBDC
9AF52E3DDD56EAE2C50ED4DC56839021573A53DBF3C2F4794A4608FE944656FC
86F41B2D86C414E89C31A0167D93B23314BFF7B22B40FC856D210263598C96F7
7759BD6CB72301B0ADA3A44868B78687719D0396E49751335D623138C107D7B3
A610621C30258F5F31BA1D80EC74D92E17607CA6539F1957F990525B85A4FD24
540AD7195324995ED64E84A1170B0547375222A66AEC8D7443D8CB33BA1F8398
DB30D313BD822080893D13DD009CC4A4D8E80FA3A1C5FA8C86E9D649D0E81971
733D002FE7E92828B0EE2501AA72D34045969BC0B18565C068AA236F2140E3C7
247B96E53FED60C90212D6034927883801ACB656F25243426289B3436EA0F2BF
7A0AA24B019B9310A9000BA8F4D66A16647D786D67CF83E72D7DAD09D00D3127
2B62431692CC6754D488DE3096027BD92413CE0F20F88235CAB622443A1BE411
6D96DB6D599382A500E43C0F9C6B05D00E82C541621F6D1E70A1F55856B04834
194869D72405CBCDD84837AE6D76AECC97470A069DA361E1FC9E08180AC11099
E20004563DE9CF16CAF6AD6988F4912AD08CC15DC1945546163F0D95C371AA67
319B6262F2790F57D1C425BB6FEC2597D681EB4AC7FC36E3B941FDE49FAE1826
CE1209DD13BB4A5F3E8ADF8B7C28796CF3B43FFF4ECC07C625C37042E7B5F2E0
5817100EEA6E6D9A047620BC4CAD3B5349031BBA489B78A8214ABE50B3803CE3
2E51EC4DBB64BF440ABF0D08CB6317375C196C980AF6F28122ECCBCA22DD64A3
360EF109006B7D788B4525A509F3864E479CCE6BD4AD8366BE4714DC4CA06D5E
6FB5F8D06F9451CB4F458C94BCA7D82CC2DA7584972FA19B4FAED722934E2A18
C71A4F3A9D5000616EA065EEC0DFD78D5E81026ADA6BC2591C9772A6BFB6CCA5
C900DB401FC26948B215A24681E92D2E498E8F457A562F5D36E7F9743C1EA324
7E4386A5669062C0E329B542F165812728D71DBB164196AAB7ECE576D9F891E4
60A40E2BB12E28D12C0CCA4092F9F354BB16E40CC682CC8191128B0A67AAE046
7A3C96ED908048722D2CBC1AE64F1B085677383ECD7E725380CD19EB0B5AE3BF
68F02A192428D4C5BDF79EBAD0457CADF1BBC033E1FA05F1E4A7EC8590100304
AEF8CD3CE3B89875A1A8632C7D32FCEE385C1811F984E4B591F2B8775D596455
804435A1F74DBFF679BAB5DBE07B0D288ADA4EA95315C714D1CD3A80C0AB92DB
CC5D86255260E586E5BF91DA5AE8EB353833D46FE609764C1EE288A3A49D63DC
034ADF6D149DA80AB589C60ABDD44BE1EB6B3F8EEA60E4A2451592477BF2A48B
C4D4A692A57ACF97F2903ED99ABF3605E9AFFFFFBCA511735A563242DB06F6F1
9AA2F1F87F30C0AADE06B13BD0178A924D5FD86A6DB5F2509B5DD1F669E28768
FABE95E6D42439B561D8EE3FADAD3C9F2BCC49A0640C3F9E7C53E6FF4EE19D27
7D4DEF058DE5836472581D9774263397C47D99942E231E7EEA2BAAD0E754761F
60DBD92556F2111C9A3A6752E6545DA9D2B311E6B39E6F4739DBD897C743A8A2
DF87A4866B45B46394156D0444E681D22352DEE39DB573D694318AC24FD12A76
AC0CE331349F6B4D4347F1E55E05DD0D04725640696B370DBD9B7FA5373D1683
FCA650A7C60B8B4A6F4504FA9F8BCF9EB23034E72BA8FD823AB6D9C24CA4B282
C8E31EF9C55D26FDA55470AEAB4F82FFA0929BA05C270CCD20F49B3A8C0164A7
BEA283E748236550E3AF9E776EF7F9C44675717F9727D2E7523F7AE1798B0C17
BA4B56D34A9D06319B7AD6D1E5BDA6D2C176B763A8DB641ED0A0A9E6CF8B200F
B6A5BCD1D7FA7DC051CB5741559A0B2EBE2B19270EA6787A487B0A807F0C2DE2
DF4EA4AD13E84E11690038C9373C12AA0AB340A8F616A1BD6B4FCCC4A64E2144
A435883E2F8756D5937DAAC4B5D816D3DD16CB1DC08219578DD3E41C39A7AB72
E7BD0196059F98ADD1ED265E96E5E592BEB7054E248EDA9D6A7ED3C9E8221B49
BFC56D12B0582DDF3E221806D7B4826844F02B2CD6B149B7B1C569B6D3A3EAAE
DAF80347A3EB273F554D5D5BFD6D0977E80183D3864E517A1FA1C02C3DE59B32
BF671E150ED69048540C4BA0516F25C4BD172D1C556A82BA7CFB15941518BB6A
2120A6C468E8F80094A87894700E0AC1360191CEC83D0DE8D91465975363F9DE
2BEC39E49ECCEF3BCA8C58784B9F4DA7356154D4BC31F7450C2F2DF6FF5B2551
BF8EF7E16BEBED01CD6BAF25464B44B08E27D100B6B2DA0E1596186A7F2B9899
50D4DAF8C41ABC55AD12455545E164F33EB202307968C5A4EFFB389F15FC2D60
C2637F87BB92EB79EC123B4526B88B3DA210082460E8BFCA4B11F62A03F83F80
467D1734872892733958AC9CFD3898186317F6D48C4CC3AFDE38783E9CB13DA1
F0E6203D8AC3B654D95E6C33BCF60A454743AF776FC7AEB4005E38ED19E92E26
2316B61FD3957A762901FF276A8737E17BAD787F80248475F383B3FA67FBDB85
DF65E5DC7E42C594E901374DC11480BDE1C823F1EEEA38D43DDE2AF5081AC9E9
F69B87DF1F8278F595DDF2F7A380C52070C05FA759994A4CB2754C52ECF87BDB
0B1DE3CB077A9C516F1FEA2EE0E96A025E3838708EB224BA879CA5F613AD8F6B
A804575B420C20FAB4B29917F990437978DE17270715E6DAC8C7C51FF9BAFEAC
5E6B5646AE07AFA4423177A9C4C8A3A16CBA634D6317061EBD4C83EEFE8AE06B
D6AF3146F58AF4E294CF640488B48A5A761E465A867DA5246D2182F7D5324085
95A2505EC3CA2A4C0E997852B119B42A65FAB7BA910E11E7F2C6972E21934F06
57DF0B232CDA8BA3FEABB28022110E3366BD0479A2DA2A48685A007FD0B52A2C
14CF9AB8E765C45D9A595D0D9CBC916924BEAA0F0985A9F69A5E5657C8EF4E71
C826E5FF80F4D3C37A7ACB0D80454F16B84ACCE6EC178518DCB86CC4D93D9089
D0D3BC15657FC973896C7954C7BD374AF1A3F95705DAB0FDC5E6E2D3A198E2C7
F476CB49DBA0FFB2CD3AC67C978F8BB4F5DCFA902BC1F61B40C080C56BAFD8D4
B2476BD89BE20D38903762CA48E58EC31B946C41CF80911826F482DAC5B17E6F
B5A426C5554B7A86B8E4654F653C946728D6C1D65F381A2A8D1E432A2C5DB429
0FD424EE4004343402A24E6776FDCD124A089B899D47030F6B2FBF9A1BCE4E45
7EA922160A3AA6D8AD740847322114D27DB6EE74151A25F78C509CB2A13C0560
C3CA04240E49F4BB5BDFC7063F24F365EDBEE29D2A45637D19A739C68C6EDB02
0BC07FE803697DD1FC0623F8517213544E8CA05E59789CB27FEF84714F4E70EA
3CDE613C9A7DF93025A47FFB67B2D7178E6BA670D4EE3028BB85DE5BAE3BC88E
BCD90CF3D97EC8E2F4A1285667707177C3FF626663380089C6346DC5AE77263B
50340B51838A6B7AD798F5909C7423509A833751ED82C1D459885BD15ABD6CB7
2301B0ADA3A44868B78687774920FBE2C6CFD120E0E4B0DE8F23699C452B4406
418EE4AD1570F44595901DE3454874D7FE51529673200686F0383670A99D2BCA
E381AB92C584779B2C67AA1C72B37A269D88497C47B51710D934CC37479D4509
6C7F40DB0438C4EA453615A2F2CFF05B066D58D80C02D215294D22681A0F9F7F
3BD2753D73E988737A223D6BFF7C303BFB33BE569B4F1E0628D5D76594E8C5DB
95ECE71239FDDC7969D2C61BDBC19750AFCE844147A6DA4CD1044B667239BB0F
1B12C683F56B29C507A6913EDA0CB2580456A55E17CB51F218B8B4B1A5B11632
1FEF3FB26BFA8A80D07BC6C3C96B61E18EC6FDEAB3594E3B70039B5DDD3E8E8A
E8550601A42A1A15D1829318E2B62F13D0A851D5ED8217384099CF4B2C343FD0
1B9530C7333F9B903268006A9EFAA87A3097BC5DA3BCA4E403BB2FED2543CBE1
C46EC92A4D3F5C4435FFA48AF001CC46C17687012BC32C93A581900487A2273E
B8EC3A9BDF2CC050B1A18A7F79A9DD91EC84426FB0BB1D32B7A9555EEF08BC55
70B1DFF7554D8A46C2E3EF966BEB61364625920595B4E89EA543279072A7DBC3
84F1C0EE73B09CBA4448AA595EAD2B623303ADD6047815851166F4DF9137EEF0
43C756A238215BC6A0AEA52BEFD124053466D3B408BCD8F6355BBB0C9016E84F
D89D639CA2A26D5F417CE5CD2100F5FB57E18F08C0C5BC56711B623C9865BCD8
1F1D0D7E8214F30327AD1739F8E349888884BECF691191D88E3365D3B6031CF3
4E3FCA07EFE58034363F4C5A6D03762E6593044441D8ECFEDB79EF058DFBED16
B0C0F7F5E7B946883D9F6F1C8B4DB70B6855908E36EBEB88CC2B519493C9E9E6
2938EEF6C6D3C3C00DE376AAB9B3BC311052DBBAF1B1FEC48D4A2E5A4C6D38DB
17F29620CBA8347351C246C8F579148DC11416487B53F2787DF1D113F94B000D
43063306759371EEC9CA7D4E88AC6EC9100A418DBDE372728FA9E7891C5BA613
881C130EBB0426A098468F1A59DC48A202BB2E6C2BEBF6F37C776B4EC0FEE720
6D27C06741F0F4F82ECE457DC4831E4521335E8293BE9BBE327A8B449FA9D566
B7FC603D3AB7CC8FC93D6966A56CB8E6C841EE9711F5F0538FFA6BE1797C2BDD
B7AEE1E8F45B35D595220B3C964B479D6165F6B172A3138D4968B839DB9B19F0
DF24E568936163FD3FAFD44CD162ACBEE794F6DAFC763CCCE0C2ABC7FECB96DE
687F978A3DEFE44EA191A19A2C0895B6B623066AC656D01D44A1E5F556B5B7EB
737A9184AF21E4FD370EB39BBE0984741BCBB47B3F8174447A9777CDC9C4D9CB
1C5B55FE36D55D8783F1032B9ED4E72B03779E11685EC193EAC0DEEA16F65CC4
582CC321990D63A07FF5507A34F401D80161A57CC45EA0E77BF5B24A44F45F43
A20BDB91831B2AE3E2D2DF92F1768E499699BBAA32DCA4DA243A86C3A45F797D
13199B68FCBAADEBDD4CD4B900A66B5FEA2F450511B5FE3EA94B2C8DD643900B
9DE5B6FD103D2DE1F3B6DA8D439B468CD1B42E05E0246FB44E77DD1461BD6581
59C888E89E3E48BFA5BE91BA9847DC93F0101BE278E65D9AE12C53BB38B98882
9D2AD52055452EE14A35302FACC114C643F7F61C412DD78E4013384D3DA97D51
AA4E3E5A33C8C4BD07E26EF964BA42A84CB9B38280513AF1280237CBE074D111
A9F4A3BCC506B40142C965888B36B81681FBF6156B9DB4AE330BFF9360D93A26
BD00C07A8352B2F46C6ADD5125CDF74583DD98001F1BBCE2596BD807BBAC1D01
7979602FDBE74A639B432C56DA1974A541D32C44AB4C5AFC4055260F19A4611E
F4C64769914F7501CA8D00B3DC62E6AC2F06BAEF03EE07C490480A4FE9566A28
8B382026306F91514D4112CCA6FB8546796B6E1ABE8BE912F59DA86B11B3BC66
6376D2ABD5FEA39D7FE05CADF4FB39A7855B790D76606863D43B0261C0E22973
37072DE85747E5661A027E0789F832F202109BECA97D655A16C0C26855C1E668
EEDB75C1B29DDA38C6BFABD3FCFF3349882DC39AF92BA3AE7AC9B6F035C55B26
CEF8A834A508614C4541CE81A539F8903CEE1BBA61C70B8A6E20AEBA02B2BD58
D14468151B2F9F239D53E6DE2135CD1C89F2B0C476DD391D8F7F3F2F0BA13A78
235AD9ACC61C04E5268DC2F1B733F70000CDA74E1903422F2052DE9165B5FA98
9AAEFB2F85E92D25619319394EC4D568EBAE3950B73A95BBEC9595CCEE99D0F1
E85111990750232DCBA5DFC9705DD8F660F1880F19FE0EEEAA224D261C3AED3F
2EFF8D5513665633A369E6FEB1ADFCEC2F0F4B7B82AA179727D332AFBA67F334
D3F47F63FB8EAA71B39B7AF617C8C376BE3EBC326061095793E8AB02E07D8FC8
50706C43CCB8B839B6ADA1CD04605CAEFEC6B5950F5813E3717C31EE4C4D0421
EF7A29A36AB210F9D25F2326C35A3B1F9AC36D1327FF21FE901B3E17A24453CA
53BBE7E2D3A198E2C7F476CB49DBA0FFB2CC0ED4FFFA195AE6C3987AD9916236
45C9964EBEC472C289DC70B5A6B6A9AE9DB022ECF780DB926FBC2C5D63B24176
C9184F8DA8150C2A1C3816C29255885DD337DE2F7E9801C4ADC12F14A5B20978
8C9BF4E38DCE8EF6DBD241BFBC19227D504F797E88CDA7BAE40A77DA882DBB81
EAE547713D0F7BA514748C17A687FF469B4350F61E50699E9F9ABF6EACC6EFCB
90ECFC2BAC8FC27E21449D2880AAB2FC9425FB2032D98BEDAA0E6752489FD62E
02DF25B98EF3FC661275B66BBCAF4B2C2C88E972B11E54B12207BDDCAAB26D9E
1AEF2C1227C8F6775DCEA57FFDEECE1C611570522933714B300421612964B30C
DC28C2A48AEC3F2E8C6CEF53243684692D507362B19F02DE7A403703CBF65E4B
F3393B90F7ABE0C01482F21340FA5A1647F7FF731BF02025DE5CA8D7F86B434C
1FA9AFF505956BB486871FDADAF480995D35324DEA5598697A59927A2437B421
7A00A2D1EE335835381613D5BC2B046FC6C8805B0F5886E7BF083108038858FB
2FEC41F923737AF9D6AECF86EE709DA936C9D56C2218507340F6D7F24C6D8A0E
21BC8B4A0513829F54404C62BFB97B90B56765ACD02A788EDB101BCF56805197
2F26315BA2F314DA2144FBE00582C5F29F61649A21FEAB076CCD14323DB74378
2230248831757D9168908F0B8E1D911D41919988C78189B1A0EC5766421818C4
96E464A4FCB1BA37E4A11BC3DE5341C0C912D3C74E1D923DBE47710970BE965F
D5FE460A1E25D5D129C0C0339487A7C4B3FD9374E4D71B98FF280BA80D25A157
7850F78482D2211B350630C0AEDF928AB2757C376FD674B1393171CB6C273695
2BCB3C63AFFD6D093E310562A68D662F0F8AE148231415A10AD6ACE460FD1FE0
C16680C2F4E22F2494FE943B79E060141C49225052ECAC8491D8A6B6BA3CF72C
62B408B3EDEBB7657D36ABAA1E08A3F241D8D12CE496182B15C465F8466738C6
66EE64B1AC50BACD72401168B591F4C6A8A57CBBBAB71D621945DFB33B196528
D809B14165B374B9118A1924AEBACB86E7426BE6F20F168D4CAB520B2E96D4A0
85AB904EA0F4ADCD4434BEC2A8AADC5B8D4758CF8B48FBCE8DFC0209EFB60C19
F08F43683EA2D2753404AECFA3FC10643AA799D5372BA57551C602FB1475D388
051B67C24FAC86483D4456344AEAC5BB976C6EB256A8D8155EDD8881A3636861
69AC468475C48F3A096FEF8D0E6F721C323236F7133809C323373439B59A6634
289DAD8D7AFAD1F5FC17D8E397EE04C0C5D000D37BC694CD83ADE72D806EA350
79B648CB419390489B30C6C1F14261F31CFD8519CFF95458757DD2AA73CFD971
A74C76F4DFF8B5821ACDC3847BE0F6A23A0A00B7DF4F412C71012AC5AC086B39
9A2E4753AA143E39D2ABEFEABA4BA27F07048F00422F754CBC581869A6F4AB5A
C31B3E91DBAB6B4EAE59456EC1E3A07C89BF68F0E03334995451D8FE9BCA93C0
78907D701BC976E21D3A6E4C5685DB25ED58AB04BAD0D956888E0282FEE20694
8CBA222D59DCD84A08273C2FA9FA9242F6CA1D0EF805D169918DEE08A5301563
093E8C8D37AEE0C89448DCA90CBC58D06093DA493170A1F86BB85D978CB24343
F8DC10C20787DAEF7420E930F4A61CB06ED6911BA81D6B86C77073EC050AA991
9051F931BA0DC6CE19922AE36708430B15D6AB519B6F10F2BA99B67B65349748
27D64C284FF695E785A633B6A1EF0EA8ECE4836BD813FADDFD656A7ACAB973FA
1264A37CBF49FBD6830C59CD55635708B8AB5B8AC0B8AC8654D2E801B2D2DF3C
A45312A7D567F9D26F4AF0538AC691780276906DE2871D04FE9D2226ED877707
31AFD34F9B091FDFF531A97C07CE1B963250B38E1B889CA1B5E1B8E6D6C05F82
7B35FE22A5441DF517B61809014A5280181B4FEF8BBD81C273AF423802B49F17
FA543B44B456670C7991E957AFA427FB98070B6A0B99797FC4B2DB3101B7483B
EF3E6C4B0840C64C098CDBDAFC756AA94C2AC62103BE9217563DF7E9CF159704
2763A8C4581A5570DE4E4CD41ABFA3B309FBB866FB5FFDFA099E867008F81DC9
276647F359CB0A97AE282269FF79321435EF6BCD5084491538FB5FD9AD7AC4FB
DD8B556394E9FD2A8C736CC7B5BC6AE4582E292B83E929C6BBAC80B236933083
57F396A23267920BAB7BC70C7F0FE3C97DB569032A02429ACCF116FA6713203F
6077C8D1B8175A5819B2085593DC5D6BD0693EFE20B28BC4D78642045A2D63D2
CBEEE0F1A99F67C0202624A3AB2D31E35322F17D107210E2EA71E36389C7B307
D11560336B4B2DBC49A35E969DC9331BD2B7705F93D28E08B7E173F294465B81
0065F676ED9B6D0D9A1A031D209DE9D1C974E565DEF011C88C88565E1157D914
7392562FAC9D6AC20CCA7913F90AEA8D73393E1DE4BEC8FBEE642E948AA462EC
3A45967B95E178B567DA7F84E22FC224F148F4C33E329FD1AAB577E57086C87D
C3A6CA9BD80B85E409F2361E3B8C11FA43F62140BE7479D6CB776E6AFC4EE186
0B42049293ADD2B20CDF379A5FB3EDFDB6F69B910E6BF92E69BC76D76935DD15
41198D97EA4F36A694D488AE7A183336EB0874062919928B603FA4AC38DFF63D
4C44F25FAE6BBFB5F7E1DC95
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2E2A68EF8D1C1218D4CAD6021093125A73710FE
E11B6B3B23CD2AD46270F92FB292F30D852DDE60E6818C162254247893637369
C7729F5A4CBAD8D78B07309AEE44069BD87AA928122D1FFF56B8FD5782BA085B
A2213F8816F01183C3CA298E658EE9C13C6350F14A9209DE8A4E08DA6FE245BF
568355677A9DD49EB4DD3686B5BB030C72397BE2798DC546A5040B8F17C5128A
779AABF374DA038B94733191AAF942B6BA35E22B7DEEE932B202E981784A16F8
F33E50BB66F44593DF8DB37452837893CBA42634629F0D64BA7581CF5E966FB5
3D24198F715A9CCAFCF4AD13465DF0D603C48302D7E683BF122B339AEFC509BD
A8400A5A1F19EC6C599E20238CEDDCA78E8314EDC6B44B38419ACFED6D092481
50786DE3383AB03CD116D52E4190353903E41392A1D01A4EE8A4BC53F31E205F
6E13FF42D9E05C483027FFFB98237D8A88F0E9AF05FCF284185DF4F84430F2E5
809E05D69ECAFB6E970CF47EE63D152C91D08CB1F2B597128D999D41E5475852
43A37E9C40B98C34E4C548CB681B4F0CFE0C808A6B7AD79F5426E165D8E117FB
75434FD3280C18757124D4823CFA87DE5DDA61E2B4C57392779188B8B1B8C05D
0A67AF2BCF74B60574111AD8538E5C868CD9A507E82C8FB885FF2A2FB18CDC67
08D9817386472C80FA1D0525852CA7D9F733FBD0822E7A0BF87BEB994EF5BBC6
F11E9AC04682962D485C410574219353816B83F3F1233322EA4807BE9511D8F2
D78AE5FDEE28D416CA830483D8BEB1F5338AFF9EE7A2C46A5A5618FD4CC4B79A
65A3B693B5C418668CFE7FBA284E1BD6ADA158CE5E34B9080416C4F4938658C7
BE3FAC870A28CE055D4D73CA3186CA198CBACA20DF47D2DD3E4F67E65BE2599E
DCD10D0407325DFB284532BAC0CA783402E666543CFB72EFA692DC73480762C5
FB6D70BFFA48734BC752DE3EED3C9B1CF54831588D2E79165C79B067492DA642
C1EF81D9CD3C67631F5ED2AFF6FF3081763DB6547047D43E14A7651140995EBE
154C2A4D81F82F434ED897A1C30FB6A326B4227E74CA9D00012D40CFA38CE640
7BE45B8EBB812C8E77082887B0E0A29E32E05F62318B18F5FF28B9A094473FDF
0C82C2930188C769172BA993B9773098D7B1DE57557F019DF489FBFD9AA018A8
540F2A21850A92EA39B643317D8E25ADD5FD1B8E8FE461B8A93035C200C355FE
14B475F24AB6974E13D88C67515161A40FF157E88C15584BC7A67699D8962AD9
A6CE80D1507A361BF7F77457262FDE6AAE4A8B7760829319C95757E2584B5189
BAEDCD9E573A2B023352069A4FCA1AFC6943CA70287B8D009485AFF1238B359A
02D9A7226FBE0F09E9FA8EE614B49E91FA1C9AB928680D1AD07D3EF225EBD008
5A43DA16F54CF8BA929C5979C11C4DCB6E2A143EC0C99BB754DCDF850B62137C
9745B86DE2C28C4AD035FFA966F401599445B8D890BAB76E5248A3CAF310D961
6FE0C6CE2CEEDBE99A3FD4420C00454E745574255A02CD28BA9E87A2A6A1A9E5
EB376EA8FBD382CE9E7C4BD057364126ADB5ABB29BAB52EB8E57C506CC8CF8D3
A9CB8301D6902DCF90282DEB09D1FD6C79D15D867E142AD6E699337FC0E05251
7CEB71717BC4E232465908E643C31012CDF2078E772217A856F22CF4257C9DCF
EE98A7EFDA898E95F774F783BAC7A203A4A29D079C1327AD276C7EB73FB49851
973828B8BEF905E8FA521F1678786E4543ADE229DACC3FF6DDB82D691CC1E336
BD6FC65597DB9B12C6005B92141397B973A5D7803790D72A65F33BA7437E37FB
588CB75B779B5361C9DE43C7C07939901D2528B53F0CFC302D910C0BD54B04B6
A2A528CF622F023F409A2BB8C16C884E40B3409ECDCC14624398AF0D0162F511
718D0B4B38CE4CE1D9FB3A0E8547E89CC1305E9D47C743C7AB0E82B0CB92D416
7656AF118BC2572E92D94626E7468FB9410EC62469790795071742F41F8CAACF
F479239ED03A6FCA11001E6DC8C07E524C96C539EE25C980011AD37B43FBB7F0
2B47DFD984943D08B82821BF2428377B1E37D1B37F5ACD537EDA9444F60552A1
D39DFD1D1F1DB7A5E2A4F60EB7177E99D41EC996DECB377148ACE4BC2D3D6576
5B7D076ADCA2E413F79262468286D95693B984EDB95A1698FA154975C15A9386
F0E3B7BA3D67094C484A87ABF3FA3361CC952A873A0B4B9AB3368E7A6AECC2EF
28F24F95F9E4F291D04EF5F48C80DF2B3904A6D968D5BEDE27226931620828B9
9F77305B3AAA5790A2516FDB7A5E7B754D3F8E0EF91C7E68AE1280C1A08C16AE
43681A9708425311FEFB8E314FFCCF475CE72A7E721B7003A026B0359531EE30
F62253BC19F2ED7B040E70F1B71555B347D2D17CB8628FD9B886683E291900D6
497B38B761BFF3E021E72C1CBA4328B9E86E1BAFC2208B06ED0FFB75A7420DBB
08275589987D81B106FE3196DC7994F3ADEB8D0920E6F91F50CEBC8B023514D3
7712FBDC504BF7F9B939D6A15B4D64E5F683A676BD7CAD08F6A9D6CFE027277C
BD941EEEE874B88A2E4C3BACCBCB0FF6AC53B9CE87AC1F233E8A6809FF158FC3
1A1BE604C5ED0E979589DE9F855916385BA6A4CF3FD8B389526B0192B445F284
D0E3841E0C424C67C91483B3DF8AD4E436BFE8977B50D9EEC70EC7CCB3B0E0A4
D80BF5B30EC9DC1727B44E0A07EE0944AB61A2ADB54C5291EAFE5500BC455950
5DEBC648BF3BE97DC96A8EB57949838C9468B50940D51C799F0BB1E027C2A23D
B3DCE087D0F5233126B164DC653A89EB1893A0BF72E56201DD07092CA78B984A
DD80D9794E9729CD57409C1F7CA10CB64487804685D3E80F08257CDC8FD4860E
31EB5605F1801197BAEAC84DB22397D6571325B394857D6C4BE242BDCDF8259C
A101C52F7A0F8A5A1A4199CC9D7FF6F1C1CCF90A4BB9A165EC79CDA191CC5AE0
CEC1747AD16E7C3BABDA0DCD002BBC94CAADF14CCB91A7A2436BA31E717301AD
77008B19009B3A8AC75364C8E75B37F6BB1AF8EFA7A66F9D093C3E55EC12F5AE
61C6E4448240643350BBF6D1679F7CBE909506CD67ED4482551FF6C31B9C7DBA
697F3719A949EC7BC3CE225C0FDA770BCFA8E3A290761D16E919EE0EEA3ABDBA
0AD09E04867661E346C44D49BA47846DF2118DD643900B9DE5B6FD103D2DE1F3
B34315F66286B4D8CCD808C3CB9B92D2B2638AA003B8DFD0B94B649E68E4E719
601390EC3CD547B097347022B082A46E0B4ECD8E73F9F6EE49622BDA78F2283B
D6D5775CC4086F7ECF48B39681BE1EE03C0D11AFF3A83E88091A6A6C3F15F3C7
29AF6A6C7DBAA878C99173730771681FFCA394009F5573150F4F4DDFCF56B4E0
1B6C1FDF53752834D0BA7C5F83E9A415BDB772ECBFDDA721786FD3D314986E09
ED51AA645FFA5299A63438F0422CF100675634D4F94DB4D82AC088721016D6A9
D275FD7F6636B74B1B0A47FD3B88BB46D921F90E423CD10E102F98DD2B22CC57
CAE2627E75424C83D66C2124FD1658EBD272AC805E5F22E164939BF5C44F3748
7C77F571A2A2B26A006DF942BD8FB1E518C795D98C88AF25336F590EE994E59B
70EC24FB04F3CB951D19DC7A0F32FD6FBF6C036F2E0E500DB9858ED3E8504C97
6E1DB24C0D071936174607ACE86EA11C1EFC3F7E76594C16CA4083D7EA5E9D92
E4315B11F3378473F6BC5FA897BB4B1FC40E39CF6B65288C973DFF2C16E9F72E
3116F3420DC2DB48D0A84992227C15BF2128BB0C8ACCE730B90265F9168BA831
CCF52A864D126471D2BF79EDC5512B75228E7011B71BE295B620B9E745F4A05B
AD737B2A2D1C0BF33AB0C1F78526E27C88BA1C774F96B17F28624ACAE5652DAE
B53FFE6A603B1240C65C79A68605066B1F8B78EB25A9F510E33C2F75DD7088AA
B9D7A757720280BC29D8E32DCD4925E1B19C6FF6A18AA6AEA3B816A5C77341D4
E270E7EBA5CF112C663A58EF30FE297AFB17CBF26C25074A589041E9073305ED
0F0EE99A78391980EB2CA0828B9F1A86D6957FC57709BBCEF1D42FFB8C7AADEC
870FA38042BF9AD232D663BE4CEC9E473DFB1460CE922597B23502CA2E7BEE12
697849FFDDCF78A1714D3F9C90CE7F8D0F48F229A5B0927390C4FAD4AB7CFEDC
EDA76F0127ECD766EE1E8B0657C33AD2FE36178E857A843906B258604033CF8B
365CF72E26490B762631C8C6C6CA809478563AFE4E44266B62F5615EA2905BCD
203EBA3B15A71108EE04978D8A0B74100DB0081DCEE06530455D1CB36C20AF8C
5207E716A84D61369930735F7838C98060E4D9BD6BFA8A80D568928EE967F726
8C20200297769D57AB2B20E21DA34830286BDBF03E444C6F0F4DAA48B9B388B3
E8FE6778CAAE0DA2AF55D8FF471676401EF65079DD13F42BE007D82B270EFA42
D8EFA464089F9630E2EC94D8F61D059ECFF0C6AA22C18B932B1104BEC1B29F0D
C7AE6CCEF2D0C62B435896E7D07A5E1A367D7C2A1809FB3D9D75B7A77C4347E3
5DA70EA5053F680B63510061B7E551DF703B03F7D16009737252EE4E4DE5C023
C137C7ECD3E110EA5C329697E95864650A7F1E88F7A9D8C8015CB8EC2D43FA64
0B8586274010821B65A03BAE4891D532D0F25A4455CB3B86FFF895B7C475C0D7
E5E46F213B789C3AEDE39A2859FAE9333A6C139E32A3C82BC022D2B30E6BF73A
F847074B61C682AFFA0D7C809BF4DE72838B65F59C6B52980A98DFCBB2272BCE
9CD509597D8EF8DE086457DA8CD59F743E8850ADED897AF7F52A51C3708F2CE9
98BB5C448C309C5C00A525425C786D99B80F3D42E0605A9110116BAF971B8397
282718586A2C57F282C6F95B1351635EB3899D997CCDE74826BB97485FEE2F17
8B20DE55B7904569998D74B1DC13AE97EE4FCF98CB4DE8AC3CC9FCB3772DFF81
3066DD52A5A69D99A0BBBFE3913E82452B59295E2A7C6A866AFE4D506F6701D0
395B48CDF54D79E86E18821BA56FEB950170438A606D87BC6D399BFA142DA106
271029E3285904A31D1442706F04D0E68D704039DAFC59E3DF1F5E5E6666D22B
2EF635DFA8794F978A134F6E9CF4617488D9CBDB97A5A756C3C108F72D47AA4B
572BC5972F05E6532BBF2D77C26121DFDF26942ED277F7AB2E72FAB34E9DC844
1FBAB5BD7E68C13693EC4D92D62F694B316E7527D161F717842C95BA0753E1CE
3D7050D3452EE6BD699856E44452FB74DA8AC9017EA92B1E130FCCE5F79065D3
51D27920F6C2AE8698A561F1E0847C94A3A801CFD9A84E4185042CF485C8B7DC
2BCEA0E52434E9A0D62B2C7A11FDDAB2E8FB254C3D18482D270DDD3F048D4BB5
03583A071683761268FFAA3FF8A637E2DA191CC42F31A07DD108E16AA60CB0F9
BDF60A3861C4441C655F722DA9E26CC84E721A361BEB86EC10C04A558C6857AE
5CBCB441E9B74F7A936D3FD8E8DD4E70FF2C999ACC476DBE2C5BD353944DAAE9
2656BFD9FF6C322896B2C8FC0085518989D3F25AAAB3B0B47742BDAA87FC9287
72AAB229A29D9407B3554E4B0F818A544B95E6ED927116F8AEFE052229323CA2
116C478416310A6CE0F84E682796409E280372A27B2FBA37304E3316ED1C9B84
13EB82483FC8FF68DC202885FF6B4E229C98048DDC591B38F103538CF82EAA8D
3E43FFCE2CD8EE5A583B4E98B9DC2F8C0A39F842D8EFA464089F9630E2EC94D8
F61E3F3DD07FD45BCD5AE14F35ABC39591932CF9F43DA3444CF1C45ACDC1755E
2513F9519EE4F7C9BF4B82DF62CAA0A30E89778199B0742ED5F085F24804E19C
4AD8F1767A4E46F0085E5595C15109820E58B8A1B9AABFC27F1990A643FA3A2F
0E019E03AB3AE26F5C166DA09E0CEFD76462F243C59E2F3879AF451294B4A5A0
A631DA7ECF410AB3F3A1C989C495DEC4F2F4F6DF622880EB4A142DF7D8ADA413
5AE20CD38AFFA0B3071E8666FA04BE895360FCB7D9121286C9BD62FC0EEE8E3E
CE5AEECAD488F5793581CA8BED6D24F4F5298DC63089249E27C8A57E29AE4C4B
625F6E371D5709B7F73923CEBD636552274E0282025CBF03F3AD98CD7ACB9E6D
171C77FA426CF2624C0B89FE857A8AD5CECBD57A7885BC767254377F7AEBCF09
E563813C190A27CE5AFD43868452DA35B2569AD6EE6C264546CC60C6E78E3278
62957544EC8031B2F28BC2E9D857E66B36BDE8A66BD66C4E9F00CD4FB0930F5F
8F9C48091E72115172CEE4E4340353C781356EBD7415B50599026B366E652EC8
5B3EA82D31F31DB5D7B91894630693083C4438376802C7E63E797FAFFC204228
5A4330E53A3D6AEF2574AD633A45CA066A201E98EE334E93E0147DBCF35D6CB5
FA1978684CC9771286946DDCEED0DBD821CA2177EC85D27B259257698DD96635
DA61776FDA8E917E7384E3E7781B581FE4EF015C74AFCE42DEAC2277FC08AFAC
9EC74E03B197865B66EEDCB85F0EA2FB54CB759B376D0326054B8F539D607B30
F8A1CF6CA8BBF659093FAAEB7235F756077542B9852E539B9111D58DE5B48645
0C36C74800970DD370342C7205CBAE0CCE6181B6177555730EAA97E512100462
DCCB1341B544833DAE88C47B68F13821ED0077F1BAFD0FCD21A6DD5371DE9A17
C93C1493975ECB1F46B4967A677BFEE847A8F50AB34063E50F0284905BE1D53E
DFF9C03633F2D53EE268E3D381C87EF69EEC20964F845E8C5B821F5D8C00AD7F
A9FA045C41D5986EB0A40B5F62743265EF75666FA57B02C9F5B7BB957941539F
18D665F341D884E87D22B2B8E48E97472B66041B294EB9D1E77CBC4A049B243B
FD1D07AA201B917426FC775736E6BF71CFCE312EFCB418B5230D6EA03EDD7A5C
C606952DAD25E883AB72BA70A0CFC94ACBEABDE019174B8F1F6C9F49A0881C77
8C74EF40F81131F5AB4BE5BF0514687BCFD5F191525C637E1963BB97C92A2194
5BCCD36E1AF11E338259F0860FC065DD42F6C1CBCA7AEDD5B0B8EB8769DF99B4
5D8AF3A2138E2D002287CAB2EA7B3A16AC53E93D3F84647227CC886A9E4DFE55
D8DC14F48E25EBF4782DD848D7E851D5B85AF54314CE689742939BE9B8974BE5
945F8A7EC1F7A81906803D115342FA3127D068FA5C3EDC07749B45C224189B80
A0A47F37A63DE8E5A0ED740E2DF6AC96657CE7BFB73664306176FEC09C93F925
0E49F4BB5BDFC7063F24F365EDBEE527F64E102563C5798C446D447342C7736B
A389B6279B8947E54F672D8ACC72A4B7092C8CCE35F8096A6545DC35DD492447
5D43F1BADB0EE696FA118DA27A9F321B44C3574B20D815E7E224E90E757DDB68
3159A392B99E22B5E1D2F2FE872176B234D6994EE0F867A664E935D36524CA17
4E99FDD2019DFC51387BCAE7859B8437E0DB5D8E13419C34DB36A8553712A3A5
49E68CACDEFCAF9BD1C75BB15DA42E27FFDFC2FE7B4C2CAE486D577886BEF364
CD415E8F9D2C5D50CA54C31BAD31DA8D1CDBC4D20F3F418BA41793972F9F208A
C7B3FA572F23D804C49181CB4DB6F23D694364025FB9412048DB062B60FA8ED4
76D9B295A44B3F371A6F7C9D6984695DEC22ACF3C37B66382C5810B42BD9CBC3
25647272ED33C73CE7FC05EB5AF6058388D4F6D6336534F49E4FB3BA34DD2E64
6E8DC53032F5A97CE700567271220D5E3D210A1EE74D5010380D740F2AD1C9E5
F430B4B651EE7BA37AC16F506B6EA555BA97B9F80663EF3B3435695ECC19A940
FA065E4DE78E3CF6AA1F746B4F19A38CFE860FE1A87A7E3745CC7EA6AEC3594D
A32A487794284C71CC77FE4EE6E04C23EA07681C391F7CE217C622745C7B9AC1
9F0C8A3205B0ECBDA76F57141D3F5854E05CC01D1898B34BEE778737F937A5F6
01A5C7892E38ED3089F8072D15AFF2DF44F070015FCE65D9738F3BE271C755A8
14D869BB844F44AF62E431D578E60324C4F892D7625377A1F43D482CDF7EF1B2
86ED75B1EB4002E38FC5C3F780001322F00554EF5CBF156AE7EFE948C5857608
191C5C3DFE91A020793E66AAC88E94BA70224800988D16515529AC5BB872A222
95C9BD2BD4E679BE3F3DBE7F720AD8D2B1326308E59D12570BC0441E063459A9
5A384051BC2E5111EF7FC202D5BF17F2E1683E2CBBF800DC5500F456BE47DDB0
FE8DE9517C0A6E8C426A9878FEDF22C881E7A48C246A080622A0DEBEABC635EA
CE73733ABBCA8FA901CF2D23292E196FE12F995924BBB52D5F3F5ADB6B0F7DF6
4C81DA33E9A68B9B83487366578CD94AE6E32CC9A1DB8EBE55ABDB3BEFF267B1
4FFF52C3AEEADF5FA2851C69A29ED264D47C6619BA475606886D3AD63FF120A7
779ED52C2002B5064CB0640FE67FE6EADB67B74149776209B1C9C38746DD5439
30EE5975EC709FE01CF1BA2F9F78AAA5233F37900064D09D467A76FDA7D6BC30
9B341A26493E5D92CAD819766CDF1519C73461CCFD0E6CEB6485C290CBE3C84E
6CB5186C6A15A03280BFAC2DE4FD8272E09208216569435554FD30B3CABB3DF2
EEB5C5AF18548900510FE2D2F1E2DCEEC46EC0A4FD7D901781F6E44D728A2D78
0C24E489571C79B350354A11A8E1945C250BF5D6A7E2A9CF10F012492AC37112
816722127029A1E4BC963504EC9E5060FD20FCED2FD021B8CB1F3C482D6004A1
E58D5834F928EAC244CAD6FB1FA5B41CBDDD82F10378E39A0430CB4BE0FD75E7
072F78C1BD6A170372CEE5F5594E4040AFDF84D8BD5565BE5CC90861F3ECF9F3
1447064BD169588DCA9D06FD26F95949B0F964ED0643F86E14200D0A61C955A2
A60C2D3AE64E11C93E48CA43B8D2AAA549C71F935FEC2125DE6C8A067B69359C
59C86695E0ADB58254C8EF43FA8920F21949127B569F7086DED981849F580214
E99FC6FE94245215EDC46FA40B544AB4726790C89AAEC8247ED06DDBD1298F49
8AF9DF32BC40856CBCD50E2267B983327319A79CE9E8ECA36758890EDD35A108
6B8541156BA2A9E4871BAF58061E02D3D4F36FE98A2E677760B57ABFD9C03B07
B035520A5B664F8BE732A9C0B48A4862F8B65209F70679B1F3127BB0A820B6D2
1E4C29664A425B27BB65BACB7C7235FF7C37C603E82A0A14C6AB31CFBED47117
4580793BF893C52737FC05AC70C8CB887DD9541D0815B86D843B204B6EF567E2
4E5BF4A8C79601217D77EB18CB1E50358753C897AC2A47FB4AC5E9B450D70E56
DA5C2360BBC0A3454653B262CB60BDB6328A6D4829780FD70C215B9E38FE22C0
B4AC7858B02D1AC329A2A3A485C780438EDBAE8EF68B71960883A6DBD0099124
9C85467F4FECAF2C88FFC87C846E94E394972F3F0E5BB43EAE6F38DF66B982B1
E79D601044A3EC5EFFCA93EF1BFF1C0B7B167774CA3A306AF32F1558933C5557
F9DAB68F27155A4746CD33CBF9A86CEC90A5A709077046F4D5313E401A0A371B
1AA03AFAB80E32085C340722028BCFF03101761D3A68F340220C75229DCCEFD0
207CFAAB179C83E83B8FBF9BF522CA2DED3A8345425402EC8E932C7173110116
67409E1CF5C1B8AEF5E3274BB7F4FFE8306418CD7E169510940A9F45C13E8ABC
7A0466873F1F7F8F93BB3B8A3DB29E433529A1EC25D383E1EE624DDF00CDF2F1
387A5765C899AB3DC30C0E964B01488348B48CB160EA6FF57DFDC72EDDF854D1
445F24DA86DBC7878E575A123239565A8745F34A36E097EF2094809AB75715DD
54A4B67DC71E9C97368372F9F28C1F1C53B7BEF36BB9C304F5FDCA83A8F7B175
99C120A458F2822D6BA98669433EC4619C3924D02BED16027167FBEF01782DD1
D4D1EE1922BF229834B7611B3E225FDA60794518DA45E43903678EEF852D7940
E850451C550EE09A2CA123D5F8EFFFAF6EFE11A5BBED13104DD34575E168799E
86EAE7CE8F8EEAD34670D0831E5DEF94F0BDEE7F8AF606A1E5B1540AD3323D9D
CB98883AED18155DF304A222F88C893CE42D784528D68CB2D730293AE2C24328
8F42C934483E9DC4879624730396FD91EE97F6D885E3A783173FF8AB5A69461B
E98539016F346C985A92A278BCC9B204AA6B17E403AFAD974695CC9B91EFE132
C2B35E610E1B7D3A45BAD1EF95D17AECABD53A146EDFB62C0A61382E8052B810
41861D3BF2A36CBBDCD33A4B8F34141B4B1E2E5FCEB07147C0882B362EF0098A
E31F54A8FC9302262CD3A72C5A72BE099875EB2CE0C72E1B478C6CCEA7FFF811
A4ED3579B13CE8E0C46D1395E393A8DBD856899AB0902288307BD73E3E9BCFD6
55A78C8367ECA281207D05C262247921C1467C05D2F57FCF05346B6B8B118849
D71583EC77EAE6F2F7D6C491CDEA9706D0DE8D52009FB5EFE995BC2FB0AEED6C
82CABD6D52BA08F55AF52A724F059F26CA2A02DD73B7C5CA83BABE929D4D62C4
B529060F62F8EBAD3E49030BF701CA1F08BE811F495C12D2AAF6DD985C40B29C
595259EF49A4AB1E58F5AF78A4C998A5D260952E960143C1C3922AB95ADD734E
B954B57E81AE6CD103C5F72940A15D38764D8D55FE0BF405D2A4882A8C71EAE1
B8944B9C8B192AF1FCEA7C2E384AD62F4436EC6F49B91F6060DAA49D76469974
E6A7E1DD40823B78A404DC2E05B9F8C8C2AC635DFFA1BAD75A3938F83B8E7DD8
46643CC18D86E2396B40A8AE1A93141DEF3E4520AA121FAF2C694E61F33BEBC1
561BA8D526E8D6153C5C58A9316AF3DD093D94D8F9A6F044CCC3E0A81E0D5BC5
44AFFFA6A435B64AB5BD2BC0719CE20F5B13E453DB5FDC3B1859B9B0DC47365F
BC6DF73EBBFF6E9927D4775BED3FA3D26B7827BB6DDBEE76FF61EE040DFB6064
50B6A70015149BDAC5C9B28D0F0BB1ED251662299AB24DB15E69427B3B129F08
287B7424C4422E78AF58BA46A22F91226C19D5F8CD69A6B1F10DD24AB48E8338
269E0E8A1299F8D65018363AB00187EBCCF5E44E56DFAD604A3722EFD41FF3FA
F1D4F096899FC367C91F65268DE077F069DB681D592E6418ED34704D324189ED
B38B2EA71AE6ED6F606499852A21CF10150CD38EB6F94E26E2BC278DFE744407
0B6931CEB1349D2818A7CFD5FE2BBDB557662F2E074C5C39ACDB1082F3E9A45A
D66B5B00FE9170B04381DA24C91C19604D445ABFA8A93C028A837F3B4DCE0CB4
2D5E655060B07ACD5B221177F44BA968C1B3C6F00EF26F1DE9AE65D8CC33BDBE
60C02061DFB907666E0C41AC698C892FF221AF73EEEF0D2F44F644EBCE21F0FE
70EC9798200D72175BC97FFFB3FEFE2564703CC45EBB55B8C0077E8796D2855C
1D366F07CFF3950EE828851A9EE9ED999020B01CD2F176ACB3B40C2AD35CAF34
7A4B784CEC1F93AF696D3E2E001C65B8D891BB19EA5D887CF8822CB94B425366
D5996EF4F6204F70FE49BF22F7B88704B5E29EBDEED194AE1B1CA54943AA2C3A
E676EDBBC3D06AE71A9AF35BB0C43821F042E34586CCE98FFA090427A9E6AF68
ED699501EAEDCAD61976E7D3A90E401AB64F51DEAB833B814777D50F11620ACC
71103D2859E3144A19B84492D23D523A5C86E50C857A69EA1CF03CE588D39C10
FBCC7BC4A9F52D9924B564C47985892810D52DA8CAFFC13F0A220054E262C4EA
A12D2FB81DAE966F7312B89C0C28B6ECD814EAFBE888BE820853E3AC56F3AA93
71C4936FCC0461BED01E6795FCED8BC40A812C8E770828868DDB12E005E4823F
9EA8E3A8294D816AB71C6C138850D48616F293B715F3C1C75BF0975AC10E2C82
352D6C9C9E1F76617F02A3062B8138695DD51BE2A4223B75C7A15FBC282160BA
CEDF36B40E67EBAF1DA794D7CD12463D49582982FDE4EBA45699E4BB76653CAD
603CC2C9BD3B16AB6F3C877462BB86D59D2AC758F24EF6A9C3F0AB7508430352
FFA1187F7C3699464592574758249035E54D508362B74F7483FACFAD90281BA5
F0AE171D91318ED3CA92BB7E641ED33E9402012AB420D78AA59A6EFB7EAF94DD
BC9ED83A40B688BF68071DCAC8B8DF983FCE91203EE6520C37EBABA41F0EA252
119950277E796974BA974A723A39443AACEB8EED1A6E83BE2E76F80FE71EC240
BE1726990A2F6A7BF03FF4F600DA13C9798C95E8B0A82F4E35F3CE39A3945C38
CECC2465B60CA4A27113ED1E529F5E9516ECD852A141D1A114387CE94482A7D6
383A20310542C1039ED2627679F5BD116ACF671DE0A0DD0FD3856029C946F6D1
AE22FBD52C65EEE3000BA5716D4A4CEACD0FCBA52E75A6AB82B83B72CB902DF7
F883F77060B6C0BDC3AFEA66A1786E578C776226CAED8D5EC2F0D09683E760F4
3123D49092112EA3D03378E6C8D934636AA54A7D53A67344340D32ADC1F14992
55C3817A3B0F0EA371515B7CE1DF4B650FDFACD00A2049924DD4E35A80347B0F
769584AEE11336C362A83BAAA3FEA3CD29D7DF33EF91C87C0C52F780D509D13B
E9F7D4292AB27FDD13ADBB9656EC12F5AE61C6E4448240643350BBF6D5BE0EFD
8DC906C03F0281C40EC1BFEB6B1239D551121A247693995D476BB85AED82C2AF
B9776518CFBE17886102B6ECF45EE986AB3C29CE4FD48771904ADA553610240B
A13DED079DC174D9C93A2CD63CA29E638C151C1324032F884E382324F64F7909
10BA6AD5A46331C133F9C970295F39FA1C3DBA6615D9929C11653117028A379F
A4FA423354DD38C3CE298F8F6B866E05081E15818E9770C46BAC1F7A2F40F033
84B33BC05A3C73955AE95CECED055EEC363FD8C384449A7532DE6EA3F1FD6CBF
E4E4D91C3A947514B56B998B5E798B9D8E86926F145EE0EFA6DC7B15AE308A46
2423DC07A353363B028FB0F64592C48CA6A7C7707B8F7B47345EA2185F99A354
5A618BFF2E8E79B2FB555812525A55A8061C405E1F8666B0D43733CCC845D9BC
9907665B0212E3DAAAE5494EAE9BB9CF6AF9981C72DDA4E05B38314F6AAC8C7F
8FB11F7FF04DE3E8F5B0A60C52167859A89C761A91E9C8B00B76112D1D27E923
A35FD7E1C9A977D8DCAF1A2AD022FB8EE53BF1ACF719E5F6F66F12DA59625C43
7D48D45028660640D7E17834F1C75FF76DAB5BEFB9323F1B37CD274F93E7B15C
FD2FD66069EDAB858BBE3B63F02D79F5809F8EF09A072F31E04FCBB58A993DAB
700E9FA4FE30F13E2A2A527FE06130306EFB20CF288B149E7DCD2B1A84A01C69
B3D6007F8981ADA4828D80497067F457EDCA78244D0B32FA23D8AA3911E1F237
8357226C1B0D8ACDA77718831911586F2061A45D8BEA5711A1499313A36B1D98
22CE586EAD1438FBF0BD10A3738A20C923998BCDBFA9C2C243C01B50D6406563
C45E0D26E8E2991BE1CCA0F691415C0950E238EAECC3CC784F162B921A44C845
E0C09337B7A6EF3671320A7F252FCB0B87D60BF96FDB7EE82D45762F01AEF2D2
356721D84761EB08E9073936F21DE2B17691BB6ACB0FCD92FD5D20CE56AB946A
F7132FA4AE319DF76873A6F616F06DCD6FD5D40C6B7557EA08BFE28902774FBB
91938B8CA5ECA788A6270B3F07BE22F6378E532EE6D30347BF6D8E4333B9C9CF
B1946D4DF099BAFAF0C0BF6CBC57D24770E2D141280768292AE0EBE734575F83
65D2D67868601406952B5B1E3268A58C27BFCF1D5B4E0A3C5073D0DC0DFE9B69
9BB66E9AD21AD8DE449B554491340EEC6BEB2AB1AB21AC0512914EF7020D3828
BD4FC31B479D9917E1CF33FAF30FC4012EC2561BFB2C146D133AB5A07AE6F95C
171CFC1EADE11004BE8FC6762FDD780F9AC010CB804CFA11168403F65E19032E
0A45979A7F8686CFC9364C6FD782C0F89BD17705DF767C59271EE6D72657B5D5
0AAC43B353C3CE1BBC6CBC90C0E77E0EFE09FC0C486A88FC4FB5CF47ABC86982
C7F8C7A3A80AFC4E17412EAA1104F504642CFD44C9B57DC71E9C97368372F9F2
8C1F1C53B68941AFC12EFDA830553A09A1F34CF876D04A8EB5CB99345C1B6840
9271EBC504A638F243FC5154DEE350E912B100AB1F14DCCDBA5AE19973D1C264
9B9380D4EFFD55C4110398F0D93DDBD95A870E3177158283427936A0E3A19967
24D31CB3A0EF60A20EB9CE593C7A4846BC2665D2109A8642A9D79D69A33EADAD
FE6B092C74590F0038A91814B579D49F9E262D4427DD53198F77967AD4563720
5750F741CB7F196EEB9D5A83AC169E6264A510333021223A95E4837405C97B27
1F546512C2AD4CFBF4328BC23A6582AA1B0868385BEF66E60C18416AEF67682F
4AF47518D172E913B4202A3011A176CD5CA04627DC50A40E90BF3094539BC11B
AA9CA0F59D92184C2BB959F9270F7B1FE5A199B973F0EB40B5F7E8D42764C75C
7823EC7A701A487D34F239736C4C766256B4FFBA4CAE1FA73B0FBD9BC820DD8F
5FDD75C5710DA8A8C93E199C144E288DC93DA303E545A4EFE90E2781D4F23835
9C63DB2152906A8ADEDFD9EA538AD61E8EDDFB55458998579DD633A1A6C6593C
5951D105D6555F7E98F4B58AF0C4594CB8C59DB05CDC0DB608CE1B2EA3A88420
726F72B84D03D1BC1F7495F63B242F6ABE5AE0F8C80B693FBE87067EA8AF7EAE
0444E6587AC2C6BE8BAE2F4F803DA611B3CE40694AE73296A0548B2FD7B83004
923DF88971112DE0551410F3B59AD643E1B52E0D79D8F945658C438E4ECBF96C
28B0D08FBBD06A5246DF0D07E768C31F6547AE0EE62581551D6A053BE6B195D8
D8ACF0D6CDC9F059CFDE284F2E625387ECEE98C5EF1655BAB9DA693E6DE0432D
6C0A806D4C5759EEEF828F98BF839B24E18567612B6799B72E8FC51D038732E3
8F7E37270241205A1E1B08FA9B810B38CB7A963F1A743580231B6C072F3B6C8E
4BFC0B351AB04308D8BC9DAF2DF2B066C8CB334D0824C5E83AD1B8F73F3EDB38
A4869391BCBBF1719E4DEB9BBFA47CD2EFF9ECC3C3F4244A582F1C1634BCD70B
29FFF13AFFCDB4B21E54033E02EAAFB0BF87DE1137E73AC45E7FBCE8C34AB788
0B161371C69FD95D9DC299FCC6F293085CB54FF8A7880AB2AFF8CE58B77BB162
8C6CC9AD34760010CF1358C9520D105217BD254770618F21F1544E638C657ECD
7B21C52C9BF6518ED475D51E04C0350A6FCD1A9EDCD171700420E33B4A8FAE45
36698A884F7506907A6763A671470123910272BC1213B00A70A6821911586F20
61A45D8BEA5711A1499084DBC5E56BCB6AAA4C742C051A26F3196B985DB42DDD
D40281C3D9AFC181360FF0E0E388938AEE2340AA12BB786CDD7FAF7FD93BFB3D
0FDD83129410DB1B5C5DA4CF8BC42BD8220A26924054977E715CA1F39BCD7017
26F4F23619BDC3F30087BC0ED3CA51225712E3234052F3014F9B6E2732EBC81F
69645080859673EE6A440A589B360390E9AA015A21C922B5371BCD6FDCD23A25
B99407D73E1B5BB4E67D6BE2FFFA9D1EE4836313A1E3801F931BABA395984CE7
3E67169DC7A0AEFB997A7A26A77475BE0BD506F7D93D9CC4926D03E4312FB7EF
B1E3181CE8AA1912ABFABA3B61F7E812297D0C6D50720D67B948E4C23FF48DA6
2DDA1D80BB4741A69443F27B4ACAF61B738B5D98662D450CF702487A9F2E3512
741C9D2CB621AFADEEDBACC76A77AF75F94BAED26A635C7B2EA6C0A9AD5BBB14
F32F1C3D39BA8D1243BF04609A4C01F2C5142E337277EBD96FD007773CA4017B
CC911DFC194F0249BDFB1944279C1A25A51E0D5BC544AFFFA6A435B64AB5BD29
64D07FDFB3ABB04769D61DD08B3B506F8C83AF3889CB9F56116A49FF377486A6
E2D75E40B5D300D2CE49F5DCB6C591E015E61685442523EC60880FC421088D56
F247AA6C3A4A2B308182077B7A8ACEAE00EC6422671A261847DB1B8DD9C0A5BE
19FA101B88ECADA62E9C85881F6A562B8C71256151DA63F0974393CE659D5EDC
45423D059948E689BE0ED694F7BADFB37623524B8A714A268974A26A8E4D25E7
A0656A7ADCC2A73404EA26E3E2D2DF92F1768E499699BBAA32DCA64BCA0E40FB
693CB356058E0D18544670E9B8FB7A3F757E691CF83CA1DF701E3C5D4D89E829
DFEF14636A8E2B766E0F89C9EDC503B73F3C0D9D6EA10F4F780FBCB40BCF8457
FAB3FEFE2564703CC45EBB55B8C0077C2052A36EE65C2CE72A0BA3BFE6E72943
0C4D8FC46760DEA07559CA60EA821CC5FE78C1497E367A51A1D782EC5E51A46A
054E3DE85492B6DC81966BEBA206263D11F3C1C375F040892553E19ED7B88A74
F44852596ACC4AE850BA7276095874395B824051900E7097781393A7640773DB
F0A0E08D087C4801049ECB3CCAFF38E4A86A6F56A4614EDC37E9FC1C97DFF618
F44ABA5E3BE045428E3E255D8FDDF9BD9F80780A8B1306671DC8380B3B07F455
C24E3FF29B8996EB94C76E05BD91157F74B14FF20415743D0DF6AD43D9E7EFEC
1760BF5043787035F06D66404B37646373A735ED339F7E1C85D300377288C08B
27823CE16637088D40105A0C3CFA433475BF4CABBC706A929EBC90C0E77E0EFD
58ED5EF8B30DCEF2066571440300F0BB4897A6FBC6C43CD846E9F38EF81423D3
0DD6163EB499D29E2B3B259C581BA64842BA7ABB7A38C1C2F3FF4B0F4529C475
E5D473C8524F973B2BA8F05CD01BD3A69310904EEFC80E88FB8E13179DBA1B30
B5BAAD873A844E5DF0FF3B470C2F082067FFC990278425A5D68DB66D2BA8F1AD
CF1336F8E4D8E1508C64AA238208A9D1B0F81D2979604965F01BA3E07158D555
116A963C0547A0C0F588FA5EECF01242F27DB8432FB415168A1FFC9B2C3E2EA6
656DB569287F34AF446F694CA4C7EA20764142C58ECB82DE98D51E984C6871AB
E23E2A3CF76CDB49B17DDB1A85BE257667C94BA20B8AA7F0EDF2F772B9BA194C
11DF1B48D266FA7EAD71625AFA299219B3BD869BA3570062C5AE28C23D313121
A0F5FECC1B2FDA688C040BF99E708A364F228DC2090BCCDE6B6F173B59941B84
A0F18F9EF761BC52E2E9D4C5E46FFFD645E8EB8FCF403A1897D9E0EF6933B10C
9F7CE2061CA44F8BE5FA65AAE0B1689FBF1B8F70B47F8A545DB74FE36BCAA1EC
ABB9724E973A61409D06B0A563EECF124D1242B412C38926E5C925D787C530D9
546201953AE7D54E2AE719B79E42CF5856A0F039716104652711264AFD4B63D7
E34B011775A0C9F513CAE5957B371B528396DCD6F25F79DB414EF33CE636C5B8
637BF988FABF73F0DD4EB11165BFB1FC8A11889B5017A4C44633052EA5DEF9ED
B1C3B1D24C285191CBBD78AB4209915AEFA7778C1D27AC5EC62364DA6E0C5EC3
550FFEE70191F178D7E770013DDA26E8CD8B503236BADEF347A34775DB1B3324
B0DA01F6FAE857333E1FB4A8C7C5D8350E88CF5B4E5F3CADBD95BCF6B3BC70BB
885F480BD351FE89B3B6E03D01641A71B25B4399AF4254546BE4177139CF124F
EB1BD897E6B9034F799AEA3A0CAE50CEA526059E229F2B15FD7CE666787860BF
F632F3836A27C6B25E583DC641C500442DA9ECCC5F0CBFDB6C06E0E562AD659D
0665C996CA57B8E854C855868E7E3BC50C87542999BEC5BB4EB1F7B47D060119
2DE23E39177DACC6819C6179A49731FB0A6A6FE42E8A200CA241B8619F980299
E777CBACCD55016CE9B10975604DD8FBCD6846CAFE8A17DBBA36645FB538BF0C
D2C3AF77235ED65E715F092DE9D6BB676012F9695D04D4817152DDFB48450786
2D0E25F117A7B0158DE464F8B466F1E80D987AB215009A4034B46582FF83D047
E4152A284009076E0F8E3AB0E253EBC9566B34BB0EB33BA3A207FEC9403F06DD
5EE41A9FDE9DD5FBB6D97B1A2A6153C998FEAE1AEA0209DC79500A3FF8DB6DDA
6A0DE596812BD01E04BAC12A92819B41DCB972C61A3A88A300E29B203A1B73D8
631B7962ECB18351267AF6A52819D333F3518E21C479ADF378FCCD8F628534C1
E04ECDC3338B0D2D2370763EBD96E9BAF15F0D370AEC8FB0CCF94940024FCB14
5B0621361C4E26795F9A8ED6C0894EA1661FAD0D8D5F1008FB27DD99A1869027
F6854E5E6E33F99E816168FFB4F5999AABBBAC381BF476725A890A091DF65ECE
6750F3328DB9BC55C8561E6B34489262D75ADD199380A45D40F287026A9127A6
D3D855613C2F6BDAF9DFD756B34C787874249DB3E75422DDBDA3ECE0AE87F3C4
618C9CB72FB6B64D6830EF94FA7B616CCE4CE2CA72FA52E3F1E1A212E3545B86
E3EF60924AE58DEABEFE77E1228093AB69598A05AC517CDD8B873DCEA2F5A977
5C7F79FA691700ACA384A3D03E686192857DDCDD01F9BD8BE729563218F97EAE
8235557B977C97DDEDC31D1EE80E7E400AA76FE00EBCC6057E58EFC8F56FF604
18CF9F8876C56FF35AD69289677BB317966996319DD6F86F6AA8277FB9E9DF16
59E8D2BFD73E14EB9DFF5F82BE0F7DCA38B37EDCEE4FC8A9CF93B77CF61CDE12
8F0CA747413846FB43DEAEA72A7E5796F5B4FD0A7933BDB75818C720511CDAC8
A54C6122570D77397CD99B888CD2F99CB62E96367302A3D0312FA1C9866E1B14
D004E53806488451AD325717F6F0ACE4F5C57F6A1722D54435162911B524798A
E118641CE6FE6B1D146989656D3E91F4372E252F3263113965AB25ECA2FE936C
DA7230AC9FD8B1C357E3654CD482EA49C5DE31E1F56C927FBB52030A4767B5AA
761659D41620E8C40384A55AC47CA4CFF2A96823AD56B2FCAF88D1CFCED7EACE
446AB142874B9209A66629E983F5DDB024756D41AF04DF258CA920082AB8BFA9
6B68ED791FDA627F5DC29BE62CB89EA9384445A419978BDFC240E32296C8A12D
2120A7CAD7066110CE4A247A488A375BC551A354E3D7C0F5A813ECE61522A827
AD84ED307A9856E1EA2251D13BBC55D83AB69E80A410F4AC0231099CA140B116
DAE0E2A3EC43EF6C7218ABDD20DE8B2CC4F14DE589715F7B7225645B2F25D033
6B32B7C68A9E4A6325DD1663742A7663EE6D9F1412DA3248403B151806FD2051
A55BF07F3315EDF6FA41EBC523F76C9DE35636B6E3451CBAF844A0B501C874A7
910AA05C5224DB3161A650D0BA2A0B993197F69B4ABB7F3FA317E5BB903CE508
890176C5EEA4CD905E1D36D9377CDFE60925216A40FB935CDB2E1A5E71D00608
9AFB02054000C984B10E6C12109373912D921CF453EA709832F376524463FC94
907A73D00AA55B489F93DEAB7918FC77203ACEBC64DC9AF4229245BA0FD3A6E9
9D91AA6417351C73C491322AED9BBA1F83A608195EFD0DF6FB756FA46F4810F6
B3E9EC76B425D2147B65277CA520831CAB8047EA9A3E5CC6092D88C4CA020226
96997CCA534B40712450F2ED38DD98C157CEA42A280B54EB6DA79773B9CC3ED0
384AB988CF83BCD6CA28824EE2428E9D36BBDDCB5F7529C986B5F9806FA0F3FF
1361424AA4B732AF3D929A238CCAC781B3CECCF7FEFD39D433701CF04A5EAC75
424CA97B09F693A46B0F9F2A7BD33BF9460C0FE3D4B6A400E45B99F82527474B
D50C915E3FF224F5D671E7EB61F64F4D3F387402A775588FD6E19C9970CF34AE
E92FF8E4B47BB600D16560102E5C2F06E58126565B5A0E817785BC1A3252587D
453B6CB0B2E58A060627AF1D0146D781F0904EDBBDEF118CA6C9BA0F37AC6EB3
2319B86709A7D5FEAF7DA0D2B2AFCE62D64056CA6137CF1301D3FCDD207D7AF4
BBD67AD761804D1229F69D6351EAF0483834D344157BEBDEC13C4B2D7BDE94CC
853808287F2D194676C544C2C48217D669844706FF5BC9727203FF3CEA491A26
A7C7362CE34B10540FCA40E21B1E5DD5F198DAF7E52B20052836D99813914A11
8890514D779A4F1EEDDB35818B6BF28472764DD32245E33A8C5D6BA51A44B88C
6D850DB4720AD1A979DD396FEDA79F9164FFE2843541618D158D05BA844207DB
72C6997A198B961B92C5E78C9CB2CA15990C77B70AC62282871F65CA4045AE8A
C9BAE64D94E8D84FE47968E02084D5F3A3D8D38304A5CBAC91F0307B9A3B6163
DF5B6AFCF528B834A1033128CCA3DA1321B7E2893B37D87B88758BF920401B2E
5968E7578AF00262EE80F9A1A8AF034DBC4055472EC8A064D9185D2907AF6467
4A37BB12FC32F1CBA14896C47D4667331CB2A728029F162899261D8E2A2F863F
419C37AB609CE1DB7DE18BBB5A4C726FDF5CC90974F085D92D2E4F4AF3273BBC
41B125C81FFA23B63741A24264F32F802DBA8BE000CDF5B42C281C72EFB6D019
621FD5CB7E486C051F5A08C9C1665B046AE587A6B071C331D541591A6B5505AF
C87BB4B5A591BB375B64688D29966D3AC27CA84744E6FC9ACC77585CDEDB2123
5EAF7B78411A4DEA44C44635A657E2745F527D09FB1AEBC2C49503A79F224B6E
9FCB3806C51282756E988DDD6A39D4B16556C86A958DFFA6769B727AC6477D1E
03D5B189DBE44C22E268FF7FCC58AA909CEE829A55F5E21FCC5AC5F2E781553A
31A4A91DDBB74164F546233F659DA33DA37775FF25279DDCB634E489C542D351
C00E672E2C32F13CE8A3AF9CD4D3C46E75F069D5DC246928EC4CFA1B1BB59688
E34E44D757F5CBCD589D138619FA7D0663B51A375C2CBCE00657D9F39106C968
6E740389BE1D837A737C029E432ADCC3C78BD1517AF00B85229ECEE4568EFA18
11AB7AA6DC42A578E9ACB3F6F89E7F201B7BC6D95860C0A298EB115B4C8A38E7
E47E061631921CDE22A4E05025AF7AC4C84FD416E532FC6AA41A849440E8A74C
8216382E282A01D3286964568318AAD5B87EF7488020A95EF04BA97100ABD757
3DDA43A3C57B941930E6BF2575FD029A12E867ACEE36B9CAAFCBFD95A249AE96
E469C3D69FE4FB2281078879717019B118DE5321847DF8A826615F68B58C7496
0A8F06684653E22BDD1AAEFD459C63EB29F675167C924D4338C71E84FFA0575A
C950CDD1196B617DD5589703BE8B35B5929F5E321B9601F22C379173D9D2524B
E63B2235D208877F607C839AE00B2D14B4BC0676F60C94E13DFB65F5932DCE32
F34EF7FF874E4B097212063263C691AB20C0927AA91EE58DAC6A556E9D7DDD3F
0173EB8B3391145513929C7F277F0B08733630D12CA779E22B66E4A5775DC96B
54493F7F68748D107BD73D919C04333736207D48231284C25CACF53BD0370A61
A913072D32FE80A95C9FE9B1803010E7E56486822BF4811EDD0D83CECFF723D1
E00EE5B06640F66B9BDDFF4306B3078D2315C794ABB32280A68FDCBACBBD948C
32538AC992B84E2A40775627E7DC7696D7F91E674E39A49C630B92B06F2BBC89
F0C4392264BABF897DC9DEB1AEA1221C09B71A8BC0C1E396D90A9C2B83E91CE7
EEDFE6776F339EE061CF6251D0BD0775EEFEE551ED5AA7BB9B2146DCD6A4BC5D
2D6DF586FDD131102313E3D43E45B9289B291E407E43A8FCE95326469504BBC9
E02406AD91480E64A424F274FF7115EA65BA887907DCDA78EFC484E636B9AC4C
88ACC92077A0CC2943E73238900E1ACBB3E0660E1A64C3C379D8C9C216C31F3B
FE3EE77E2EEBB609258715BFF93D7B66AD41DAC49A1AA6906199B3C02325AF68
403ACE0070EED5F89923246227A49C9D8C1428287B8BACC6DD819C6D0B360E09
6653D8D10A7923195945C3CBEA678335C8E0E47C41A0777291334103EBEBE99D
F1B9CD5FDD9774F5418824EB7040674BEF5D7795AD50228F9242A634FF044522
52F5F020E6F6374FA1716076DE0820E7A011499282EF7DEF1A3FBCE8D8073C28
14888D3CE424F530DA1E00EDF16247EDA4283DCE3316E8AA90C69E76FDA52734
A00CE8B101588A332B0AB5C429F35B39795BB5CAD8AE697214F94EF763F659CB
22AC76D6BFE184EAB7043ADC5DD4C3BC4ECE53693EDAC9DAC5EB54F93466C2F3
681AAC65A9E6B76A18779BBBDA4DC961407804B3E52A166FF4D3001AF318B446
812B53FBE84D5D2C95D1D19DEB73766521C9754AC21A5D0E5154F0AF897133A8
2D7CF736CD22DFC17EDC22BFE3086125517918159361F771772625DC832DABE2
2878C0317D33B43F6553FE80CCDC0841659559183E19035798ACD3B4AD2C9F5B
1D14BB35EDEE38B8A26B8194D714C1638CA036D8F76FA8A3A21DCEECB784A480
82272DCCFB9A7C0AF6C18718996D205811F6A2F845840087BE0A0DE0CC108D09
609CFA9FDB272C6102FD23609E2568F7716F04B079008F137402A95EA60EEBCB
3E28091CF3BCB7D140DF42EA08C1D9CCA3B65DEB81D63263515B1446088B9D59
E0554396DDC4CDB019AD8CD580D79A43F45AA5C76C5EF60919B66E8B2DE98118
1B71548160AE3133439F044AFDF4C80BED1893704A135B01971EFCC0BCBF540E
F32F08FC73EA3023B5783C20D591419DB61D956849B279457273C11AEE8AD989
81825D837C816AC1A2BAB775C2710108DBA4CF56DA2DA5E5A2F6536B1F39FBE1
5F28E5F44FFC712E2B8B68F8AA248EC2BF656A0452C08780FE34231A09BCB801
CF0C44B2275CC077DC382B40D5CEAB8D708F4072FCF0326160451A426F5576DC
1EE81787D385878D00A847B69D0C49DE37006F7082D52D9341494F18F30A82C9
A2AC375FD9BE62116985317EE844D191E08FDA5B59FDA3719625ACF05D9E3C33
0D41FCA8941AE145FACB96A44D58602B349D90EEB61E5013FCE295B99D44FC43
9A10DFD84A0970CB5FDF47345AAAF0600ACF34A19F75E735373AE071FD5FC66E
EE488CCC020D5AF183D41100D48C328127FDF2260060F22EE8F89F652CC1500B
F6F5F2B604470C86FCE0E76BEEF521B697A1588D1420A72D4DB17E56A69292CC
5CF9446079F5FADFD4B33F95A08EA46293DEF833A402606A895111F2E2809B7E
FAD749790FFA77B13D012C7C97E8D451D6C50520262CCCB63298038982CB7321
7AB409255A428C29D8F89D7EBB0065CB9F0D27E7BD1A148E97C2D5EE4DEDBA34
B16EAF7C0F2B9AA5120E361C9B07E7DB87FB267B770CA41D6733D0614E4304A4
DEB984FF2C97A49893D939178508283687D34BE57A1D29CCAA980C7B6B9B332B
354E00B9E762351E92216E474A273D0165C9AE954E1C2FF9B857949FF3A21D01
2BD80D2FBE5AB57F5C6B26F49FC07E4517D013B35CEAA64C58C6CCE4985BECFC
2A2010E42F7D93E75CC39A237BDA06CF56CC32F0EC5091793F4D4521EEC1E7AF
9CB3546E45ABBD51ECF78AAE8E76EAD360B749E14C064007A08C59974DEF18C7
018C5A3B91BA25BB1E0EF9B5621D04218264912CC1B7A4ADBF719DE508F5E6B7
159D03237134C3E8F770452E683C50D6BF162BB00AF27C532E140BDB1901F01B
BAEB871F47AAFE0DDEB1E854625A7271B91D4B54DE86D475AA396F85B404E33B
A81B177D318D91AEB58E6281B2980C36F80D91968C2BFED964E38170DAE5F327
BC4F159F2162CBCC722143372C9E4B0D3E75A8B413117D6859B4B3E0BF85E016
ED297D10984234729B20D894E35372328FE824185AE61055E36650D4086AC024
23F1D72A1EFB7CC4AB1374896E1BDE770EFDEA5527B2B7D96F820CFFBF652559
6B5FCAD4226B192209D6A7341A6958ECB5D24A717D5FACD18CEE9A749FDFE7E3
5D2C6469BCBF55E3D26ED76E88A9953B64C59F54D8D15616984E78A36DC2C56C
4E0AEF41E0DE405B5883C5A636B3FC741F11FAF5DE353C63EEF33D7AC7AB7CF3
09A0FBFD64A351A22508C64A4757D057C1DB4D8D7B3054964CC1DA8C874E7CEB
C45E1551043CFDDF15BEC9807283D50022A568438E9F21309BB66B5541BBCD1E
59744F48322DCD4CD6C464D30632A88B1E814F4AF6C21842142DF3006855DC87
59FA9AA692DA0A66F1E71A6DED2E83391676638EE97ACAE782D2D31E15172727
B6B782437533EF3214A0BF5C1F0AE50FD6F4EA87D700E463000B6DEBB76FEBC0
E31596EC966121D8550781153574073978E4F468856C3477EC7FCDD935C2C1FD
2EF4160391BD7E7C63FC194B2EBCA795CC8F0091CDDD1ABC6F718A5268FAD9F3
246B4C31D01B66F4C8E35AF5629650EEE753D0D2EFC660CB21DF2C989B988C8E
68535F08356E58CAA7807EE0E20A2BEC38354DD1AD3074F6C7C1C0C0629186E7
CF5BC8876B3DF040A2F6B1943F4490FD2930DEB382815BD6EBC2EFC0D4956208
ACAEE21966EBD2F4C61196C9562E220E86588D7A78B6B31343AA5C0C7B9DAB54
2C616CED8D348EA452825D03659487DDDD511A761AC443F0F6F6DF429A996358
0DB0F902533628CE3BBB86E117E8E4E9509701A829900FA889D549434D77B420
400368ACAE29958BCD769419E9F3A90B368D1469A31B7E90E6FE595795A50DE1
8C0E038EAA13B7221BC5FF3132B9C6498995789D8BF27FDACF3997F4CD5D8864
F2EFBBF65E40D1F2EC3BE1FC88EC2B9209C911FCD652B2FB94E092D1B8C2EBA9
2B2F861749741CDA1B19F1900E3B33E0F7585ADFDB9259682D8D8E884E63AAC4
00653836D65008009F4BF608647C527BF399001000F42BEBD89BDDFE5C768738
575E868C05CC28015C20325014A35D4AECA61FD98B03720817D0715D33C54CE6
6105928E68BD1A34AC708CC0B2AF6DCAF7BD7265FDE04FB88074422ACD26ED82
781746CB31AC4815F8450DA686FB86A1DB62980FFD6E69C69F4D4965771DBFB5
65117F1A3BEC63D84E2A2C7AFA52F57ABEEEC653701B88B1F1E9A6322D6D01BE
C90943CCB7A7B8AA07672D2655A57412B29548F1F4E30BF144A878D8054E97DB
311274BA2CE29DBC09E747F2C09FFD220EA43F4E1B46E91D25C423BDDE948429
329A22A11DB6D15573B0A658832DD4A6D328863E86B6B3296F72521207982179
EE93F794EE419D4EB4C6A7F35CFEAA9AA001481B18D166F53E8604EAC973775B
BB807A6C8B08DDC3ABC0F514674349C0349F2BFE3B29C7BE6EB5C9319970322E
8F7F4801FA674DFB348F7AF2E92495D14462590B084532CDF4137DBE9B7ECBCB
8F479CE88010A89BEB3843878265398E1A598FA60CADDE1EDC1340AE453BC0C8
1C4C53899D85E394FEA8ED8F651E23142A9EE5E4864E6B3D6B0A6C80846DDAAC
A3D1407783743BC363906416F6EC8B1B12950E2F986A1CD88B4110FD30CB0FD7
161155CA4B235AB53F9C66A06D7EB1E286587216D8E6ED45EF46A04D97CFD657
2ABFE515D4FDD18674E9F5D085D25CF17C424ECEA1545CB5BE1BDD9DA9B1E140
94E4F256B4CD8C358BE09FDBBF8DD4369AACCB088369F1EC22DFA114277970D9
C85F27BB64EC1C4E81ECD5571D8D01E91858B12CDA52732B93FBC8AE4B435444
3F941110109CA87194DC8BC261AFE38CC98BD93406F5809BB125E6E18A29468F
DBCB6EC30349E964348FA77C365C3C3348181B51798BA8B1EB4B88CAA5021604
A7F3482FB1622CED5ADB69F887A1781E228C0E912BE34B7881E5D4B45570A81B
49F747F20A7518C925188559C56BF006B28B66333435183BBF18CD272DAF4182
3C78BA5767489BAE3F73BBC3B7CFB871577869021D9AB73B31BD770489A8F07E
141B92DA48EAD8B75A4641C60CC15089CD46CBB1EAB2D71D6AC2BB1E0B3AEA89
47C5F2411060E2F197A4520D09281CA0698E9AF2C5880FCA4C0C724A6E2E2188
0A6F6A77D95798A802A8F93EA12E6938FCC594DECB20C413B08C9DC751B0E8B9
6EE3D16B065B71D784AEB70A4932AC855D442317338AF15A231299D81A093996
4BBA836B8A927EE0B3CAAE7450A041C471FA1FB7B33890CF1B04B58EAA226017
11C7886BF708AE9ADB8BBD5A65BD2451F2D94A51A50ABB214D3992B3E5F57549
EF640E0DDDC3EFF97429E97842B7AD9929683F30ACBCD5BBEBDC1F4A3BD831CB
915FB5BE33A8297E6E13FFC8DC441B23287964B3ADABDE39B139146D72CA066B
157893075D95350B59102E33C941BFE17FC1385CB4AF97B459802801849C1B6F
872C37114278C555D827001EDA7DEDC6C1993FA8208CF29A666C0323946C46C8
D72672DB7DF2B495781AE8CC13C78E924D6DF9189F462C0B737B959E68D11553
16059346A1D82EB2BC7851F6DAF8E68BCC3C571032520A6B1D526A6AFBD2D367
C1A701F3AC11E94E46CBC66387BEAECA3815573DFC7841806E7FB411BE8355A7
06E40D7634F4A927BF3ECA3E093CD74E50503153E4751DAFC9CA8E0692F17AA1
D2F2446792171BB70E75563D940CB556B9D0ECBE31BB3786093A534E18602E48
72460C0F6024CA8CB32BA35B988EA5EA634065FA117BD8CFC353C764A0CC5B2A
E5678E3812741A60C8BF02889B8FCD832A86D4E5979306F1A02788B79922ABDB
D65BEF3B26CF861043B5EEFAA7800F787C9CD201B4F83D73BE175D260E6FF21F
2A28F6854989C02130FB916CD0BEF381A69EE810B0783383207AA165EC5ADC14
0E9152067FEB022A064EB76C87FD6037BB36A029EE6EEE7C5BC72586721093E0
1A1EE40274226BBB2E90FEEBEFC8CB9F3E775DD468A7F55258DDBE325E40C69D
E053B96C685CF999B9D1937ACC4DD2E7C62FC6EC44D665640756C0391ED8FB44
6EDDA0017C9EDCEA726CF6E6D05A8E723F311FD466F34A48F8151B6CAF34563E
9DD821BBC2D39688651DF2A8D693FCA36AE3A108C9331B5D212B1C630234D059
EED3A83403D400950FE315E399CEB9198752F8B5044DF30E335B62C899906673
EF98F193AB0C2E27DB6E6146CE685ACFCF191F2DFE489042551AFF07527DD49D
1B967E4D729DE91DB756AA11889B58A851E155D479AB829DF917476EDB136B6C
B063ED9826A75419A5A8733F1A69763FDCD6A1B5CF43C9D2E782DF9B07C0D123
0957455C86E2AB1F5C45E1AE0EC973E4710A76A2175B6F413EAF75C07C80789E
31A50BF1E52D5FC248D55802CC1F6A7450556625C3F42906D624792333A35D74
91BF633961564B54EB5481AF4792017DE4D8222BE5663A681F0C53A8C71F7019
A4E3ECF85E80D0B43A84B4E3ACB2CC33EB7A544A7C406C218F9427CF992C9D92
BC349988E1AA1C3C53DF6B2F3E8FBDAC3BD480B76FD8093FBCBC97850305D142
A5D844E7EB5352A0570DE2E9C7D2E6BD4ACA10DB82A012CF20664EBE03EE7D80
3299DB7AAAEC6C55E5D50837AB39B4140C104A76FA8D3106866C414DF388B2F1
4783398F187ED367A312F0627BBE6D3EE2534A6ED2751B398697A9EF2436A241
3426C3EA0B65017CE294A8CD795F6741FAE99A43AD4DC0D332180DA5C4B5A295
D5012919AB09E9462D9BF19C99A1E43DD51670ABD3E410F82C7C377CDFE99FA5
C7F4366D46AE9D361DDEF7B31A7FD1270A22B1588A7AA7EFE4F9BD4CC1FA9AFC
D484F062FAC624AA8DE3A84E34987ABFDCE1F62F1E6F1D6DE57AA5134F0A907F
41AB893A829044B6DD0176C2617926BD1975A8A109D05E2214A6580688B17B4F
B42EA36D2FB52AD146ECA91CBC23210403F1D17278637729232B9D6936906D76
19C6083AB6047404209F6D0CCFB70CE9D8F25734DE9E3E6ADD3E1EEF9B37C488
D21193973298D25D58D70966C02B9A8CDE1342A7B09C3139468FC802687C4929
991857C94B5517C92EBF9602F6580C6F0094AC63BB73193C8603A0A37186371F
2FF6D23D8D0C911F15B7D50765668DF235F1D402A85411C74BED0659ED3B1EDB
F5F016FDE871C156A20EA095E13EBEF6785F190E0F72D38D319361C8E08022B8
4EB078E04FD21B60646B79E4F7339AA416A4A265ADCE97BC1B19FEE3C76086D5
15407B59DADFB7A9BE363BFE70872DBC9A280F668D316BC6ADC8F1E10CF83C28
A002FA915831C36A6E47FF11744858BEACFA95EAD7ADB5DFFC70A6C87CBEEA69
2B06C0D87FB638F9A42B7B2F6696CE42E404FD744ECEC5172C288BCA4667DF11
D6156C7BAEE97F86948DB4278F05F5068044AB373AC9A68689C5EACBB7AD0310
B6A33CC82FF5FE954D5018264179C4D68EE817742C31DA1368173F097A174CBB
79BEFD56AE264B3BF6458B70D2F06C26F2959990C9155FEE36A9318B17A9BBA6
F242AADA18D12E23B381B9729F9FF917C3106FC41997AD036E025A2DB293B342
983F1C65879F77F38C0C5FB0CCD1EB0EA70DC6347146344EFDCCF1DB99A44C81
D08698AB166936444533447851157B4E4A51B8114DEB75FB919B9AC3DDBBB769
311FBD4C08BC19AA16A43183E5E1E4064D89596D8BF96DC72223CD2563525C73
F97639E2F3A7B91BCC6C7121EB0CB995A83909F867CB0AC285993C30F29E700C
7ECADD34FAE17A4A688F84C967A005993D86606ED5C89503B6D4BB380D24DFF0
CF45796EB1C2759355AED0B0579DF77BC6B6758C0807C2A50053CB6D6D631CEC
D6D35F3760940995320C24B0A0D9E7662C7705F5FBEE0953A608CF0E6543EF02
7D3FA590B97B4CE3D1784D903FAB0FA80D4C731D482D6AD6223966197F2DD318
6FEACBA3EAA249129F51AF8B78680E2DB190270889CFBCC1820BBC5734E8B143
E036720428CF46846F7D72C59C0EAFFBF6D59B7CDF7517142B36754DE071D985
E47430818C28C3526CC886D533EF079B1A03E150723129BE7C0F033EBD671479
C6A57BA936CDC426B4E8C4DE5EFC8068C68361449AA97F611F5363A5F51D0852
E22EAF94DF08D2A5577DFA63E96F965D22A3C230F5D50C7A4C6D807DCC37A982
132AB84496AED759267AFFBBD2F8799AE8AFCA6C7DCE6D238A652147D94C7E07
F7CBFC04C139A0AD66DC17E7241660849C927BDEE98816DC97C7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600
(controle_equations_de_droites_24_05_2017.dvi)
@start /Fa 22[27 31[41 79[32 2[32 34 24 4[30 34 50 18
2[18 1[30 1[27 1[27 34 30 10[45 9[38 31[18 44[{
 T1Encoding ReEncodeFont }19 49.8132 /SFRM0600 rf /Fb
135[55 5[43 8[29 3[47 1[46 29[68 12[52 1[52 3[52 52 2[29
4[40 40 40[{ T1Encoding ReEncodeFont }13 90.9091 /SFBX1095
rf /Fc 222[91 32[71{}2 90.9091 /CMSY10 rf /Fd 134[45
52 13[37 31 4[47 20[69 11[65 69 68 5[25 59[{}10 90.9091
/CMMI10 rf /Fe 194[71 1[25 2[45 45 45 45 1[45 45 45 45
4[71 1[35 35 40[{}13 90.9091 /CMR10 rf /Ff 145[37 8[30
37 100[{ T1Encoding ReEncodeFont }3 58.1154 /SFRM0700
rf /Fg 11[45 10[40 40 7[45 103[48 2[50 35 36 35 48 50
45 50 75 25 2[25 50 45 1[40 50 40 1[45 13[50 3[70 1[83
56 1[46 3[59 1[69 65 3[43 7[45 1[45 45 45 45 45 45 1[25
30 25 2[35 35 25 8[75 1[50 28[{ T1Encoding ReEncodeFont }46
90.9091 /SFRM1095 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -112 -451
a
SDict begin H.S end
 -112 -451 a -112 -451 a
SDict begin H.R end
 -112 -451 a -112 -451 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -112
-451 a 0 TeXcolorgray -104 -336 a Fg(2)-59 -365 y Ff(nde)44
-336 y Fg(5,)31 b(con)m(tr\364le)h(sur)e(les)g(\351quations)h(de)f
(droites)1446 b(Mercredi)31 b(24)g(mai)g(2017)p -104
-298 3969 4 v Black 0 TeXcolorgray -104 -132 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -104 -132
a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -104 -132 a -104
-132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -104 -132 a -104 -132
a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -104 -132 a -104 -132 a
SDict begin H.S end
 -104 -132 a -104 -132 a
SDict begin 13.6 H.A end
 -104
-132 a -104 -132 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -104 -132 a -14 -39 a Fg(Dans)g(tous)f(les)g
(exercices,)h(le)f(plan)h(est)f(m)m(uni)i(d'un)f(rep)s(\350re)g
(orthonorm\351)h Fe(\()p Fd(O)s(;)2724 -99 y Fc(\000)-71
b(!)2754 -39 y Fd(i)30 b(;)2855 -99 y Fc(\000)-70 b(!)2880
-39 y Fd(j)30 b Fe(\))p Fg(.)3037 -39 y
SDict begin H.S end
 3037 -39 a 3037
-39 a
SDict begin 13.6 H.A end
 3037 -39 a 3037 -39 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 3037 -39 a 0 TeXcolorgray
-104 149 a Fb(Exercice)35 b(1.)p 0 TeXcolorgray 46 w
Fg(Soit)30 b Fe(\()p Fd(d)p Fe(\))i Fg(la)e(droite)h(d'\351quation)h
Fd(y)c Fe(=)d(2)p Fd(x)20 b Fe(+)g(1)31 b Fg(et)f Fd(A)p
Fe(\(0)p Fd(;)15 b Fe(1\))33 b Fg(et)d Fd(B)5 b Fe(\(8)p
Fd(;)15 b Fe(13\))32 b Fg(deux)f(p)s(oin)m(ts.)592 b
Fb(\(8\))-104 187 y
SDict begin H.S end
 -104 187 a -104 187 a
SDict begin 13.6 H.A end
 -104 187 a
-104 187 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -104 187 a 0 TeXcolorgray 8 293 a Fg(1.)p
0 TeXcolorgray 45 w(F)-8 b(aire)32 b(une)e(\034gure)h(\(on)g(donnera)h
(les)e(calculs)h(p)s(ermettan)m(t)h(de)e(tracer)h Fe(\()p
Fd(d)p Fe(\))p Fg(\).)1238 b(\(2\))-104 331 y
SDict begin H.S end
 -104 331
a -104 331 a
SDict begin 13.6 H.A end
 -104 331 a -104 331 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -104 331 a 0 TeXcolorgray
8 437 a Fg(2.)p 0 TeXcolorgray 45 w(D\351terminer)32
b(par)f(le)f(calcul)h(une)g(\351quation)g(de)g(la)f(droite)i
Fe(\()p Fd(AB)5 b Fe(\))p Fg(.)1600 b(\(2\))-104 475
y
SDict begin H.S end
 -104 475 a -104 475 a
SDict begin 13.6 H.A end
 -104 475 a -104 475 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -104 475
a 0 TeXcolorgray 8 581 a Fg(3.)p 0 TeXcolorgray 45 w(Les)31
b(droites)g Fe(\()p Fd(d)p Fe(\))g Fg(et)f Fe(\()p Fd(AB)5
b Fe(\))31 b Fg(son)m(t)g(elles)f(parall\350les)15 b(?)31
b(Justi\034er.)1705 b(\(2\))-104 620 y
SDict begin H.S end
 -104 620 a -104
620 a
SDict begin 13.6 H.A end
 -104 620 a -104 620 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -104 620 a 0 TeXcolorgray
8 726 a Fg(4.)p 0 TeXcolorgray 45 w(D\351terminer)32
b(les)e(co)s(ordonn\351es)i(du)e(p)s(oin)m(t)h(d'in)m(tersection)i(des)
d(droites)h Fe(\()p Fd(d)p Fe(\))g Fg(et)f Fe(\()p Fd(AB)5
b Fe(\))p Fg(.)860 b(\(2\))-104 848 y
SDict begin H.S end
 -104 848 a -104
848 a
SDict begin 13.6 H.A end
 -104 848 a -104 848 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.2) cvn /DEST pdfmark end
 -104 848 a 0 TeXcolorgray
90 x Fb(Exercice)35 b(2.)p 0 TeXcolorgray 46 w Fg(On)30
b(donne)h Fd(A)p Fe(\()p Fc(\000)p Fe(1)p Fd(;)15 b Fe(6\))p
Fg(,)33 b Fd(B)5 b Fe(\(3;)15 b(7\))31 b Fg(et)g Fd(C)7
b Fe(\(5;)15 b Fc(\000)p Fe(1\))p Fg(.)1940 b Fb(\(6\))-104
976 y
SDict begin H.S end
 -104 976 a -104 976 a
SDict begin 13.6 H.A end
 -104 976 a -104 976 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -104
976 a 0 TeXcolorgray 8 1082 a Fg(1.)p 0 TeXcolorgray
45 w(Les)31 b(p)s(oin)m(ts)g Fd(A)p Fg(,)f Fd(B)35 b
Fg(et)30 b Fd(C)37 b Fg(son)m(t-ils)31 b(align\351s)15
b(?)30 b(Justi\034er.)1973 b(\(2\))-104 1116 y
SDict begin H.S end
 -104 1116
a -104 1116 a
SDict begin 13.6 H.A end
 -104 1116 a -104 1116 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -104 1116 a 0 TeXcolorgray
8 1226 a Fg(2.)p 0 TeXcolorgray 45 w(Calculer)32 b(le)e(co)s(e\036cien)
m(t)i(directeur)g(de)f(la)f(droite)h Fe(\()p Fd(AB)5
b Fe(\))p Fg(.)1873 b(\(2\))-104 1265 y
SDict begin H.S end
 -104 1265 a -104
1265 a
SDict begin 13.6 H.A end
 -104 1265 a -104 1265 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -104 1265 a 0 TeXcolorgray
8 1371 a Fg(3.)p 0 TeXcolorgray 45 w(D\351terminer)32
b(une)f(\351quation)g(de)g(la)f(droite)h(parall\350le)h(\340)e
Fe(\()p Fd(AB)5 b Fe(\))31 b Fg(passan)m(t)g(par)f Fd(C)7
b Fg(.)1088 b(\(2\))p 0 TeXcolorgray -104 5887 a Fa(vg)3132
b(Lyc\351e)21 b(\311mile)e(Loub)r(et,)h(V)-5 b(alence)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
