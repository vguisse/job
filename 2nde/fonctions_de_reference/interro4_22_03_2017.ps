%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: interro4_22_03_2017.dvi
%%CreationDate: Mon Mar 20 14:23:07 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFRM1095 SFBX1095 CMMI10 CMR10 CMSY10 SFRM0600 SFRM0500
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o interro4_22_03_2017.ps
%+ interro4_22_03_2017.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.03.20:1423
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: cm-super-ts1.enc 0 0
% This file is generated from `TS1uni.map' and `glyphlist.txt', `gl-other.txt'
/TS1Encoding [
% 0x00
/Grave
/Acute
/Circumflex % ?
/Tilde % ?
/Dieresis
/Hungarumlaut
/Ring % ?
/Caron
/Breve % ?
/Macron
/Dotaccent % ?
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
% 0x10
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash % ?
/threequartersemdash
/afii61664.cap % ?
/arrowleft
/arrowright
/tieaccentlowercase % ?
/tieaccentcapital % ?
/tieaccentlowercase.new % ?
/tieaccentcapital.new % ?
/.notdef
/afii61664.asc % ?
% 0x20
/uni2422
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl % ?
/period
/fraction
% 0x30
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
% 0x40
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/uni2127
/.notdef
/circle
% 0x50
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Omega
/.notdef
/.notdef
/.notdef
/uni301A
/.notdef
/uni301B
/arrowup
/arrowdown
% 0x60
/grave.ts1
/.notdef
/born % ?
/divorced % ?
/died % ?
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf % ?
/married % ?
/musicalnote
/.notdef
% 0x70
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow % ?
/hyphendbl.alt % ?
% 0x80
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/uni2016
/perthousand
/bullet
/uni2103
/dollaroldstyle
/centoldstyle
/florin
/colonmonetary
/uni20A9
/uni20A6
% 0x90
/guarani % ?
/peso % ?
/lira
/recipe % ?
/uni203D
/gnaborretni % ?
/dong
/trademark
/uni2031
/paragraph.alt % ?
/uni0E3F
/afii61352
/discount % ?
/estimated
/openbullet
/uni2120
% 0xA0
/uni2045
/uni2046
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft % ?
/logicalnot
/uni2117
/registered
/macron.ts1
% 0xB0
/degree
/plusminus
/twosuperior
/threesuperior
/acute.ts1
/mu
/paragraph
/periodcentered
/uni203B
/onesuperior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro % or /Euro.alt
% 0xC0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xD0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xE0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xF0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: SFRM0500
%!FontType1-1.0: SFRM0500 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0500, tcrm0500, larm0500, lbrm0500, lcrm0500, rxrm0500.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0500 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-211 -338 1855 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E586FAA5A6FAE6CB4E80BF6467C89E1A97B49A0DDC14A3C22BD6C9A3110530
C714F12B664F8DAF49E7EE5F26A1FB39FB391585B92BC143D8AF7A1DC5828C76
FB778196507F6ED7110C374F71354507E7B06D427EEF72F711D631F86C25A6E9
925C4A2DB93AE4A00FA4C9F8545D5FA4D703130E507323519A405812AA421062
F49FB854B4609D87682D0A4FD3B9BA33B2D25091F366D87C885FF732408D32E7
A8BA8B0AA51E0F13E4A5D7A70070334AE4261F477CA6C958111FAD37A7CCD04C
D8B0CF660CC25C087D9E1DBA8EE4869EA22FC33ED6FBC968D1118422FD213F9E
4DE09D8C881B27E43B46DCCE9E2B7ACCF0FDEC76071C638EFF82CE7140F47015
4989DF72FF5A863C785657413A01FE7D0DFF6DC80111DC022CF3C7527269AE6A
F593356351153315F1988814C6020B73672E573048FAE6EB62D784B055001E59
A19509258D7B194D57F0E5C4C0C66AA7D5D54CBC4EF9E83155978E48D01D7913
0B2216D451B4DD0F51D39287B08047EF0E9553C125E00405138078F533037280
E0EC61CC1EE3A221A96B274A72BDF0145BBD8B3D09DF401AD597FA7054E3D205
CB3483DA30F2E7621DF3F48D108A7B3BF2A4430768F7659478256AACA9317F9B
6FADB8E3E012D2C4CCD0F2BB85BA167774D5427CAEEEC17BC8F508F68AD5FC5B
2DC4ECB93EB18BA078A9E36AE927969D3A3EBCE1CB7C2B075980B6451E534D7D
CCD715EA30EB367961CAAB8E76DB1F329200080EB3739412659725A3E249253C
DB26244CC83A330497398495C3F136A9D6E4007AB3389389663FD46D6C80AFCD
03982615563EDE73605E33B1B0E519149240530C52B8625B50A2FF63325FA62E
76F7045FB77AAA45F1574B9906B4610C16C97EC9C93466FDEF6E41E9FDC847D1
A7FC826CAAA9635A1EF10072593939005142F61809EF49D7C198B927C02675A6
44607478F4AD4A152257FEB6408B04B6111B3770D9D1DD0C6F1D8704969CDE7A
32F8996CA03F642F5DE54E2165E1C01475DC2246C43CA286DFFAC5241015ADA7
C4102DC0100066E14908970B9AF8824628ECBD9E1B33C6C9938B78FC9BB1C805
C51E1A2D296BDF05D292D7F6A5A0FD2C18FEAF1789725CFECEDEADDC389C4E45
02E25B0157964C8C345D7E6DA459F54F6389004BAC5C0B20E59EBC6082FABE25
08EB3B634F656E97438F9B605DE828384EE2B34DA8A960546C2561D8D361B90C
51E0AE25212A52D33A08EC17ACC7C22E06A5D8CC3DF457371FA658A4199ABB5C
36BC967DF98C1B17BA3FF405113F17918DCD399C09D0247C1E89B2A8AEC59A3F
41E2C8B7EAB6BB88A9B65C3239687800B071E8288F1AF5732A5CBFA7B37FE708
5A248C48DD46D9E3EFF6B81FCE5D4EB1EE731847FD050AF0DAF55832342BA4F4
C57BDFE6BD073F2376E44EB97829968ECA4E0CD35AFEAC7BD6A32BC116541818
5517A1647196843C73BA9936EC80F2EA98312A5C98E09AD2608D90FEC2F9C91D
A0DA7DCFA33037F0AC991A9DD7600501B8FBE59C3473A98E06CB648B4023F2CB
37BE4BB58A45B8254495F8862BF21628708C98A1BE0C561289A53EF90CFA34AA
413033CE7E801178FB40CC4C99AEBE3DE4FC7EFC356B116DF444345D2257519F
57701F342C67EE05B6CF0DD8E708355C1C943C64A342974F55929C016914FB7A
7A67BA19A5203A1307077F0AFA72B96B0B3EC6D56DCBEF94CACC518F0BE22F7A
4FB3160C473D6FAEBE77B7C26E175FA8BFA903F17D2E82FFDAE1815203AF1817
30646B5D6DBF430CA68F4D7C4E85BFB031118204544114DB706ED110AD9A3D6C
4DD4BB3ADF55F4C8A7A78AEB5FA4F7B5DFACEE6C0BACA04D67CE6AA4FC6A36A4
51D0FD937886D7ED3F2062C0FB9A5D0825799255C227DA8E320393D40D424BF3
38B19E557E7569F71564F9F0AFEE25C1A759DA7778FFDC310045D90F4FE52124
18FB7458F9F802B57CA0AD1F684ABB249E78366D8E93741A4C1DDC130BB9BC15
6B0C58E975ED942B90C3F2A2248AB6F7FEF0CD8565633F5DCD87B85D0A115382
74C0D8C990211592D6E928AB406DD16C34DCB5DA798010F76FBCD75D6A7CE8BE
5F379D4F36BB1C767358540F98BF7D57FF8C1AF8DEE7C73D21C2EF9BD7AE2C42
4487F79655D92248B512D9929C11653117028A379FA4FA423357628EF05A78F0
3E841887B573C1E165BED94D287C207BA3F799C17BC7F3F368481E40E7D90C33
77584790AF5A8BAD5D996B17F661A123DADFE470069F7013E01828CA3AC791B3
E711F632DCA511240C983B8B3B8E8722B6BEB22D924C473B761DF8EE5BE6E225
C55598BF343A1ADD11CC8733097E65D13F6BB15B45EE9FA75E2CB94C1A948C0A
BBC923323D0B916DDB44D87F7D1CDC27F190B06EC053D712A357E0278A662AD8
9AA556940CD03A5FF4FD9A23AD79BC8009820A9D7383C10F6D914B3E7579E2F0
B5F37758FBFA88369D0D839104DFABE61F4165003FE0BF9544104C2EC5D14C6D
6F457B27AB65FB6F4D40CF9C87603B19F9797120E085C7CFD4CB4274661D9582
E5FDB1DD55C759AB853D4D34771107241DAC1CC3C79A0297F6DF3BA3AE165B61
A169DDC1D006E0430BE615AB2FF44267E134D247848CEE1E283DDBB86F73CE3B
2BEFF110EE0ECC75DF4C6A6A60BE9217C24EEBE0664BCF7008167142F43F542A
62302F8B19C8F7EAE85DAF68E64FB833A5974BBDFA70075A9225B77090FC9326
8653647AD018CA5CDFE029D8155A5A7ACA7B8E12BE8D69A606AD38CCA4777312
BFFB53CC6B32D9D1999D6F90C4DE9D83A08479F3B1E8BCAB1777DA41064F94F1
7A4A1CDC8A14AC86DDAAD910A85D696075B4940B1A7B34C917A08DDDE97D9180
ABA37D2F0405FC314AB457EF84B4CECF5EAF0CAE799CF60EF34EFA245CAA37BA
AC0808FB10315C8C9921B93DE67BA8284879F4F04FAACAD5A17F4876EDAD14C8
CB198BD619F1A79AC9BA473EAC1F8833BB78C3FFAD3540FBA36F93A61934E1CF
5B7E82D101232199F55A7B7AE3B2E133600207A256EAAF61837F4FF9CD6ADA9F
CE763F5B08FBD9B21015A30F225CBB2943FA3190CDB5540149643F2111724889
6FF4EFCCADBDDA29266D238C0E7C800E6370D991BA34676B1A70623D392CB0EE
8C3C475D1F6C5B5B693C1636F456752CA3558BBEEF59606354AD4A6B726C0217
6DF5BA5CFD52ED66918F252747423C9CBDAD9C30E93DB25E64475C22E7952000
36D413CD4316990557A0939B5898ABF14DAFE4CA4729D00D1EFA7E5634C3A62D
8EF40B50A4BC239EBF7CE7DC5954D296971E82F7FC211E1453F193546B3770F1
6E220FD46131B9284891417B54A81B08B5FBE6351C775A2DDEB0E51DD0653924
281F254FC8A135610C3E75682D78AF7495280A63EDFBAC9B5BF5782FF48C2D74
EAF5D173E21ED3A05C0EA432E2C24278F117B96D7FE4D08DD68520C497F7A926
BCFAEFA92D1CBBC4316EB29842A5B72E5EEA0ADA703FCDA71B2F50D23E951D0A
44BCEDA0C4DFE275CF792CB4A48732764C40C3D3D82375A008D38C74B161A800
FDF831DFCBF3816C7A095D6428F6F7703414FACDD0993E654E72028390CE59D5
4CE093669C3DB6EE90E0B7F99B119BFEE6396B6774BA82FCF824907A72492DAB
15267C8AEA3DDB4F8630A197E3928C065A6FE954E0D7B0170E534514F0ED765E
061CDA069C1E3F320297C88600C780BEE103DB6AEAF89AA0764E82699DB69609
A7338FB728B56B22AB4C01AF82C6F9B862736D867D927772803D958E753D56BF
C9D8253D20088D1BEFA38DFED64A77674F90A9F3F62014A59159D28EEB4D51A4
4A20C66E1E7122697E62E4081D5F3269C7B3A2D6F721B4CFBDCCFF1BED30BEAB
890DD6AA6884E9E9D47FEFD2A56C190EB19152E4BBD8688E4C9A891D0DD80A5A
0A010BB54447D16BDC35C3C99A0E81FF6818FD14B9B6D41977104AF92A6EE793
8A36C5AB76A2C1916EE599ECF4C17DCD009BB3E4643D86013978168A44BB075A
EF26AFE67BE1FFC2494E24654B5E115722E3B5982BE1764272E0FB99EF0AFE13
427E0DA7F980561DBCC7D54B1BC1B9AE91F963E1D24F98564BAEEF44057BB151
3B35426515EF069361DB7C74C2741D9AF99C49F1983579A30AAEF5E15A6FBBE4
04E2A5F6FF00D2F662E0281571BF1C68259BB1BB88E64BDFAE35CD5CB56A2DB5
4D66BCF146221638F93B29D9C8157577A68A5F2CE7F880A790CF14F063989F89
7208B777EEBA748F9AB9DBD5C10FF066BB0EC4074A2DA43ACC97D99BFAEFDDE1
D0925A7FE71C5274F606E14399F08141D420A7D171A9B3E3D90FC8F92372C3B9
A5870687BED3ED7AF5D06C23A7B1C0E16F3CAB1FB5AB70C92F1612E2F772E07C
D09E659C502D14884FF032A43817CA2E536208334DBD171724B230CA49F791EE
579801427AEF43834A3B623EE6308B33F865E8C78B03968BBA4454A33CFE7FD1
96C9254B8BF11D2B34E35FB98512F623FCEC960B719C2782BFAC149C2B09B300
D6160544414C1DD16FA343AF06E69BC7A08968C003BE208BA9E14636CDAAAEC4
637F79AB9DC059743E29682DD31C0FDC5CC3CB53564F6C9A4F501AF32FD8B5ED
051965873AB4645892A3032BC29C75B5EB6BD4FEAC5861C134080D23859E7387
C3DE9CDC3C861F663350128178A0F79A5709E2329EC6DA179601DF1348D48E48
DA348FF3D27AE53C4969D45645ECC6B9F49BD4A184B3382D3A886F004E48A987
EE709E7035146CE7A0CF9A7C0270756637C9164C8BE877F68AA9E2F664ADBB2E
BB66CA1F213288B26BC8C3F9F7FB125AC97F952DC8AE62B71C808693E66B33D3
D4FC762880B58DF85D424834BA1C6DF455ED32F1F0507C8A3C1DB49E91FA1C9A
B928680D1AD07D3EF483F53DC1B160F8FF4303657821DA8DD730ADC01B50442E
1D185BC7B7EB89B0BE25E4F55C5C24DB390B13DBE7D33AD85C6A571BDAC4894B
14F43474EE4926E8364817A93238298A7B3D35098C598D327946F9ED347BD4F6
2C080F64B13447815E4D981E86115348F7DF8AC6A6DA34EC67A258CEABC579A8
D808BC1EA137B0B90AA85F50C05092185419AED71F564A1BF732626B6F55C3A0
330EF7F951F35799BCCDFFD73A427A9126A9C76A0F271AB557F5843880349CC7
4C43983B339B1EA97AD1C68EF86B3E728A64E1981F850C02C6203908C0654DE0
42864A1D5AA1A65E99D52BFF26DECBFA3045942DB1C919E0F94FDB120D3E4457
B5539A862C93438EFB345385822D64823A847925921AFF53D813DEA19E78AC27
73FEB605160EB3DF0B3720FF466970B965D0B7381EA1EF0C659555F2ABDC3514
7244290871E8BBCAE2F14C00E308EC630E1834E79873EA3E0B47C3BA14ED403D
1B4EDF0DDEC217336872019CDDD59A11625B6145E19406AEBDAEDB312FAD2335
1607F5C2E7376B7BF06321F4026AADC6D64CD35D907DAE068C755A7D1DCA5D48
CFF737309F2E9FA31C38F01FA6BB929B7D278093A86569A5B8F4E042D1D0DDF0
A49EBEAD19B2E9AE89A65C8FBDBCEE4B905F7287E6C611570C24D2A0C36363A3
B14E0B3ABB8D46C6F19AE914D2E24A596DEF299974B6663A378FFED6820FC2DA
47824B074160730C679A92C31D142D351E0CF1930E183234691D8F4A42F9E8F6
C860B3946D7234C576598D4E425E6518A0A417E91959C5DE9801962A3BE03CA9
6739519E7A5869F375D093E9AE3222D5F968D86FC7A693AE4E6C759D18AF2E68
790A8E264C5D5AD12936EEE94C0B84C00BA51943AFC404C14A6C0F3441CA7080
04964E4582DD5AD548FBC8B92B77DC4B6728315266C0F5724566F3E762FFDD47
92FF706E24C0AF00B88701B58B320496C39BA298EB0A601A94455B2C7E12DBE0
0E91A3DD4CCEB0A322FD7439737BD2D74C3C61C61824D1958E865287A1E57EEB
7775397289B13F3C0D9D6EA10F4F780FBCB40BCF801B371219D3DB3DC55E8808
1808AB8A493BC71FB09322F90D66F6E93AE2E85FB09BD22ED68D1B820362A2C1
AC63C86005E73CF431DBB9F635E4DF768464B5C4BE9E6EE4B257902439CBEA07
91D3A0EE0A5316F9F40FA453C1DD1425A15C887DDC3F530456D6A5598E3E30DA
B29449B42D35388C5D8C26368388DE70920B952D1CBC5E40D2852E8CD9AC588E
2A6C31619F14354D70BACE74C2054B2F0E172C8AC420BD0DA240FDB4B1999A40
DF241505A22078A72A2F43816BDAE9EEB9CBFCD3A83D7C6B5CE58381EF6581C6
ABFCC594D28303614722B9A33EED607789103D70FC7B0C7DD2C8A89BFF0EF2AA
58DA3662289FF129CA0A23C0112734EA50A82A3E16D6B490673720FD6A84B18D
97C290149984F17FD443934CBC9E9025EB1562468422C7704CF4EB34062FA49A
B90AF028658E64F3BCD9391F0BC631AB8362F78A93B8E845191EEEE85CB885D9
CDC33C28FDDF8B550E3E7EC028F73E0289545AA5BA984F105C58A0CC80D7A7DF
0453FB324D770F7112D3543150F87754C6F2A5E26F7440CAB36919BC25948932
9659C3AC03CFA2D6EC42440357B621ACED6ECB6872B5A4EF12D2954DD2D6D1B8
D2337114396B7FAC8EDDD3FAF50DE99070D5D3B0A5A3FAB3255F89CAF1DABBA1
BF5E69BE839B7728FFDF0D51B2F874A2E19614A15C92AA33097B3C7B9818D3B7
D3B7A9C57C6984E8A1310C9AF4FF497D54824DC7429ACD831B00F9708EB1ECB3
581944CCCDBFFB7A8CF23DAE6EB76BD707DA7220F27680F58A154C524663AA05
7BE2C823A4126BDB2D872832CA3B7AABA4E5860851EA4310000966FC750BBD12
87E12BB8B613752A602821B4ADEEBEA1E478EBF5015DA9043C1FC7137647B1CF
44D215C19097657F51EB4333E36F949D9A92E4960AACC2011E842E103CFB1229
24855642A67A99FCCA94BDE4CA0CFC61724687EED3173E67B2924E293DBDA6F1
CAD49D2FF5573283A8D9B404C04C72699732400EDAD7906328F7CBBF38C5C66A
163C7A39715296CD5939B26A068ABABF6798F6EA8EB5F9410D24FB6CBA16B7A8
654B95B35FE54950FFF8882E01A506926FCC96A7B621E8CD0D840054AB340E5B
25A740AA83A53CDFF88ED1ABCC5CD0E715ED9333A1A185DD573AD8350FCEB905
9D0A12F0E358EAB0EBE6B76E576780C1621225A259A61D04E594E6A149CF8CB5
3B48BC458ECB29DB3B12E93E9BFF27EF0108342D68B5C88E5424042A5983E44B
77F361AF2B18BE63F299454F461AE32BF4355F860128995EB7CE8AB4CEA372A4
8C82A681EEBF0FB695968E32C051B376C42D7BE6D5B62B597EF2230BDAB3F002
5F8783A4400CD702B48EE3C53E46C536C34709E5223CEEA0A86C9C89D9BAD324
0D6FF27AF9D54A3CD7A77156ECFCF3C065E7D057944694E7CB6098B0BD07C1AA
8E038B8DF9FA6DE9E1A505C81CC95BC665D78C7CA8B1A71F63EA804BC63FB0EB
6EF5432691C91AD95A28858F39CF27C45923F721194EC0051F70FA13C410FAFA
C56DCBE06F9156A30768599392AEA03F90ECE5DAE3E973D146316BF9BA0AA77B
A40DA8E0AD131F1A67716DC6A07A7C91C1C99ABEFFC56993AB7B2D1F1F6FE286
E7862F6E8D3E1806EF69482015FAF8928B814DF5223B94F37BDF09DD3158A163
E2E0753A66DCE85044D65BFEB8C78DAE2B9C375974F34D058E78A5E2B31D2AA1
EC9C6062832309BF16B8D17F9FF2194B96C0C0446D212BEF4ABC1A7FF088DB3F
1846E41606DD510D2C7D0BE9DD139C9B9961BEED657159198DFC48995AFC77EE
D2D210FB51C9517F1E01E50AD85973E73B3447EEBE6FBC51D8DFC71FC9E98661
DE1C37014DC52E459263815459BA2D699B66449E414B3AFB82E9BAC5CA56F19E
724FC44A1EED5FA28F10A55F99FC6F65A71B56E557371B5C6A817DB4E0D69B3D
F988E4DF9AECB657C8DC04ED4E0B87379DD916618215AE43C04D58988D00402D
F8794B1D73940EF42B7958B39D4D7BE19965A9845BBFD1CFCFD6E038204382D9
9E026DE9307561A0CA750876FD4C64F5B3A864A886A8D7E350753727F8ECC424
EFCFA0DB2EDB45E13804E96C81C132E26F08D3DB7A1CD5A3E4CD9AF5CC4F225C
AB1B0F800B9746BF9282B91F5842FCD0D0FBEF707B8FB92EA58FD6661207C7E9
B6FC7746D687300F90ECEA17F062BE3F57FD2F6DA950B68EF6AF1DD0DC39B8E2
D010486076F4825A0AF1593D3D6592C0788E59485A06EB118283F7907A829EB9
B313B9B76B11A43CFD64DFFDF223A07FFBB71286E8FC1AA09EA7D3C5E553AB89
7E1D4B39958998D5798664FE39FF4B33596101264C75F1C3A742F71DF4962039
87018C30EDFBF4BA558F6FBA61C95548CF5F45CC9BDDDBFFE7E6AC3B8A68C529
8F563EC6DA1F5C2015847725373AFDD25534FE57C583A30090540EDB4956ADE8
30F9CEC9E47617273A11692F6162086CA756BA00EFF2F69E73F8175268820C3B
1B8960CA31C5E10BBE2AAAF25197FB64AD9FC55AB3C2B84306176F7AB7126971
6E972FDB8AD62C98E41501101AF7EB03916D04C885E161DAB614185F16340D86
5A1996E6A6DEECD51F1463A922E378FB7F982ACB149F388742C36BFEF08A6FCB
E2943A5CC2987D4F4F13362D7ADDC3D3BC7DA1EA7D8DE3DB4C880791D8482E9D
9773843607C355FE14B475F24AB6974E13D88C626FAADDE044E3C5A02D6B7493
4E1CA2A19470E3278BE72D0270E12D1DEEDAE0D53E94106BBE5B477C96F71B75
8A6AC0A17AFEF6D76501D740462B21BB06A88DC601CE3DA0A78AE6D8D0B709F1
5E70470AA5B281ECA4092535BFE9FB964000782CB5BF8D4BE40B060C2233D9AE
5D06B7064DDF4364EDCB98FB4A45423F9F4625BFB22EBE875C0E8D393BDC32EA
3DB4AC283C5DB47854302CCC9AB7AFEF434F585F218A1665C6320EFB421D9CB8
9B2FC5F3FC381B2FE8997EC131EC9F3DC89191A056803F9D26AB7BCE976680AD
E652371DD507E715B1E395E1E542F6019415FC62978756D26A0C59CD21A7157A
42654A1A9DB67A8F742F59EE9F3757A3613D69E4FAF9E2C7D0C09F85B53FA64D
D33E517533A8ED0C5C2E15E84E5794B28C88DD46ACD5FF56C766EEDBCF086960
0EA2AE82D3DB145BD2C80500417DC7B7499008C4FC1EA7098B1B93AA05E997D9
C9A692CAFAA72A6A709C68D42D248B449A15DF2E4F2275FE250DA3CDB311CB20
EDD49DBC9095F94F916AB63327FD846D44720EFC9136137E834E01775190640C
827C098C73DECABAA2BB9F74AECF4DF62217946ACE5A1C9CC82CA5E6AE33374A
4F16ECB4FB1CAB6B75CAF210654B1A9D0B3970E155F009E626595875789BC836
FE8BAB7FA82E77EFC996B367BB79E69EEC7FBD973B2B6DFC2770A7D8EDD30119
37B8FAF85749F5F76D18BA91DA8186563C7B36AC7849C9EC825165CEE8D7EFFC
D4773B364FC4D887CBF476FEB4889D9D26DC2FFC5CA2678FCF4727DC836A7213
2D1CA61DA27BCB19B9AAF9846B82FF1F02D2F0A66262BBC6A5466367A223B751
CB40832014D11E9A1D033B0793BCBA9A63D4B451062FBFB68C3B768CC0BA2C59
A79F9010124FFCE47E409F0DBDBAED157D2507B270D928085C40BCD50DCCBF38
AC12D00206B6BC2F9FB5398ED788341CA51BFA6753A26C3186826955A01B47A2
6A3CB87B61FB8D8E25B5BDCD72C3569906C4539B9EFE445BE4B8C7606EC5CF4D
C65CA405E5DFBDC0F22D5DCAB19AF785B6C0EBFC022651EA9305286E320BE4C0
02F68C87C5EDFD5C043A6A93E254921B8B0B30961276EBB0F35BE7F4AA9CE2EA
00D7FF5F01AFB56EEEB1C77982ABB8EE6140B32CE306D5F840E8970BE0144BC8
E1BDAB95497A8970CEF4A3CEADD4EFE91D35DF7679833FFD98AAFA87BCDF729B
56C22E2E5B63F5A34B5C7B9A0C066EE7EABA27D325DF0F65E562648CA69430BC
27D408E890D158291B8EBF9A811A35B4789338531CEA9C31F381797E638F006C
052C76630B40A69C0098E514885C37A18059EC3ACE295613268FEDA546BEE38C
4A5BCDAD888ED4BAA94F5951D428C756B157A590057C76215C21DC2E8014D138
40A391D296B4F65419D9F90D451689A369759AB6480F82F90CD02F460E2C2E7D
293369AAEEB8B2135D6D5C11AFDCB68812634F5EB021EB15B7A26CE0AE7631B5
E2DAFA4C76529E02A585AA57E38AFBB5932BAC1A456FB1E0686A2C291D3E0549
34D4F9101991800124336EAB31789982D566148BB44FA0FAE9BF4FFAA1508421
BAD346F807B86CAD54B9DE2D281B47FD020938E02C1D2610D54EA695186B7341
2392E1CC7C2EE377F334CF6EC42AE09FB8F2078A37DECC1633CCA90237E25D1E
DD0C054762580CF95FC863D5A1E9F9CE271D4EF02C7B3F4693D79C9C46C18A19
8E425634FF7311FA695AFF125468FBAB8559F405E2356C473E158E2A03521AF3
970E6072477C0B90BCD0F1E86970BEAD42A34061F34F83855C0832ED8BBE99AB
D7034520C985BB93CE582C78D45CE0435537BC2F35648BAF1F1DFEC9937F2FC4
91DD351F0EE256CA0F1FF9956FFE7111F40E3808EA55A8208B058DE6FBAF6CD2
75B0FD4C1951C648D1F75FA0C7E46A46B2BF91C4931A003730F15B790D08E288
22E7347A916B4183E49FBA4E0450B7BF4D267B014A25492137965FD1A2148730
352AF582A0C1B3E9BDE84BF5F535410F82355C2A57257ECDEFC79CD3533F8384
2E754D9086BFA19D11CE0782F231D8326FD0633A5EFD2EAD6B369F8BDB82ECEA
94395D64C166797ABD0FDDA0DEEF21582A64AB454981FD0F07389514FE7E49B7
385EE2E22A73C2580EF426EC1A7C688FCF3055B80037BA85ED49D86A5DC04657
AF2CFEF7BD7A358B056DA716700A368865DBEFA5E50207FC94DD6E5B41F5D03A
36410EC69D8AF4A5112AD13B1FE8A9271B428FD286E3584BB89F9F25253FEEE5
F695493B93F468225662434232B4798A5B495E3DE1E98002971E1E8F6BECC774
D5CCF63E842783BDE852A5CD4846E7627C4E51DF8B16E3234052F3014F9B6E27
32EBC81F6BC257517EB9C4125203C8FF1D881F6C47B34BD7A91A4DFBB8CA5ABC
A3387C78E203E2B03A0E2A05CF14D61977508824D328722D6FEBA7C63FFBD250
569E78C70C5EAA1DBBBE119E907CCC13C09A7F01AF160394A467DBA7AF94255F
BF02D7997B7BD8E0D6A70C764B8E444F592B411FC5F685A8D52C7F2CAD73B9DA
3439FCF973C4F22F8A3ED4CA0AD673464FA5B3DEF81972297E16C7309212EF4E
1234E2D9861991C354B46A1AE81878FB693FC8A6CE75C4702CBF0E6741D8BCC9
CB6A6DC57E064B720D7A590105FEB6F0C40612C5BEA35E168F2D8A2C8C066BF6
EB99B521600A5584E6D369590DD9B1E85677D4AD4537BAABC36F78B9C790C18A
FCB5968C0010366723083804C7F9A7525B256291CC92B1DC9DEC00B48A98BC36
1710C6CF862F6D34FCBC7193A93F3AEDB8343A57474BC8E79D37A854D3848E4B
A296E27D7A66202C4F0AC5A9B8CAD7CB4E0BEFAE042437BF1ACC2DEFA87A839D
70015EFA7FFAA12B256EE5767DE6E795FF26C2B74B1501595196184BBD6977D1
5BCF91CFECEDF19E342389D90EDC78717B7BF1A60F4BE92B4AF02005973D8039
1ACFC616FB8D9D7E00F5A884569DF746684239ED3F7C74616B6C7782BF11C905
21E63B94C6D0B1F8B270F61DE04C9E9EC2A214BE6CB518B59E217CE5F72FF6A8
AA6B2C97D8B4DFAADCD9247310B9458B6B7F0524B5410DFC768628E060770499
49C2CC8117B374BF513AF1280237CBE074D111A9FB054EAC869E3C319D8A64D4
F5BD7BBB3754EDF3A82AB3B967D549895AD2EAD722B08FE88611D729ABE047FB
4547FDCA93A13515EF13D1E748D5AFB5D301DC4403A087EAB53B115D3F29F665
C1F035C9E649899F6E821894604DA5047690477A859103CB5CEA1432B9B1158E
5DFC8CA968EA5D22124C4E0711EEEA20769DAA8DD669C3630465995A16EBB580
3ABBECF27C0AAD52F75E9E3A6687364D5EFEC8F31FE0116E502E847F9B9C2799
71446B581332A84C3D18CE04D2388269B2C1C735F6B5DE8797C2D0050C709C5C
9709900E8E943B88680DB34F5D02D46BE055AF5FF933BCEFE389D9C473E0925B
683DEBEFEA6718CCC099B72B68B37C97E610E2D71CED404B9668D1032FE13571
230CA96EC326434CEF9105A1282D5C9AE201C72F196B897066608B3540972516
E89EF389AAAB403F877D7607C278C647B0BA3564C3C5F741EF59C31B4CA1D142
8FA0E147553296D51D4C8E17C5A19790317DAC4604A96808B053B4D7E4036FEB
D5E3BBD5963C615AAD649073565EAB194767E00C463AEBE2BA17C79C794B65B1
0C4E626CEA49A06A63E61EBA1C66553050398E8C71EE3AEFB793B2A86ECC9A20
CA270D52DAA835C2F5AD4A686AD31C292C7E5990FD5EBF2A369760C80B1EB32D
D065CF7FDEEFC4EB905B0C0BA6C712242A5A340A41D3DCE4433D0887A13336F7
479A0D6E66AEE1EB5B155A10640C7DE47E8F285C141F1375478DBB41624E57F1
F0D63E081F6DD1EEED04351AB04308D8BC9DAF2CC5953F23F384C14341D8A12A
491E774EBF6FC475ABBB15A3322AB1C6EA139168F5E866FE4668EF25C04BC9D2
6913CE55BA9EEBCFBE546755821A036D677AD25547888AA1B9C0C78142B90F31
5333168698A10F2490C398AC518CC7FCE39DB3CA9C1496A8BEA1B723D128121F
CA54ACDCC2FD5D15F53B65770B843C23937159495138E4F025A6152FBF212263
1D967DD0B8B58E8E24D022400C1DCB211E820628D55BE970033F40ED720065E5
C2165334CBF577829A5C77E9661739005F023B08F7D87838F62A6CAA01A20DC7
9BDE52BE277FFCB439E6C980326593693FF54006418EE4AD1570F44595901DE3
454925F21AA58102E1D6D8F4804C18FB39B1F784A5F0BF8C67D2CC7455C4A914
FBEEC22D759AB35870C3DF29F96004362D6B0DC62BF0C8348C55ADE90C0069B6
ED90BA08D8A04B1B655B60D215EBB389CD803DA3064F468695A530380AFADF57
549B55DAB5D7251697C4F0628A7B29520B77AA16B866CC56DF2B09AEF45F075D
926BE357AD910B4226247D45141AD506661CFB72E3EBBD5CA2346C701161CF8F
45162457521F31F8E710D1055A5F8A50C2841B63B9AF7C7859A6D73162A8D8F8
5F0EC04A5ACB7071A60DE4E928523F825DA8B323B01BB50ED46CF009FC101F81
33C3902F0EA39A679D879FCEE3756BC21B5F88E9B87E035EBD28B8F67585A228
1312DE9D49289F9FA56B907D4E496BB4EC03B78E7A8335931A5FA25F03989152
91EEF5D99C4E287BDC2339AF2CA05493E8FE4A623C0FF2C390F40E318DEB7478
8E6C283C6CDDA24A62AC673985CE804E119E30EB552DF630CFB2DC8313F060F5
CC88725F37CD59FAB1B8BA902ABC949F1A048433A91BF56096D56D46F2726A22
4BDBF813124FA95DCB0147DFC3307E856186CF1BA6EB7BB45146848E254DFEBD
7AD2CC21BA8EBA1D4B6247EB1B3C7935C2190728B94C3FDD8C754C60E6063BBA
A8B6AAA751ABFE802349FAAB0EF5E3B17779E029BE748CEF76158231CA2835E4
B89514C3E1A90B40B2337BD16D60007B8D3DD2538395C0E2E2EAB9CE383B7C5F
B13228D480A07DFDE76E95B7DB8AF11CCBF5207C6B088F841B14AC51A6B584E6
F9473CE6962323963F7F0BDECBC4569AAC2507CF2EF1FE6B1B7A5D441AB9220C
EAAE542E4F0B3933234DE31EF63CF58A03F07FBF5A818B467A110AF2B0D9A4E2
DCECFD566DD137FD5141595EC251DF1EDC747C51AF4685422AE2CAB82ACB5BDF
CA3D338D87D5B02C7DDD97B70DF6AE8B509D9652FFD7F2132814EA42C4153336
D5FA95DE25B164F92ECAD1BF6D62F338EE1159162D797B148B8942891228AA70
D2B8217522B96396E29C438F41253D3B0B5645FD12419224B691FB11A6404D8A
5AFE184EBA57748E1243084ECD38A0E1DCF2E781553AD92A7EDEC8B2E936E493
C394D28303614722B9A33EED6077891786683AE3F55E4CF016528A13979E564E
771621EFAFEE782C2E5A23B2CD707A6A4F3549C34E00F97E97D2CB5C49EB6EF8
63A81473636120A36120CDDF47B8158D9E0A1625EAD60A69C1BE7493CB2F491E
D94B4CDB4DC8441C334A0D321CF43B5CE79B3C0A8803E7F82B2819A3942F257E
38E82C359BF2EEDCFE744DD4FB37D6E7761DF73E1809D2949244301A62E47FF0
B741B4B256E229329FBD45F6589A63E31185339D7A5F655AB0968CF669366F9C
EE7DBBB9CCCC90B8843B29AE98D01AABE628A4C9DAF1CFCED2D5582D4347BBE4
DED401A585F7942278DC6ABDA33BBD6A558FA5EAD5E23ACCE673604D21AC61A7
0F5944D260CBC86AB70824B87C47EA53A81AE4FC52C46F80FAF63A6C181536F6
3EE410A0253444804882A2CF152B6949383B5B144F553ED6C4E11F01A8FC1D6F
293EEFA2B2C822BA7A8058A159650D5793750BB5D0D6EF816AFA4869D539242C
2CC6BFCFA8BF4737A8E8AAC9298CABF7E237E04092C68C1EC4A20763CE3826CA
18400E0BF4A1A27246FEEA876A3AAD2947EF117AFA0B61A9B6A7E201923F7D90
3654C4992EA47CC5B2ADE77D79E47029E40C4B5B596817F231D26A087035DE07
E515B341248C5EC3CC2B851F262522B364135420ABC88DB06E31E491B927C026
75A644607478F4AD4A152253AA4339F0697807C7933E921AFC4028F57C8A9EEE
80F870F114FF4010102B4387AB3C13DBB86CBA833176323D1EA2402B20E1C4EE
2A11F42E4327DA0FBA34901D53F6E6B223C3DFFD893585F22CFD765A69F32289
D8824AD5C08B62BE72FCC169B466DAE292D82293077C69F4DC7E03FD7A02F465
D1AD49414FFBC209C1C68063DAB0E8784A5B2BD8E5CCAA7E81E8A25A16DCFD32
5D6FAAC3C5346B3298B970AFCCCFA9B30FAE7F4A952D09659B208D107C8CDC57
CD73B15C52008C68A3F9F233B921509D3B2C09E451C0BED6BC7D991EA721964E
9EBEFCA6F34D79C337161BDC06BC1E7868BE5BC495AA4625A4E44A2447EAC2FE
09AF84225F8E35DAD8E608716F4F5F31B45AB4B5D0A179C0582A7F2C0020ACEB
3610ACB548D6D621705A2CC299B2714EC637724FEBFC2C90381236C47E47A170
6AA817CE3DAB393984BFEE7C64ED51B18E590A132E2CDB9F75B17B2F16E43F5E
21312683BECCA726554EDA0526DBBE8E0D9C58D322D134A37B2888678AFF7388
B5813552E2524F347BC1D76D13A4ECA2771CB14A846D87549A0496F465D00F07
66E196C03DA1A925FA9B64A921EDB0C5C2A27C3398588A7085CE787BBD91239B
9EE730512BB8F5388B9ADF9FFF771F1866ECC50946E35B7F530BDA671EF1A4C5
D9B3898D7ECDC4655F680FCE021616D0DB89C51001090A4A7A4D776E3263AC78
31D24F97A175A93FBB1690F9DD007BD7D484C2E2A39D8B968FCFE0E740DFC2FC
A9D28A6742AF910205C9B6214E0F178FC2E3E8FA94DAA9858019428DC505D953
6D49069FDD216819E3C86A6D4BC3259179DE4347ABB15EC3C23600BC5A557814
3D55A93AA34EE1222DB38552091831DCBE0A1978BA7B868847F2DA25B78AAAFB
57A9F8C432539E4C1D48A1FCAC3511A660FB2091D0B1D86F49F7D780AEE751A7
0A0EAF11FE40255751E95C63B325228398FCDA123F7AA801418D4E3BC350CC68
E261FA07D3BAA1C3E438E8243D6FBBAF50EB8FD8FE953029FD32E5B86FB5A5E3
88A2C04E1AFDFBC386DE740111CC81FC8A4652D4B8FA9FED2284391DD5F0AAD2
DD34D2267EE0682D2FA27B8F4E3D0B78CBD11BD3F3D0D13EE0E045B13EDFF918
FF0F7AB7C22E5610EE5F4E9190871D0A39ABEDE3172FA0A2127751E814E8D199
4446295C170E65142069393597F6195329AB926EFD4C397ACFB134D0A284A607
919D9370A70F3F45CC0E935D28583720CD92390440D0495BD7C6F5A86BD272D2
FC3C68647B83EF5B459D8A3B24AA15B2D364E1FCB1BF17BA63096272B30D4982
435FA42C653EE9D144C706BDE9EEA9F569F1E5963A38B4B75F8B1419E59FD7C5
BAC359A69BE7457657A6A65406015947249332D8E20BB4718FBC25D1459F04EA
286BDE84468C335103F7496ABB9CB1B83C5D94730061218EEA88699B3DBEB852
460380F3F67EF2B915F06401D772001C19E1A63EBE7E645FC515D0A6E842DAA6
61FD9B397A3F26BEA91757A8549EDBD9C4EA4FD7B9B68BE31E7907472DE5DC8C
40FCBB2BB86ACA3D96BE9DF74FF2CF281363B7DFAD216D26ED6F9FFB5ADB331B
5F223E9C743FEA0C3B0F9995EC0F52E956C460FC1EB07918434A847BFC90312C
10655B60D215EBB389CD803DA3064F45DC549E3F55B8371D1660A651C229D309
125837A43863502E8A12727F5D50F3C73B5730D57871885A1A37C55A715742BE
8321491F481D2F9EDF441B67C3B73AA68174819AD85EC878F260DF0DFBD65171
980C9059C71DF4FFF65EED1F71404AE80C589C79ED8D74026ADF1B4E1D88353E
072D4A417B3CB90E4103E0EA7119629C1A5597FF7ED694FC1208C4E1B0036DAD
5C10714EEFDD6ABE847B74CC7C1E0A45451349CF5E62AE2E81175A685D143C64
BD1B19E15B6AD1AB10289FA4867D37096BF267DABF258C39557067088D8C6D22
457B46B3851443856541DAF490B533182C297773FDBD586B2CC0113E27D037EB
41BB5233C56897DCD4A9710281986726529B5D8433B54A0F460D702F65F57371
547EA6C877529E79E1991B94888726133C35A5DAE2CAB0755BC232FF70C18272
3B4FA85DA2C4CB43DA2F3BD3868D6373B736D31841334DA812F8A30ECC3C17A3
39F4D4004A2F587234FAFDA6713CCF3745C58511556D425301771208D55E96A3
30389BB0DED9AED5A91815032D5974DA63859AC97006C0EE30580D1A3C1505B7
F9B611B86171989AC09A6BB14B4E0EC54C5AFACFCA851396A1F2A58387CB9993
2F2182AA3F9CBC2CE3E57E676482AAAEDE3EED07CFE3117875E5A28C5079E178
1A9E1FDAD12E2FE4AC2173B050A05C18F9880E23C480A2CD0B107CB61DB5B347
3627E1BF694F3E9CB9A7414BA06DFD82358F0DB799603233C8322E494B0E1D8A
99D7BB75519C04125C88841BE3D3C6E6AEC948DC1A6586DEB6D302F8913C6BB6
0C0312B24B0BD4ED7C9E63DAA701DAC4FE7928673F7B6A68F73A2AD162CCA498
57A84C7529882081279DE3B25A314DC836B1FFF14EE35D303E3785A358E9C113
50BEEDA282AB62F7B307156ABE19B56BD4F691A1AF2418534761F8C356810994
E46D30A3B72488156382BD35215D8D83A278543F8C919BA0608A9FDCDDCB30D9
8728645A0EF2349E6EF4470C55D811309E1EA8BA06F6300D6B15CA859058287B
BB4525F53D25D77F4026258C426CD1EFF18EBFAC7D28BD9F35A475A361080D21
8B2ABF7405C9E6A7DE351875F1C9B850A692C4B8D758642A39CA1A0516229013
42219AA07500AA5DE6D5E073D10ECBE93C5CC2987D4F4F13362D7ADDC3D3BC78
B0D56AE3131FC9786647D584035A523CAE948EA929B5439EDFDB983C046C1F53
88F7E67E3E0031F0A13AB12A8522138A17ED1A8E560E71D8FB80654CCA0877B2
80AC94BC365FD41CE00D6E6CA78C205758D9EA0B988E0C9B39A425D899B8A8D8
983FCE91203D3F13487F4DA7D3E17AE9BE77FAF74DEED1F46E91232676A161FF
9DB7741FD07F83B8718207CA4BA03C8C2F41E10CFF5C14B05682C1FFE7F3C18A
633F50B41E8B79C0C246A98F6C78D3737C42B28588FB5B0B3CA97EB54F18A97E
944E0498E78FBA671B1E88EF5F1EF4FAAED7C4586AF1E9F97DCE05200A928A53
7B7DAB77D68B9D2F7579FD28BBFA862BFFBB6CC55A89C2529A4F261AD82C4888
BBDF7A40109543A0E33F06DFB8454F8E326A46E607822CA2F168E0E8D95B6A53
8CCFEC343661D7DD0F7DF1959F349B12BB4EC7C1B6E2EA77DD8039527CB16E5C
9371B5DF7053FE08309464F85C3E839DDC16CD46C62EA21C63CE90EE04B3E46F
6E109C8193C6E1CDDC307A88FB00A1BDF0C7786819B817A4E887BDEE616AFF4A
66FCF41D02C7EC97B9773098D7B1DE57557F019DF489FBFCEB05EBD4C3B6EB4A
1F64951B61206C2FACA987832D7946D67A12AA8660868049AFD4BF5FC1DD1425
A15C887DDC3F530456D6A0510A8B28E9859C187CDD6D76FDA492539817A1B296
1B6585C3BC8751B9BE4744063177B0782F58695C70CE086528834BEE3A0A9871
52834C6FCD4B6F4420492F25CD6E18D0DA09A077839FA7EE598772B76C72F09A
7FDFA76332D671153CFDD38D8A182D99BF0AC5732241B78FBD2A36C83DEA5FB0
4E14EAEC100CBE4B30F37CFC7C83E9A00F23BEE2B638CCB3023CA8994808ACC2
B41BED1C40F0D25AD81AC221A5B141769E12657A12F9B2EAA14798980BD38BE3
5C9C0B9336DD693890EE25CFCE43E7F7718BC35C7F5A29976E40D6B935E1CC0F
1D31D3D04EB580E03D161E419770F703322DBD74AABF8FC768239F2A78A73987
79AED87FE9930701583E8872111DDE5DEDA97EE65C2DDECD3D907B80D93732A3
C24D358373DDAE6D768B1765AE644F5EFDE49FAE1826CE1209DD13BB4E9C970C
46EF20FFEBB58FDCF13104AD668CA966A7F0E8E738432BAC9F15C4556EA67EB3
F422BAA00E20AADBAA9C8A4EDB0707BB7BD117C8AF5BEDA5B22C02F0E15DFECF
3C0773338B521DE231B13090255839707BDECC5D8976C11406E630C62B205708
98CE53AB2ACC70782F4AF3144E458AFBEE2418D5AD11C801A4412C38F4949F89
257B8BC3921B476F01836831A6B3AD5675DE5B6C8B53B7D715F2A60FF02EE6FE
14F328AA7F40F94C2881871A160FBD10D2A8CFA1276F9194E6556E8CC6A6255B
BAEF138FE0E4EFDBAE71A36B1ADFF78ECE0BA086B77EBC61E0506013C9797290
60A04C88FD7EE21BE265B06D08430292E7462E2C6D4340DFFD4601D7718859EE
D8487BD80C4444B2D448A840F60EBED68894FBA3D0F5A47CCD4017C15430EC3F
E8D1D848C6ECCC6F2E9D0F7EE557962E97B2611963063E5E4796EB958166DA9D
D39F7FEED01625938C05778D06A527BA855AEAD7AAD5840F3C7B9E21D8CA390C
FD10968212200740D75410AFAC562B21C6D0BCF55D3DFE91A020793E66AAC88E
94BA70268307C6378F3B986DDDA740BEBDBD569AA09107CEFD6EA60B8C5AC1F6
D46AAD79527148126ECC74F1B4C26190D1FAD81AA210A4EF88D706BFFE77E070
862930B2AD398A9EA8F460424CF8C3DB5460394CF197CECA724F82B938BB29CE
3937CC35C3715CFF2AC56E4465B01C9C4626A42DD8620AAD09E1635D0ACFA427
63CBB550451EC80B1DCD77F56DA2F4AA6106FCC27B204D7A67C1F6DBA6FA3E3B
1793A5EF36CE4BA6B7078D6097DB039640333E343C104450F9A59E02997BE85E
091EFA8BB161C5C4C7D441C23B766D1920ABE49CAC93EFF63A93F7EDE373D0E5
436AAEEC1240F71E1D0D7055AD93C362A37CEC3F3A8A800758FED6ED30FB66CB
45E6F6628976C62EE10C5D3529C8D3B74E0CA32D30816D569142C9E718E40576
0DB81F141AE5373A6C53F47F0BD7462AE367580D62A752FDB0B1A8C29D9CA9FC
B788794DAF9F64D5BE41229D0627B0AF182E876B0FD46A5C332DFCD8D9565B65
A253E51D926CC76EB64AC9CA83B7FE6C91E10FA717CCEC0D2F8AE339F1FB3126
57E2BD52AB35B72F30CF7593B3EA70838DE1538890C98AAC895AA48BEE6E1FAC
B5DB6255EB11CF42880ECCB4E9902735A3973F350FBFD52A177BE84F2C556356
F953DAEC243FE25DC85F44E84ED06887B6E0A78E0234EB24527A306A3E2B5F6C
C137F4591D3F63B87490338692E1E8CBCCA149F705C5C4FA63BEEC03A321C96B
32D99CDCE1E087F071104B7BCD7EFC7D827406916905CE562A7F1F31B33FF180
99602C67026495FC2E4426C2B5993333227904D8D3118FA28D55E36F811306D8
B45382F3E6EFE9C794A0FC38F09139ECD44EDC4C4D95F0D0ED33AD94335813E2
F68F0697FB05CC89E2053D3D8FE8475B87C18222102AE6868F9A2351BA6CC5A5
5DE509E49C0F79AAA6140291083972293092C92D8164F8D4B95A3BD6EFE427EE
AF3D3C4B2272F5BAE463184E90C3F43D68281086B9DDB21D604056A7672FF770
558BE133B2C1C7D7E176C468E6313A3CA43B6942EA1ACA42EBA1FC619435B95C
5C7603A80BAFFF3A40A7241CFF20023B40491EB898AD834EC65107E430DE2E62
E16269D6967B5937F585BF8D1F0A66805BE9B173D505CAED4D969C95534CEFD3
1FEF6708C7D0775C9D5B267D4ED3B6FC050C642D4F8AD470257FFD9040AE0091
C79CAAF2B985CA51017885692002CAC58C1BEF5046246A0CEBA481CD267B46A8
47B5E077D703DA799221583EC737215883E3A284AB05224B71597529F45E4DCC
5DF593CED5C386692EA6C88E9327862E9C661AB681AEAA9A670C64AD4C063A41
FD97AC4630D914249FC827E1B35779A961763DB019BDEA41F32B1C74A1469847
F4C89FB45803BDDC598699A43BA00C7A0A5C2851F7708E6619770A190BD48C25
934F6FF32CB40AABBF21AB550DB7FD13D3073A7690664EFF3E68182DCEA45E52
8E0D29235C8F0CEEED40044A8F508D04F905F584A5514FDFA518791F396FC859
8E59109FDF33DB976A55583FDDE9B18DFC86328E211126488BD16311921BFAC5
5C6348CE72916FA355324AAB6D450BF0B3F3342C66E92808B29B09222E86FF1D
890EE2689F2A3BD72BE359B9006A13430F0AA9F267688976C76D1021CD015D97
9E0E011CA35D529484F38F6A4DCAEBA1F1DCB1F6682D0A249F7B020D228F5EB0
2D553CD0A893CCF96BF5D4FF75D9D47BC014ECDED22B528806F4DDE140A4B6BC
65677D3C618177382DFF490224401BD84B1E8F5F267E84DBC86356F059BA30ED
8AF544E782E3F688BFE943C25C094351812E7D0817220FB50C7ADAB8965EFCC9
52FF92B62301FE5950FC46FCD1E5868FC3F79BBE0179E53329E229F8F69A3C74
9DBF25538EF06E332C11D2A9EBFE7949B84EF7CF72977070C63EE4177E3F3D2A
FF3864354515794B7A1BEA96746DF927B1B78AE9D4F50DA7E9AE6CC9EAFFA5DA
E985DE052C9848B696188523202996FA3E70A93D36821BF6DD1ED132230D6C53
9D9956444E02CE12CE51B376C42D7BE6D5B62B597EF22301E8FDAEC825C73F51
8062E8A88A53C47846D2266EC000852A744AADC8BA2C0BDB7674AF47A2607D18
260063013705AB6F7A67D2B847F8933C5FB1577B1231249256E801390FF602FC
FCFF86F100F5F16AE21621F96E0CB4EB817C1090636CEA94745736395AE5FB08
AFD1CC526FACC58746AD3511F899A4CBDEA55DC35DAB60D79EA274B0C86C0D33
985501DC3F0782AF68F8DEE9B0A86139A5BF2386BF6A4CFA4FD5ED37435308E9
91B8D5CFF8176820D3BA3CDDD85018920ED59CC81A15EEAE7EAF60D41AECA65B
60D1AAE43BC14BA35B722F2EE93113FBD3E3C03AAF06F68BDF7D3EDD17C69195
D52981FA047D23595945100C6CE889D66B44A281723CDAACD83143FB6E874B5B
D7116F9166B4007FAA61BC078CF8572241F61F5148791C6FBC4B818F7FA8F2F1
2C63E8CC2FC7C9FCC921E9F5ECD28CEC3ED28FE9AE5B795DCE25425387A17F55
2F930687499925245B8299819734601CF746ADE472781A6A46F5AD81709E4C17
1B08BC9028FB6365221E676C846E1C751809E4A591E34876AB8C52681BAEEF2D
4CBD871CED84D38D33FC2CA559E3D62EE7F0360573AC236E17EE5F7F1A518EAD
D653AA65D5FDDACBF202F68B5E140DE04E29128761B2553DDACB43A101061D84
5166E002F1CDA2F1671CA4665B28B641A6EE6B1D7A954D9FA1DE350AD6C69A79
3520439F2056BFFC8655FFA080FB0559F7F94A744C6E54A007A5B5BBC5E1DB6A
0DCB8D0CF788AAE48B92AFE91C9C2C25409D303F33072AD2E97EF4B309429CE7
7E14FDF25C31FB75437153FEB8B4E235E3DCA09CDE93BCDA243E3423692B4000
866543D6266FF881EF3CF903C0B7C19C20040D6423F521766A4CB15DEF8150CA
A554093C0A40FCFBA03FB3E435FE3276F0250738F3A2D6B50F7F393A62B85C59
2947C92273E55B4AF2A738C2C03D0F7EB3D7E34D4C9132C0AD46595DA14C0C9F
67B91C9D195E2EDD1C60A2AE1CC2C70CE8A4658145B45A717F19085186251B59
C6600D4D0532FFAD1FC4C4C8B8FD51449F12F72E5F943C30764074515B39BCE7
8F8DE27E3661129006A8E8E0EAE98AD6F5BF332EAFBC0449F8A90932CD017D54
E39521E10284FAF9C7314EF032F1FBA346FE9F894A786CE52CDBF36979804DDF
61F36C5BD8BA61B371564ADFD19E24E33905EC5F0911FFE7A6A87C34B9F7BC58
8FD51AEDC2771321F8D4A2B4549725090BFC15BC61EFD959E669CA5970A117A5
F6E8A36B9161FBC7D89A16E52664B84D31D8F36D1A6FC954F67E8941AAF17132
6237A8979519CC9B81E608C0406458C2B4AC2B9591F561256C049219FC0286A5
271A9F9F6F0A57F1BDF8FE05F4BAC0CD62F2AC24764750FB3C48325C552F14CE
B4088D55E131975DC6B05953DD41ACAE124C8AFED17E524C96C5CBF2A8053108
EEA89E328100AD7FA9FA045C41D5986EB0A40B544A74DC7093A2EDAD3B3A1EA3
E9FEA9B22BF2E37E47408D4E49D34625C2311705AC395FA02DA1E7A9FC0025C1
D64E47D199791CB636F68B9FA0B7D6F0FD8C3F73B1E159071E3160F3888F3C82
CCDFF900EA83147A6010DA648760F89336567AD435BA18492B2129862CA58FE3
B24BC2328A8DA492349EF083B9A54388FDB8F030EF94155FAF8FC47B68F1A3F2
14BDDC669A288045AACAD1232D42257BB4BF8EECCDC8122ED12212183A966F19
4269A93913EAD8C4D2DEF0B9F513BA5BDB44B2801C75316AEB9E6A4A7953E4DB
6AADC9BC7DCCA4C8426E631CFEBF8C4F0D045A064ADC629F29929339018D4A16
DAB4B447F655D5091F859380F5BEC8BB84303FC93227AD94319ACD699FE163C6
14C3AD53EAE81EAB9D59CFEA352AB41222ECC757ADF22680DA2784F6A58697E9
AA3009EB6DE9A1AFA37B06B0B33AC405074CB0AC68A2380FB0D632C46159CB8C
CCEFC47EF08F2724FD6BA12B9E6CDB10043E8F34D46C3996D920EC72C2AF3FE1
FA93049C6FB741A9478619D958E77E6235C9439FB8F3DFCB538ADEB75EC63618
86BE37B336D6A6BC8D2FAE7B790C2E27378A94FC40FBF2E9CFCE3B75B77789C2
1C0E21B673D3E3C903E6C0CE2B8E1DC0C42209A8354BC2B327B0F4DC2C257659
6196933BE1A2076237B62133A32C5A8956ABFB5E9BB5570E2AAC19341A964667
19B67170E48A326DA0232AD9F6C0FAD8D4432A87A0BABC65B76059732869E4A1
F3D98DF31EBF1EC8FF0B351A67AB3561722BDA03FE40DA4228AD798D2B4821F7
0DFA40A05AACA4EF00B081E79DA64D6E2161ED82E26639450355B012B63C2DB2
433CFB111BA27353C45F710B6BA402099B046463E90C56D614A7732AA0BDA864
1876CB103B93575FA935F691C825AF35DE0FE473BF6BC9CAFFB5CA5F06824FE9
8205D719FD8D20567321D2B38A2A241A8F6912E929F3EE46586A5F2ABCC68686
1F26D9FF0DC11012FFC5CE3431D70BA71C4C0FC7235CE6B9B1ECBE2FCBEDFCAB
73B87EEF15F0403B0B4C52AEC5D6B00B14D3D56CF55E3C807AF98103E91CF2B4
94BDAAA6B8513441BF6B5C79197471532FB73B8E184807976033648329152B32
31FDDA00E9FF7D67C7D378699F74E83C4CCD55EFA64E8B68D0BBE9E5A03E8598
20C9FE8BE97BE672ECE20497FAC928C3D09F1AE155DD8261A38CFE71B67AB4D2
A45BFAC53D6668CF22A75928CFC8BDD8257973D6FCD5ED814757FB7775AB5C88
32AD632960E68DDF4D87009B29978423330B2D96065A09BF476B3D0DAD9E95F8
14167377F5F4158687F05300E1034AC01BA7DBD5D2D5F00FDD9F8DFB782BECCB
DD39190F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM0600
%!FontType1-1.0: SFRM0600 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0600, tcrm0600, larm0600, lbrm0600, lcrm0600, rxrm0600.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0600 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-210 -320 1719 944}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF7C144CBECBB0B8AC425A
08F38901803917D730AA3A77964447A6FDD9D1D5D6CADAB899C866A153F41D19
22B1F8E853431D34A87708FD95EBAAE0636D632C6CE8C8A24746216DEA10FC2D
C907A32EA036B850F319450C5EEAE2F44F6816A6D06D366C75DD9E360D9B2A18
87A6A24EA1491639E588EE3DAF1357CEE96FDC53B9C5C4428602EC516A115B16
B137347E3ED03B4937869940192CDEF71C0F2AE65E9C3738407DB9F6064DB42D
E38A19BCC21F30DC69ACFC17FB5C81CD536C0E8FA6F05081FB5CD8F85031FA0D
119767F746B580E784CD0928454272AF2B8FB4F5D53F2F011685524517BB6B38
E8B42394EE37942132A010B6CE3CFE2E6CA24D320C12D62B1C9D401A74AFE7E1
D4B2B0968BCD3E63619574B096BD23B59496071FC1536DFE6937146ACDD7CE00
25FCE9918F9F3439D5F9BF4494CC501FBB4894E8C454BF46C615A2407776C621
762E39A14708EFB767E2EBB33C8ADD59B3A589F3220142F98A253A164ABC1AC4
C32C48557C507A9E3021229008ABA8BA85B43B193A537EFE14EE90DE56EDA1A1
CF40CE8C0C510EA30599B1381005621984F2BD4A8B15EC634B26CEFA8B03CF43
612FC97D3C94DBBFAD6F325B3E3C314F0B0AF5DD1BEF045D7E5A054D99EF3E21
91C1D5C91A760D90DE6D62BF425C79A481AB376FD2CA46F949C16FEA1B452840
4AA8B56B201E4E7DDEA75D821FE434B5676522496D357B621059C6E9007CB5D2
190161111309D2476139AFE57269C6361CB6F09E0F463AEBE2BA17C0DF2B676B
EF8AD942A3BD1FB35B44B11FCEFCE048E0A413CA2BBAEB9BC90A5D78E6B1EC67
E8D53B310731AACC60AD7BF22137C721B0B6AD0233FD1DD83AD47EAA9EC9E3E4
45BE2DB9EF5D34E7F747AEF16932B3F3C6D6D3C8C6A90BC4FA26BF967AD9B019
417A876EDE63682A24C06593AB2C0F1D1CE0A1C1B8976C7550F275C4190A3AF1
EC6DF13854712FDB81061A9F5C00FCD0A977AB4B7EDFE86FE9668BD550DBF3F7
DC47B85620B641E77FE5F73E9D14B1D8CB415F20F739EF1B49B6D65C7366A3EF
E4E0275CE8F0D3BF4A2151CD13C45EF003C1492E94840A2977DE53BE29CD7775
3162646B1D7AA69FE0830C05ACADE1E4039D242E7434E22EC93615FA8ECE2D4C
27342EF751F4FC23E314B5E22BF8000FD3DAF9A8B70334512ED37D33598B51D8
1420F45BB03781F64840D49C9FB69442DC88166575049E84F39641519C59CC09
CC78560917B2A7265C39784EC4B319959677CB943985B96CA9D8FA3A7F776916
70F5D42E29A509EFD1D8A9DE08F1FBEB0759F70A51E2136B6E937EAE13534405
28AA547B5EAF4EBEA0BC14C055FF8FA189A4BAACB0B978A58EDB6B8787C84C6A
212F067A28BF6C8D599A656CEB8AF1F0D2B736572A20B8CC7B4C8D58109179B1
5292027209A25CB68EBEE9E67D7AC8C5A90D47F7DA125579AC4CFF4CA716E425
C9109C1E32527227875588480241B347367B30AFDFD12CF23A050D6C1328C340
A6556729C317E60CD87639E1B4F3089932369CB542925FE084E208AE46D117F1
A0394D0BAD6A6D318033C85E12B77DB6B54C920160633B59C2D9285F7363165C
83F1DE2D6CB5FD306F441F1C09E1C5281C859EB777FDA513DFAC697F562AA3AA
092FAA20A211D4684B72AD8BB8A5D1B3144B7822C5431691AB86A1D989C6F6CA
DD3CF01D2D43AD2E836C43E520792075672344DCEE4F9F1687F5E18A1F7F2808
A4CD492A90B1AAE543C2D357586AD16D5DA61C12E13338F52F290C7D1A78D50E
363B81CF19262AF6A41B35C3CE298F8F6B866E05081E15818E964BA26343A1BB
05062BA3BBA2174F6F457B8CEE274AE7842BD8077F90731D9C031B08EF9229C0
4D4C6E222909211E8149E3D6E0956AA272BA4C49335A08E4F946E74BEAC062F8
FE26A02632ECDFD0BF97D135B0FD0EB25D48CE4F478E134BB12CC9AE3A5456E3
64D2117D60BA66CB7B4A5AE95FA40A28D7DEB27B069A47979A1CB7AED352BEF5
8C560E44F27B9FCC33D3F2076382F2E96F2F1C94F11476BD78B3F62DCE3FA965
B44AD9300CB1DBC3E3A03639C338E6A47CBA39AE6DA19468F81907C0F2E2A593
DB7AA7618487B1D3D924DD0CED0B372AF195EED1ADAA95369820F88AB02E7F52
2ACBA51836956E4FC7FA005F9847900918832730A558067D2FC40EB84445E85E
8D8315D0A0E3E26DB60F6F40D6B935E1CC0F1D31D3D04EB580E1EA68C289E7F1
94D9CA3F7B1DB6FF17B5BA27C4E2B5A23995C881B05A205779209177897802F8
08498A2A584787139457A97D7E6068500894304EEDA172A99BDFAD7204FC8E23
23C873222A626FBA2FB12BEE4E016B527EF236E5AF135276C81FCD2A8FA1639D
0D55F3644B802016095E6C99BA46C719578BC48E9065AA87E8BDD5575DA8BB21
01894B0C047DB7EF79B8ED91091CB575ECBB38CBDCF48A1E092152EF822F5380
F0E5CFF5154FD2BB8D1670F027599C8AA6FE85CD867387C82549B44DC9F1318E
794ED89C47409E478B53DBEFB94C0024CE2B31A24FF1964DD143473893F650F8
1E28D0CF231296F67B8634C080131D4DA2FD54B4CF7EB11374C471EFCF1206AA
29EAC385C9DEE25CBB81AFAF6027C908EEE802A295E4248C4A1BFB7A8CB00F44
6D25ECD21B236424453711EC6696146B9904A8B18B8920635C99049CF76B116F
0162BF431ACACED6CCF9124B91389A2FA3AC852DF8F0748C75C19B65D2F728DC
E0876AC20486F7D845BE697229F5F1DC7CFAA7895FE9B3144EC77E3DF61AB8F2
2FD1CFB4E40FF4068BE1111CBCE2EA64C3B05B1B3AC68A0B8A83D298C4D9F570
45BCEC024AFFEC50470EEA2501AA72D34045969BC0B18565C063BE0F3E9F9FB5
BB83FBD4E7B60DC1EC13D3A6E60A62E18CBEC95D4F9B797B26664F9A9BFC33F4
366C494E561534BD33798A933C315BCBD971C5D5627A380A78F81319D84C6274
B75247E7AE6939D00ECF677824D4823CFA87DE5DDA61E2B4C573977F19D9D9A0
B8D58006A2A7E81C50F1CF9F68DBAECE652A8E228796299F7BBC7ECEF86ED1E3
99242AFADB8A19C661F538857EEC8AA2D7010D493631FE0BBB09C8ACC305F5D4
DD4290C95FC176BC039EED99160E3E7290D32036155553AAB657D60E2C36D1BC
7ECBAAADFD0B21040E80F87A53D8F90EA0F63D004DB101D5CFF6CCDB24D778E5
7338E8A6DE3B431A32058344CD094018F9B4B8790F6F59291A879E9B8EA83B9D
69D43746B142E9AAD81311765583564A44AE56F46397C5E1009223C277E6B0E3
E71CBD4239EEA0D2DDECD7BB7D063C152982D388DB7A0B4ABACC60B3D708E521
1033D3425821DAAAB8FE4ABA27990D6B91B3822A520D6F9C1CB12188ABCC309F
EDD4FA497D23E9C78A275F71858BA4CBD359B870D40067F132C3D31CF06DE8CD
DFEAFB8A0CBC0119E6711BA65181B4EA0E9538A6DAF6921C5F3881436FF74C0D
1664229029635C383EBCE1CB7C2B074B5AA05C938E87FBD241FD064DBF03040D
46705A1F6ED7377C7126ACDCFC02B7C16E0A77DD6C9A899394FF19037D8A673A
A442E7311093FF3D0A3AC14F3A7E73E9B60B21C842F26EFC7F16D94F29668DD9
7D27867B2D2FCA8876DBCC1722A7C5127FD3D47DCBC817B3D5859FBE06922B23
2B0AC83BFAF220CD42CF45666E41F368E21319E382F750C4BA3EC3E8F6CDBA3D
110893CF1748613BECBF7549175718FE22328FC3356C5A1D6607986E151EE943
E301D9F0A0B58494405D4DA5606E89BAEDCD9E573A2B023352069DD1BEBD5199
146A70324E3CFF770C9A0815EAE958E6A17B3CBF9B54D5E17000CA4114259479
70F983C721DB246CC8CC072B11B3AFE65E5C942182AB71396E9417455C5DF4EB
DA48A165A439409570DDF9A03CCD80180CB25B803317EC7F3DE1F15EC45B64A1
F4E6C4956DF4F0118B300D1B6D20927C4E0ABC977DC8D49C6355B9CDA3F3A115
780B4AED8F5099AC2362EBC736403D067D95F379CF44F3F87740C01DCC3A870D
125837CA28B754F35C5874A9204432243E66A9837BBD9920A5FF22189B85782E
E6195EF6ED3B6830AAF55514AF1C63E8BE31F1F410B1B4BFC44C3E7405DA63B0
5F451A01A993B6641CE1F15CB85317CFD5AA48A8F8DD351882D808976A265030
337A8DC576F4A165DF6415A5893135ADB098022E7B84D9CE71BFFCE11A66AA20
BCE3049F990744F6BF1261BF5F17C6202574CBBF7165183946BF0855A675432D
0D3BA6137B672141302E0C9A9A82F0FA379DFE60338A73083C4108D9470B9A6A
2D88BEBCC30B850EDB381163192BB5742C3A1EE933CD7D3D2C7AC2D5BDDB2548
C6300FF4A5362BAAB8F50D5EAA8BFE9F953BF0CF63093E310562A68D662F0F8A
E1482310DCA6672C452F9D35CB11D347779A5523F607B504C7A0DF01F728F1A6
85854A512F7B0BB9F40C0A431D263F22D091D0F560ABF27CC28850C4CC8AC536
7B366EBC90C9E374558153AC833F4251F04D159DA667468781C34EBE11B77F7D
00AD989DF67305D3A25280EEB707DD2DF0792DC67F835A307680724ED3CA9815
2A36BF36D2F51784D216CF9950858BA54CA7CC4A17F54D043B5881BEAD0F3FA3
DDE2C62A9EAA7B5CAC4A2E427257D7C2AE685F7131B04C23ABCA88D3E224CC0D
4C47CDFD603270F3CE1806150C2BFFC46A5F71375D722DF6ADBEA3E9F50D35EC
6D1D463D49582982FDE4EBA45699E4BB7660CC8A938AEE2340AA12BB786CDD7F
AF7FDE25222EB7D1B85B203D71DC802866F884E753A2A0FEA464ED04E8C7CF76
43E89D5BE373C48E9327862E9C661AB681AEAA9A670586F9ADED6DE71B653E1B
5F49E9CCC94270E49529011A9EC366AD4A745A6BCBE22DA1E5D4695BD0ED514D
CEC1C0B3C7D589B1CA0D10DA32EA97C42CC132FE55FBECA07BE6F152F1DDAB70
0B6CC69B9A1B63AC5634E056C0F79EEE9D91071D0413F4FCAEE18AF239FA9A43
37A44F0D79447E9C5ED2573FD9DE75A1E4D7B0CF43B5B28255712F2E5C5D0F68
D1B18A4445F192668A0F4AB8C27EF1DED74EE602FA579323C5E59E09A4F10ABA
DCAB7204AE358E7DDFC645A619BC423F77E4C7DB510BDC32FCE3B34EB4DFC3D2
A1790D49EB6412C2618C640AA60E3E1C4057B07496F619A02E659CA508BFB769
7284F9D5F89E5798997FCB661211C72C553CFB252C7EFE330EEF63D68123F899
F1164FAB22A392B1E463EE135D9D9C902B17B51AAC0CB2528AECE9DED5CD7296
08CE8AAF3A48C72C78E9693F6829E3381EDCA87B9DD51F01AFAC344014375F62
BFD0CFBB4C097DE0CF3BF39C25138064E46C5E5A503C8F0D77EBB70150A2C54C
D77EE5F902FFDF896FB2B71F3F05B60DD151712ECD1C0A710040E77E88BCA0EE
694D1BC7F57292ABA161F72C87504E36306E6B4631CCE454AC5F434DFBD7B601
80DAE6860EBDF62FE4F7FE74ACA3475F26B881B3477407C51F4EF185AEFAAE39
BC6BB6BEFF9DECE02DF429857C99EDB3FADC61CDBE7134A84685C012D596CC56
7D03D641C190D9CF2039A003B0D1B9D4A5E9539858CCAF28AD7F03CA78B37667
40C47DFC68C7D18DF5EBBD067E65874AF23CDB0DD546C3D2F3FC1DA14062CF64
4CAEDBE0A0DB2CC5E8A65FBE05F8891932ACA1B50E852E5FD47142F762E107F6
91AF9E945ABFF26CDEA98112C2C8B5CFEBA48FA8766D132335B2A4940D4037B8
1258E54FA714BCEB9D1A3A2268162C687171D0935CE72073D73878ABF61030B5
A9733F6B21D48B4E59D982BF9E06969E6BC5E6D5DB6A310F723F5519F243C73C
44EC877FCA7389A25DC6E9007C357491BFBA0CAB5053A1A14064448BD3E8742F
6F04C3DBD06FA0669CF7775414D07B3F5927ACFA908B12495A477C1D326469AF
678848D0EA70E5E9B6E0D538FE9400C351D86CDB7C52B72879152C794199C3CD
0439A7BC2AA2A2C038FAF787628427381FD3DFAB68A367D1FC762962B0D5A0A7
6151A94704E28798B4BB88F6735E7BE7B26A2E25877E5EE22DF07A30F745BBD5
3201C75DFB142D13285E87CC401FB86062722874CE85E3AA78FC49D68F7F48CA
C29A9681715FA7A75C14B685E2004635A717A7911245A671875350CC81F20A83
DD496C36C24947A1EED27A40109D38DDA5BEF5075B4D37B7850C4B8FD2D3A67F
359E0963E59880303D59BE1D3FDB4BC86873D179D88A0A94D2B63DF18953A8C7
1289CEDA0A84C9DFC6A98895446D46E90D8C93231CCFF8B18526D4B876AD9E08
87E13D0D965AAD25730449352FCC07D4BC5A15613AE032CCE548FAB0C8D1C07B
A89A215C8FC1470D926D6E7D4C105DB43791E82077A55DF592632A3E6730387C
5E7CC9F09E0010533BC14E56C291413C501E0AB5C62A9DF4B29195EA4378CE94
2D14E1E9AC03B9A0085CB9CC1F693ABF03C400DE4379F746778AADA0979B620F
84259EED33AAB9D7B7BAE9CE7EDB09A1387E31A3179211295573B72AC403274C
694E5D0DA0864719499BF534828BD05FA84F2458380F0F83803B5353FBC52704
28C8F57AA1F8DA68D133F004338F3589A99DF60BCF37D594B9283EADA5947913
8F0A4EC6C6AE763CA422D6755320D01602B364C07010B5F178CB8C6F6AECF2B1
D346F644A8126EADC4813F842A5F5EAE1946E75E8AEC58A269D0B4B7D9F78D92
C884BC76BC592152756DB6D6B122B9875063C2DAD8F9A550781DF65AB43D7D05
C5E39FC4876E46195F82494D322DE3779FE9F8714B518561B17A9860DA936CC6
1223A77214FFCF55BA91FBED2B28C6D74015EE6CB698E393EE5B7F4D5357992F
6D8C8B9FDA94874E501104AD024DB575F3504749F70DB717EB72DD4F6B4CB9EB
614E23F7D32B7AAA7361EC25C282B6A0A49B5EDFA8FF2CD410CA5374D1C2D78F
E64DB80B78261A2AA913F4FC32095D22E0E2E8717F0CE7E9B0693C6CF02B469C
E9F2C4C82CE70C176517FE9668030CD7EA9F222E44FE2E6A8B1E5252A9D4BC7A
7CF1A9AE29408762EC9F22D923CA574511A78FD505E6CB052BFF9D02D00F4561
2764D8E27354230BD298EB33D9DD15F881DCD822178A446D8CEC5AC289BB9BEE
6488E3781B1FEC0FA77A4F9D4A077B51B5A149D85E5803C606BECCC8E16ECDAC
540523109C2D67621B6EF21D2DBDE76CEAF0B699C3032C28D3CC3A9DFB4194DD
4AB3AC91A12073495CA295BE6933B1441A825338B3E019174B8F1F6C9F49A088
1C778C74EF4E266DE64CD9FFE20059D241C6709E4871DCDE8EC3694BFBA8862A
330B515EB96D8CB78AD3E99033081FEE7F85E61AEB6C09620FC5F2BBCF76FAE1
ABFBCD46925290932DDE0D4AA0E3CC3C51F181D90992785B8D77F24BF59E3D1A
0EA3A059F6075A69EAD7D2EE94F53C3380BC1F17536E1902E82B66A4511E9E63
F2D7A853486251992EDA8A76508FBD4DC9F1318E794ED89C47409E478B59FA5C
3ED9C725B93755E8315784661CDD3CFC4D87F864F3D952C3C7D1A53A98C95127
837879FBC5344878436F05BE2C5BEF0839BF87DD18912FD7D3646552A788EE6E
DCEEA21BEBDB854D0657819F4A6D5799A8B95D1CAF5760DF13030605F7BED34B
F377544C4FE0D9E2CB94C90D217AF778A53161CB156A7F8DCCE5CB3C0197B92B
1E413DDEC857FD28ED582E646B346E4D93FE54694EEB77F329BC4A761605889F
AF87884BB606362C9871E1A4D4F3A0DD97C43EAC87B96A7173DAA892D93832BF
7DAA190CF4FCFB72DD0DCFC91E50358753C897AC2A47FB4AC5E9B50E73D9AE90
3E6613562221FA90085DDE5D7DA6EFF4CB716748BF93CCC7C6A83E5EA7CC8E1E
C71AD88E87889F47C668325DD037F853AC9428E88173DBEA327228CF763A6954
B432891B8F2DD3428DD96AB93E3A62FF73647DD1FC0623F8517213544E8CA05E
5E6111ED239F4E4499CED87A0501A4A39A2EFB470DFCA7C766EF8114F3027275
2554A64A69B0857BFC16F30531FFC2D3463B820335ED408C1F2374FEDCA87687
CC113B93086450749F59CC549FA14AC44E77FA872027C1041723FC113A457DB1
B4C0B5DDF3DD248B8BC462230A005D972B219739022860C06E72D4F82D7D8BED
7A557276FF2374E36EA9667E9C4D83910926C7B1AF5D9210483ED3DF45731C69
CC6EC9CD8DD59FD1C7F22A266FE7BCD92563CBCA6C2C6B50905C92286EC71D79
EB1292E6BD02BB5C388195E8035A55BA3C769132EE95EF6A8A8FE7596CF501FC
00C265873C923DA723401541055834F51807453C7253F0DA055DBF8A0A732BBA
A284751FBB466964587B2F57EB8D5467C1ED2932DDD7D974F59A929CEE826F64
08B56A3E970F0BA4F7A4C566C61F054D8C429F0A7AEC6F42E3C7976EDA674C57
434FCEE9AA048B59AD93EE9AAA8BE98438C6183E0B94ED8252991A78663B92C2
D4B4ED1204D2B50EB843420ADC081057601DAAD9BDC21AA65005CCD1220CBB38
6098BA3ED1AA95C72B7D9B52E1643116E662CAC5F8B14B952493BEDC9B67EA93
48596347A81D5448A78AE0722AE99AE00B384F2E8D9F9ACDC867171F0BF2934D
7D66CF8B3099B051B7D6BAF4F76C41856986C1341AB0F1FC68DCCF67E1AB4EE2
8F46D77A2E3C5970FF60F5A8EA6428A753A30883AD0E478802D0CC5BB2D00665
5BBA3AF2BF9C0EA3CCB2B7DC11D6579DA37AB425A5E3124AF58E8D7BD54BE090
8444365AF1CDBAD2238164B0F1D3366F83D997A4F7DC268533FF505FCF55D409
355C829CF9D4AC5B27073C16AA8B80A61DF255239C0BD691BC7D052022E889CB
DB888C84AC7DA666954D63F5634D4D446F83297FAA9A51C82D6FEEB1F8D584F4
345DFABAC4C2122EA43F24F738F371A77BB00E9A42DF896CEFEE3439663090AC
624D90ABE51EBC2D7D69260FA5632C0FFEF90A864DFC8050FA52A4328ECC575F
3DE18E174F6D518807D02D3EA7E77D79E47029E40C4B5B596817F2378876BF4D
2C305337055B9FCF4542133E0F21105715814EFCCE88F9BDB696284A5BD9C7B8
019222FE508BA4BAFE39A5A2B5ECB118586FB381AA8928962F64F44664D1AC53
7D31DA7E3F61477095D537A796741EFB75E1F6A834A508614C4541CE81A539F8
903A760C8780542A78C7156878591C85D37B4526321909E34176F3E042860C6A
FF44BB54E99F6CAD5255E12F68DF8FB77A6480E97748EC9E09B9CD239F61DB4F
FDD73F1821C85C6847C4C503F5AD6807F29A6109796D1854C1EB1A0510505B5B
72BF158E72300A2CA19B8BD40D61E46A153C3C25D0C7DC1256F76599ED41F71E
CFE3BF1A71DFECA66E04F30CC7FF04822E9AE3FFFBB92A8ECB72DF7B32D9007D
52EDC516EB48845ED9EC42BA3DC260B1E0CBECC7898D6AC135BFA75A9EF43251
1E003BD366409F00A683B123A0576FF34E102563C5798C446D447342C7736BA5
6BBA80EA8BB281F750744608EE366E30C5CB623702C787D6FC4EA8E472DF545D
24A3DF3E216F728D89D06EA5960EEAFFA4BC41DDB56D3D5FB07B3C626523F230
0BE6193B8B8B70BFADD6913C261A9054DC56953E9A8C9C7D8E3B9949E46F7FAC
4CA92840DBD9A852FCD1D06764E93EC2A6373F36A725F5D7D3DB29675C6C0221
4E81FFC726E6F7382AF4433EC880CEA71A4BA7830362372A0202BF126C35FB52
3B345EC97AB5684F3269A8FDEFB9466A4066E81C54781C05A71B623B6F8091FB
9D94210F34C1056BF638CF863B0B463D06B0D39916C2BFA9548D54E24C86F131
44CC616FA04BAF43DA1C74EFA205D43BF3207E2C3063E6500BE5FA0703E25105
A09E79B0AA18A1C345F153C67290B290324EB8365B1A4507D9F708B799C5966E
0BACFF824A275DDB6A89D89F5081F1FE0DCA40F04BB802417BBEF56E3EFDC21C
AA28C35982D81CE2A83171CF2BD29C23074544C9F4CE9F86205CB05F370A1F20
1B5741C02CA87E5862A9B1F1A1E4230C4A0A0099D280AFB05C2ED4A5F7BD5CAF
A9135CC1969E474F2C2E0CC3933A1F5C39BFC5CCB48C3928DF8EC5EEE1780A78
C587F31B62E3BE1991CA0BE1D908E4C512E1AAE11085D68EB9A7078FE42912D6
658BF3ACCF715E63468D6F77BF18AC181025AF9377005A6B6FCFBFF04C73D9D5
5F145963B6D0C6B27F94965C62BDDA15586DAB0F3D90947C94C9D4473D5A9C49
0EB3B6FEC5A91F1F266609281D84C24AFF9C656CE8765F7A44066BD4350EEB84
71691D2638935F2489E87EBB5D3F92FC7CB45520B129C5612B04ADA368E75CCC
7A54048E3F48D4314FD9EFABBB7D77A8828768D6F4822CF05153D3E5A4A71219
C38592C86237B17D6A6026A1F39941061598C84237011B4DCC72AC6BF31E280A
AD4A686AD314AE577FE9448CCCC17BFFEBB66F78E2C6F07B071AB9186B9BBF59
48C2C694137ADB9AFD39033A42F990426339FD6A95C3F46780518D34CBE784BF
7D6FA959014F0E9A6E8758CBD9F6CBE68F5CC53D80BF9FEF50C6C974CFC51ADB
D60B4CC365B29EA2F459498BB8DD44A5DD3F3FF43551384B8E746F870E68F4EA
8F994E54FB3169DA2D3A10A636DE6B8427381FD3DFAB68A367D1FC7629642E70
3FACFED58772BDD4978BC0A27D0FD32FCA51B070DAFC00C67B49D501CAA5B861
344413F1F255717EFDE079EDD6F3AFA7705CC40EF32CAB3866965D9BB5DA96D0
7E2CDDC0C6A9B7E683199CAD092D5611A19657FC7C982519BC3A09A9D795F030
7C776C25071D0B0354CD853222F53920BE2B47FA5F9B2204FA846CCB1904421D
A3242DF909297315D82F74BF79F47CFCCFDA431712371A143FFDC83A9D7A88A1
4159B3A436BDE5E19967A80B304325E3CF06E9B2468083435CEC83A6F629B801
453ED2F28B1B9EDBF53AF1626D75983A6C3B383A6FB3025DA828E12158E4A9C2
44845DAE8BEF77E829EB5FF3C2A88A4117E0DC93A95C4D46B4105E30246C55F3
4047D3E05B101DDC75509F64E99855336EA75E82BA9E34D4C3B896C593F85AEA
9FA0EACA669BDCD4F0E2AA3438FAC6FC62FFF85796B81569886EB1C9C20C6CE3
5264953AA806F512E976E351613F23E810E145B329EBD2EE9D8723A6E28DF047
68CC0AD74EFF6DA4523F8298CE381D567C22A1B58098554491340EEC6BEB2AB1
AB21AC051340F5C24A518AA4D57F35D454521E715BE967990071BCCD21A8206C
5C40608203A5C662F178E9F0671D80ADFE316D582C7A94DFE656954A7E9E5ABB
1154009E0C18A6CDDA3DDFDDD88F70564DCD8D03F8905BAA1B6C6A386B924491
D64E03185A78C61F7393E000AA41F04375839EF5540A30BECCA0318EECFED17F
D37779E82F47ECCAE0749E97B0D9E4573F7B6BE316D8AF143BD93111D717FEA0
C56A0C86CB2804718E1124A0C6E82A0FFA58FD013D9EAD2D88B01654F4C983F8
1A3F877C027FFB0F440498A023876736CEC917E68548A8CED2095BFA7DF83AA8
9AF9949188A90AB9C87E6AEA45F9C3D2D7DD49A5121D995CFC630B9E1360A784
AF0AFBC5982F003CFFF22CB3EE03841E657F3716353FC1A8564DBF7145BC5F59
B4395881CCB81211038A6D38763047D0180064377806909AE2A524884E52445A
E7F45857949472A9005CBB14F32F1C3D39BA8D1243BF046098D499D17920056C
56795EDCE10321CFA3B1CFA4BA5DCE1627CB5B3D175E88ADD1EDDFE83055D809
6D73F650F14CFEF80336C985DD66CD26DD6475231521FB620C2C1C392677CB07
502BD623E63F673C4922CC21BD97066F37B3B40C4C9DF8D4DB0AEBF35A2AE606
51A930E97F6E2FF49AAB53CEACC4610098E8E203760F07F84BC5DD2F2CD98801
4662E46950E002DD1EF770BA4778296D06C85FF4ECB3E8711A7D96A669411066
9CADA14CC5D48364F8273880ED40DACA3BC49CAA5BAFE5F553D5507EF1B5711C
32E17928D26633B242128B907F82CA9CA946E84E8396F18FB4D1C9F2D3A6D13B
C6B93AE8DD633ECD288DD69057F351AAB2D25E6D9A09EB37455E03454CF93DC2
E85BFD19567EA7C79A95C907872F5603C27A5F76D534722FF10FCB40EDB69502
8A8E84998F5E1689C4D585728A94E426B23B8103DAD5CAE80C6547ED846947C7
CB0D5BF28CFC6DCC07D024B7569AB27C1A79399593D71AEEEEABC20A0709B11F
311CE63E0D94A75D85AE1BEA97194A2B62D7F5A3AF54BCCC1ED05DDAB14D19C0
7C64F7E34AECAB27A1A571B1D127B4AE78A4E9D77BC70743C30BF59EDA5E6206
FB74DD581040F921CCAF47EA535BEBEEDC09E5F9CE40F7F845B1EBDC5B1136FA
BC9898C5721FA9A64D8959043EA55562933CBC859DEB55EF822F5380F0E5CFF5
154FD2BB8D15422F5AF9372D3AD61B2D6CB66CD6BF4C733FA0CF3832B8A12016
A5AF5A64DEE8D4BA6042FA195ECE203D69FD06AAF8C72659580928F44039EC6C
77923C16E69883362F840A947FB0D690D6005BFEAFCECEDDA1F3DB1A0C2DFFAA
11B149ED60FFD0C08B8C765679FF0FFA221A10977BBF4ABBEE79E19BFA83DA58
B7E0B86AE371F88916F7CE9C3787474FA99D22AD65B7BF32BD714A8F491E2808
B6A9369B642D5FB4378B048A811626E0C0CBF9A367930A8015C023B5538245F2
C015FCF5F235343A90F7EC9BDEC0E8B841FB5BF2DF389AF363A8D67761C0F2A1
DD706C88E65030E021D4DEFD6F871F7EF9D23EC242624851D8A184C40A73B179
2DA8AA5429637130FA6B1435B35CFFE1EADBC6A675A7CE095341582702DCE4EF
EF3A673DDC442F02A39B1C2274D5C4E09D5EF58E253DC0F8D3DDAF5AF7F4AAD4
51781E12C156A0C13989BD4CEDB7186444F1649D8A4E15591C09734249B37BEC
07959F1920EB0B6ADF80F97B2DEBBFDD58DA9D4689E5D207751DE0B86F7251D8
0BE818D61E6740F1523F30B48365C2A8588440F9DF56D327DA01637CEEE0B707
F36EFC28E1B3A46318DB4A058B98CB92367AFCC84723B22E05955082E1FB3C5D
A2997D960DBCE77385E78500879B375DFE6258B3610AC8145BFAEF69CF8C1849
94DEF49D77D9F3C98E953BFCCF3D7166BB4BEFF24F60924D537A4B2E5568C871
A39B3C32BDF8A354C9CEC1281F96770C9A13B0C2720DEBB9432F01A550980BF0
1404E87440A3E6197D5DFE27452051462E2F3A2E1728C6C32537B33DCE4EBE81
5CDEA4631EE275B83B62D4195BD05545B04A521EF4AD03B558F4AC437E82947F
58A30DC4C3823185A18F10F21A04C3CE364DD00222E3135715814EFCCE88F9BD
B696284A5BDFFB2108B29B09222E86FF1D890EE2689F27AC0DBB5659EB4FC9BE
78A90A8BC6988EC021106493CAA0667D6EA67095F7E64231E9D8A5F942BA9513
5C08ED14956234C19F7580C2B003661EF1F2729556E93802297CF25F0ACE1D65
44668A511FEE990DA3A112221FD4161E90B8C7D900193CED0B6E1698F966B4F1
C15961D374DE25A7B0EDE87EF9DE8BF75DC41C003B05ED038B66C6CE38A97957
AFB653B04F2614CD81E64F1C330C0EA23FFB44437311BC55643D5AB23257F948
4534F38C37D19152F9B99F98DD697B9DD91E41C8DFF89925CFC5D85A28B616B9
EDA1ADCC3616A5D11228209CEE30FA83953E0F95D11C201018FE91AFD0B44644
1E0D4C268B79B86A81A3041A6EA24E085EFD18962E446D65DF0F65EF55031CD3
8EFC48EBD2582C723C32D368C2080CA8069C6B0CDE19AC94E0BDF9F7704DCAA7
8FDB914A7DF0884F7E2BF3CAC51DBB388102E674C972E3A3DDEAA67148875B3F
A6DB4D7266AA1D574E595671D73A3499EBDC256E313A5A19233DAE151C63CF7E
54B43BD28AAC792C2E450B9BF1EE715F65BC146CF13E9FC00E316AD709E0CF9E
BBA3AC28F42EE409EBE71CA5DE4E232A37F459D0EF18D8272A518D7380386793
5EF9F82706631264A3631413D94E02A669BC69A711612F51064C1375A60F63CB
797D3F2267A66FC82706705826819B52AAAD0F72ECE9DC7CD4DE6CEA6D5E8BD5
EC5A3633B36E531A430598881E5E00F9762A049FB15DC548DD9B6C71BE4FC366
2B61C59F2CAF8ECF54E132FB78F6843DA0B2594EE9642FDF96DEA84CAA9A6FE0
F9EE7E854D53B85936B31C808693E66B33D3D4FC762880B589A038A5102ECCDB
8736CDCEC853DD25DE15C6F86294CF38E4AA678BA8A08F81174FFF1FA12D73E7
AA25EB57451DACFEE99AFB89850C6243CBBAD33F74A53E3F70FB08ACC8E0D151
442175A1B1EF865445EDBA2C9F4E71A972E63B498CD052FC87931B81EA6500C2
268DD643900B9DE5B6FD103D2DE1F3B7875616349EC7A6B72D81C1624D48749B
7F8796D2855C1D366F07CFF3950EE828851B409827688B0DC75E790B8C3BF5FA
A2C6D758DB6B0F7DF64C81DA33E9A68B9B834875D96749FD58506FFBC9507DDD
77014C2924CB223E405F48F339DE67B23AA4C8B47CA0DE5E713A988B0833D77D
22C6A4E93F0E0210F030C09354A99608ABBEC8F6ABDCB403F0E9B9F002E0E963
A85D37889376D26BE35ECEFC05C265F81067183ABF373060EEE77393A53270FD
8E621120116AB4C81C19328CD271B372032A0A3229790B7831A2EE223AA7588C
68111E3120000834F31E53D51A3D12A141F41BF0471E32989755B7D83FF58464
7B807D752C9F0598CE0B324996DD0DBA1D8074DC6D874CB2247B8358B43FB427
0DB6395806EBC72923899A0FB79F8113DF87DE9D4BAD3A8729BE2E79F4AC51BA
4EFA0965A11DE5D53C5A66EFC05539C901B03E68FCB40F57F3C85743260BDD24
1E10AD256DEED77B14571B11FB879018812A646471E9F0C1819320B766793F24
9827D7B0C791FB75399AEC03FDDCE6A420A6556B0473D8CE242D56D62EEF6079
504A5809102BA714C1D454282A55B106FCA0EA4DA15F0FE86B4060A052979EE7
9B616B0E85A05CB8C603B43394DF2A4E2C4B1EE23DDFE63DA3C7C8710FD5B93F
2775696BD36C6DE515EFCB9F1EE295C55CB1C2F4E43E67F00029F54AC2D89675
1FC8A196672FAF4F23F9D40B1956EF5BE0EA84B15E6A8F1FD76BC306585A1225
8CF5584E8048A95BDB54CDEC59A4699BD9568E2E9A1BF9D2E5842CDDBF74140C
3E06CF36C34709E5223CEEA0A86C9C89D9BD6F7434E9462CA6CE1CC41034FF9D
DD7C0B479B82352E0497AF024C1D02D39B4380965AE8EA3789FB48CC5E29C2A8
6767D2874B817EB8E064F4DFDEF28601CA4F43E13DB57C81054245EB54984558
81367B21D4B71CF5A14A3269EC5DB4A9580916DE799F5F09D3C6656B3F87A0CE
1D458591A88B2F51962CBD6085B3E530D4DEB4429D777D6C653BF3C326945F5E
C60809A9F78E45BE3409822E5A52593C997CF959E00469F192A288CEA5E41229
3FA1D62FCBA2BF778FE68559CDDADD31F2F3BE22AD097C23E3D43BC2A5698E1C
EB0B5AE3BF68F02A192428D4C5BDF2944DF4D3FA880DC7C73D37186DF6A9B62A
73482C427DC7C43DFEA873FA4F3241FE1CB13D5E4D777BA1B20B2DC5E7492FC4
475FA531D5F9AD0026521621F41AA3D7E7FF53A0F7161618E2AAB51A9609808E
57CB966FB9721A3FCCBF9B37AD7801A32386E6AA48764C909B0F3E3DBD53B7CA
9E411AD23929B0BE66C44F3F80627CDFFCF8CE1B870927191490DA5181474BCF
AF08E92C9966C19F581EC026DA1E7C55340CCAA2C29EECB5A9AF76FE1B769B87
37C7F50A6787EDDB73669DD6039FE44C7A035FD97C16DA743F7E26BB7BA94965
74DDBDE48F2840FDA10178E44CDC08B36FE5FE6655DFB53011C2D95C3D384864
AF4B530AFD8A10A4479EB1B7ABF80D8F869340B27ED5A068F6A42402BA3967B1
0B0CCD4C5E6631A06E36F445CBD959E396C85116AD2917EBBA9FF678F3E43F4B
AD30363C396D95993B850D16B50260C9C30CFA7DD1FF2737F1D3E5D466E8226C
7EC9B0B2C42BBE5DAC75C41889A7105C0D9DA0422B3C323AFC75F0E514166139
84A2C4DF565F70BFFB8311B01ED6871B8522B7E67A25B2CF0F8748370AFC4FCA
791350BAE805F3499A0E63F4D9C388E4A864AC9AFDC0AF5FF81AE00D6E6C276C
775DAEA6F594E6B091FDC72862F98823E348C2416FBA3F5D07B10ED47D8BC757
705EC1D9682EB14264FB488AF7C5087563E054817CD2D5845BEE7A690DAAE1C8
0ADCDE2D28414B71D626BBD5A0CC58E599F5422BAD83C62B6A88BD186E5AB380
3CE32E51EC4DBB64BF440ABF0803D53F4DC632CF1CDA60BEA3D4E10D331ABE30
8DD1D17BC1BD3FC40EB7229605912F59749AAC9EE1D540B4402277A83331201B
AEE10CB788CD74EA72279194A4FCC106D640693701C4FD583C8CD5840B169FF2
6E442B113385123FBD0EAF3788648BF5BEBC551BD6B17FF0E88C7F528859DE04
DA7417C94E261489D18806C15321387A388E68FFBD027B81248E7B2F40234C6B
C28D01A91B6E7757180CDE35C1C2D5B7F7EBE4C9A81AC6ABA40773EECE5FEEC5
400C687E2003D74A23F300C66F259F69A60D949549315DD15877886D253D759F
30E37534743210743F02A130634E70D438E2B5220360DDCFA34384A5D2F6D633
6534F49E4FB3BA34DD2E646B60E780EFFE49485038FF95FB8515B2935E77F83F
F9D12D9D37137311D23479A3581C9A980A0C82AA88CC9139B4943E3FD64FB216
4EC709DCC9B4B09A6995CB7015A19980A8E6DF27ABED7158F2F1BDCB9AB9A407
87C6339647F631DE208615D577871CC667445CE0472E8066B36AD6C9F9229FCB
F7E3025AAC04905CFB5CF07EC1426ADACA3982045B5F62B55B98937CB108CB3B
E19DD38D460BBEFC59A82B9AD41A17D04F0B91E76C71786366E62FCE43489AA7
B679DBABC7B488C8543B0D9D238DE29D0145D69D007DAD4F16DB8FBB2072C9C2
FB1B1CE70134B5060A112BC4E9B6307028009BDC6E13E0A69094392620048680
F6B72A2F1AC1DBD29E0C12E680AC09E96BDBAE63B6EF0F36F698BD630E7C47D6
27F49D1C2F0FFAB33B01181E4291857EC077BB6E64C24E8B2C66241489D18806
C15321387A388E68FFBD009E86F16E00DC0454841956E4938C6DF8A81DB5F93D
6D1F58B7CC0CEC0118A77698E4173745E1899670DC72EB5AF530BBACF55114FD
831AA662D47F36BFBAC09CA9962794C022A83DCDF832A5CCB67E898219842965
140389B64B2C49D680F8AC65FE25D9CA933C917FA7EE6FD539C8535C495E6CDA
6F9299BA48F35738BBD9C2B73BBA20C72A9553B6C6FB49DAF4913E9C608A8317
85480847BCF17CA512A8AF0B7CD120CE0FA2FCB4923FF39CBA5B4156D8DB312A
C8AA4208BDAA3A241789F4BFD3CE966F93ECB9D742027BBF737546E24AE249AB
4C865B2AF89C0B31AACBC857592EDCF0D2AC772C1BA775A40817DDC66C9BE91A
9EAF866C3EFEBAACF27D4C56B2A41CB83147D06B580C3A67A90DCE5A82087F4E
69B7BCAFCC13B34B86F0669792189AA35753AA44C58100851CC85FB60E7DF968
B801465E27FF42A412CD417BCCF201947FA513293C407CB9D6E4CAABF844D2DD
5A87A7CCAD1EE54F8669DF366D3E164137DAAFD26C70760A96A3116812A14B21
C2A3FC572A939790B6FFB65BFBA2453F9DC9A01A397596E2381CDB6388F15CC4
8DFF74875D80D9691027D825A35B712E0861FF3869CC1DEC25FF0F565E56B1C9
2DC39AF0CC1B3D61D95D83750A4B70F20DE86D4B7FCEDB081808AB8A493F1792
3521CF1C39BE0F545435FE0BCFC55B3C9D56A57E96CA67691F8A0335F31F3939
94D3E3966C8CDA3FD999D4E170B78093F1586A76B47201AE534FA1039BA22A2D
2F31B0B75F8C6348AE5E701A0CF7D2AC62176D954F261AB5EAC44985F2B8E409
E73E4618A74B78419E955F4BEA245DF58F1E998F6B1BE325075D5C4B4D9AC223
B4AA42ED70CBBDB25B84EF56B9B4251460F072235E955B9F4ABD8628321493E8
4927F7CFF7EBC4A80DA2D1DC2D2E96E1CACAE3C922AA636F3954FB1AD748CFAF
54A7303A09B79E1F1932E328C03A1B36011AD17150D9DDFC74A5119C22F6CA9A
30105D2AB931D1BEDFF8AD90A00AFE3BDDD6EF014CD23A9857A7055B3CCFD009
A39C5DB4E4B6E0601C7C9192184562EBB0CCADFD5D029F6EE7B2B8526C7811B7
A83DA6754B94AF98FA27E9A59BE3A6C7AB8C3D5256F99F539DFCC8F48B5F2327
FA27B0E3F70A0F3598CB191084019D6563849F7F5ABC08FD5599DC53BAD6B4E4
C137B6CD00389398C23FE50CEA0EE57EEF28DADEA0A2942FB177AAE57C0D5665
B86FAC61030402D5A81D91A826F15CCAB2283A4545F149B1A0C077C4160BC025
4AA0548D4E93583E83EBCE09C5F74C458E671C6792B034BFE4925886554A8018
9B909DDFFBFE4A96F1F836DC23DAC07CEA9151BB3A89B4FDB05BDC8BA3B16C09
168F1E372A89695E72235EF555E3762DA45902274124FAB7160E15C7403D5400
2FDDEEED609165F636393BD95BD73C692267E19016053FCBB22AC8F22E350BA7
5870C64F62644BB102A7B16CCA35D3B4BE9636F89A3BFBB16A5645560883B5A3
B6B11DE5773AE5AF9A06AA792DD7293D1D3C7B0D2ED774FF080795B23B4E2DB9
9DAE981DE43ACA2E51B9B33866AB214C10818B35E2ACD622CEEBD235DAAEE75F
7CB4982A8304C83207070D98DA81698D5B45CE0008CDB87BBCBBC1DC9B1A82A5
2BB1AA4C389131FB17A2BD7F04CEEC32B78372E74A8C3085D65857A285B091EE
0534588D0E32EFC30419CA94A24089B4F6F95DD7C5940AC43AA37C26F368BCC5
9222F7B3A97AF495A7F2B527240A3BF51F3FF9B72ECFEB8047907EE46804F69E
3C31C1FF0C7C204212EF567A0490163FDB3DD89008385759C978FCA80A786854
9A64ED2CBD1B1B450B5BB2B16BBCB0714F91A9DC1CDEFD3BA07154D1F65C5981
4CBCD9272A5654316F01749580078271E4AE65007DAFCD7C871BC80E630AAE94
119750DD97A3577F89331CC55DB78F779C07EA23F8F3B53469585A683D1BF0E0
7FD71F593A04445480204C51273A2243EB9E2B58B9201807CB287B9B6110958F
8AE79CC20CCF19272BA104711EEF8708DB4091F5CF994DEAF0039BFD962B3C0C
732D54356D07AB78A6EE9E11B1C87BFD898670D940E38742A92AB81B01B9092C
8DC53490864DDC9A3B24E4E4CD547C9540420A91749AFAFFB185D5177C13CD3F
C2D54EFA893D48EBE1DFC39A277186B4536CB77E73602F55EE3D3ECFFA56DB16
21DCD543F52EA2C8DEC9A46BDE038E272914A6E9E2AC5CEF9F939A79327515A3
1DD77976265F613554ECBFF3A058CF327A7A4D88441297B981B5CD5FAACB5821
8CFA0192AE3BBA0B49EE279E7BBA235CE8DF21D4438F8F467D17348728927339
58AC9CFD389C5D516518398B98EF97F1E7B59703CCC558075404D13E49920C8B
EC099EDE4DCE4030B697E79922AEB32958BE1E8A677A7DCEFD80233D6B9BECE2
64D19009D10788A7AADDBDCFB559A3228C582BC4ACD9224F0ADF955FDE1B54F2
7E41E1FE35FDFE0770F1CBC596B8D5CFB8948C94F867FA620D00411E591DB3F6
4930049606F6E6DAD81E3B829D10037D4F250022AC169CFCCAF7B4E9DAD17FE3
3D6254A09349DF9D70DB7987C808BF08FEA787E3865E639AF21CB3E47DCB4E86
757060CF7EE1DC4DE736760F5CF3B47F7BA589A58E1F7DADF05F7019285A4349
F7CC8A12B57CEB986AA1C9FA2BA8C45C94919234359AD9416D67F68ECAB1355C
50F246011AB1DC9ED26FD0F1E4E4E31CA5239A449B6B060BA06BFB17FFFE25DF
4FADC7E1A2C37534ADE0DCDCE6AD1454DFF1C8B4AAE9F22396E6B95A1698FA15
4975C15A9386F0E3B1814CB27138B926635F6E7845B1B28D923E4C1628DAC087
5DAB05D7CB2A1E10C8A197CED9A180E2035E5D03B4798CF3A66A20FF26D2C156
C2755A08FA58A8917CA80C31C2E768A4FC6A36A451D0FD937886D7ED3F22DB92
088B5D6A6385747AE505FC9C5EC7467FCB039418845780ED20697C67C54DC089
7106DD631F6D650BCD6278AE4F45B4060DBABB4E5006349233EDE98FA51EEF53
2681031683761268FFAA3FF8A637E2DA191CC184FA02FD7D73610AA31BDE0EFF
A823A8EB8466413582E5DBCC686AD466BEBF2DFEBC813AF8E349888884BECF69
1191D88E336682FDE5B7A92A72DC9A379962BE6C8DE6366CE387A01273C71907
C59CFEE3C5642BD3B55A4218F156B80B091A806C68007CD2B124386835BAC144
1F2396FEE1CB05A36BD05CDC236656E7B7FBA305BD8D2C6FF35AD0FD32735F78
38C98060E4D9BD6BFA8A80D3843CE08C8FD14D52B22037060D77D0347FBCBCA6
564FE7B35105CFF16DCC8B88C78700CBB47D6ADB79D5639E1A751300AB9F95C6
BEABDA4AE41B665A2F7C931826A17BE14BEC32034C44024D87A445DDB654DD3B
83A831B2F2D8814677F046710E0E051ACBDE41773B033815C699B778AC96D967
F64D7E479288A7D2747C4551F5907B66ED0334DEA8F545BC0573225EEA3028E7
69109A3CEE51F00DA5643091D574027B84BD1667C274B85B66759C0D690C59A7
647D79F8509C5B6CDE8F6F89B5AAA8A8B89114540A1F3ED06185C94C8455D111
E0F5AA4EAF9537010DE525BF5DCBB68BC537FC3F1E7D04513F0E678EB012D08B
4F134EB3D953FEF3F84D70A279F715E41D18E51E16EA251C49EBE85303DD54F7
112E2D44B3F8CC8AAFE98B384F6B1F48CEC02F77F2C4AE2F15084F5C57B3A6F7
E3C3741C19C039FEB26A248413954CC28AA28999D6E4A21FBA90BFBBE07EFFE9
F8C7429B47905B91184D0E9B0CC9A0E2044B8FBB0F056412B5FFA260C837D76B
2BAACDBC9A84A934BD0AE37DBC2067EC814CC5575B88EA6E19FCAF5097D67BF3
0E87D523F12491C796E4038B9DAB42E32C9BC5941E09362CC34E1E8D6734E707
6E8D21939325BE9C8F951DE2FA1CB50DF0B0179FF1123A80AFB57470A50E6AB2
6F3CFB3CFE695C779075C33C505CA64CE82103B2AF2E61D4824993C0BEA63E78
B26E677BF9804BD0F19FDA1B876623088B4B8B19C78C1A0A48D97B4B9616E003
69D49D47FD0DAC92EEBB236BCC3446278AB770D7B1754E091F0E4F77D052E4D2
F778F54C835E1D22C34592289E8892B64B224A00DB9F8F9A1FA8B971AF90F58B
3ACE2BCC1011EE5E71D8D8ADAB1CCF6F6E87B938BB29CE3937CC35C3715CFF2A
CA5380ADE4745599F8041F4CC83A330497355B028DC36AAF162BB34333C807DD
C7F0ADA3EA0C04098B8EC04303657821DA8DD739E66C23178AD80CB3B7858FF1
783DC42D7D3A63CDF4835B961DF1C0D7FA6E43AB242F7B60722FE97562B7BAF5
1E4AF0629A2692808EAAD09C9FB700EE88230A116296B888C3C9FCD41E7BA921
D367B0F308A0BA8592BDC410C942D166098545A7D7970E1AB753D26023178AD8
0CB3B7858FF1783DC42D7D39B98B1E0BCD9C642E2FDFB5303979CE2298D74418
F03F2D9F06194229D2F9F2FC8211B2866DE57AA7A11C37C60965C54F38ADC875
63A8F6FDBBAF7DD40307F715DB714DBFA7D0B310503BCC4A4FBC8E5424456609
84603E1E872F836797DDB8450C2484D2F2E15EDEEBB357ABCCC9EAD49833AD1F
C0B96D9E9CC14EAC1987147A55594F1CA1463E1D05649DC650A35B6D9C4CE0E4
69761CEDFC984331B8950D60E0108AA71FC346A142BCFF0D75224F58BD5971D9
3162554D7F593F5F01DE84D93E218ED142B1A2B451142F689632F5AB8111BA12
D6ED54BBA43B13660C7308A5679355542890EE54BAC37AF9D64846C95E27C447
0E3024A309D0EB598A9E5EFD32E68F2E04EEB8C0ECE1688BBCADE6762E190CDE
E6AC380DBCB7C2B6B0B8E51D4C76C8D291C80031EE6CCB9DEF18F9A178576061
231B3A48868E5ED36E933E21F0FB9C5B1040F921CCAF47EA535BEBEEDC09E933
82BEA0A587D1619E1DB68005C7965750BE080654E87AA569458C45E48DAFAA56
9A947435C3486D00A5847693E14B94978647F8FF9403DA9D33AC81EAE0B0AA4C
E5F703CB2DE745D8C964BC672573139F173E270CA900CB1AFB0520A73B3E622C
C4BB97B9209BE1EFB0E12C32182FC67947EE4C5B2F917191C8360CC8DAA8BA59
FF936230894C92B121299EFF96F2E1B0E6477059BBB61BC7EFF81AA34A79CEC1
1CA7D422CB58C8E2125F46288473740C94A6DC104D71240B5162C43048A8050E
065A3505E7CFB3977916ACD6F7B941CD70C1389B735CE10FDD9D151FA106CE48
DF79DEE5663A8E8C8394AB7ADE0483B15069C85C98CA8D537F2D0956C520A7FA
4645A5AF9515E57AE70AC9A1348DC7B8A64AEE828413009BD7E36DAD065A6869
DD702A4AC28011D57280EB679FBC0566E2F25E69367951BCCE1C4576837DEDD0
ED2C921586B433146DC9A135C88DB3618D77B66A18415AC71F3BF6043D308AD8
9E7C5BFEBE1592CEA0938753571EA4ECFA81043CED8B0431DF6EA11EBFD274DD
A3FCAE379FBADD0A8ECC1B3FBE79BDB97D80CF1EF32324EF601DF0E030A838BB
8BF6BC66B370C7BFE81EA4D8B0B8EB8769DF99B45D8AF3A2138E2755392BE818
95323E2ACFE54AC457D222ECC1A449DBA42FE411EBE8A741D28561050EEFC38C
2CA5031ADE35C2E6BBCE3B73DA68CB05A06FB720B88BF5483E74C30C6B87CECB
4603E3A2EE6A02894A286B557000AEEC4E80699AFDAB9839261F94F3172250DC
E3593DD46B778C2D617B049F082D159051412F27E412DF0177A3862D93DB9BE5
8DD240B05FDD2038AEA57D121A331862C85C6EC34F753E03E99D426F6A4E26D4
98EF8B3A97D5FDCC48B96119C72AC2375E52CAB31F85DDF9A0A0EDBDD0F02D7F
CE8672A37BD8FFF0DDFE3F0B55FE5E4D0A0A6587B52BDA2CC4E44D6F1EAC284A
FD4B493044E28E299A27846387E83301CB58B9424C83D0AD28BC5AEE3FE1BA07
54F9E8EEB1966924F1246DB8889B1EA68E9439216F085AB9484989DD86BA437B
955E06F03D1EBEF2C076AB62399A458B194C91D92AE743B4607BC14EDA36C8E2
D52454F7C7425B6901476738B002F698E49234C804FA9043E442A214481C40CB
784A68E3005BC07CB77432733C8DC1EFDA44C2811255FFF3F927B774C765D517
677A7520234104BECC6740C87A1ADA31A35BC1EB01570629C317E60CD87D8D84
FAA3CC1C0778BBBD42893DA20DE38CADA7489AE32DD945DDAE805E654F06F4A9
02B60120714842A8A0CB54194E0F2EABE9F5DFDCA6F8025862FA3D6C18C78144
CA2843E2DF1B6551E3A9D6E2DC28017AF15D5EDE9A962E66D3EFE7E08FA47504
1541569F6782E7213A06FA4330A10EF35F587D31401158AD976CDF6BA18E8F24
5580AC74F95466CE8802F92D3368E0F408F298D63938587EDE6F09B2E225461E
594C598BC8FF5827A4CCD48F63E5020E43FB210957EC8B19C6C4A9154D37B3FC
B40B23B69DC177F28C2D2F3475CA883A55C7F25DCF82FF89D52EFF0F32029CC9
221280B81878B585704A80FA1F954971BCC322215B5DEDA6F039085BD9EE5805
2F7B4441CDF49B178118120591E82194B40046A8E2CF64EAF31F65FDA3A16EEA
20D8054F8C539076D1C54FF5CD4CEC1E823E74EEB274873A0327497CFD1BE933
9B3166C8832BC4A13F9E53AC3DC48AD699AB26500FC832CC58FA19BAFDB53739
009344CB03DA3278400F44D28ECAD128934E9BD8E09E2FC76EF1B94EFC2C6619
67FF60444A2C9478719F8B36B921ACFAAA1CE03A13F6D150889878AC5CE6F427
AB43C4EB2CA396AA4E618EC54656A9F11DB651A68E4532B21346451FEDF97BA6
4E9CC1FF66E653626807AEA7DF4332CD7EDBF68ACBC1C50C9328CEFEAF70DB97
373580D4A793B13FC3DD0BEB764D458998F76AEF8AD6ABA312EB54ADAC99FC15
EFF0C199BE17CB50398F14A97E025CDF45E646559E88D6CE5EAF88D5EA218CFA
1341516B4CE569E4D08A4CC0028DEFC042C09DD456D7DFAEC39A350641E2E8E8
EDC0308EB82C33457F9CFBA56A4ED76A5D9546CEDEADA207FF420DE757E5A1E5
1F297D8A2D86BAF190DE23F9815259B9F367267185CFA693AB69DB7354099D06
9CBD36858549C3B9143E50C14C14D1D758DD8DD1C0CB6836E4F598C97ED28843
67E6BAACCC65E3B23D30E618E827E5258B80D65E5EEEB53BCE3626B2D5F85724
79BC77F713B504BB4030B6EA13E4F2FED181B4EFF7A58F9C73BD46F116711CF0
678ADA87200AB4D36144BC11DCF2E44D782BD43AD1DAD969368DC8AA494DC70C
E1D6683BC171CB4FFEB87F2752AE3F175E48D0D5AD9C485E8C3B62EEEF57CF7A
5B984E4BCCEDF6B32C91B4495E4F86B23803857946ECD28DF5A948716208797F
8425E5700178C1CF6EE7604B4055A0D4909B62620F6BAE983E1437E5597968FF
A2AADE238B32980427B19544D9BB4F95B059158280C5C8F5CD8278AACDCD7415
56F9704D8CE820D72374D4E815DF11353AD1468D53AB5F7A0C6DE4743D1AB8B9
D7C6C3AD4938CD18365825A40A8BFF47EDE915F181330A574529ACF9461119B6
E66B11DD7A01508E0E2A6193953338FC5B902B9ACB6D9F1FFDE70482D1A24EF8
2D057267160E477B4AD16BEFA44E34D8D988831958BA676DB0DE0162B37A8F62
486464B046653F90A3BDFFF569FE8138E2DAD70EEC20924559C820C014696709
2CC5374ED2D4340F8B17B12316B4B467ACB48DD2558405232EB5B6FAA250AA3C
9838BDDB670CCEE1673222ABC9E532C31C0F7AD51A36781A8B9797ED9BB0F913
1F5CB18780D7CD08AC17F9328462C2517151E43E4E35F4D4EE98A9CDF95C6715
BB5CEF03953B1F67F840D7562DB98A035DC07F968D6984A493D586ECB0D0B2D0
1C0EF8606B7B45B354AABD3E503D878B1B86D6BA10437B7277684AD055341463
F1168A364D3FA2D3E716F1BD1D0477B53BFAC582D33F5395638291EEE5167393
E16B6DD9FB39205C86EE4DCD4EDF45D3271E27D15BCA55F0B52C2F1B576E88A0
B4827BBC5FB86A2879AF2B898590B0A3CD872EE1BD9E8E51B6B99D2FA47C417B
F51D6D644E6E5E1F5D74625B89CE843EE4BDCA42E7910CAFBACADD1F7D4FAD91
6D7A26F4611836088D2ABA0FDC2DD8DA36B3DCAE684D5E2E054572103954789B
315C4C78CB7BBFE9F7BEDBCDBA3F5CBF20964057F342A6E88BE905143A807947
ECEE27ED42C2794C515206A03DDB89BDD8B0DF39622FC47D8FFAA4EFEE602BBA
FFB06E640AA6163070002BAAC18E6128C7C1C82874099E199867F4FB32A31A3B
472D6EB7C832197D10562BE9292492BD2ABB12D94F30BA0072DB4A3731DE9190
25F47B8E9155B40F46589EC4A181178E09B79434A956F34071825BDEE615E9E7
F3380357CCE9386F02ED14A873D2D2F53C664605601EC2C9EB152166B4274118
332E4B10A12646362393144BC3DBCC3E64A58BF8D14EFBBC11E641B21D0737C9
62C953BA3CC579F489859F1282D65E083F313DB1FD984A6955AFF8216FF3E055
99D34F07A9D8DAB7EB6CDEABC20FAD45AFADB0A5668F91360F242F8B0154A8F5
7BD61032836B027B44B0D3D01612292A4947816F8373441445E9563A5AC21594
A41AC57F969632537F525D8ED2C6137FCEE726B7F5537AB35595C5750D11F05B
4A6BCC4ADDFA4E74760A493156C707C39D0C277AEAEC98E6C31C89DF221A0A69
5FAF7E2C8F133ADA5D53FA46B4C205BFEA174650CEEE93992826CC3590B32D8F
2BC655A3B8BCB0C40E0F332CA85AE9CBA9B3AB4E87C4E663A7D595EB87A0BD96
A1B88FF77C489D68B1E19B78C5FCEDC446FA55760A8C3045E78CAFDB8E10E9DC
2A4C658DBE68413532C192CB1DFE172FF37D5B70A5AC38968B7141BD6B000AE8
C00F69E38F4D9CF52003350618F8456981640B0CC056EF6735D050EBAEA077D5
81A8D93A3BB6F913924B2C6E77AC0185099398DF37AC2C6174CC6A9F902F8A80
A80ED788ABEBDA025D81FBE22BB6539DEB0487EBFB3E41A906E701CF299C1B2A
53C3CD4059BFF6AC337E49586FA38CF4EAD2BB2A5D7EF3924C25FAE699892726
C0E1A557D828F7BC549B6EA8D6CDF71A9800E2EB79405168B2F25F82B3CD636E
F6F679D03DDD0634E1810C4E144825E7AA2EBF69D95221E4F8E12DA7D57FDDA9
0FFBB2949C9AC6ED5AFC00CF18767F0AE2FB05E4D361E82C7FF35708547E4486
AF7CD8CA09762A4540E588978358A0E13DC442B2DA16255581C6292A898E046E
6EDAD6BE1FF5D44670F74E090C52B2347DB622BA3D2DD9E668915A2E811BD877
73A6EBCCDA5B5CDD43FFC6402A60DF1300DD29D7ED03A7F32E96A85EA7FE08A6
E4597289D016176E9603C918FCD0A70EE18ADF916861F08D619A44B246AB6CBB
DCD3FAAD7AEDC9FCCF1CD388D8D3DBA9B0A59F945299DBCCF42729861451508E
E284575CC5C4F5CAFFA57436A32858B93AC58694A6BFDDF91D4A00BCDD827197
91BA1FD2B37EBE3666A228EBED53CFCFF5D16CF00CCB3B9A6A2BA9ECDBB43544
B1F036DE7460A2244C15EF835ABAFF4660DCA63098458F31E90D4E282E6239D5
F47A93FF95EA600FA327779B5FA01138DA37D9C0799EDEBDDBE4416034C34804
D6447C36C3C6FDF1780CF7A0D392D2FE54799572091CDB7749A04E3617F347FF
5A23A4CAA8A8FE98F8A8565A7DF611B8959146D286F2A43668E68A02702D3041
0D5FD6C685518965BABF8C725995D8366308F3CA2597DF80411D5812A5B0EE50
67B4B82DEA6C13F5B80E3F6917B628F2B8992BCA2073DAD1FA758F6FBD90DFBF
203B02B0147B9BB089AEF4A13F6E7DA357F2A78D03526B9751BE6F9CE0E28B86
2EBE107FA11267FA203F8FD3350FC1E216212B65248AEC2778076DA55046A0A1
6278B755DBBF39C9BB6DD23ED71ACC4792E91D5DB0570AB09957C9BF233EAE03
20CC4E274D3933C10B962A229716C546684D867F4E37A86DB01633D8608252CC
9E37C099224FAEB9AF2738E73C61B781A4DCF9BF7784A028FEA2FFB33C2AE454
BD20987278D08574D2D42309236D71128AD3E4ED61B29363115D2A221A81DAEA
9EFA24EAD82346C3D7D5987C33101D87EFD1DDA8142AF76EF2C228A1B6D0F264
7194BA88BF78A428DCFAF09DC79915C8D4305B7845C8063A03A98B2698554BE9
889E0AA44A4DE9A18002EE1D74991625BDF11FA63B5F2B08D89C2876DA7A16E4
983953AD982BC6A37AC09E81B1A91D474245BC0FC1204E4345BF28E4F8713089
D97F1CB5F706AA3668EE11F60EFC8920F75391886EBDA51C5E30762F88207317
E3D99A2995C11498A905D3A9A1F679F43648AA057329EB964A0503D2A7081080
D2BBB96DCA39477FB423281CFC8416D1AB9272AF121A6DBEFB4C4CCEB195D849
70084E3E3B3401042F690632BB5E93765D591F0FE4E341B4E10C31C991735BF3
1CF6351F31504E448D75BB1F1EA20F357E11B70EEC5CA9D9B9268E7C8B32CAD8
BA29B8B897B10CA038E76576F96A61E88D3F0DAF1115ACD938138FD8B912C639
394E275EC58DE958CFFE37BD095A54132D5063D6521091246DE1BAA3F2B0940F
D63D9C390B2D8024D97F19FB6917A07A42E58CA96E7B478228CCA1F725C7756C
A7FA573AA21727C37D548D27830C8E56E4740FB21391B4A4275F6F71717D851C
596D0A393D65AD8615A822DC65720B370A206E2B47F004B89AFFF02031F830BF
E917D3C3FD938E6548E383535A03B25E10DCBCFC292EFF7B8E1EE42A857535FE
68EE57E25F85AD5437BB16FA5233902FA9B8FDF122B3B9FDE61A2CBBB3365A5F
F85D59720A052561E61A88CE28D088F51B455AF47FB92964DF81520FCDC3AAB8
ABBDD10778D4246F4B245B3EB682D871A2C9F4F31A53B6B4B5766C11BC943709
453479BF1068972190E5CF81E99BFF52CBD457A38513DA8306F8935B24AA7B91
46D5770BDFE1176C752268AB8B160C5AE8735162632052D3F1DA33BC86C18084
8F8C17008B4B46B5D37ABBF52286947075C3347F10D335B78CA254029A4712A5
29DDDBFC80BB9DFFB2D5524CB23186F687375EFC32A39ED51CE0924DB9AE1FEE
C08E3F97A94BB46CA7B334E136A1B8FC332EE2700C9B241658AF8A29A8B765B9
CE48B39D2FF96BBA81510BF8E27DB0A7C82602B613684AE84CD230E1C0F6304B
556A87D7960CD27B00D2A799862DF7F611BD2E14BC8B70FEC6726FE366DE063A
E69478D299485E3D76BD8A90AE21D4632093047BC159CD52C4FAE6CDCCAD091A
4BA2EBEC446C999B5CB73C1DBB1C9D629E8636A3C6BA437694B8F166C61BDA36
319FF2856F2F41F2C1A70C8D2754581C5656B28E16397C88DC27982E5EF2C42C
7E546E9F53FF8511EE7C300877926F7C3A02DA03533A0F948D4314F387281407
5B33BDCD80D9D29698BF9FAFC660DF15CE38CF886853018E26B769C902F3B708
7D5A815D7DDE5810292E8A96D06FBF58EA7454675EF039BFB4AED6A95B52908E
33528E2F097A5051B71B654B9FAA310301758011D020765D2E9EC9F93D7F4408
95897E46191D6D40CC6D8231ADA63EDBFA2CFC431D5C494D74B00642C66BA4F0
960A4E5CA09EE3854B1A260480512E22CBB158CE0F33111AD8F93171E7C1B5A1
92E4CF48A637CF5835D431928A51D6DEE6B166CD867C47CDD1E475DE3C62DEEB
0E5279A3CAAC51B57E44A0D5236DD39679C332A86A2FE5FF623A9864D6305E3C
4A83D81E141BB817927731CDA6CB0B240EBF3CAB57289DD3F59C8919F298733A
DD1E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 49 /infinity put
dup 50 /element put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
A853F0B32C3E5AB84D5618B20A2368E6CCF24E6635AC36F5912FDE664856D62E
28396E049FB828C803F08478AD134076FC54DCBD62FD91C88AD7CE0DFB8B4EE3
402B214CA01AF48514A8B3821A16F8A4ED22E558AAD15F1A9AA7B142AD376564
5F34AECC218C38DE3195C81435A1460DE527ABE9A1DF70F02EEC38F483A86D33
71340C30E091B10E88023246483DA52BD856FA2DCAE12D94EC932EF8937B586A
C7D326E12DECA72B9B5ECFAB8C8BE475112E4DBC23218437F8420014013DAD74
84E1517CA57833077C6C20F0D565ED39C7C7AF00FE96A6E666D240A6CD458935
294FFC0C4E6BB7EF806885FDC1CC59456036C297970B70F886CE58BFD81C9248
A03A04712762BA3EEABC2F087B97B421C6E1617C234E72B12F53927795FDF898
9C5BB71301329E93AB0FA25CAA0160816467C403F9622181A2139EB93215FFD1
87BE6EDD46E091C98B212BFB664486947C54BEE667A82729C9AEDFBDAE85FDB5
54778501152E3693EA7BBA334D05760EB5E5EFF55E0148E6F7B4323BE3CAC40B
37344D392B4D979760656FAC2517BE9AC302C2F892FBBA0D839D41AFF74B99A7
08C0984A882A03D883BFC060A618D11C07FA6D3687E0B536BBB16EE071395AF4
E9E8E611519E8C619D7DC3B383D2CB0599B2DEEE9BE54512C200C4B945F2D1EB
56814A28390BF14CE7E6CD048D514BCFCE202DB07D37202434CF9A289AFABA0B
BBA327F1F12A8C426DA184BDAA68F36B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 57 /nine put
dup 59 /semicolon put
dup 61 /equal put
dup 91 /bracketleft put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
ED277A492B42D88D0E068D61F2BEAF96BFE7F399175DE7D08981736F7DA253EE
331F97DCBB941B1832E3FDBFA7650E0905E062516F27090476AD2FF0CA78B14E
13CD9482201FEA5AFD00A134F3C357412CEE5E264C20C39E157567538D94E69B
6B7F3EC896D42594593A016CB5FD306F440F6739C7EE88132663A1B1D635E362
5667C0843D4E8E1C205588BDD46FCA71692EDD0042913BDAED8DA7D7C8016D0F
B9B44B7EE36B8356A8740617776F18D167F6AD72D8B006DE3E4BD74C1CA8891A
8E08C09A601506D57B5EDC2FD998E405A987C4205CAD91AB441DD76337F8E54B
79142482B2FE7853B7960061A6C420A696A0C47538C692108055EAC99DA91CD3
B0A2B7AA4D3E1CE749165D28DA7E2AFEAD936AE066ABFFCEEAA68E1B41C74CAE
CABF8616AD95FD9ED3B11C918BB38D165644346F51053A08C551220E93385C29
C2E8B76655CB57458FB78C6ECB6460A281A80F502523BC02292E1B8125409C3F
A734449C3B34DADF947075BE99F21B31B00EE34F824317E8766999D17EAC8B28
132D2BCF954CD29EB760C8F0114D19D4BA0161537A4B2E556C0B64CE8AC122B1
6BF9132830C8F4EA9DED9CA2889A38D1393498ECCDCB076A6A7E850ECD3A062F
050B7B9907A9F37C84D143DEDCFB27AD763C746E1814DAF381905B63CF391ADA
2DF440658BC5CBC9F250F58B0661DD335E29F1931A004EB68BF10930ADD30B07
362F8C9C7F438CDF8944DD5A06583A75079194054F8C06AB22E36F01DF05AB58
428703B5F8FCF7156859F1497DE012A4ED81A8493B153CEC0FAFAAED622EF190
69ABECE4ADDF86B859B45AC35F6A24C63CDE613C9A7B1CBDC450EAD335A76FA1
6620BEDDCC866983248CBEA8715C0AF475F585B2E615991243F29AF4DF14E380
88CB03D7A3A40B51C4B3BB3781F7A159DEED3E936CAD67B4AD2D9A00BAC87859
9217F589B60404DBB5FA688C49F283A17A22E0AA7F7031353F8AC62FB53A45B8
9A96DCBF43FB52495F20DFBF14FD80B6C088436BE5780A394BE7E95C1EB3FF8F
2A2FAD3E530D06431E6F2A31315C92E1EDA208C1B92F418116423CD292E1B65D
16FCEF1B5435996A7D04293EE3BFEDF161B1F8C242D9001191CFBDEFE25E6294
14ECB8A5C86C8688458C082BE1ED19876552669B89B68F572588ABF1E05D2C64
008FAA717409A789FF8B6AF914A6B0EE54684B4F553769823BE18EB5F14EE0C8
938BD7C8E01589E01F21B9DAD0574064E161B5062D3DF6FF094944ACD6177C02
0699005F6C0D10D78585740BB798449CF61A8B8BF6D1B7A7404D833570846D0D
8F4F0C823FEA18EC611AD9B48709CBCAECB371D84B097C6E4B99997E81DF3566
B65256878CF710C9CD3F02DB45E13804E96BCA16DAC6B8612064088FCC358FE6
F9812D7509782EEE1438722321DBF2B6605BFCC4B10969BAC63044A81E1145F0
53A6555556089ADA441EF6A7BCC9EF10E712F69F56F3DAB42C4E29643EC14B47
1A7E0F503941E7C20440AB542B4BEF780831EBE702786EAF11E5BA55FF9CA297
182A3983F6ED6510E900FFFC8BCC3D355A4F3C7BB8FF0113F009B5113FB87655
EC865C3BEAD9DEF9F2F8521C291716D8FAE438A579EBA81C0456BF0297BBD91F
79D3C586C6E8273A0A358EF12B2D5FA77789F403D80BC3F8D3DCFA54ED2EF42A
988D72A4FFE87447EAF45A2D47510622A27EBFA924A3825656F694588DD45948
1331602474BB912A3900BBAA22F86ED74A7ED142E5F9476200FD0985C57E723D
E55A2ABED9B40D7BE674118BC19E0BBF9C71C946EB77ED556CD01675A5D45FC8
B81161C91E0D30CCA1C6F2D303F04E9793DA4587B0A6D67CC8572030668FC456
B3334F76E5910578DCD4AF83EFFCC010D53C07AE90526031B40619B4D27AEA52
AD412B1870E9E7453C99E80FBC5ABFF0661E8255BA4D6C0BF60F1CAC57965589
DA26267FA03B2CCF128B9F4098111A971A519C13D55B12F687597341C49577BE
06497B40B6CE001EB5EE7A9F636F046CC24897AB085E0FBDC820272D681B7584
F215C6D1AF652E422E59558DB6348134BF9806C1EAEA5B4D34B72ECF116020B2
F84DE3CEAB2B97B606A0BFC6874869A86E3A515D0AE616D7CC864B7F781EBBD8
C93AC879D09B8473EEBC8B5AF7C649CDD908D2A09232034154E661202D4F4DA9
CF3ABC86C9A6F2F09DEBB95E39230C890D92C8894DC95D118F3C68E14311D935
8916E9209FB94E99F493CEAAB36A6F25C04968AA801A46BCA9E0AE0BC0DB6B1A
94DBC963FB1BA1018BB02F3E02EAAFB0BC676A904300CF179607A73EEFC602B2
6191B61BEC39A31D1056E8D567AFE76F964B9F717BD287A94CF9C80E88FFC83E
4168467A22AE09E5C7F478ADCEDDDBC0125A13BD10638D8471EF80438FB02DA5
2997D43ADA039DA5D63471EBF5739689B9658F75B4746F0788B24B3B91F29283
2C2695E79BFA462D7789C875F6331281F0D2FE43DEBEC8EFE49627213BA42C59
7D0FE53B7D8B4199C0E216619BCE067CC1BAE1C8E075529DB0B7140D6E0B528C
C121CED1CBC64BD28DE9517C0A6A4AF0E29C015F68BEA5EEA4CBD597C0C8AB77
CF9CCB30E7FE4B7CB450A9C45FCC1397C6B0A86284D5B1029AF25BD8BAC6F452
D3AE5CB04409B03CB023B3506FE48C533CE73BE753625DD6DDD8816291EE7725
531B4782C7052CA4B6D9562B4D49DEDAF13B1FAEA9797A5647785C433D4E18A0
2ABA38F55742DC36E4FF07AC0ACCC69D751F3FBA44B3ABE5564318882206C967
1B286289EF7A13CE20C001C4FD8DDC8DEB238A2554AD2D11F0F4FF29D43DE342
018E67F6B116ECD19D0A6188509E5CD1768470D8A13609B66B1B21C0668DEA86
B198B6093CF9A023EC2263A7D1305B6224EA5D4565061CDD0580E8C3CCCABEC8
1D8D642F424FC890C3A7826B05FFC68D8337EA8295F7A6A319ED7849584DE0AD
2F4086534390215FED63A94EEA0C4887D955B77761004CC2E0A360373E7BCA06
3423BF653F266B625599A93B5A3EC2D3098ED38FC4CBC6BE50F14FFF445A42A6
3ADB37464D62F20B23574B38A2E4A9594E065C0A08DEF0F19151DEB13BBE9608
B43085D3003772871A66E1A10AF87B6F4ABF63C36147A10C05A9672D20F6810A
39E38267DE1497B597DDF127081FBCF040723B7A1C7D83CD07880A45EFBAF49A
93C35B6FA60789762D49337A2F8499B97F231215D04FB0CC74B21438D9B37DDF
FBE3D184B2F27854693E55277F0DB6F5EAFC17E45E99F6472C82E45F39370A91
107F4EE7EC1555C4B90605BCFB63BE4CECCD332390AB2ECFE0182A9A8CDB72DE
8DBA76C9C7F25AEBFBFCE927190D8056ACE512CBDF9FAB79585A7D19ACAED2C8
B9708B8666C5B4C899ABA434D53722A14095F7156D469079FECD6753DC87FD34
FFE38A384B043F3F8A09D3BBE4107C76289D8979AFE453CCC97ED1CB47DCB422
F16486DF7B9D7679BE103494BE73D84CACBDBF4F63F02DB3BFB9D4374508C714
217260072B5469349A5726961E4123E37D6823A4F2EAEDF5D19052962FCFCD54
221D19D368C7CF287C49595BCA7FD218B0D67074390FC3E91EB97AAC305307E0
4B0483E93C80676F1D639A651016BD522BA48EE4BA0E746A65C04267E7AEF062
4C662B8282D009B423C56FD5B67FFC7C57C89E38DD3F31ADAC7234DD22C46F42
E127B97166F89A59A1AE432F9AEBA772420E9354BB2841A338BC254E5379AB49
F9FD9EDA61F6931FF290CD6281C5ED23CF6DB173792A3EDEE82F3E2CF31115DD
99741D1B3B59C194E1E0106DD0420F6190CD3CA5071C85224E8D52DDCFDA1649
B23FD879659CF4F8F1B96EDDCA1D2692DCB65E4DA8A8D780636043C3E17179BB
6307AEEBFCCAD53E26C4F00FF61CA5188058775BEB426703A33D407EA9B81F69
0720CD3823BAE9F659C03087B0171C33DEA65390CBE74E8392C8603662FA4D28
86D5A9F3C160A4A0881B1357C64B29A49D65A1883020108C5AF690C84BA83FF2
CEE1FBAD2D1D168F636BE3498C4AD5C03D01C451602B77957083E29646119FAD
B1F62220805432660B9352E5AFEDFFEE3E49E22DD02E30C2DD394BF98E88A967
AD6FFE09B8A6ED9108579DA66FE556747A21C641362B4614E1D2D1715BDE7866
23780E20019A44B7D21E901552FFC40477E500EAE772D0CD496341A3BE679F89
9989852D0D9A0CDC81C5AE308906881BEBB7B00A76505A9B02ED0B002646B15F
2BA654B4F675C74D797CF2B92323CEC4A42DDF36DAB85CADA1D134B4047202A1
F3AB3CF29E38247A651794A98007685462E696616D2265A7C578037A3BB46E8A
0AC22EB7ACDC6A871C91DE226D3743C6A92FA2AE0E269A6426A64732D3B95A7D
16DCCD34A303B54C7479D8F42540A66532E6BB1507D878697D42CCF5213419D1
6FBAC4BBA0A880595D287371D20A4CF55CE92DC3D70B93495E7FCA5FE03BCA16
54F5D98C7529BCA1A4464C7AD7ED4F64B896AA346459035457018E9C84529A77
4CB9EAFB49D73C8195D94C5E7E4C5B02E79D83DE771660C27F2D6BF03AD88FCA
1A2FE45A37211CB0CAC50A38E705A93DD927320DE58BF64FF16694A69764F0D6
8700D6E655915528ECC421CD03BBC988AE1F1B2743963C0ADD7F197EAF2493B7
BCF35CD3063DC8F240B9D8B9CB84C6842A575277886E221F7A13967BFAA80CC9
8441333F7F9C3912F7BCDBB918C6917EF74257E7F6F6F2722F850346BCD28825
43873B6AD83E98A5C72CCCB8896743AC07ED718660F05E96C66629E3796A6370
80C6DC55F94E3A210435B83AEE30F0A8D3E05B18D58C9C88D3A638DDFDD952FF
FA19389ADAFD513E6A05FB23C6ADF6B43D497A1AF6361564B9361C607B5D3AAE
83AAF6DDEDE93001CB0EC4AAD8FCF6B99677C452879D2F6F6DA09600F91051F2
133C9E4713EA148B741A7AFC72EA512D4A0CA0B0F366B61226991A7A55DCAB71
4F5808672426E1E4E1C54A36B77177E07E537F8703DBE7579F55ADF1416125C7
A06DB7B09BC3AA105562D187F805B3744D0F535B93D439E5D18029500F594FD8
0ADA4790739E7A862BAB4E82FCF8347448BE6E53702236D0B9F8ADF4C437F724
D6E0C0C448FBC42D7327DD59D0F990992221432641B584E2F3C7E1F453DE96E7
34D4B4A6F8B248FC6E67482DBFFC044DC17702D99F66F3D3A230E563590FCEFD
7D704650E1B530E340CC2335299CA5617F8873DE1CA2FF082F2C0F77DFE2EFF5
3EC0C565C42FD644C72B64BD7A5BB52E09823C9F51888ADBDDF65E5AABE407B7
B47A8F758D496097ED11EB8C963441AE0544C8EECCE0C199CF87CC14619573B0
2EDE5223B31617CB2AF973A1DC1686C4CF70B744C1514D36CE988302FBE20642
636FD73B24473AFEB7E893A28BC4604C458F52956E464C6CE5816886F7F7080A
64329904268F2E8F9B211EF34E296845BCE6A3F13A44CFC40923A8A6E230C439
F65980BBF081E1E2688328B8AF4C4156C918CC00114E9DE41733D8CE08DB6CB3
B0E4F8CDBD5423912F4683E1F0E74FD096FA8B4A34FA7F680A2426AFC48B0226
8AC3B0AE9A9EB4E31C5D9B5DE03267198E65A5D67ECE777ACE82E21520F12766
EA5371055EC2A8437DF5F02A9591AFCCEDF378768D5080CD1D4E945019BE86F0
DC25427377886F161B18290492876F2BD8E6A85CAF22B9B0941ACB64416257CF
44253C152F16AC32B7C45658ED671E8959AD71A3E514A60E6044A1F2A3F65664
36CBE0854364F3C986CA64CA7A30CB3DB478ACBAFCFB02592134D152BA958E8C
DBB6D73C86C48C358F447F2125867A0E1C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /f put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AF439477CF795BFAA794784EFCEDE467F971CECF2694452623C1DCC
078EDDBAD12230CA1C2E225FE5C554A0B0DCD2C760B950F97C9639B4752BD9D4
59B8C57584A42A57C2E274778079C9A678DA0DD36AFC3B448D7BAD39E4B7BA2E
2645162116EA122BCA7440CFEB7568F923FA61A68704315BBD7712CEA536F761
32DDE33FA9906839967518CB927D9730658764FA1BAFDCBB5D0AD5C23BD61A75
204CAF09F2E7F1B4322BAFE9D1C4B9C346E0148C18EADFCF61922D397ED6AA45
824E754ADB7DC84B2DA50162361A3A15DA3D91D46EDE92F8A81031175BB98A75
96E47897BC6A037B310368968F00A7EAC3778A2B6B68964551F62A4624D6D680
EE8319B66656B13675B82B61D0D04577A5DBA81B50476F8783854C3437878273
93F100355BFB8856C90E133CFB0F846010D387B68FEDA5659A64B837DD3EA6DC
BB8729FE6478E972BA3F5E811D52D3B832475661D9DC051334C34CFF81A95E8F
6EE13F8B61A3F81DCFA586613998DBD029AFBC2D3D1016EA2FC42C985CC32575
328CE3EFDF06EE774981008A05902E6E440EB9FF7E986B38E6B71484287E9084
1371E771F0E396AA2CC3911F414BEEB5BD5A3BC3BBED8D35ED67D5ACF177147B
69ACE992B96FAD294030A5F7DEF13BEBA1A1693554DF91A27993C8EBA8896669
6361F7A58EE1CACA3527D786067F21334B63E3BBCB3C098305731BACBDAC0738
5C015CC4966077
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF754699F2E07CF0AB2CEC255B464ADB
02D1E748D5AF3000D4B9F3FE46E7ED4F178A5779A6802E2F7EBBD566EF7A9B3C
99D41B302E0C9A9A82F31B37D20A5D9342C3DF6C3E996E616F68C398016ACA08
93FA4BEA3CDE613C9A7DE868CCD010D8AB86039CCD80564FAC100B5EF88CAE36
E1CD12D8592FBF5E4D2DBC00F2875B279549626277509EF470BA92542F41A629
A97360907D8ECC3B6765B6B32DA42D6CA989094194A4D791F756E23845E0A413
3DD0378110B421AB29DFFF0094A87894700E0AC1360191CEC83FE94A8CCB82EF
5A59BD86C9DE3F669EC6ED71B5F6E890368C67129C32180B57AB63A413E7FC96
90638238F5FB004EAD6A8312F2A958565671E184F87B4EE44DC2697558B51865
ED0DF15D36E1E16B4179496422982B9303E74B4345F6DA631D7C6450EB306767
7BEBFDDE9913BBF4ECF891FAD6E45EAA03EFFA83E84F9E953A94B2BAF0019F97
35668FECD0653933C652DEE4105BCFA36EFF48EA35036CF27FF818815196CB98
1CC9C0937AF3BC490D23D1DAAB55E1F317983F27EE740B4A108355488D4E5E6E
3346000AC8A3AD9D182375E7B99FF06AFC2233737F17F5D533EEC4FD90402C50
9E54A542318CA3DBEB2094D643F4CA1486BECDA1C8FC6BE36CA705FFA3D63AB7
D27CC05C7690741C83302584395BF4CC5FC9DE80A30A31E9D23864D14EA921E0
06CD65D87F32CD5EA977216F218E749F30B17EB9840A4B5614203CA1559CA4C3
C32D4B37D081EAC8AC5A0DE563A048F2DE8A17FE18AC45D3E7C543CC85ED699F
25FB652CB9EB1A015ABD78660A041DA9BC4552C15CD4BBE0C4C18FD64AEAC8F8
2E54BA786DB1A5A2BF33C6C1F362D5153CAF9DC64B16D6EE1A01041E11073B21
6801A385AAA7AE837C94E66A18E8C57D7005CC92B836A8F7E7C3506FE24264A1
C8DE16548E65FDD0BC64613BBE637F408744BD7CC5D1DF71C76975335CC6EE4B
1348F5309529F24EB9BAD6E4F31C470EB34667CD11B0E9D84CD77718B6F297CF
3BAB6F92DE3789C01AB8097834545294455AE610339A30E9D1DA8B61D1049142
DA40863B965337B8CE9A674499C185943681708357AE0A20570CDDE20BED379F
83354F77E797A327685F4FEB6056314E6503A77F6FBC914A6FF5283C0FDEE72D
852962B8B3342044FBBD610716AFFAD6553C6AEC02ACA484EB4C5B21C8EEE446
2F49CFE015E1FB85E9C17F845787222A5330001AABC8703D5AEFC5E9C2EFC581
2821D417A9C3AA45E954E7E459B5181BE721A8FA2BB6F264877D14AB5DB2BE8E
A62E5B91104C7E5AC050120A28D138EBB55CFEFD3E7308928E7261AB1D51BC79
F5989026401145ADFAC3E75B47388FE076EA8C17833876B152E8E0444D6F015D
4360755CA0606F69DF491AE05E832DB6EE7224E66D6241D713E7FB313A6CEC63
F07D4039BA19B37938E339E1B67833CD25D4EAD6C07D2DA7DECE6ACBBF937568
EFF7A39A5833198C03915399050D4F4427C7F4CA5A9F57662C7A3FE4169BD2EE
075E34A99C43D16849F7806BD06FD2B86E311B5CA9EB619A75DAC1CA3508060B
A9B027248367C85F81390C6ADF1B4E1D88353E072D4A417B3CB902E96F431AF2
BE3660EC51E8D31E9489D7ACF81C3505D4C32B083901F1E0386C16BE6C691833
43952207658455FB81B6B7F28D1DFA4D2C1EBFBF3CAA161CE584CC7C3404424D
CF824CFB3D490133B7307548392C8F8EC2C6CCFD9ACC174A587E1E1A86BA0F98
D879756410EE5FB2D28D6F18EEACE361D68777268D1CC447CD26A3811E110C73
3FC486AD8B8E0027068D50D44C70D7813592DE9E39567BD0521FBDC7D64EF943
3ECE38B9781BFAB6A0D8B301C6211D5D40336AECB014E2B65B556F1EB0AECCFC
E96209BEAA676650FF003F732DB14F2538861E40915252EA75EF3D0EFA237E33
3A6E3C6D3EFEA669B79CED4F77849560A3E3F116D943155B532ECC33653C769B
773E687147530F269ACE3E6ABD96F54E3EA1975CBDB5E91E2A89EBF19C25664B
BF5DCFAF1B243B7ADEF3AC24608CA6E777C5B1357775F1409C689915B13DDF29
BBDC767F0D690394D716BAB999B54D72D670A36F6639C9AF99A36B643A17F540
F90B275589987457168399415473B43A983034A462CEE31F94D0288293619985
C6C4D28960BB5BDC97BA7A7F3A4FA5B1737876A290D0FE964763EF7ECB9D7699
F18C212ABD1E598B723AE42EE1703BEA7C08D58F9DC943C5F4C0F0D4A7C6BF78
597793E88C77F3455AA2AFDC2A2D946418B00B4631C764842E78D40AC4A34300
BFE6DAB53F27930239BED05C2C13CBAF897CA8570E56836B07A2B975A32C3FCE
413EA715F68B506BC3E6B2EA9FA3ED510CCD0FCB845E77ED106573674F3BD80F
01D8611215A5F70236ABFBEB273C2F44BD3147AC2D0C687E2003D74538925221
1BE474E13F5E965259BB6412A9D7FC7E1BF457133829CF75DF1EA8CC22778FFF
9BA300F6EFF95AED6FB1E22B5A1B3548AD057373EDBB2485E2C6A115073B2168
F35C6FB8657D5015B63B9801CBAC2607A1F785DA4978CD5415D15E4B4C0319F3
B2424B7CC45827C5CB5F1A0CC05351123FD36CDCB2ECB44FB85132D7D3ACFB7C
F88B597F604B5C34EA46F3FAAE650DE3C615698EC35D335F6354E8B4A4C162FF
16A6F47C852399414A03D12190BC1EBE06A612BDF5521CEA49EA4BDAF709EA54
44059BDD7460BA7D25DD0C40EC4FC3FF072F5A914A92FD2ADEC865F113EED0CB
F50617E019030AC0D98A422438DC426099BA46C719578BC48E9065AA87E8BB73
05985B4FE5E4538DCDFEA12550B2D61832ED35E28411FB05AB8E4A071D85D21F
3692CAB47D6ADB79D5639E1A751300AB9F935006A78D055CBE9AD845F1E80552
8C272E4C56FBA898F6D877139F78C6280A58F8BBAF51A8D8155EDD8881A36368
6169AC46803910470547BDA603EACA295C846272F1F868D97BBF124DCD505020
A6A86E554A2C837CB7614014F2B58F413058DD1E8BE9F6E1024770C8B7C07968
4D4AE40855E052CE13A72427E4ECF0C388849DD3DB2155DAE8F1879322E2B88E
3D3FB90959F074A0D44FB4682E625AE0F62D929A6C475AB50B0F6066002E8A78
370B741414B179DFA1D8EF22E7BA0416976A47B321D7241226CAB4684ED48D4A
D260FBA30B7DF36B8D5A617ACEDDE5923663B01D37D363139490B630EE4DA991
2F721B16C8F2CC0EBD60C788119A375D4FBDA133B18D96B055C78051BDF2BDCB
627A4C2B25C3E04E4B3197D00A69807F31630D19EC86439FAB51DD48344E9DD1
9EC876C63DD4211507EA90E837F763D0E07C68A90B3CFFA834A508614C4541CE
81A539F8903896FF4C790BC50D72CF7BA9BB7E1E8B28B8C4B2E22CAE2232C24B
64C8408D38C8E6A9D2368F29689D64FAA87FF208E0CE339214EEAD516E4DC86E
AF6586D371B1AE3D44C91721964E3947C2E40B3E0ACE5CF71C5BCB82E0496431
BD1F1F8193782B9F6500CD2CC316A6C00D84FC2A8D3D536E7AE9B17335CBA426
A2FAF0601684615541A927BC72A59EA59A5255206C4F4FA4AE3F2C72C23DD852
38AC00FE07EEA97F67D0BCC6F3F444867ED7567C31CEF20545D9D5CBC391AC7A
2B8F9BD4DB2803417CDB58AD65327C76C360F8802E5023A96FA9262A5061388B
92A6EB2E79C63C0150E2FA92D2804108E9FBEA7110EFC5440F281F9B75C6BE3F
8948E5A8CB3B720C623ECCC856F4F99B3B808F50AA358CC6BA0C4D1D924ADC2C
4A38EBE33CB1F0407B2B756CE0D6E8DBD8D34BA3C647BFE2421037F2A1666B32
252F7FE79DBCD8EDA9E98EBF96C549535FE13FFB675BDD727265BDF8ACF595B0
34B71892C454F5D7A6DB683516B13EC157DC1B5712887F0F2383A6052BEC116C
EACDC102CBAE8B30D638DB6573B34DA27F54CB05C4F13D8932D2E3C0478807D5
17CA3442F5D911C6DD2E488A3F223E6A25FD66305E92A7BBDBE48869E2D53DBA
B2283273E4CBF2F63FD02438205287C2EBB820BE3174F64A01FB6BEDDF2E6FF2
7F4D964A9971EA057EF95BE3B02988BDF034744ED43E252B1F7869DB3ED1B682
7637A800D6E3EA6D0C707A104F37F815185CDEC3EDF54EAE0367B180F4A154C8
A28EAFA97A5873158AC9AC0982C104CC919D280441616D903FCB48C7A45DF527
75CFF1CBBEB778E9B527B30A1A729B270EE3C4B2B3B84C5D11A24BE494E7859D
81E3F63DEB0CF132A9AC9B33A60C34056787B2E2FD24604AA59F972B3E410D10
4F4B31C2636287654006B36A5188C58EBAAF03B07C9F5B68D68B27DA27EB06B8
F4FE841574B0D9BC00419C8FCB2B0C9E28428D721F0FB0B315F6881653677137
895DCB90FE194EABE813DDBB3CB33249FA37527B31C8DC9C5E650CA2AAAA97D4
662D937788F78F4CC28363CE8CB54B37655E4D25112B855FDD7BDE9364818534
3BDFA11F0BA8B44252F1C90341EBA68AA72F30E59A72ABFE10B91FCFECB4338C
D458C787B961CF2385048A73875792AE42C7566FBFFB767D0EB4CE6FAAE47D22
6BF3E078103BDAD4600CCF85417AAB7F663FEE630DB0A4DC780236848F620F88
9344C963F3BB4A66D11894019BDBDAC7482826B8F71EC51A777B6FE738F61D1B
21DFF10414695EED42E02CE4B837BEB34F2B744B2E3DAA4FF54DEF7E8576A2BE
42F3D6F5144C7D2DD24979B3BC00712EA5AD32423C4AEE425EEF76A3EB471578
CA5ADD2266A3E33FF41FFA11EFC86657DB0E879D955834C88E97124F8CBF10A5
7B3EEB02EF8FFEC0C1906134B72ECF11646B4795E498B54E4DC9835DD69709DF
330A58E589F222A4546A59AC93F2613983FA3128B9E0A31F812A245A84C7A836
A58B084F21421D5EA030D6B0D2689BF74B98D73883CEC18DB569B44E4D9F3F26
C231610AB97A78D972CAED72650F89E7E0B1538C5D0666138FEE21A7784A6B13
422B5EF70FB8DAD131FCA3B342AF0F97401C30B4A6025A8F4D51316BC40B42A3
F179832A5D9E77A3EBF1D8940DD1EB0C930A43CF37F45591DFC3BC7DD96628D7
255CC1CFFD95F8A7D45E5FC874E4A882D4BBA1DFD8A1373B617E06110E9004AC
A058927A71F24C332891DC18525B368CDC8C3FE6A833F497F8A4BB936F109B39
F1D1617D1B6F53DBA131FFDAD74764996F70845AC278D513D4FD901529147F19
D072A1DD129E8FA7B97692FB956E57025E7B5EE5506E9B93D99B3C45D305C63C
25AD80895F05CB1BED3A1BC2865EFC5983C22F4C66901EDCF8E0536F0E0A7662
24EA5D456F726B3FC66F259F69A60D949549315DD15C4C49A35888F63501225E
412E687FD5B99F76EDEC0C5D329F728669DD4F41D32008714FE565C40F0659D9
F1559D9B5036E5A40FFE2F4F316299CE2383D91A368B0530DA3FD4792C3BF076
B385414429C43AD6E3025FCB62878591ABADEAB2550914DCF27C6B9736FA6DF2
AF983BD89892EDFEDA857BDF119045B8D1C77726A61D682A3B0700F3CF527C65
F8DAA14F826EF24EFA103231E07E397505919C124985C9FCE40F291325A17D69
E5C8992853912F5FB63901369DE7A3DF565792A534A787D0F87AF30D4D765140
2D5DAD68E1AA14A34516BFD002FE02904D82B5E167449609F8296CC1ECF1B999
219FB9F4196CC65836EDEE9953BD8A70456AE85071AAEF33DDD6F4F1302FA299
3DFB40774013F4387D5F9773ED0FA5857C773EE176953BF2C8314176F03AD3B6
B4FF58527B20D97E0B89CE63C3448BF5C2A651BA10469159C2E113FD831AA662
D47F36BFBAC09CA996235AFAF85796B81569886EB1C9C20C6CE354C022765DF2
999A90603F1C2834506D470B3EE5E7388E86A129F62D7F314F142A4E638EB502
507B75E254B5CC1334FE0A4ECC9649DE41B49074E88CE3A25BF9FE1356B8587E
340E2EC10F83DD5A880BB8BCDBC1AC89A8A4D955C7526A993B0F3C82BA6D5F35
A8F030AACB2D4CB6D0F823D45B6333C19C92995DB5D403B0B40874128AA67682
A05FE47160CF7EE1DC4DE736760F5CF3B47F7BA08063F93828CBD7CC6BEE897A
226CBC6653191194C2E4330350271629B640C28151E6AA42E523326F41472675
194D0361A30548C7F7A947E293DC77112A1698F9048769240DD5C5E56BCB6AAA
4C742C051A26F3196FD6FB739E65121B53C83E7B9A1A5E93702BF56979484781
7B33E57AB2803B20AD604921A852FD52A4DA36344A48150C87BDDD029FA0C28A
C0B468A927AB5916C1A6B49354ADC9124D1F8F7DC7462B37BDFF67A1828B6FE6
B4D6882F3093F5E85631B99351BAC0B0CB566857C93C02B34D82F03A70F4AC69
DF20D488951299EC2298C450B1508355BCFB1D7A00ED409479B28B94CD7FAB42
0995A81D1112EEF30B52DE9C84486B14D0A5609DF6750AEDE178573BE31F459D
996A2872547534B242ACC6F2D11344A2A524C6D1C68F91C478F58DD1B49864BF
C9C9FDAA8F861BB550DB12FFC3DD9DBEB1811F3A0088BB76424CE4BF9C26692C
2A01EA6D07BC9BB9A075262D5AE4BE5DBCF56DC130824BE566E5F95397266D27
BAAB09FE62DDCE224ADAFB7B80983C0D44BC29B509DE4C9A4020E1FD727B60D8
1D0FD19269EA8231DD2AF57545B31C9ECFECD00EB33818B6A9696D4C6CE54124
C668D733859A81A9107BD5A5C18E5EC86F6BEB664D1BD52C98ABB00474EA59F0
E73C1FFC6F07FBEB237A642D5BEFFB641F4EDCCE32CA58059432164A26B50F8B
E1314EC174482BA6BE5E60E50211676F658CE4F9E0CFF6DDC0422483DDB01907
3774C7736B18A2CA1CE94409D9ED56855A3DFCCBB1F53E9C926C1CF736DFF7B8
875FF41E014A153B4F4DB11EA2EC34C2470B9811A0F3B2B20C3F623C6ACC5BEF
7CD5C08E42C278465DD1ED4D201E20F87F90FDFD8EF6448425986806476C3561
7E8C9A08231D2920B1BF41F4A7261F2882C65F4EB9EE7E3C2D1A646CB1FEFF5C
2478175BF6B5FD497380A0E88D1EC26AACCD06FB688C3C4BD9808AD5DC2240B0
D690D6005BFEAFCECEDDA1F3DD8767867D844A052AF3F25690A5D28CC0375E5B
E552000881576971CB9E40267EE1B706ECA1643925A919CDBEE9E91C51725CCA
705A2A0F842621CA38297540CA0CBA130ADB8BDB60F5B7127CC969CCF4609576
ED38CF0111FCA548F7F154FE53A319629153828D26D5B188C92D7F7756A9B2EB
1E06743ABB9CA6FD5E42D9D3CB5B6609169D3B1D3F69E63DAA88C63369C222E8
E3DA30AF3C1C487C8F01E63FD9A15D27449E99E8FA8D87733B84CC3804E4B679
14FF3A3FECC4F460871CC336107989D8A645A32F679C3A002F52D22BE16278B1
51766E1B174824F59FED7CEBC3DF3CA4531227E888522359194528C2AC62A5BC
88CAD0C32EBB4139C440B18816FE4D870B98547EF6F2A579C2C77291AF45A3F9
5E8C68866DD4C4D1BBD27B060EDA6D4DCEA4750A3E32483F36ADC9BA6073295F
D6D5F1361B844EF9401189ACD8EDEAA949938C67140829411E43BE5494C15C81
232173FD5B02277BA53FFB06AA8D65134C49EC12D0663D58214CD0C0886BA59C
AF894291544F2AB19D4E567E4DE8BDD0F3E0EAC3581E2937368D65BB441FE03F
E3684393D6F5F3F6038F07FC10D735BA9AA1317F148EF8387C3404424DCF824C
FB3D490133B7344BCA597873F5FC49C56006CBF252CDCB515BC871BD6E332EA6
434263A7F4E94E83DCEFC2F9D52E5F0DF8BF5E25DAD0349A9658AE1F46F7F481
FB831276C3DE25FD7C6ABACEA66CA5DBC05A790CF4BDB53CBD3D2B91ECE23ACD
E662B55A188D9D5ACE59F9353E2CC13394FDA7518D580B451C0F93D5C6B1D7E6
B65FE23DC114ED5F4718CACF57593F43E9D4C6CCA52D195691C975E8787E78C1
071B9F8C9035DB94D2DC6BF6414AFB850E5937AB238124545188DFD681702745
D8192F28D9BC779C8F875ECDC7645516FDB1EC569E739B2B395C1E0F24AA5DB7
C42DF627BFFB87D35A26878CD1EE150D92CBFA4455AD520173F2B24BED0005E9
B35A2390E5D2245C3569A98A9D820F059B409C559024F52454CA10C095A47076
B9DCF838A6DBEC48F819F990437978DE17270715E6DAC8C7C51587868EFF3B89
AAF4C334B98587870141AB6B0DFA7106A73FCBFD977DD83111643D9CCB9D162D
EF616B1BF16448A2E37BAB27461C6C46F356BFA27C35DA908E4528065F6E12C1
E3439F2A209EF1DCBA59F8537C8A434FC4D7D128D423F7B3FBE3776948F8D618
710FC40666D91F1E8E8733E447B03C1A60B7F8CC0739A5FFCB03394B9C531003
F47831309F2E9FA31C38F01FA6BB929B7D26D21DBAAFE0B32374E5E67D44D894
1A9676902ED2008F552502ABDE3AFC958B62CA38CEBE1B74FD4A4B2E23850BBE
2D3F3CE87C4195A6FD5E42D9D3CB5B6609169D3B1D3EB5B51562EBB02E40F725
F17817A5C161B0ED5D89C4705E278AADAB332CD5AD93AA74B987B4D2CD669AB3
C23B6A920FC83D7F8F6ACD381919C7780E7737A6F2C9E373342FF5368B9BA0F7
652BFAE0741E38FD63ABF1D5E53827B3159823407432F4865326D573E20D305C
1567FE3EE999C5226E83D3291C865B878C87A991E6BD4FF89E060F1B93C168B0
8FDF7BA2604D6115894B549345099536CBA248EACAC72DBDAB88E34AB3832413
33040997CCECD24598127D60F4476B1FB36B2129CCCA2D4EAC8FD83165A97020
6C185470005EE7C57E4C4C6F050BFCF9BAAB9BD780EB3C47F32561DB51BFDC58
A24D65F0701D01B29F001742622B78EF0C41B98D10391038BFE7B326CF517B7E
E20B6F985FEC3F9FB1D453809FF5D64DCDC7C5B7562B0D325D023B08F7D87838
F62A6CAA01A20DC1E183FECD764C9F9EFC8F22985B783590ACCF686A94CA1013
269AE4DD65209606EDBAE1E32458EE6A9AC264CAA46AFBED21C716BE08770866
0384E0094BEB539470C7635AEE017D4C00F2C103F769CBEC1B7ED0E2E0B9E05F
B74E4849AB6CC49600EC3F76BC5C65C0250A97B106149785930BA086CED7A716
C65F0C460C619C75C5DA829987C0FB82E5D9A52ABB72752EC33390EAEC9258D5
1FEBECD9E0467E137DF774FDA48580F7F0B06D4E7512143BC6240F67EBF898D0
459DD3DFA5FEC9BB84301E33B6987EC3B8AD4C97476FAA41EF3CE5D6DEB35FB2
C2B85B60A14BF406081689197C3FE61A27782C24ED12F3A57B28211FD9179580
6B801DBE77B008DB38DB56C999937CEC419D331D717C541EB3B2356CE3FF8E60
C82F48A11C10C9CAA544F849C7BCEA1A0C120A1C8B44C75D9E7D70A1D9855775
2B889A8010DE1F1D17CAFC33B3031C003A526D8A6D8355A3CDDBE6089A2387C7
77AC73620B6602B27D88CE83FB5303C9654B2FEC800ED24F41481153D90A49F8
C88B306A2EC9471EAC9F2C02709DE2AC47004F4AD1B4B90F57B5D41F602E326A
CBA0C3E438E8243D6FBBAF50EB8FD8FE90C2E06D5A3F28745E379E33E3316D2B
9D7669042D10C326B7B54D1376C25B6E250D2B87302BB888F23F33757CAE8E59
584BF2C32D8F30A42AC346E21968DAA0EFB2930FE229717C5F985741536B76EC
6C5AE447C99060F284BEEADCA2AE4F1A1BCEB919F48A5581E21526381C8A8D2D
8CFBFB16FBEDE6EDCA7D9B555ACED0B6A0A6544647364BFCAC34A37751BE362C
7119EBAA92D4F22EFC355F0FEA1B877F20C91360A182D9CFF377612F21A9BA74
72925CF6AA8F487600CB5DCAAC13D143F7A5864B958FE1C5F03905A106B3A852
4617569FE5C5935C16918F0AB2DCBD1EE29972CD389A80897B1C3EB1A0503062
88D0B4122D313D0DB956239486A2278E514C0DFE9FD538E3D1F7816A3611A504
6E3052AFC231432555B5CC5E18C237E43BCDEEB350DA916B1E2BE1D16CBC1188
41E4ED1521DE860AB45205F5B3FA8A0D0886AB882A694DD664CEE2D979748067
DF9ADFAE75DFE839EC7047023F44E9B84BB557C31F56086C89ADC5947B51C5CE
CB79955D2C14E0695CEC21A85C9EDD20E7A5CDA4EA23EDE166FFF49BC3F3FE6F
C0DB29F4F4168DFFB799D3405D11A27B7B8C4389AB4B0FD9F3EC5547407C9A64
2EBB057271F3BC63F882ABB147387E04A56D219F716DFE81D39359DAA36282EE
7B1EE4628DFC6EE853DE286F4DF343E4773BC9FCE75946AD1EF858DC7CB8C0E9
C6BE15D276267B95011177AA7469F476DA93FA06C5085F0D9BD8E5B602F55215
8CE63B56809F6EA0B07B58E59DBDAC8019BEABFAB8B70F9B6B24B9F2B52D8028
486B93C7AB3C8DA0D757B08D178224D77F85F364B5CC3C3D7150122533C24435
D71ADBBFE866EAD18AA153C3AE5D373F1714B1B627B799B265D5A302F2406254
E8263B9677474FA586341CFB1AA8F38DA6D1E71520E0E1CA8DCF5ADA42FCBA0E
D693C25C465471DAD3753EB3AF6441355FCEAB6254EDA38EDF1405B670B4988B
BF7DBCEE0F3FF194C0C832A0089C7FF2566571902EB3B7A728948034019ECCF2
18A96C1A6F7F53DBAAFC70972E1109CD02A66A36E0EE064E3D180A2E906BC2CB
5F1A0CC05351123FD36CDCB2ECB1219BBAFB715762BAE8419FB4C114A198AE47
BB59FD00D9106B0D8CAD7723AA6213AB310BF572A6D1B2380C488F87FAA82124
70A504D81B9AB9949DD30A8FD8F64CA95E2EE982A6FBD95A9C0863EFC3F5AC56
F4B057542E25AFAF2F3FE79DB14DAE5A39C14B13BDE7046F05D2D31C0A36823D
C364060DB4E0E31C478B0B46A2887998B28F24BC26C775E8E422FE5F23D281BB
FA27B6907A18FDB3D411385E014F297F013CD4914B8AF9A681BD99DDA2E75496
C16E498B6FF324C0FC929CF3EA90E22CCBF9A86CEC90A5A70900903C48790D40
25E339F8A7ACA13BCDBD10CADECF1C303C79DCCFB7464618FF7036976B20F5D1
7512BE8ACF3EC5428C47AE870E4BB6255EE18A915AAD59F20357BDEA11DB72F6
ED91193B161D0A359E80D3B07ED07AD899CADDB3F85F51FFEFF09F4FA1AFBE76
51546D91402F9862B5FC678456404A37FED1F1F77D947B7ECCFCE2402E3E6AD4
A897EF9FB63A01E6F90336EAB37B98B8D14FB31240C4DB40369F75EA8DFBA93B
DECC857AE6DA16EDAAB4E2C0FBFF0293C0AAF406F95B7909806CB7944C542CC1
3D5F27E9BBB22BAC0CF96EF6FB23F304CA1D98797E793AAE0BEF630CD3ED2C33
A6895C0BEFB530C7C7D974B0B7EC4B1474B07041A32A2CD4E7C34BED079E83C8
465632828C8C98FBFEDF023E96152FD62161A5DE8C179BDDE6524891C3A5FB67
502C05B884A151C05113E4DE21286832B4D71A1BC7C2AF7EFEF9B9024F01003F
7300424F53DFCF6569167E33E7B2B6D45EF4042F545586901E870F2A997278E0
785894DD521275D865E491CDA9412F91F7407A7B7522EC6B606CF186D582DD97
2C560B31E94815ACB9D9C47F800907EF65D0E219BE3AEF1311EEE3CA7F8CFC17
AF02B1EED9DF5D2ED7ED7B72A899398776E6126E0661A14CF35A06A1FE895C7A
CCD96ABB6B52ABFE7702897152EDCDD9C72073F273A2136D166C5934CFACA17A
CE851965E554354FAEA597325E914CE46EE796CBDDBE2085C6568337659B9BEA
A8241A91FDA05AF2A2C82DEBECA7D5F9A4F997A5668F4C3E8452A895E91A0674
73FED96DBF7A52B3D1546B378D188341553FD4039F230345D4D084184686F83E
6933DF3A2121E7D87891D43880100919C4F2AA79095DB29C241102646DE3365E
7AAF744686933DA63F9453347FA24AB4F90D735DE3BD3059EDBB9B84A0351E4D
818A0E69B133C1B0393624EF49D8CDE0607A86D7A51635011D06421ECE4982A6
E069ABEFED94E0B4221B343D6D392053084F113F1AB54BFC21D3BA3CDDD85018
920ED5906966783F8481090B52B946F79180E3C9FC767DE95831B193737F1A09
6B83DEE05DA39CED4F77849560A3E3F116D943155B532274D529ACF46425303E
0DC5AE76E353293D1A74CD8D64AC7F49AD3F61B4078D6097D8F18DD64AEAC8F8
2E54BA786DB1A5A2BF348797016914FB7A7A67BA19A5203A130707734473ABCA
BC01947C06B4F66B8D3BB8E4085D99D272B05B8D5CC705E91644DB1EACFF3B94
DAED2909813121F0ACCB72A0FB53F1A579A5869567FB9BC3001803739A8B9561
AA5DA03C3A4C7E8197C3FC78ED0A500BEE02425BD81578D8021C9DD9C4208BDE
984CD19562D1FF2E4D93870B6C5212F5E9421FAC776AD75E9AD7E3BAF2B4493D
2BEEDFE57C688E9BCCEFAB806AC3234606234C2BDDA6B74BFAF8F7BCE3FACC38
DD8EF924370BBAFAB04C531276C445E8034BEDA3DB9DCDA797F007897557D467
06658418710D30E80D7CF094AE79594D5BDE7B8DC4C5D865A2974FB42DCBD46C
BB1F7436193EAAD4CEA5B280881DF4893B07C075EC22E6191683013A176F111E
49E85E832CD22E6C0CEDB0749D445A56FB5838C01C595EE7FE0A326A20DBD797
FC40EDF842D45EB51F2BB65063BB249DEFB6E683A7B6E729E56E422A2B78396A
B0364AFD8597F8D81F1A705CE078FEAF274C6CA62E6954C1103C30A8A9959F34
21A730D13361A2216E33B748CA6D6D9C5BDFDE66241BE5F59A1F791E1D531936
1C7723BA866AE01EC417FCFADE9E7E10E5CB7E704F1877C5D8515C405F275EF5
835B848759BD023FC3D28ABC0F5538E62D234EA995387F5A18FAEC29D3124B96
9B854899BDB00250A5A41863B47FFE6138D7A7E2FC165FE1848BA54CA7CC4A17
F54D043B5881BEA9CE997738107F4DC9BC75FDA79BA985B301BE75FA44F1681C
A7065AB4CB3A32830A6058D21D0D5C29D2F118506E1E6C1383C1F4442725C1A8
97E66E60DD163E384B6993E877E4A7A69B500258AF10F2FA61EA1F01DE101F1F
BC531552236FB40B53E3A579E440BFAA7BF6871C57088B3C645105D53078361B
F9F215340DF74839458362F00E36C577AEA285AC46696FEECA67502D7C143E28
7ABDB387F7605CB4338A6294FDFF0A4DF05FCC9F6BB486871FDADAF480995D35
324DEA5337FD9673D0416BAD3A3ABA18DF3377ADAF17F8E989EF354664E12C84
2424E029E3CF77074AFBDDC51579E49659140DADD4CDEC075D437B9E09AC1B1D
3E11315D0D650503BAD8DED3C44CDD4968129C6D2F7025ADE52F98859FDCFC04
820E2C57F585DA96CBC342F891C4B635956F5DA32412E78CA82C7C0C00F390EA
C371D536EF4695B6CA57321B4BD63CE9D0CBEE4623AF724518CA938F08683BA1
0EDD037D5C3FE2BC9CD49F901D667B7477BDD5F36C83334EEFACBBE957640D62
5BC31AD512EEECFEC5D1E4B54ABC0446CDA90244DDF146F36582434486947FD9
E00C58CB946F642E2FF1A57990729C0F4BB86A3EBE62C485528620DCC921B6F0
44322845A99E26C0F9F8E771F65657F80704D951AB585B22388E7E36A68E2380
38CC14714266A9C87565CFBFE7B34C33EB313E70DD053CBF8E11780F77B1599F
CC348AC52F49658E3794FA1AC64C262445BB5F0967CA8F7D43BE13EE0134ED6D
F0558A20487BEA2FF58602138611FA2A5E2FCD56FC8A6CB88827ACA1A9E5EB37
6EA8FBD382CE9E7C4BD23E1011476DD43ADAA7B8E7BE98428D5D8736D9E72078
89B1A7F1D86D759BBC27CBA563751020564C9B25C68186CB0B1C4C7D1F26024C
29FE0F7D2F5DAACAE3173C865CAE3092B63C7922F21ACC3CFC8CA53AFC3C5253
857E42030D4826D85D884AA3747B7A4C95966FDE971BA80F6E5353D19FD21D6B
FD0A44D5C08B62BE72FCC169B466DAE292D82C8CAAD2605A34C55ACCDDD98278
F22228396C34EF79D1C6DB84F0F04D7D461ECBAF33224311FA4CC6EF3134B337
BFA6A2708B8634A3DC61DF6C95AE4A7566999968A3727745CE098A62BF4E3AB5
672CC627C779AD7BCD74EEB223B1770649C2CEC4D91D676C67A93DEDEFF2D4BE
2EA46713C28573A8F379624C2C38CDFB9295373D918275E17D9442E3C8F78C24
FB366354355A1FE7DB4098070182E9BC228429BDFB78D96CD87A596659B14DAB
841D80997D764DEC9CC7B9F5F32E97B105EA505BD77F34F0B8867A795FA1E62F
83DD596348463CCE63E99AF4D9A1710864B6C7DC555EC34CE8862FD9ECA512FD
0103CE4B7064ACD328AA21CE547EA714CBFB38C05104CE94A693DCD7FCA7EA73
E1EC6E17723D5092244E49336B0C7009C393396E06854D9BEE5E8EA86B4C15D3
822CF620013A41712888ADEF2804FEB380BB2188E627623B0A2E1B36DE6E357F
911C7F03FED7F852F6209353F4A67EE82B2C75218AC4F7153A2575BE392EF94E
3EA3004D6D37C028621EC2AACAF34C727330FD4F460F8E24FE1F6D199B2494C2
FAEAF02E65184BBFB93A6CF765A92845A304A65AD994C2B31CC6F1D7B9D29D3F
93B9DE85225827D4CC503EE46C31D3C381D59C6279A9BC3F6246302BC835E163
4DEF1065CC45368442976A8ACD1DD88C50084F74AFC6E1B87B02EA5C6D6F64D0
B13EEC603AD880C94A2C7BC0355BD9BC921225B542DC1122555EC1E77D907146
6AD9F2EF1C4798811A35B4DDDE3612CA610FB2B46297F57F2016D6E08A6F32FD
909D9FB5B3818201648FD3241C59C9CC8B56A3214F791D6C9EC82CF99AA9868E
AA6410D784D82EEE04E9483CF38C1F6ECCD8EE5C304DAA5B9E8C142981B4C8C8
C86380EC4DB725A36736775D84C408834EA5E1F3379A82603335B4BF4FB5A10A
2B5ABCBEDD7EF7215E3051B80AEDF3DEEC117B7B9708D5D1E84D4F0CB6A32BAF
FFA8F7E50CD99BF28ED476D9B295A44B3F371A6F7C9D698285FAEFE7E5ACA7C3
F48650411AB7B0BD14AD9B03EEA129222BE57F8FEA5231FC9E4784E426AE2DC3
97F2C0F3E7B5C209964A2CD49F406E40BBD704E1D9F468464493DF475D167EDE
32F7306FD53780BBA8202D430E1E208CE375CE8487599092491B45FAC19530B6
639653DF5D853A82B2AE7998EAB74AC494D1AA667DCA0CCA997F7FA3B451C7F1
14AD55FD03B84B01C485C9DFD480060647E2F2EFB45D142595D49535B6A3A946
C635ED2CB1857A9B8E1B0842CA8CE511975D6DF9506D93B7557F9D99565033F5
49D3055F184EB66BC6448A4CB761AFEFC0DF2AA759A1C6B70F07E381200BFA7A
00EA629EE2DCF799CADC32F664CF8AFC6905A556A6018AD9F11B31144C001AD0
EFAEF546655238EBB316EEEF1E7762B6230C8AF7EF4ADA5F1533540C68316CF9
BE9B548A1D0CE72227D287936E45EDFA194B4744286F89E913D0256C2AC67E34
19BE6CBCE47A0A64E3B93CE0DABBD35853A9A22E6D1D130CEEA4F621844284F6
E6D2E8D99706ACF610621ED249A581E06BD6AF3146F58AF4E294CF640488B17A
80BED03498ADFDF01B1935328249AD9D808D4E406724C8F96C8C3D74916E4B58
7F9E5036F2F0DFEEE9C8B57860EB209E5D3F08FEC77E33356ABA5D2FCC4ACEA4
4C5BAD0A85B8DCB886F94D51A32B031775B8A304855CF8C442D3E33C688AC274
B4003FEAB2A4EB2CA2F60CE7A8EDD72F37D55A4BA4FC2466A633F08029C8EA0D
D5DA1F1E6EBE996626A1F5775D2F487873EF02A3817121EA6D11FD30ADC1A6B6
D621B1A7AEE1F42E34153C08E952CA3ACD77D979AC4CFA726AEBA0EA89F31607
29306E4F080CE29AD1F7AF9E4D14EB7405F4E2038F0C72655ECB439F36EDD7AD
8EF308F2B4FC667820E61ABFD5853EFD9A2FFDFA1B8952B004E8E5F1500CE64E
46A0E619D723879545E24B979DB7A66CEC480AF9D2EBAA660AA76761B22CE4D8
3DD0C4853F414DD105E8402AFA7A9CFCE049EFE4F4605FFD4625F45A5B8698FF
BBBAC80A2A4AF5D01E846A13BF6241784D731B56191A86BA0F98D879756410EE
5FB2D28CBE61068F1A1BD07C977506C61DF1ECDE0D4059BD6D38B7A59497EB27
66A7B9144A7711C1E14C6075EB6C89EC0FDA0ADC91D3BBB8346D4CE59261BAEF
736F7D096DC2576F2FB84DC7B959C52CC2B307A8828992F5F81140B724227DE5
43BD6F3D503F3C9D965F9D5DB331D6C96525BB043302CE675DC14910D198C4D9
F57045BCEC024AFFEC50470156E656C0A4D32FCB898ABECC299990D5240B571B
EC251CE187D5FA30968238CADDE17A029F2BFA9FB34890E1D1405EE5CA475350
CF0E8F153CC5CBAA9CDC53F9C6A4F18093DC539BE14907B0AC22A30F427D0612
93F07976EB29C2C671044AA55FB02F823B285156BDCF0211D3D97400FE03E37C
6624E2D1E0E5B1B674A6437BF9CEBC34D15E5DF5398DD70447A2BB03839019B0
6BF8B30FF8ACD11243B027FAD9428995E959E8877C931E49F863F978804CB3A5
7CCC6D1ED120AB6E560702D5F4F17DEA7A0D16D999DBF4C5AE790621DDB1EA6E
D1891A2DB20B0C808B1DD300CD55164CE4C1D7E603BA84311B1F2434A900FFBE
75EF5B362142110B7CBF47CB0C794150CD80D23067922C25E906446A94F50511
3F17918DCD399C09D0247C1E8D882B51B8E7C232FE2B96FB97DB3C7DD9D71BA1
ADFE0F54CD58D95B0C631FEF52CBB75BA647802779EDA24C795433F0692E2DB7
155438CBB18115723D370DBB23D5F6D04F0B7D9DAB99DBADB63BE8913A13D927
138AC23E39DF0A75F273EF18C3C52D25CE97133B4745F7F5E51607F96533B417
926EE7E571D8B89A85D9889A9D144AE9630C4F79290C6A1EE17105AB0688C609
9191A1A11479E27DEEA1444F3AEAC37CDD5B3D625DFE4CF4B584E206CE9AE227
6903D87287C8720D0DAFBA2E8F3308AC56574643B9372388E77C03E953BF18BA
66A98E49AE58B26B9DEE935C35646CF72B5F454D9A429FB7EB712C1120E74710
0DEDE147FA61AA135FC788C7BF988EB6DE1D1388CCC86A82188CE782CD385825
85F5965362DD09A5E34C8CA29571BB865E856EAF14A6ABF09B8EF0F4A8EA3C0B
49CD1AFBF6774E20B2FE3288554515BDC3D1048968A0F0FD99FF2651A9D83D24
A24EFD99693567B7222CCFE9F227B5BB9651406985B1C0F674ED12261D3CC843
1931DF944EF23FEEF91E61761DBDD78F7634C7FF3ED87CCA59DA9FCE7CC4F34A
90311E65E2692A85F0ED8C020C091AD2D5F42AECB984A6E7ECEF1E8572AB098A
E00EFB5043400353101CBC5542840C27397CF20460D40915B2F7980E7CEDD246
8472481CDF0C0459156AD2EE404AB21BC4948675227B3C40E10CA41397742633
97C47D99942E231E7EEA2E3077035DE23F89AD5989EEBAF798B72E5B5195F9FB
9E0062A3ED67A367669D0F2F8B6C3116D42097BA495C5D0272CFD96912058F03
86A653BAF8D824F3C05627944F56F6A2102658ED018742B634DA916152F93899
D625C67CAF164B8DB98C29E25284C7CAA036FF87D0E15CDCAE835ED2F1D6AA91
940D3E2B05A2FEB46984BC19BF6E34E5623D6EBB2402A445008B38619E6B8534
87B44A5326EBA49733A27ED7E573BC74AB93B42D643412F663FA5CD5CD95A74C
D62B0F2F6DC7495C21CC1D691E2D29331D9968FC0D479D829964196ED3E8CBE5
D699B8C0925EC8BBD08B4270A6D0E698C0EB0D939E55E20F3D10D6D777588AFB
D42FE91E9FAD1A0C6422AE85BDF2768EF528A49FE1202B31E516207059FB7752
99BFAE57D76B4780C64CE32B430CA788C83F264CD67157D4F9FD0EF0E02E5D57
0ED072B2196D71C905FAC094D131B589F52B113BC0E8D6E3E12DF15E9CC37EC8
D01E6510463AE4FFB43ED490A0EE6A8B2BE57EE4627F41E21B6B86F75FE172D9
B4CA99409E827CDB53E91118CF9EF4889F6C57C54712AD8FB67C5F7600851440
8528BA258CE090680646E6A6B2CBA5ED1F44D7CBAD26AB5A89DF0E28C3DC3AE9
AC7BF71B2FD5256883851DBEB32C01612431D235BFC8ECABC3DE478DE63035B4
AAB1A71F63406B31ED4E2BB8BCD55E9200DF739C81401F721566CCA13DB31693
B3E6708B406E06EB0F3A3BE4F9165D62AC570F0B04E48A1E1889A41A51A8A0D8
E0C84DCDBFF8029C546A25472C39361BAAD80A30BCAFB7173D87C01D656D807B
06D9ED52181AC47BB7BE0F0FD0C7DC12076BAE007557AC8B089C7EAA2A64670C
96E42B31EC9197BCAD7C56EAD3F5ACAE372BDE86E2AD1A59AD0ABFDFB6AC704A
29E97183903DD5710EB67119043FB1CD1B421E6A0291D5D693A63F591CD4D753
2FCEE39F599C5FEB2D78C0911BB369B6A51654CD0F512DAB592ECCD6B4A8F2C4
9BBAF7665C75A7FCEC407966746A3EE4C271AAB6A0BA72C889CB3833B58E55FE
343DEB70DBF9DA07CA2B7F3B10DD5F48D7C575D2DBADFE322C5A884EC410B496
B768BBCA54210094D924EBC497D22CB91937E758F79901E37B531D0DF57CAF59
53CB3456ABA92E35A5186FBCAE46A992F4DFB7B91683F6467A85EC3035225267
F8EE58791F6066A2197A28F7DDAA751E9C430FC4F71A516527F07482C5869CE0
8222BEC5BB50EF5B3F439FF184367D6A8AF65C141C47292B9F5E4752C5CCF2DB
607A7D1C3FA3A2D4FFFDA23C9730AFF7A817FF7B841789608BBE37DF8CD98FA5
DBA6D8998F7FF34006E620FCD4DB6BA9FC0B7F66A6D97D6F62FFA672A033E280
CB19DBDBB36A7FBA9C70E7BA2D53CB145D1A3174B51DFA996EFB31B8FC5D805F
1B647C25210ACF9C8F6D659BEEAC941E17B46F299B04F5AECBCB86F982EB7A4D
47095CBC4F4F4B9EA330744664ABD6BA286262F46B9D1DB3570D5426679F4018
F2682B9EBA9D1E59A9FB1350BD2573596BD9A8AF120BBEF259228A9713F5C639
53BFA4E8DFEA56B5F594885D21887F291EE5FBF1519420FA53761AD11C4988F8
64AEAC44F0699FD1BD99C05A76095CA4EFBDA5E5B54FA9065424B917EBA73D07
E8556CE9A0D2D6E5A4513AE1F16D81848119A2D25371C4B8577C9B8D405769EA
BCDA9F07BE9290CCCD3D2388FFCB28F8C1D7B26A946371ED10FDDFCCFE733D76
EE10524E8E53000675FE3BE5F1575B15C65763982038F2C3C438E1F6A8D71BE2
D1A7780027BE54FA47F1E9767D0EC476A75014FCB254C5B7E682CB93EABB8387
5D3D3806E240753C08B8BA2E4C7AD5B29F531981CBE9D3611250115C101E3F74
5465C1F8900105B3952AF9EBF4A7B99B1B2C54B5CEE6F38A6376C212BD2C730F
637BD5163F4FC94172A7A5B20077D8C312A2DDC6E1CEC581DDBDAA18587DA0E6
41558BA7BEF8B3EF23094159494C5D5DC4183E193BE1D580D5945571B5BEDED2
C4080C76BB516E7C3AD0ACB3DDAA93282B38EDC251190E2EF4CBAB23ABE89E01
785BFAAF4BF41A9C57CDDE0C8618423A178F733F5DFE2476B94C58854365522E
AF4AC573169C4B0005CBEBEE46EB11B33C9F3813230D6F009984ECE7FC316324
A3614E16DBAD027099C1A7653DA140745192BA3E7B48AE0F8C58DBABA532ADB1
64A22E2769C0DECAAA6A24DF4CB3B1879E246B0A15F0CE4FCB9F6F8E38653803
5A6B0B69206EEC29DB3687DC4BEEDC12E0499BDB5A0E68368F9EE20DF01DD0AF
9B2874C694BE3339F65BBC3256A0B7FCF08179FF198B6A1E2413CF8341BED40F
1C7C2191D0D8ADD871D3198F65BED2B9C692C6A5617088217890367B84EC2D68
9BD3ED785A05B3AAC665B45AEBF07076B1A9534C0422714A2AAFACB89354F288
86E699E7E2E24969BD7961E3666680A70E9F1985A5558B18663DF6F150EA0192
DBBCB1E5A844A065E4CBADE5F712C38CE4C4A866A1B1912E9DF0F08275A84540
1EB8CB4D55BD675DFEFBA4F673BFFDE849671106FBA7795067DFCDDFBB0F1451
08B0B80CD3573690B7F6A3E9B297D739EDC85A6FA7930C3E3E47C35E3DEC43C2
ABDF12D0768BFD9A8ADAD55BA9A4B843DE120BC28624AD3B350DEC7737C44DE6
2DA2B249CCF3A6E2C782A6A04EC199C587E3880CF73E756052261B7116881B15
BFD9F9D0C51289E32E988627A5F792281BBF7D0F2816FCCC8691ECE7BEF7D3E5
F3015F321D3C2CAA6C82F59F80D2AD826DE59030303AD8C513C7A02A7D960E1F
3D1C3A9A61F84DD1CA81BE922F5D69AFE12D572515F71E4999BABE857984131C
9072F0CB8C7AF478ECD5320CCC56785C5F4592772A326F14B95D5934E41DDFCD
1B4D816BFD6F819AB442B1A7AC11180D4A1A85ABB4913D41E1CF14E272FE4168
CEDBB0395CAB606754D54ACE95B580D490C7153748581485254A79ADC57E002F
44DB56F6CF3A8B9432759E0036C9B511794EF308F2EBF935356E57A7C58BB554
5C251112EE75E858E5FB2D3B86770F017BE10216ECA5F94866E5E5C607220550
97EFFF8630DE9DF4A423FD4C6419A234F26C092E6896C6D064FCE05BF7EA32A7
6EB477BF80A54BF18A1ACE89FDFC9C50BD3CFA9D49B13F0376CCFE5DB7CD5856
D13EA1122CCFA3916BABE98459B92B7D1BDF0BA583632AD34F652BED6FBF5D67
96CC45C98C01D9C4EF0D0298276D371A29558BF9B8F906ACCEA4BE01634C70C0
20470B6D9CB1C192D684CF66B7FFD3AC6AF4F09C0B788B98D2DD9783AE348124
998B8017A2DC4B849ACC6A2CE59C9E87A1EF8BB18516008DF24937C9E08AFDC7
236BD325DCD8A18A13E9D8C13891E6DDB18A3FCD4A23EE5ED551AF5D7639C562
18E40132BB9EBD012916A2EA90F6A715CCEDD256D3488B4E4272C25054E77A33
D04ECBEB139AC7AB8B60AD9B6721736170458755BFD9A175BF930FAB8565BA52
3EB97A4EBC06FBCE6807EE738C4AF5232A0D05066A5221E7336DA76BD8DAA114
F8976B604656A87BCB5A5E7372FCF3CB7BF8A5B711E8B341F6AF65F675606EDF
AB2DA38002CFE21048EB8352869EEA45D3BE9A0D30B32B084237C517DF577180
5EE125CAFAD5D5C4E42F206EC0B0781C16F3671DB3C7166BACA18FBFF03600BE
ECDB4263D3E38C9093C2A5C4A37ED850A31E1EB38BEE7B0B07848EA0606BFDF6
5142B55170B60D4405FD00D0122F4A566404D962298E7307C1C8D3F10778CED5
A6523984849E3A4E72A9FE923965E569293DAAA9FDFE223F7B54355A3D8D0BED
7AF2BFADE4AC805A11D07BC29801B6C889A142D07DDEE251975FB35977600174
E1E9E376432EAF8A52D10ED749564264E8C6AFD89D551475A657A099C61DA909
2CC6D59F7F0786BB6E24FBC955385C6269A28C410BB7A8FBB7AF50A2D12678F5
606C2F504EB784F08FF44BBAE8F874CC228308B9979866EC18C56E9382F92528
6889B9EB217EF55C35AE1D2FC9550EC6ED80CD69C904C68C61B69B0FEE321067
85E95ECED98832DA726C921A47BEDD992AF77B6512F7076C657580A36A750D26
81775F907EC11628D8B905C90ACD6CEED5884FC42413044E0468C6D063F6B59F
22B412238F143099E0E6542F4C15932FABEFFAC85B7F4C526CF24C420F73ABF9
11C8D895B906A94699C225D1379CE8EB31C467A334F02C15E7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2E2A68EF8D1C1218D4CAD6021093125A73710FE
E11B6B3B23CD2AD46270F92FB292F30D852DDE60E6818C162254247893637369
C7729F5A4CBAD8D78B07309AEE44069BD87AA928122D1FFF56B8FD5782BA085B
A2213F8816F01183C3CA298E658EE9C13C6350F14A9209DE8A4E08DA6FE245BF
568355677A9DD49EB4DD3686B5BB030C72397BE2798DC546A5040B8F17C5128A
779AABF374DA038B94733191AAF942B6BA35E22B7DEEE932B202E981784A16F8
F33E50BB66F44593DF8DB37452837893CBA42634629F0D64BA7581CF5E966FB5
3D24198F715A9CCAFCF4AD13465DF0D603C48302D7E683BF122B339AEFC509BD
A8400A5A1F19EC6C599E20238CEDDCA78E8314EDC6B44B38419ACFED6D092481
50786DE3383AB03CD116D52E4190353903E41392A1D01A4EE8A4BC53F31E205F
6E13FF42D9E05C483027FFFB98237D8A88F0E9AF05FCF284185DF4F84430F2E5
809E05D69ECAFB6E970CF47EE63D152C91D08CB1F2B597128D999D41E5475852
43A37E9C40B98C34E4C548CB681B4F0CFE0C808A6B7AD79F5426E165D8E117FB
75434FD3280C18757124D4823CFA87DE5DDA61E2B4C57392779188B8B1B8C05D
0A67AF2BCF74B60574111AD8538E5C868CD9A507E82C8FB885FF2A2FB18CDC67
08D9817386472C80FA1D0525852CA7D9F733FBD0822E7A0BF87BEB994EF5BBC6
F11E9AC04682962D485C410574219353816B83F3F1233322EA4807BE9511D8F2
D78AE5FDEE28D416CA830483D8BEB1F5338AFF9EE7A2C46A5A5618FD4CC4B79A
65A3B693B5C418668CFE7FBA284E1BD6ADA158CE5E34B9080416C4F4938658C7
BE3FAC870A28CE055D4D73CA3186CA198CBACA20DF47D2DD3E4F67E65BE2599E
DCD10D0407325DFB284532BAC0CA783402E666543CFB72EFA692DC73480762C5
FB6D70BFFA48734BC752DE3EED3C9B1CF54831588D2E79165C79B067492DA642
C1EF81D9CD3C67631F5ED2AFF6FF3081763DB6547047D43E14A7651140995EBE
154C2A4D81F82F434ED897A1C30FB6A326B4227E74CA9D00012D40CFA38CE640
7BE45B8EBB812C8E77082887B0E0A29E32E05F62318B18F5FF28B9A094473FDF
0C82C2930188C769172BA993B9773098D7B1DE57557F019DF489FBFD9AA018A8
540F2A21850A92EA39B643317D8E25ADD5FD1B8E8FE461B8A93035C200C355FE
14B475F24AB6974E13D88C67515161A40FF157E88C15584BC7A67699D8962AD9
A6CE80D1507A361BF7F77457262FDE6AAE4A8B7760829319C95757E2584B5189
BAEDCD9E573A2B023352069A4FCA1AFC6943CA70287B8D009485AFF1238B359A
02D9A7226FBE0F09E9FA8EE614B49E91FA1C9AB928680D1AD07D3EF225EBD008
5A43DA16F54CF8BA929C5979C11C4DCB6E2A143EC0C99BB754DCDF850B62137C
9745B86DE2C28C4AD035FFA966F401599445B8D890BAB76E5248A3CAF310D961
6FE0C6CE2CEEDBE99A3FD4420C00454E745574255A02CD28BA9E87A2A6A1A9E5
EB376EA8FBD382CE9E7C4BD057364126ADB5ABB29BAB52EB8E57C506CC8CF8D3
A9CB8301D6902DCF90282DEB09D1FD6C79D15D867E142AD6E699337FC0E05251
7CEB71717BC4E232465908E643C31012CDF2078E772217A856F22CF4257C9DCF
EE98A7EFDA898E95F774F783BAC7A203A4A29D079C1327AD276C7EB73FB49851
973828B8BEF905E8FA521F1678786E4543ADE229DACC3FF6DDB82D691CC1E336
BD6FC65597DB9B12C6005B92141397B973A5D7803790D72A65F33BA7437E37FB
588CB75B779B5361C9DE43C7C07939901D2528B53F0CFC302D910C0BD54B04B6
A2A528CF622F023F409A2BB8C16C88585D746C0BD2F8664253B09D5DD8957E95
5D0B861AE407B995E19933C0809CAC9CB99BE834808F467090058FDBAC1AB369
B615D706D85DAB27885183D3B700ECDFEE43E42D956605142993345FDFAA7485
F802CD62FD54057EA80AF980B1CF6DFF8AD9925D383FD83D481291F19C714DD1
A5921F726C0529197AA0700E5F952E2D240FCF688238CF41AB2D48777BA66A24
C1190CB6CDC0F70BBE951E4A202AB40AA3EF2562EDDBD183BF89549B61C54759
407FC63C4E17CA02396AE809F8A6677FCA47B95A76EF8372A74DF7FD8C17AE5C
2624FFB2B387FDC96D5431816E2F77FEDF4EF989583F3392948BBDF952EF06E6
238C39A203A965B9C7C841D52370A2F51B663AA366AC76A7F3EE96FEBB2B6B25
047497982E13ABE91B691B1F1FEE82499BB9DB269FBAD055EE80EFFE49485038
FF95FB8515B293590AEB95C4DB3D539A8AEDEC98663B091C35DEADC83B4AAD95
EE3BA71F996EB0F7521107B0E83F02B57E7737796F2C904833AA89564AEAA77A
D38D19C6436D455796196B265E2CC1141CA11E072FF92CEF1B7E9D687F5B97CF
5427105BAAE425E5412FC4A75204A355485B87926416F5CD8B549A8D80544483
24E0F4B0AFAF713CB69985E9F6DFE0C9A47FED15459D627A9E65A1323BA915C1
0F725E5D1EEBC4B0A7F05764C5DA4B9D780DB1CA89485C5F41E675B238AEFC6C
E2A1DC7096AC20AE17CC7621150E779D8EA49B404A91417D97B63C87A0348C46
BFE51D8B672EC961071AD7E249F79C7CE47DAEE2776466C2D0C37F234C195A50
ADCBBD436DA87E562B87FF8A0253C03376BD946A143E1C0EE1D6FF7E34703E95
A6D0AF69653E24F02208A2CFF19D4E3890D6563EB1AD03A71284830F59977AD8
D57133BE72415171834325532EB6D05C999DD62A7A466DE354958EFF27F4EF22
BE7104F3A7381C5F099890DE67028B96B1B0660663FAE2E26DC36BCF2EC97F66
14E57AB5121FC4DF64BF191604202B035008B9F0EA046A4FC59801746970F546
C902A05B72A03C060780333AB3C831540C68316CF9BE9B548A1D0CE72227D511
7A907D701BC976E21D3A6E4C5685DB21A859E896DB6A86DFD3B60F1A0B0AACA7
779FBB187308CBD2387B2EE0DD970AC391E5BDC0B003661EF1F2729556E93802
297CF692F3A58BCF40E25FDDB886CC3EDBF9CDE6C8611EE76589BD8E8BD13DE2
B96A0B40ADFFE48AEE29B3BA431C40AFE03E14C9CDD86084BA45B81E2874BBCC
B91B354102F98EDBFCB7EA60E4785892F1E295777759EA2EF4D2BB60453CB608
761536F52AB3DA27689F765594DEC57340D55247BF91AE735D50B621E100BE24
568875AD119C33FCE5BF754AF181C1486C3405EDF63E4008E87AF1466ED798C0
1DB574902B83396DEAFC24FFCBE7693EA10DAA05E023AF9873FC7031B459B194
D536AAD6FABD7F73EEE63BB1BCEFB273461C6511F9FF2CD09DBFE40ADB929E04
9CB3C47446E3CB9C5575C3DF386E7DB94CE98D47564B231554BB83BF3EE7A050
036B5CFA2D3080BEE08DD91C16E50698C63E30CFF63B3C0F19B553EFCE72F9F6
9BBD6D5EEEF25C0B569DDCFC51C449739CB896768A229653632189B63A7BD801
FDF52272D3A8CC1A09D2652D37E33B5A3A510C48FA7026DE9F1C7DA38351F037
697D046AF557638E26E8961AA07B54B45D9784CB2CC6D61ABCE56C8155649A73
6AE27D6B85B8DC6BC3DA163F34AF8FC1D75FBA7F4BC7877253324B87B4E813DD
BB3CB33249FBE2CF47B45BF278D0F4D5079219AA89F300590F66F8B14C146845
BAAFEFBFE4CF36EC3AE05843CE2988CB43CFAF1B243B7AD72947040CD32DA373
A72D8F1326783358C77393F195D2981591A75E1E7718EED131992D83DA073E05
B48D38BA8CF7EBFDA5F8F5FAF4D1CCC1403D324F32D1184E97804AF7B3840E67
7A6914390FBF6311C5FE4243E408BB9D662DF9AC5861C134080D23859E738619
700286BB68AABE1491F5BF10AADB677E461AFE4AEE72B23A69050F30C0BC06D9
A288E7800AC7D469562C77C69E5A25A667F87EA81F8A8E32342EDE163E6BCD63
BDD9393764DA6F861012E378E742872E6AA785CCBC4E53FEA589276A74245846
A3C7C30A67759A78529F835ED70B702152DC52D90BBA1E0291DE144D0F80F797
71F5DDB909BB5E752D48BCC68DFF3DBADD0648832847754A73C74D0711231372
05D7504F626A4AEAD9F744156876340C4A0922B75E7EF41A4909F4887D83D377
02FCA395752A982E8E410DE1545C75EE7FF473140370CC7E73AF134AEF6870EB
6EDC0EE5341161ACD1D7DED7C03044A16804D5F390AF8A14F46FED6BE89D57AA
8C81BFB345F7957D4BE9CE802668949735F1ED8CB7E5CE83ADDABB3BB5D9F6BD
2840B1576448969F197322AA737849820432BB667821A435384B8D0CCA292030
49F655A5A71E6D1B539DECB48D929182800610CED13E71BB2C0D0068D230FC3F
11D35784FB3E6A1981DBC69BAE53EB3FA5D85CB500D28E7201A7E498C72B59FC
8B724D77D848D197E9D4D629DEC88493BEA6BEA39EEBE082290CCCDF378F9BA1
9DE5EB5E4E06836D2850FA9BA638D528A85A338691E9EF459F409DCC00287410
BA97121E180BCB0A7807D20DCBC8E73B236704943549541DE22323F49BEC0C18
36DF8B985223C59D2CE7BCA4A9F1CB0852AC21D031766ACB997174BE2B25AF4A
8BF80684D3F5BB34389E8677FC0739B52067CB19E72026C3B53E75B02B5EB849
37D6A0BB1D971A3E66D53A8B906FCD39BD91434AB3944AD0C12130E00F6F434E
2F4F6E2244172B83B1B0B5ECBD5080F51986C6351A1E92346D82B1F61C1A7482
8618B8673EBAA63BFDD371C91972C741F526E505B9A8DE55BCC9E99C2E7C903A
E04590716398996282BC6A32257CBC217B8FADECB9C16C7DA33EB67B99DF78A5
42FA060B061338116E7EC58FF170B9196812B860BD9298F23203678EEF852D79
40E850451C550EE6B044AD5AF93DBBDC02CC4206DA8FCA17AA4A6DC1D120272E
0D026B7E87234F09C3FC8AE2EA6B874908889C79457C0E98140016CBD9BD0487
9C7498BCB14F225001812697DA499158282486B1E158A0214124A76F92D17E41
9842CB112A906FF42C0BFCEE123AFF7027BB9109CEEFD2232849FAB1495E0FE1
0B080814407B86993F273B04A19E77E1BD3F367CCEAEBF0F006739FFA7271DF3
2E0AEA1602BE2A1AB9E9C384AD82DEE1B80A307B424382B822ABC119AF3264D7
D2083BBB573F6915127017443FDB68BD776EEE1DF13F82F4AB8654DFC013A368
FCDB34504CF44531A7E25915B3AB5B6A028F139D9C6EACA1844FD3416099D514
2C53B1064BCE1890FCDEAFC0CDBBCAE98A99E20E1CFC04C426F2A3B2C1D801A8
EA2A6F546025251CACD0CD2635C1317CD71B2C89D4B906997D56E568C686F47C
CBB4F9E5A39F95A9E825F55130DE6B96C751F0149D51B7B8D79EB49381D50846
3F9DC9A09ED7A9D4BD5E272DE64E039C47F24DF2217B9861E681D9A7E3CE2D83
AEC17C84EE43E34976DC33831D413CD60E725305D05738910DA4C1F1CDEAF6FD
49C4D5FA64F0903F307B37C7E69DD5C4785CB4317E563103514C6CA5940C6CF1
64F65D599CB7FC9AE91972F446B1ACCC064A7C3522BAA4B05CEC4CC115646EAC
834805A90EE7DA0F684EC2362326BDDAE0294BC4499574B6AAF302D1375E994E
2E05E600E4752D85DABB7369C5DA9EF43DE8F3300A8A88034D4DDC17851C8867
439342CD6306FC6E60E9AAA64CA5048460E12E194490A4C1383624C9DEB76C26
5EE87BF0C78BD17C233E42A99087B5660C77E21C56B2623C583742E7542557EA
F6CC11E2F720780794868BCD1A59DF76849AAAAC75F367EB66160A8FA3A21F26
24A13FF4989B5C5C56000A41BDDF867CED14C409BDF5032921E636E9F3805923
5EA05A5BD7228BCB34266037AACECB9C080BE7E7378454206904409E9FF99BC9
B8B864624AC24E90D56B0E910975EA6AD0CBA4497E526F09EC7563C1EBD95E63
DA3C2D8C666123A85D6A7D6CF1381B1DD5E631CEDD53878F409795AC6119CCA9
A7F95C1D675D696AC540EA8BD8A7B9CA98D0A65005A09103CAF0C905C5D57B7A
8C9A1009A55A9C44B9681F1E5D37F7388F60DCD565D40CF65641730AED34573F
83DFDA9A6A7A1BC4BF5C1BBC15746C93C0BCD52F34F7043B31D6AA02846C6554
74D9299A3E4EFE5B16E4A9211A529A61AAF8CBB8B8EE5F0FD59D0CECC1BBAAE1
498BD007818A0CC23A801345599084699DB69609A7338FB728B56B22AB4FA82E
2EB293D76177288ADCF49265B094B6F0DEFE6F9B938EC8CBF0E18E1FD4B60842
19294F30E1052932B7EDEA54B8440ABF0C5DD39E0489180EA5E8298B6E3B85EB
914C05E45BF943280E532A934832474DFE6A531C9521877C14DF02D25CF43082
AB0165E0FC4D18A44E236548BF21151D817BF93004898A8F9FCC4258DA4F2882
D0AA9A795BEB169C5CB2A058018F58FD144D01E56DC800AAADBFC5051DA96FBA
9B557C6B569D71D35EC86E0EAD7619D5F2D951739BB8D026A339B29752E4B159
56A171AD001BCAACD3EF6ED9601739845B78E019F532833D83FCB77D069604DC
C8E810CC50CD74170F623398DD8FA002978C084447969478504A44F08F4E1A5A
16765A2EDB99C4EA62A0B19CE442357B2D17292A494759642B45FF3797354D57
734B696DD9032D2CBB6BD0B21212E70CF66FB12CEBA294E01F2766DFB49E029F
B45776265CA8CE7B00A9DC725ADA62706D4D16844FBFAAFDD30AF025F287A8D4
ABF3A9F87E7DB91DE5F4711537140F9DA77BDA7ED33B48788CCC4B1831C45D42
DD70875A51004F52425CE9D1DBED5374F78173615C9007524460855284A7E474
A7881D6854DA34A5D0DD0BAB0A7FD5DCB1E11D974C8BD85E174A9E2447A1B8F2
6DA0B71A803034812BEF303458094A2C3B8B51CDC1874610A1EFE08709B01693
605FBB6E0BFB7367DD9F70ABBD3F38040D9A5EDFBBE7B8EF011768F45D73FBEF
BAABBB5653131C242B346868826A51845C461FB87ED755555037F147ACA225E4
FCB1BF17BA63096272B30D4982435ABFEAB34BFD0527FEC19145E12C4E871B23
C2AFC869554CE7D5B2AAAB4D558B0F46BE445E85083042A4169A021DE4FEC39C
4746C195546E4B839265B67C42D294AB6E397B311E00286522FE8ECDECECEA70
62B322BAD5A25153FD322F816ED010912C5358431A5D3C7BA4F6FEB7A81C329F
A299DD94B314F061BD604485BD7E076B7D2EF9D135FFDFB4D1B28A38936BAF35
367849ED049CDF2CD4997426EFB07E74977B11D941A92AC57D9D74881696F75A
6DFF3BBD22D3D13C1BE61AB66037037E793A476F0ADE432ABC8F6B371F184F53
A25939ED58A375C6B24AB76AF819D2B8CDFA60A7A8B975C1C252686167FA807C
0B8E2742E42C132FA6E083BDDB9F2D30EBB7A566B441D4D0EFEC7D6505E477B1
89F7AEDA5044E0D7B7F1AFA9B3A1AA08C1AE91FEB579BA6B27F01737DEB70C29
F8CE384989928D8578F3BB326CB7CAD2C19F501E57B2A33BFE7C3239DA92FB22
F192D30CE765954E4749A8CCC50A0F32987C3D995200E9818A579D618FFFCFC4
E6EFA07A888E31D46F33594DCB313ABD23B724B353CB584417B13468B7728F19
CB811526561FED2DC828B6E0B9EB9C83FE340EBE8F03A388E070002EA5001C5F
10CD81BDE0D75B0C7FFB0CC44A5013815FF2EC95926E01FF028E5C84FB6DA629
262F120411CCB229C4467E613CCA9F894D571AAC1E38D5A5640E7765E044A8A3
1354D347A256900B70B8DA22B25DFF8C87C5EDFD5C043A6A93E254921B8B0F71
A9AD0E601FF5BC6A153AC5E328654F06E81526381C8A8D2D8CFBFB16FBEDE6ED
C0087B978FDE27F039A3DA6DD531736D4FD0CF9C8B8FD3CA45F85F9D3472B51A
20A32185131F138BE2AB5D934247F2DEB90604261804E3A18A4F1222F898D5F9
FD416ADC59E6FB20430DDDB5EF76C8A9A44C9B0454826E032BDBEEF31D6CEED8
F162138539AB70F8A83861D51618F600D685E658D41284643A99F3B1C3BEC3FC
3503C9F4D36F5638FAE2744A1C2F026ED939FBB41B2CB3007B84C341D4428FCA
D2145288EBFA21BBC8589BD78E7731183FAAA37E13B1B3B900A38EA4405EC8D7
7C109EA7FC04160F972CEB7901F4F6020D4FFA4EA9326276924D0A6D9AC71644
A62760CD37ED5A6A036359DFDD4AA434BC2E400716B64B0C83A0646A4031ED8B
0AB8F6432B57E55D5001B8E3306F74A263C301F38F86A0CEA2DE8FB4645ECC5F
4E47A40D070F67AFB364021E5DC1E5F9C8333F9ED70BFC8D272A2AB6ED31CA68
95FD77BD5CDA5D7E7A765BC3B3004013C1C4FB9D85E935E28411FB05AB8E4A07
1D85D21F34331E3C740569DBE8D96368CF5637BBAE7B1AB5F56C76A9A57DA79A
BB8F9D8C023B76F62CD37A955F8005C5F64597929BD1F886EB962A98CC5FC7B2
40A9D9F08DF11783361CA1FC2042285A4330E53A3D6AEF2574ACB04FA93D107C
57FE605E89A232B2533A20302F9195CF3B2D50C784E00210DCE05E330D41CED8
74A9A6E65615E8F2F5A518F7E8273BC69265B89025963133F6809EBBEBFA71BA
3EACFE68C1D545C7FF123FE5CEF55BBAD91540BB13E1584C972971E04BA0A7F6
AC5D26AE4E3F0F9FA3E2038D54E3FECF5AFD35B66A64B104D2FD8D558E8BB987
AC46C57F91685148B5A11B07D2B330A2B20F4C03FBBBE1C4B0B00C0CD028FB59
1EB0607BFA31BA20E1E9414264C068D73209781FBE501F96EF6B96BDB5DF0FF0
D9BE1016AA9C2C134045C1F2905FE1E07322904D61A68A9FF992607FF78C6F63
9F51617722537E86BB09C3EDD6C2784D902D69426F9734B7B487C174EA472049
62BC68AB942DF6C980CBA6C7B0599EA10799477D1E4D9ED3FE21E1686B48FEA3
97E6FC8724E306E7EBF4CE82ED6318CD3342AFA8C2997EFC9CBBD4F20184E160
59AD645F671114B759ABCC59666D68E6433B41086F2AB69CC4A85CE0EA768123
90EF7DBEA50DFACCBF9A817424D7882EB6EB0DF241E2492BC07C0E77D7539C57
872D81DF6F3AB7550D5216A8FE090E1DDFF4464AC49E4B8E3821635D8F5B817B
E0A9FF49784C641DFB6960AECFE09A240C75229DCCEFD0207CFAAB179C83E83A
DA5E42F92617DA74F2CE02AF56F307042C8E63599D8F554D3E7192D886B0533C
78443D498455FED52EAD7E0CBB9E031AC71EC747D35D907DAE068C755A7D1DCA
5D48CEC1EF80EFFE49485038FF95FB8515B2935BE15AD1EA958BB8AC0EB9574F
C830F541576CE7209D5CAF060C7937524789E68361DDC8429B2985ECEFF48782
8B995818043B706B2FC114CF11E3F7FC97F44E6642DD04C9687FB453B0825C3E
050933B2DE99DD2C1D0BAE98ED8F9E91F80124F9E8D0EE2F7071AD3828A5FEB5
EABEC1B223A217A89F4D2AC1DDA6BBF886439B13C0CC247210E75077857E8D7A
6C56474150841431FD101E6840F9331A9127806AEB347131EED784AF774C650A
EDFDB8DBB249EEE100A012CE9760134940609C48FA3B409523984BB1683934B1
4B28726C5F214187453EF0544B2885995EE94C0C521FB74265D94CE16FDD7E2D
B73A38FCBF62B9CB5097E8399A88408CA41A743EFAC602A80BF9C4885A3EDD1B
17A8E6A8A475CB09DA720658AD5BB99EE5B4C8D47166AC6CA45AD99C6F569B18
40457B886316F6A50947BFA033F8F4DA39D7A73C7B544FCB81284189DF52B928
43A95501EC63C67ABCFF90434B97E9CAF9A950984B6BB390F2D406308EDC464B
9EE1F9EECBFAEB6FE80F61F0D0044C4AC6EB75616404C07814F63BEF9E8D5D67
7701882F91D1E51BCDE1D62CFF00EAFB42C4D3C5093E0886CDF5154EC9AE56E0
01003B1E8D1E0E6288876C2DD4E6EA862C1D6A6DB89B8B6E60BEB193B07086E5
B1636744888B6424BE19A79D2898CBF02F7CB8103A38861C324354EF7FE3F384
137F575F881B786322E613E91F9FC7B77054688BADB5B39B81D75463E5B38A08
0F6147419FC2F01B7D76EECDEF4CFCFE119FD466780F56F58BC36AA47F6B6704
310B2698455ADF2BB1DFB01D38512C719A499C1047C67EBF737546E24AE249AB
4C865B2AF89C0958EC1071D74037073029CB2787201656122C7E979A7D84ED67
A459476943E00696C419849EB2BEE2894F57603B77A67E7B99F6CE267D1438F6
BBCD88FAA162481CA06AF9E66E6090A1BB1D4A5F933C1BAD394692F3CC573BAB
FD012A0B89374380B9DBDE997B7BF088AC44ED204930E1F62DED1E0A30EF47DD
208506F2106101F5F27108D85BAA9BA946EC8C2D88FD550AF4B902B396867C92
954D18A7076E6F3C279DF279EA92A7A00FDA3ECCD2428906B46FE7EBC14D2837
DC74616CB73EFD7489D506DA25F0B657C203B97C8D8F7E27CBD0B498B1FC0B22
385B47D7A7F18BAEBAE13EBD5CABAD700A47C3C77221B2356E68E695C6F0C85D
4C8550EE32F1DF4C752E6526465AD559EBBF0C5793831A9D9AEB53706C8EE078
35D4A69FE06471A7CE16C1E07D762F306D1B4BA7FD5A42D03689844A68EC455E
A8D0B88AC129EEFFA6274C02AB475302F6D555E6B5FE1945FBDC9DA38EEDC5A5
E75AD296256090004F41A1FFE47789D161B9C12A49D3777D170AAA239BF1F251
5EB8C5711049650C3BF6DDAF8534735DC4C377632AD6022947957AA9A4535BD1
1FF1ACE8A844529B072994A288A43F2835BF44B5C8826C5546F42C884ADDA14B
8F83E5DBBE98D0B5039448352F8578A459E9A60023F7355DBF8B24815C2EB9C2
A672B6F93B3ADFFBB5D20E9DA6FA4E56A2FDE09EE530BA1D9FE09883E39712D0
277D96737FFB80F9336063145860098729CAFFAB2226EF3949EADF527BC700E4
1920BEEBCE9EBC2D43887D30312FB91C70E8CC63F5C0F21EE9C4E605B8BD2FD9
B38D54BA6DA957B55403700E50900DF688537BF0D520952567CD69F1F7A27719
A12561031ED4321A5A3C6F7AEB53795BAB5B1C5A25CF3944DA2D3CB1E792810F
C48DFF74875D824B2B25C3E04E4B3197D00A69807F316308165CAA5DC0FD0FED
C37932A794BC8B59C36EBB32889A3BF37174B68373FBD58B36C7D82E54B6610D
97C23509D6E4D7E801AC7B02C1EF074F94A6A6374BE2C44E02384CF498913DBF
578B750833AB6654D76965628B62AA6FD06C73BE8E8B83CAFBB65DD5BEB0AE4B
7C1CB190F60B4F3A5889CA429749C9D9D133794829DF33C55CEE453C885BBF41
9E736187E9AA2442043290EBC7271938CC413D4C642F210E02A3AE9284B599C6
3F29A04214BAB03F98BDCD51B172170B2BAFACBA7B4524C4177ADA26A92A4406
1B4A18489BF0DC36E5975BE6D0B1F65AF4CE77A1CDCFE98507646385CB4CFAA1
48BB6C8D2F3A198E55B6901D5C51A54E525BA032A179D5C85EF631857C9FCB02
A3A4A604F95BFE06B7712A1C86D27B7688FF0EEF8FB9FF5A304D5E1CC79A2C66
8EC0F2711371F3C8B47A642993047E87BEC24145664924E4A439F51883A25161
130C45C00FA6B8618F076AC1D2E04AE492C9609E21115B51A6A27E8E56F30D62
06B504D7A2599562C5000DD15A8B64AE46D4066823D7AED054EEEAD0080D2310
2D3375A4F6495F235BD056D0A09514DF11992B3A39BC54A958BD373876E61867
DFAADED4D67583CF1842C759229D7E3494DC72D17039BA8EA622DB6903CBA31B
D5D3BC7B4010E48C122628301B463A5911BE3EDC01EBC21661551F3335ED4B81
58DA5408ACAB6A001374FE99A300E041D44431A4552F5D4526C2E02C8B69D84C
9E5722C4EC663F69406E3702D4145B2AF841D9A1AD1BB5FC78AB208A189E97CA
93CBF968192304A2D4EA98CB943F1B58E6F7DF8F113B6B6B5B9153690C89E91E
CFF9B57EC4711707B4B66451D94FDCFC3D8AAB4A2B8CE67BCB7F2BC09637A6D6
65E4DFAC62D4E943C059C447175D3BA80CCDD4816C6FB88D8E795CAA64F8F5EB
DAA4FD05AF278D32B64693855ED0F3BE11A407B503EC5CF8ECA2B2867975532E
6ACF671DE0A0DD0FD3856029C946F97D82B3E4B62D54BB5C196B3AD243670AF0
75D9C62CBB4FF7ABFEAAE705C0FBF6DA87113FB5EEEAC430924157D4567FF8EF
A8AC8FCA1104FB5BA19DF976BF06C049A06A63E61EBBC2F47385CC339F73A23D
98F1A4DBD8E6BF4E2FFD32E5B86FB5A5E388A2C04E1AFDF8B65BE4A88E00BF9A
6ED9CE67C618E342E981655706E6ED01E75F058419CFACC305F19A8FAEDCCCF1
D604E058F25DDD14ADBE763024CB17814FC86ED4C3ED0E24B9304C26655E4C19
DFF6C2AE8698A561F1E0847C93F28EB4D34EFA3F376C486AA54A7D53A673443C
80A0A35F97881B63AC4E78DAEAFCF6CFB7C23F09DEAF3C99BA6831E2C5647894
F53C4BD665D39AE86746F2F708A7F73C5F2795636ABE466E454D0283F75C864A
8B5CA2C8BCF530DEB7ABBC113019405B9CB4C575713EB5E7DF99222413CF9E10
59BA3B8F6B7973B8301B35C2BB4FF4D7498A3EC63959CBADDE0448609DC3DE84
6AC75EE6B685E5BD1DF6D0C8969C448853E0E41CE5C9F3434DD575C7BCE5D714
00ABDD7D2B0A2ED54AB721C61C16063B99D7C3D47CF99A232A35676CF513C101
56796D6DBB8AFC002F3C34089EC1F172C7A6D569918DEED51E3181C607DDC246
B38BD2F7CF3619A8D63E49B914FBC9D694318AC24FD7C74BDF954BE6E2D03035
C8AD1C8618CAC21ED7BD158F539ADED78B89EFEFDE0ECD1927BD85A77BD82534
F72E40DE350E4DB055DC86637A1257074B7C460252763E68274D6C03B7C24E99
2921D016CC773C94450381D6145E33564330FD9DE85F74DE1237100B8AED6A63
BF95871AD9CD659EBA2CF1ABA5A5C7792D887270F591C7C3FAD302ACA62F301E
C9B98DCEF0D56AF5D4660BCDD4369882D4E58809224176EC2C12D5FC777091BD
4D274FD42F11693BDF0910A04F5F90E3593CD86F5101BE5616880128C5AEBB8A
63CDBFD347616D10A18BECA3A7C5369311E96E941651E32019E06718EA3286BB
B2365138869D666EC720629079678B8B63385E4FC5A1C471B6B54388680A02D5
CFA9011C9CB28917D4D32B584850A35893F485242DB74C0F823586C5ADDE5A39
38F83B8E7DD846643CC18D86E3EF860853E3AC56F3AA9371C4936FCC04608F55
5AD2C50C8B4D0F436249F4B8A39D447D9C8F62D5A281666960D12EB39C989C6A
ADA40BCF8594E66ED37EB6FB4E5E6E11F3B8F4910063CC1B6FCF8A5275DCDC8A
7A2A8F918EE967F7268C20200297769D57AB2F668619400CA8F93AB3AE286647
D0140377290E34AC51CE59A27C279D48E87656033BB871ED2CAF215B96E79527
F0C7023EA6DDE044E3C5A02D6B74934E1CA2A19293E2FC1ECEE17BE95591C938
D292F8AFCD8A5CF32CC963CE120894E410D42A2265FB3A521996E6A6DEECD51F
1463A922E378FDDD9B810840C9969D616A2AE8C69D2C5A038B9A50AF7D61D5A7
2C583027062E32065648A14D9471EA325AC240BC23B08C7CE8D75C67B43EFEEF
766A909C47C71173E3B08AAE46C40D27F44926D8104B0B4913D7636EED8CF0A3
BA4222F9AF72422123BE874F7968AE5FFBA14B32F66DEC1730A9006736A9C6DB
BB4CBCB372DB99562D0ECFC086776220316889DF958EABAE13DAB1F2783BD543
E88CE84B60ADF895FBC9CC5EC643672526783887084DB101D5CFF6CCDB24D778
E57338ECF90F133025B535248D4E71BB42FA21CD2C58C76BAA9B0012AFEA982C
2538FA612295B76717F6D48C4CC3AFDE38783E9CB13DA7A85A3B768BEB3F2A33
A63F5AA84626BFE2CFF624F0D1B247355F1B5B8159AE6E49888464624B43C207
35AA3F111DF1A51672434D6BE643E2EC30674D4BCF59D4689386FB49F4AEC872
8A5DFA08D11A842E751568F257B5157F6B201E58ABFBA42A00556170C8FD6D64
42D930451638F93B29D9CC6D93AF8311056FEAFA691019792785CE018883D182
D91C6E4DEEC948584C890575913905A4F3ED8B8843010C92022EC3D82C1CEF9D
31E650EE501470FAF171A3C5DD9441FA7FCED873E5E7602683E8F0DF657636F2
039182AAB279167BECF0D7A456C674EF177F7D1B1C0B2544E0913D45547310B7
A676A2CF96968783A6BDA3D5C55971A8835F30FFA8956A5761C1EA60A6C778D1
8FC1E1A85292F6D48005219E38AD3A4923159326BB3EAD64425E2101A2AAD9B6
DCAD1D98AF2900263F23EF1F43BF734B16AB45A3760F2ED6F36B6B36B6DC2372
C308147522ACED10DE204B126D571E5438567A6F661262EB3FE3F2FEB1B90B29
D3E3A1CD8A96F2D98D91B2610EDE8FEE0A7A2AF46CE779A154C83FB465F09757
03B8BD0999695ED6718277CD8CE3D80404F7691647CE5A30AE43000A8FE7E2CC
F20662BCE2D5515C36F27AB912DE8E613C85DAED72B87D3C7513970BAB415C4D
8013A9FEDD8F72FC219B41BF12CEE775BB7C01F757F997F0F4429C1E88453814
36549BB915712E24DBDFF47B1D555571DD71FE5A7C0DFD6350B1C3A629E40F72
5DF774A5D79874B1A234FE27F5F3A495ED77B286B4A72A1998B933A79D715862
BD8F25B7930A9C69CE409B8FE82BA799670AA29A6A7F44262EEDB54455AA41A1
AB0E6CFB8D50F3F41289F4893B31D7CCFD61B369A97FA0DC20C1D5F55588FBB0
012F8B440378167B934EC351A8FEC43F33CF6F29E7A2187AB00F7D604CB84194
3BD5F6A827A512DE6F39A8BCD5C987B22E6B9B25CA2786B1B7D49B326860AF2A
31E966E6475ED42B17630A502B3BF01142FA9CAF3A0C67D6B2464E75C786A05E
8F774D678CFF2673E46C72AAAE8FF80BB3DCAB950DA8E21599E7945E6D9BBB8E
BA6FC48DFDA55BF7B8C6E56D4EF1D1C9E670014BCD381F2FFFB8B39E48183783
344DCB96E253D1DB9DF7775414D07B3F5927ACFA908B124D954B3F6ED4FDB05F
C3B18B33E6C393F4843E71C02DE70F8435C19FDFFD5543301C70C01FE41F47B9
5F987A4A3F921AAC23AB192ED19C831715C3EF3C9E2E1C172810C3F03B85F22A
92EC8D5D1C475377DD6677D8216221B22F15AF23BB6034EA70D5EB5B0EE6CF02
D720494DC237BA8F8ADF789662C3CAAA91D8C445B39045EA75E62468C31918DB
6AEF604C3B8E664792578A1C9B8F56EA17FE571AF5CED0161465122E9BD66526
CBA77151909398A4BEE3E9D8C368868F51D3CC9A2D6F3FD771BAD84646ABEBFC
A05BCEF978F337CF6DAD983DE25F90A4D4E4C32BF7A0B68BB02D1B373A6C47D1
DC55F549333983818232281A66C70343B23DF1F3A9B5858F435B9B025AED172E
9398264C11021748FCDA1A7BBF0194CD537FC38BF44E611E5D1D97473E5E0596
54DE9BF3D7BFC5FC1ED7A470363D21A521E54CE35F1D1809F3CABE4EB2ED0321
1749560EAF0090E349863E8D3A6427D2492D71C59F6BAD0458E2756AEDA75F2C
22D9BCF0FA355B428482D66A81818226653A7A546FFD4CECCAA832BE2232CDF8
932CB31693B3E6F480459AEA993B1A8C96341DC033D9BD568153E9C5827A77DB
5C9B1F34B17FE63C3AD72C9900BC04C5AC8FBAF806D9B523B0CE4519D69D84A4
8D7F911764F80A83DC05AF8697C1B53F6E2B4D03F512139B751F6137DFEA8330
04F4689471B7F122B6E47DA1C3F5F9490CAF0760C2A3EFA08967A398E15E461C
37C3A3F2189D9402BCE58AFA6CB89A6F5A42856625268519155623D19692083B
58D8FA956F4B75F6A8E3F89A4337A44F0D79447E9C5ED2573FDEDA209C208C0F
8DCDEEB8775BBF59EA7200DB719F42B371DA95FD16A2F2399E862A275C2B5D5D
16997BE1CC83ACBE6E0F8551E7B1F77692E3C3AE247164C738014D8AFD78778C
254C8BAB5E1F356E86F0CAC50861F24AD8852083A24A76044744BC424AFAAAE4
5B726F2EB77EFCB31DD2AB6FA0B35416AC86036C11F1AD747A608849FC2EA4BD
68A172C697EE45B95F25568382B0594FBD382E15CC87C3BBD6EFB2EC02F29908
C3FD76A36DAA4518EFDBA77ECD2466DD7F99BFF30B68DF67030C652C44EDB09C
76ECB3C414A0E704BCB11332B780C812B5C8E9E6F3D32DE6EEBC3FE047805895
79481B79CE028D562806F08FE3D9853D4AA01ACEB9CCF1F475C7827E40CC9ED5
78C838BBA02506798076FF2052936A97A3CAE0991A889A2A6C9C59AA9B4CD759
8D47E8EEC552365442CFEA7930B462DA71CFB6E86C72ACAA04D5FE473535D31A
AD390E42ECB58F2FDFB8DF16CC632FC92B1AB20ACD452F67318FABE14467AD1E
2B7D474196C9FE559C034480C7CEABCB7764B48EA527A6BBE9B4E346F89985CE
F7BA54371E8CF4BD9CE0797EE3EF415F3BEC2C9A6D86D3079605CA2B059D79E5
72DCE0024D844B18658747CA5689A71F71CDA3E5EACA1A922A66E238A3C2638C
35DB59728FFA1AA6760C7F4F4E846D20E6C47A9BE1E607A6DC8487FA7D881070
B7BB0A870C3BC7348A696BEF2A0BF600F291855FB26CF97E85975215D1EC22BF
9E8EA85193EBE4AE0CEDDF02D384B5A595EEF9EAB6BAACB36682E1DB499E7027
66A6826F992D99A546A9C45228B60B4D1F0FCF49CB9DB4906AF58FC6FA1A79F5
D3AAC7BC4C4095C0B0A118F40D251F8E9E4B5BA2446229B15084600D19573D06
FCC2FB312D4C049FBC463679A22F02B0C6A90237E25D1EDD0C054762580CF95D
6B2722CCAA63F2D4F915B921AA707257590DE6E90C5F7B3D28BE2F5DA06707A0
8A0702691C7F2C2652CFF3EBB20D72C63D93DBBC691C7DF5B0822BC133E201BD
F9463E1EC8D1D61D1FF7D0163B774DECCE286F7D1372318C4757B0F18128E4F7
48903150D0919C01C995DB65F0E08A5C0793C26287A77BA57D8A6B1EFC1874B5
1663414484DCCDBDD8D6766B593697C5D4E693633184CB85796AC0F5E98B6A4E
86FFFD8B09D944B39CCCD4940FF5B0FDD7C26FFEE88874284F7227BB698398ED
B5F657EDBC6833ECDC982117E53DD6739D10729D35561B8BAA0E7564DE980015
EAF2ADC5976D595E9F38DBF8A4D78B6D9D725DE075AC640662DED658C6AB79A1
75BBF285D1F9142CDFF81CE677D750A9ED96047C7E43F320009EF1B0510A16D9
C36B452DFD3EF07C41BFC268474EABE14F1340BF278F3E1BC1C5517782462214
6EF238A4B8C119921255C578D429F048399B023C21F5D22188BD7DC4531114B1
1E96930B3DDB3ABADE2F921D9819E94B539700CCBF83B65B099B45B0C4799194
8465C2D364B4848DD22D10E75E9848A5D844F2D016C466EB0DBCEC8A00F9FB33
F3EFEAAC62A3E5C63CF6F37CFB3F732A0CC9481245D400B0C019AE31FC9D40A2
9059DDF32055962357CED4E3ABDB9CADF974D27BFBA6C79130EB201B7876255F
DE0A99780A9586617FCAA011BCDDA7DA4EE06F4A7B8FB81A80BCA67B31E5AD34
CB461A872845FE5D8DBB7C3FF081120CE07CE293705353B3689946D5D258FA33
7866289EB718EF9FB55150B7B2E65B3284E1C97594862394588B4A215F056FEE
28F6C256173E132EAD65A3D73EF03E1505DAB8A51D6856409D08D2FD70377EF6
E769D4A8F5E47899E6574F5EC0ACF52CF588F8A426AE694FD6CACF8717F3FD73
AA1073E6FC61937EBB0D350C14272D42235B4BE390EC5D722244C118125E759A
7BCF156E79781DE2204EE07AFFA226B053D71A9F757080B7F395DC2129D016B3
585E7A4A0EDF4383E9386C73481401555838C7EB7AF501FFD4E3AD09802EC328
E5E7A6EE7D9957E25EBAE7CF251AA6CFE3CB949A2953C8CAE6ABCDD61C73D744
94250D53354311BE41F2AAA77227266A4225E82EFCF801D9074AF04A7C31DD80
71B5D3BF5C7C5ABA03C9F666AFBA9DD8E019C6EC02D3F1D78D81E888C9B66AC8
B48ABC3A76DEAE1FB09272F6FB7E5449FA1428B6ADE7E3395B500099AF0BA872
1D245C899C98C5D47AAB3500D430A4C41EBEDE58F23ABB95D0B8C9E998CEF69E
DC652B1C0A194016F5CBE5E70379F30EEEE5A9A6C44C9DC261E2111060DB7655
6ACA4C5DB6274EF46FDA69850441B0FFDF9D1C6C1D0FCD433C2279095501EBC8
D79075605F692BEFD5C9C431A69485515D42BF4F7BF56BAD5D878F924CAE2BF6
35E74D9C98BBDB63FF65E20830ED4A69B0F84CC224D41D85DBF38E250A4AC2FF
78306FF19F4884AF965783FDA8F33A3F845D0098E3FEA5617D6EC8035C110D47
5724181EB9690591E7ADEF4E508194999D8B9E44DE8CD134B0E315E4D6009F84
0C7D85A8FA65A9620C551C1B854C4B3ED81FC7A34D51860399ED61E9FFA2B4CD
7CA62FFD5D1FB7D6EFB3916B9E19B25E5F88528FEA94CCC4893B6FB9C866D46D
C7D229D02EBFB705105372BC99E6797B9AF7BFB3BD91B903ABCBDC4A6E917735
380AA8A6AC4C41DE6988832FDC693B979E45EED766D5AB6A539DB95218289A19
F1272D64C3821FE12CBAAC10853490123747E562252D3D3AC8F63E853051B21B
724893A0A8D75CEFC1899911D7CA67AE8414AD421584121F843F822933B79FB2
DFB4AF9F77728B10B576ADD5435EC58E811160B2713C3795B1DCBB08A80E49CF
E8A09AF2351BE5E5A006F87E12D518FC10F7A69B7FE130BA41E29B28A8E93184
2A9F5E5EC2480887986EC02B579679535C567269C68F36A542C688BF2F0A6864
6F08ADA68258A8AA4071882854BF3FEC58A66984BAC39380EB4CEB7DF7E62284
481021F6D45463E2CCEC650E5C4774132F91ECA735D18504287490366A8FED1E
718C8C197A45710C9ADE5D916D5F1D6053F37B1EAF7CEA91C664F873ED79FAE0
B504B7CC6DE1F56FFE8DCFB0D6577F92708DC7191F30864D14F262F47F5D63D1
965D898C64ADFFF865E0A6926D56DE813B3CFACFD61E2FB41B50CC5D0D8E182E
01B5C1713371070030B387F2A48B64AA78525B83173560B361687FBCA6869CB8
989BD425D4C97F13544D7BE37CC30563E2E3EA5B53F514DE623E03339923527F
22F3A6264678CC3407919D94E4CA567244C19F0B1B15509EE0C12E4837D8999F
B19D65BDA85256B7211633148C7B4E1234A9388145DECD3AE1EE54F6E3CAE142
DBDDF597877D5B3222696B13227FAA1828EE9C8723E7733CE48C81B9CF90C244
87EC80DC4C38F84058EFD399F39F1AADED73628168B4048E950D3BD229E4ABCD
BD7957975EAA26CE6E9B0ED2ADF395C84FC1A3E2DE03216A3D5DC181C0794058
771C0F44D9D8CDDD237AEB204C0F6D1C7229E3C59ABE01A16B855AFBCC2E44CA
B2D588E9C180605747F3B8E07EF17FA6B6EE70D27C9B3DED0C52EE98E3781C20
C821A676FD5385F05F7249FAE0A382BEDBE249D306ABCD66F2CDD30146CC5B54
10038855EF0FB92D2DABEB2D4D8A8F2D5E554E786534545EFB9EE6FEEAC2F5BF
9D1DEC8AEADAA14484A63EE7F95865890FF53510A996A3C520F21BB3EC69652C
D97600169CA016F45BA356ABB17601037D0E08D169833729299F75337EE37CE3
28DE01E94B1B96FC515CC48DDFBA2562BF99E82ADB2526B49D2D6CF7C455628A
4970CEB06EB48F70823632BA876BBC6BF9F37E04E160C213CC58E59B42A0CB94
CFE1FEF81BD263FBC5F967A5EC93DFC84E2B3B5D26A5A6A52E0DF18E3D35692C
928E9D7EED9CB758BBE4AAF9F73FB81976DA38BD2A8A698F9D6B22B8A412003C
4A4FB4731E91F9BF8AF7D5B117B65FA02AFCCBB8A6C1C4C56431840400BD015E
873AC668AAEEBA83CEC1FFC7CFB6DB637D14EFA9DA254C1443156B0944E94F6D
E8EA2B1678441DD09CB66C757C1795C3297858758817143673F26B4968319308
008F7B712B5F86C6E5C4D721EEDAB0951CA96E5774A1419ABF4855DC0512FC29
D18C11B5CED613225D14ACD4E5AC64DBA84AD6B4734E8D85AF3D0D4336F27B53
0D1F9ACD1C2692EBD83841F4D533DDA3130E082B26A8A390EB158C58A758010C
6BF949F843423DAFB78EA529D616D8C4494C07C96C28600B18FD01AFD1AB17FB
9C931CB7D49914F99B626A7EF322D94C9ECD3B38B038D2A9B442233C76929167
5B9F048549C02BAEB5AF65D29B9706933A9B43FEFACD91A376B671CC3F9D463E
AA3DD446866399EAA4466698283C6AA0FC1941139B8238FDE6940CF1122DD87C
C0785130C3DAD20040A45D86DC2EF1C6B19EF89A600136397C69F2A0ABDA6C24
1833C9859E4ABEE926467340249C6D295FBD250EFD151544BF82557441C45B37
9E2BFEE8BDAC98A93BA3347E1AF543050DF1FF53BDED2EB8D3F7CDCF6600CB47
4215FBCFE18E018034FFC74FE491673C894622EAC103FB779170E1269011871C
3DA20BA0F0E6720D1FCCA3A0D72EFB15BB41677184A7AC99889C9DB93E636E16
7FB3E2FC4BF5AC40F061FA7FE2A3592F624116C1E203A2048AA34095239B141F
E51C2A766DECB385A58F3EACF875F13A865A87AD0D0C90B8E80C80DD6575F440
6E60CED34988C2BA6F5EBA45BB38818D53B3364A2614BCF8BC6D5B169A0BADAF
36143386AF939A43A0B4CEE673DA01143904B33FD51C5031CF1546386E3D0D23
497EDF82E87AA438436E345813B88F0722FE7A25AA5C598F5791D3C14E554E1F
58F2C467D9943C2C313D8C4536F0E9037CC1BCCAC622491CF891E22BF6A10778
EF13418F231F1015F61B017B244B8B8A7C6D03449F02E3EDF4D09A1156A797DD
4F8868A1244D517B96C166966B487543566027C62B0D416A14A7989F0BA29819
F00E8420CF46117FC33B0E4C012C27CA202C9B5FB19DE1D2F4CB082C09B5F285
97B7C4747523E4688194637990F95DB2B38C7A7650D73CA572452E46547DDBFA
BD6664552FB311DA590C84E91E7C81E3D597BDE062EF7A3106165F56CF1E43AD
FB0EB90675ECE29B4B801FA4F1617F488494C59DD7583CCD600C0E75BECEDFE5
E0DD751B448FF8869DD735567B6DCD05482DF3AD27AB235BC88C0F683E44A2C5
50965D88A15AF8AF99A6F9BDB6CEBFC97B9EC3225D36CFB02CF354EDA25FE882
38758EAB6F1685BA9887610C10F0746F8B86F14DBFF6A83886B6C8A9424B49D8
D2445DC2F44FD34FF92FAC4EF1021D0DC1532632A7402EFA30EF4CD23326F5C7
A990011AF7E4EFF6AA59FCFB84C874DE3FC62A43F0CCEF66C1AF7B72E2DD984E
B7FB4895E3AC6A51813ABE0F57573C0C39FCD1441C1A9159A82EEC1B56B6F059
3A5952088901AC1DD3EDB8873627F3C63F9C9D43BC62A8C86A1968BA2AD12020
AD38AF62318A002D6C25E1717AB42ACE5AB8444BF2DDC38B1DFC653726329D41
2BB0E233BD6C141C24CF2FAEC00B01C1255FAD50DFEC8DBD3628FC047AB61018
835BF50C701B5ACF4117A46186DD7EEB6F4F859D651C6F853B9F6F5880B9C1F8
760BAF9D5918D8AC0FEB4026643638876EC6BEC6E76C6775C1F6551440745F9C
AF99DBD65906DFCD9778B9E0389C6BC842C0F06ADB438C5F5D0154CC1A7E3219
42629943C03783BA94889CEAC1E9DC579A24E2B642089DCB26F07D4B33A71C41
5D17EA576497851FD034D8DF32579693106F2A7B119FE84E8B8372D0EE6DD8C5
41450DEF7A975B5FE482B741B09119D37C8663E920D4D6F10DECA20570671677
D805F5A7818E7BA0ECA6C39042C05713FBC1951257B2C9F3AB5E9ACE8A32667E
CD9CCBC988E010019CFD814EC24CFB1F19BD845818D34F170BD0DB6EFF15DBCC
AE8D35105B31DBCF1BDC3D0BE2C9B00942D434F291569E52B22FFE9AC0AC4D0F
22FFC2FFAFD768C9B0AE8E56A4100198A6EA5AB75C69C8AF017E89C1FBE4A28F
991BEF5A4A1209D557D856110636BE555AB8E87535CC03803A1F7FEC6CEB6945
1AE469277AF8D97482C56A3F781A5066C10AD8A6DACC4FEF4B539EC8688E171D
18F04D4C30125D8FCC473FF4BA7C34B960A87CBD65DBE93BB00CB5E140E5C56C
82470D5060E819FF11DFA22F0D0CDBAB01D5A660AD9ECEC63AF7DFA884AADF29
81F2DB7E0A6B5052B7446AC94D35CA3FA15052BD36A0FF036F87B3D0409B4135
C09FC96C8DF717892ED9A0820A918D327312E2F19FA0F1608ED100EC533C080C
EF9B3008AB664A74BD78A277856A7F56C6926C1C9271AFC187CA80ADEB5E76B7
0405987D15994F57428CFE25289685AA42432087E411B87F39483DBB700DA58A
EDE9F84B7F2D184C03A0FC3D52913CFFD4794450399BE87C9FDE7BD04C96BEF1
A47AF4A36829E680691F1B628EC5C2F459CB3851D13D88CD27BCB74AA1C81651
2D530C979451610A43F3AF030B5256AB1E752E3B78C1B39766B1D643D238D511
C010A01C8CE339ED47554D2FE32A1796A5CC635301F453E88406A8A04A01C1EE
476C26DB8D833FBCB77719F62942A827FD3E31E2B8445D4A5F85680DCC8C1853
7A5D34653CABE892FD2BFDFFB0539587E316DA921B71C2C4A7734D7284505F09
7BDF816150EECD24103C85AF49F3BA94360F1DDAFFF52321A5F4B9D0979CE069
34B804246EC84C3938CDBF726F970086F7F7AF0D350F520C65D536B5527373B4
37832F0207F8DC0C306F0C56BB7AC09079F48785B5CCB1C5B13EBE69EA6FAA00
3398CD5DD031F708D6B0EFDC0211E94DFBA35A02DAE96DC3AC7E8E6C2922E18A
7E9C278842E79E5CED8D5CE8FFADD7E9BE373F06272D10C76D94A91538496984
A58FFDBC7EE92392CFEBD955AC88279A19B69732C8CFEEC852CD3EE6DFA81EE4
169B0BCE94013A7AFCDD46CFADED24D377776268D22E4CF852514EFC93CEBDAA
3A163113AFF6DBA332E33A71241DD8AAF8EC9F75012FD492E3981861C369D64F
97EDBEBAD6D0E8D208BA7BCEED6E9D7300A232097FE6D9039244CBA9FED9F4D9
C9F3944987631611FC33BD95C83C5EA0CDA5676AFD8BC5A755732CA40C91F24D
07A73A5BC15256B47D7CAC915E80C58A86AA30A0783094D3E01F6E207C2544E0
950AA8B87BF3688A9E4112247F3AB388D018988C8F8AF1647AE1AD090B95E199
F6E4EA737352CA3365F353576C6B6E75E1FCFF5BC5B85DFB5A053E98AB90C0FC
31021148C2463BA6A8F0E54394897BCEACFDED98058BE432FF5841125078187A
C4F7794232AEA93CF5AEAE10DA1C8A570324B1965D5881FBF2D20A26E2A7261F
28826081304FF956A0E8B05D40F7CD8C01EFE312864E7BBA110810AC0B6F734C
6D6C8F21D72B74CD4B4B3CA646322A5F9FB0E7101CF197209B32DDD9B719F00D
EE036E198992B1073F6B53E7C7BA3C47AC9C235E4081E15C8AE4658759506DB7
654A9485905E3A6C58056A8EECB6769117F27737696F57687C66A5B30727AE50
295F5B157F93BD33172FED5CAFED09A259209F7664AE3750EA9180E1256FCE00
9F7F7785D85C728207E45697707E384E388B0BBF9FA4FF81C391010E13021BBA
7D07717717F3B7FCA26DE221AD83865E60099DECF2F4FEA8BE84193320AE5407
234812F54BE32B47384967E14B8986BB2FFBEC7A2A42204A318473F4631E8DFA
2247EE2953C752B4467A00FFC6F14261F3BB9C95096F6D81C9ADC083B3692C05
BCD981F0967A3D5F649B08CFFEF457856DB6B8553C3ADE1AF933B23209D51A0A
48D5B86DAC49EEC41E68B6786902A965AF6BB16F50F60FACFD756AB52D481661
D1589155783CCF2B060146EA266A3E84A60160CCD39337EFB4167BBC1C760F08
F834B10A20D1C451C6C6600B3829D825447822C1E9BD4B1DDFA79E2559386021
067ED6737A96C65B13676C9D457D1D00BBA7E4141A6CC7E005E257AFA93B67FB
FF7445575EFD28D78DB337FC35059B2F42DD2818472B4125FA0296475F8E03E0
7AC469F1E7A1202CF740B823388E65A7EE3EDB265042A562F6B127FAEC6B9C02
C7FF01E22444A4F5EEB4FED804633F5ED52CA5C55D64448FB875EDFEF98EB269
514BE08B13D734BC9B154F287CD20A49A5619DA63943AB5B83C57B7974ED8123
E27507BFFEB944E3FEEADB6223BFB90C89E7B5657FC03C4B2563B781FA88E870
5652B339D01915CEAA975CAAF97B9B9584FB7223081F3EF099885BBD34A17954
F8A875239155F91E56474C030DAD5668A7B56A3F3B8A9759A707EFA52574C85A
23D9895BC192C470EBE7F42CBF8BDD1A2F4CBEA386FB7FB925B142C7C065795A
C11555BC0E9E443334692761682DA34ED53319F00C6800663B00F584CC4E6F47
70A5490DA0EC5ACC4F3F51AE5C15218BE248DA9F9CBF505DE4B14212370320D1
80FFE1EBBC2799F34C915792C017ABF9EF385E090C94D08E271B899A24D16DEA
4DDB520293AB656ECACCDFB052ED7432EA465BBDBEAEBBAB6CCC43352B5746D8
1EE65529F890198C82AB541DED524ADE10CF457C38A682CE1319C45B215CAE35
5DA9EC827C0A32352995D5A6BB6E614ED2FB75BBDDF4BBF4CF6E743BAADAC793
CF8CD35EA0BFDD4DBF8A8A32A8A4EAAEF2CF946B33582FC46B3819DFED6E6549
F9CBAB9A3794B13E81FB1F40A3E41973B21CD745142808DB2676DF3767F0DE03
20F3266B5B17B5A413095E150145F02E688D17A2920D1BA7874E2617A0BF7E7F
ACD0B03E99C3AFC629F2AD5E95B27424953408B7E827D14B31772BCF8D0A57CB
10C8F615E10FABDA050D01147ACBCDF9C6FC3652C1944B75F8102274F36FC66D
A3A3EA023DECA575688CEAFF32E34A31C42BAC23352CC92AF5CD8696777424BE
5BCDE96C7C84EB04AA7BFA57DE51585DE9A1D7462719EF53613C56CFC034BB46
695B1E3B9631B9A6CB3ABA5A02D3AB2BF27B161428AFB3A99513B3C132C8F7E6
8D462CCCDC0110ECC31E911294D1AF721B8A60AEA8D94015842EC19FFB98C963
C7EA5AA23ADF1CE564E2B8DA132C33A5C50F8A90B51EC878A039E4D169906C03
92944704FC9816971A8B4F6373CF2CE349D7076809DF1F247555CC00B6C3FF21
B017917819FA992EC82A18874F7C0FBF90E93E2E5BA7C0BC91EB038B5D45BADA
883A20CE4345A49DFB2647B5EFB66678FC6B6C2E67B8276FF1BEA30CD21F648A
E3ECE415B08659A2C3EA66F0307F77D3D1C6B5FE8281A4633BFF2604F2E0ADA1
5544968FDCAD2920CC0FE42B292FE13AB635AAD5B7B722F15688D9615A316FFA
B84401A93A61C7A2ED8A11938D7D815EF7799044BDEA3D547DD0FBDEB7344246
962F621E5D7BCBFA340C6DE0E9C528A5DA92F18C3F78E030F20A16BB5D214511
D3A7812A1EF44F111051566634861059A5E30CD008575ABB5E7396B8B8F048EB
39082CBC768190031E9B4721887A4CBEDB98381112607151AE89DAABD903F9F0
97948E0F54020FCEF43CE26A0DD0DF10867CE1145DEA04942D59B7BCCACD2566
0F268FC0CBF875E390230C02F364942F5E106921F47827B8EF2D66694FCB0C68
CBD6176332913106946669DA385EAA3FFEA8203927D58889E602AD26431BD961
9FCAAC0486279EEC1BC8B49FF588297AAEEDE6703C296AE62D87D01B7A2C54C6
3A0C68CB58F63BA41B7545577E5E8A673EC412DDAD4ED66FF6CFF580AA844808
43B27092E4E1A928622ADC084288867A13160D264250AE3E326272BBF00A82ED
837AAE4BE482577123D4A284857F8307862FDF9F55FA59D119AAD98C5BCD01A2
FF356D00FF0BA32E0928EA4420A74629E87567DCD3FA3CFE97E1417A52C9F462
8CA0D03F0518D574F9F7029DB68D43CB2634FA46AD28F57DB3B6A8460BD70A5D
7FB0787C8C901B01B22C1B02CB0350DEAE2A9B5DFE90D56AF49FB2B9BDE10191
D10949F15A3C3D8A545B4D9BF7590E5FFD2C4484AAB67D158BF60372EEC2C61C
D9620DEE1190349CD3C3DC679B953887403B1B62501C698FA08569200CDED639
F16B01C84B1BEC14F7FEF54602B22CEF725F84AD9EBBEBA545038866957DA98D
2711C569ECC0852975BD4D869E98E5FD1C2DA5EFB827CE3D1C32A1DB9F31F99A
1B8BD6F86F0C5A836DF7A53C7E6119D7D017A68CB367E373AB1F37F116A40469
D3A1619E5BA1C31E8344CD4B50844D86239303A5E42714DF4D28255A93ED09FC
53B7286572DD68116127B9607375612D4BE48C4EF5C3B134EB81767F897B1324
466A0F9E8B68B1EF1B2316717C60D679A02E9028876C6CEDE1CCA0FFF6B9DE94
766EF6A4FC2BA20739B89802B41ECBD41C88FD9B14221E9AAF29759B42CB63A3
78D71CA99AD1FB1CD83B2C799967A08A7838068C21364B486AC6CE5B598203ED
FE68B822080F18BC8D77E5CC9E6353B4E4EFC7944D25AD0280D5C6A722DFD7FB
A7776FAD0516534365E483872C102C488D4ADA02E4A15305BF6888B137DA8B33
48B1F5F3CFFCCC4FC9BDE4E2450071CCE73142279FEC0791E8E8F529EF66527B
ED4FC022F6E02B079A66A1814E9D99D13C32E819C46360E44281A5F072BBB9F4
B167EB8A3F0DDA90221B791DAD886476845B8A8E37114F260489C057732E0703
DEB9483A5F8140DF32C141285961A64EFBE0E435BD1C32E38C83D5F100A81554
71E5C92FE98EB66CAFD70F7AC5D8424ADC9072068A26A651DFAF8BA9253179B5
B46C9C7193127959FE8FFE43005BFFD4C02DBA25CAE11035856DDF98E797E2AD
DD76D6BFEC5265D216B10871AC815FCF41C59B4AE0853B02D354D282D4FEF777
6D9A8E020D48732CADD6D42AAB90AB7CE086656168FA045CD7847547BBD9FEC3
FD9DCABE058E028D401ADF3CDA8A718097F46A14FAEB35974B1E93D4CA301E00
0A7CDCBA28D60CA18DB6007E75801C510A7344A4CC2CCCD2E4428E118CEF756E
6030E0F06A77475CF04BF861005A2EDBB36570A0DB216E316D5A07598B379EE3
10C1A155CB40A6FB27F921B830D5B16D75F268A055053422ADF8544383BF310E
6C48EB14340676D07A6B1D1FBF5848EA77CF9F1038FFF1B1284D6B773FEF7491
AC05F95ED4758923FEDB32F4D209B6C0475BA1F74DB8BF4A44D5AC6358FE2AEE
2C26861672E21A1CD47221BB23E5B581A4B5BBE448ECDE78DF19062ACF6D7B31
E85A37ED65CE953C16C919E811973D667FA505D50984CDEAA1286B61740AB2EE
047E2DA3AD8AD79FC6E763ECD828FF01F42C8BC6898E5E939BC792773020DC79
7CC2888431A709F35F0697CC0CD90A9D90A4C2C419DF20CD235814D9BB2B8649
4A9964F828D2FFD7B1AAC220AD75CDA85394EDF3D8F2B329F005067AF8758CC3
22DBDB05DAE432A93CB8ED4EB21568C5F62D55E6CC185BE29E0EAB6473314E83
02C960E96582E26BCD3D20C558A765AE8438F4234BDDA1768CB203472D38E16A
B9EEDB358895669A5A5D7235E811CE4271FC90302FFEE0EB5BD19C4934CCC83F
9CC1D6713188B4143F3F702F6661C219F83502AC6DF1F4353C4ABBD427AF53D1
01189A17244F158E7E367C78342B9CC404E240251F9C9B35CE5A0D0087A13336
F80458B9B8EFC1B41E6A6E740BA6DD0B5E4031198D69394FA847ED6B5BEFD5B3
E1A3F20E1E66F476FA8435EB3A3FF47C96468ED0533F7ADFE7790926CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600 (interro4_22_03_2017.dvi)
@start /Fa 145[31 8[25 31 100[{ T1Encoding ReEncodeFont }3
41.511 /SFRM0500 rf /Fb 22[27 31[41 79[32 2[32 34 24
4[30 34 50 18 2[18 1[30 1[27 1[27 34 30 10[45 9[38 22[30
2[30 5[18 44[{ T1Encoding ReEncodeFont }21 49.8132 /SFRM0600
rf /Fc 205[61 91 48[71{}3 90.9091 /CMSY10 rf /Fd 164[25
29[71 1[25 1[45 2[45 45 1[45 1[45 45 4[71 1[35 35 40[{}12
90.9091 /CMR10 rf /Fe 135[52 17[45 102[{}2 90.9091 /CMMI10
rf /Ff 135[55 5[43 8[29 3[47 1[46 19[78 81 98 7[68 10[29
7[52 52 2[29 4[40 40 40[{ T1Encoding ReEncodeFont }15
90.9091 /SFBX1095 rf /Fg 79[30 176[{ TS1Encoding ReEncodeFont }1
90.9091 /SFRM1095 rf /Fh 21[40 40 115[50 35 36 35 48
50 45 50 75 25 2[25 50 45 28 40 50 40 50 45 13[50 1[70
10[59 1[69 65 3[43 7[45 2[45 45 45 45 45 1[25 30 25 2[35
35 25 10[50 7[50 50 19[{ T1Encoding ReEncodeFont }42
90.9091 /SFRM1095 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -112 -451
a
SDict begin H.S end
 -112 -451 a -112 -451 a
SDict begin H.R end
 -112 -451 a -112 -451 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -112
-451 a 0 TeXcolorgray -104 -336 a Fh(F)-8 b(onctions)32
b(de)e(r\351f\351rence,)h(in)m(terro.)42 b(n)p Fg(\260)p
Fh(4,)31 b(20')1516 b(mercredi)32 b(22)e(mars)h(2017)p
-104 -298 3969 4 v Black 0 TeXcolorgray -104 -132 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -104
-132 a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -104 -132
a -104 -132 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -104 -132 a -104 -132 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -104 -132 a -104
-132 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -104 -132 a -104 -132 a
SDict begin H.S end
 -104 -132 a -104 -132
a
SDict begin 13.6 H.A end
 -104 -132 a -104 -132 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -104 -132 a 91 x Ff(NOM)k(:)-104
-41 y
SDict begin H.S end
 -104 -41 a -104 -41 a
SDict begin 13.6 H.A end
 -104 -41 a -104 -41 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 -104
-41 a 0 TeXcolorgray 203 x Ff(Exercice)g(1.)p 0 TeXcolorgray
46 w Fh(Soit)30 b Fe(f)40 b Fh(la)30 b(fonction)h(\023)25
b(d\351\034nie)g(\024)30 b(par)h Fe(f)10 b Fd(\()p Fe(x)p
Fd(\))25 b(=)g(3)c(+)2297 101 y(5)p Fe(x)p 2219 141 254
4 v 2219 225 a Fd(6)f Fc(\000)g Fd(3)p Fe(x)2483 162
y Fh(.)1463 b Ff(\(2\))-104 248 y
SDict begin H.S end
 -104 248 a -104 248
a
SDict begin 13.6 H.A end
 -104 248 a -104 248 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -104 248 a 0 TeXcolorgray 8 335
a Fh(1.)p 0 TeXcolorgray 45 w(Quel)31 b(p)s(eut-\352tre)h(l'ensem)m
(ble)f(de)g(d\351\034nition)h(de)e Fe(f)25 b Fh(?)2052
b(\(1\))-104 1177 y
SDict begin H.S end
 -104 1177 a -104 1177 a
SDict begin 13.6 H.A end
 -104 1177
a -104 1177 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -104 1177 a 0 TeXcolorgray 8 1288 a Fh(2.)p
0 TeXcolorgray 45 w(D\351mon)m(trer)33 b(que)d Fe(f)39
b Fh(est)30 b(une)h(fonction)g(homographique.)1853 b(\(1\))-104
2214 y
SDict begin H.S end
 -104 2214 a -104 2214 a
SDict begin 13.6 H.A end
 -104 2214 a -104 2214
a
SDict begin [/View [/XYZ H.V]/Dest (exercice.2) cvn /DEST pdfmark end
 -104 2214 a 0 TeXcolorgray 109 x Ff(Exercice)35 b(2.)p
0 TeXcolorgray 46 w Fh(Soit)30 b Fe(f)40 b Fh(la)30 b(fonction)h
(d\351\034nie)h(sur)e Fd([0;)15 b(+)p Fc(1)p Fd([)31
b Fh(par)g Fe(f)10 b Fd(\()p Fe(x)p Fd(\))25 b(=)2471
2262 y Fe(x)p 2393 2302 209 4 v 2393 2386 a Fd(1)20 b(+)g
Fe(x)2611 2323 y Fh(.)1335 b Ff(\(2\))-104 2409 y
SDict begin H.S end
 -104
2409 a -104 2409 a
SDict begin 13.6 H.A end
 -104 2409 a -104 2409 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -104 2409
a 0 TeXcolorgray 8 2496 a Fh(1.)p 0 TeXcolorgray 45 w(D\351mon)m(trer)
33 b(que)d(le)g(nom)m(bre)i(1)e(n'a)h(pas)f(d'an)m(t\351c\351den)m(t)k
(par)c Fe(f)10 b Fh(.)1652 b(\(1\))-104 3338 y
SDict begin H.S end
 -104 3338
a -104 3338 a
SDict begin 13.6 H.A end
 -104 3338 a -104 3338 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -104 3338 a 0 TeXcolorgray
8 3482 a Fh(2.)p 0 TeXcolorgray 45 w(D\351mon)m(trer)33
b(que)d(p)s(our)g(tout)h(r\351el)g Fe(x)25 b Fc(2)g Fd([0;)15
b(+)p Fc(1)p Fd([)p Fh(,)31 b Fe(f)10 b Fd(\()p Fe(x)p
Fd(\))25 b(=)g(1)c Fc(\000)2387 3421 y Fd(1)p 2306 3461
209 4 v 2306 3545 a Fe(x)f Fd(+)g(1)2524 3482 y Fh(.)1422
b(\(1\))-104 4377 y
SDict begin H.S end
 -104 4377 a -104 4377 a
SDict begin 13.6 H.A end
 -104 4377
a -104 4377 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -104 4377 a 0 TeXcolorgray 8 4521 a Fh(3.)p
0 TeXcolorgray 45 w(Comparer)555 4459 y Fd(1)15 b(000)g(000)g(000)g
(000)p 555 4500 652 4 v 555 4583 a(1)g(000)g(000)g(000)g(001)1247
4521 y Fh(et)1392 4459 y Fd(999)g(999)g(999)g(999)p 1362
4500 V 1362 4583 a(1)g(000)g(000)g(000)g(000)2024 4521
y Fh(.)1922 b(\(1\))p 0 TeXcolorgray -104 5887 a Fb(vg)2924
b(Lyc\351e)21 b(\311mile)f(Loub)r(et,)f(V)-5 b(alence,)20
b(2)3725 5871 y Fa(nde)3834 5887 y Fb(5)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
